import os, fnmatch

env = Environment()
env.Tool('runExternalCommand')

# parameters
params = Variables(['custom.py']) 
params.Add(('releaseVersion', 'Release version (string)', '1.0'))
params.Add(('delgaVersion', 'DEMoCap version or empty string (string)', ''))
params.Update(env)

version = env['releaseVersion']
delgaVersion = env['delgaVersion'] if env['delgaVersion'] else version

# build
def globFiles(env, search, pattern, result, recursive=True):
	oldcwd = os.getcwd()
	os.chdir(env.Dir('.').srcnode().abspath)
	
	for root, dirs, files in os.walk(search):
		if recursive:
			if '.svn' in dirs:
				dirs.remove('.svn')
			if '.git' in dirs:
				dirs.remove('.git')
		else:
			del dirs[:]
		
		for s in fnmatch.filter(files, pattern):
			result.append(root + os.sep + s)
	
	os.chdir(oldcwd)

def copyDataFiles(copied, directory, basePath):
	dataFiles = []
	globFiles(env, directory, '*', dataFiles)
	
	cutLen = len(directory.split('/'))
	for f in dataFiles:
		path = f.split('/')
		copied.append(env.InstallAs(os.path.join(basePath, *path[cutLen:]), f))

def msixBuild(target, source, env):
	script = []
	#script.append('makemsix pack -d "{}" -p "{}" || exit 1'.format(
	#	source[0].get_dir().abspath, target[0].abspath))
	script.append('docker run --rm --volume="{}":/sources lordofdragons/makemsix:latest pack -d "{}" -p "{}"'.format(
		source[0].get_dir().up().abspath,
		'/sources/msix',
		'/sources/{}'.format(target[0].name)))
	print(script)
	if not env.RunExternalCommand(script):
		raise Exception('Failed building MSIX')

def copyLauncherInit(env, target, source):
	with open(source[0].abspath, 'r') as f:
		content = f.read()
	
	content = content.replace('%DELGA_FILENAME%', env['DELGA_FILENAME'])
	
	with open(target[0].abspath, 'w') as f:
		f.write(content)


def copyManifest(env, target, source):
	with open(source[0].abspath, 'r') as f:
		content = f.read()
	
	content = content.replace('%DEMOCAP_VERSION%', env['DEMOCAP_VERSION'])
	
	with open(target[0].abspath, 'w') as f:
		f.write(content)

delgaFilename = 'DEMoCap-{}.delga'.format(delgaVersion)

democapVersion = delgaVersion
democapVersion = democapVersion + '.0' * (4 - len(democapVersion.split('.')))

copied = []

copied.append(env.InstallAs(
	'msix/VFS/ProgramFilesX64/DEMoCap/{}'.format(delgaFilename),
	'../../../distribute/{}'.format(delgaFilename)))

copyDataFiles(copied, 'msix-data', 'msix')

copied.append(env.Command('msix/VFS/ProgramFilesX64/DEMoCap/Launcher.ini', 'Launcher.ini',
	env.Action(copyLauncherInit, 'Copy $TARGET'), DELGA_FILENAME=delgaFilename))

copied.append(env.Command('msix/AppxManifest.xml', 'AppxManifest.xml',
	env.Action(copyManifest, 'Copy $TARGET'), DEMOCAP_VERSION=democapVersion))

msix = env.Command('DEMoCap-{}.msix'.format(version),
	'msix/AppxManifest.xml', env.Action(msixBuild, 'Build MSIX $TARGET'))
env.Depends(msix, copied)

Default(msix)
