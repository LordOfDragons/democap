{{tag>motioncapture democap behavior}}
<WRAP youarehere>
[[:start|Start Page]] >> [[main|DEMoCap: Drag[en]gine Motion Capture]] >> [[democap:elementclasses|XML Element Classes]] >> ** ECBMyBehavior **
</WRAP>

====== ECBMyBehavior ======

Description of behavior.

Or...

Behavior extending ECBehaviorXYZ to allow user to edit certain parameters using a gui panel.

See also:
  * [[democap:main|Interesting other page to read]]

====== Instance Counts ======

This behavior can be used only once on an element.

This element behavior can be present multiple times in a BehaviorElement. In this case use a unique identifier to distinguish the individual behavior instances.

====== Element Class Properties ======

Element class properties have the prefix ''myBehavior.'' or ''myBehavior({id}).'' if id is not empty.

Add here element class property information. See "wiki_property_templates" for blocks to copy.

====== Events ======

This behavior has no events.

Or add events like this:

===== eventName =====

Description of what the event does.

====== Conversation Commands ======

This behavior adds no conversation commands.

Or add commands like this:

===== myCommand =====

Description of what the command does. Next the syntax (or multiple) supported. "start", "target" and "trigger" would be keywords. "<>" would be a parameter the user can enter. "[|]" indicates a choice (use one or the other). "{}" indicates optional syntax parts.

''myCommand start <duration> {[target | trigger]}''

Description of the syntax variation.

^Parameter^Description^
|duration|Description of a parameter the user can set.|

====== Conversation Conditions ======

This behavior adds no conversation conditions.

Or add conditions like this:

===== myCommand =====

''myCommand hasStart <duration> {[target | trigger]}''

Start playing cutscene.

^Parameter^Description^
|duration|Description of a parameter the user can set.|

====== Behavior Tree Actions ======

This behavior adds no behavior tree actions.

Or add actions like this:

===== myBehavior.action =====

Description of action.

^Parameter^Description^
|param1|Description of a parameter the user can set. Also state if it is optional or required.|

Give an example.

<code xml>
<action name='myBehavior.action'>
  <parameter name='param1'>1.5</parameter>
</action>
</code>

====== Behavior Tree Conditions ======

This behavior adds no behavior tree conditions.

Or add condition like this:

===== myBehavior.condition =====

Description of condition.

^Parameter^Description^
|myBehavior.param1|Description of a parameter the user can set. Also state if it is optional or required. It's best to use "myBehavior." as prefix since parameters used for conditions can be consumed by any condition.|

<code xml>
<action name='someAction'>
  <parameter name='param1'>1.5</parameter>
  <condition>myBehavior.condition</condition>
</action>
</code>

====== Required Behaviors ======

This behavior requires no other behaviors.

Or:

  * [[dragengine:modules:dragonscript:behavior_component|ECBehaviorComponent]]
  * [[behavior_ecbsceneobject|ECBSceneObject]]

====== Optional Behaviors ======

This behavior does not support optional behaviors.

Or:

  * [[dragengine:modules:dragonscript:behavior_component|ECBehaviorComponent]]
  * [[behavior_ecbsceneobject|ECBSceneObject]]

====== API Documentation ======

Link to API documentation is present.

Since DEMoCap Version ''1.3''

====== Use Cases ======

  * Give an example for what the behavior can be used.
  * Optionally give more use case examples.

For example
  * Allow editing certain parameters in a gui panel.

====== Element Class Example ======

Give an example. Has to include at least all behavior dependencies so it should at least prodduce a valid element class.

<code>
class MyElement extends BehaviorElementClass
  public var ECBehaviorComponent component
  public var ECBMyBehavior myBehavior
  func new()
    component = ECBehaviorComponent.new(this, null)
    myBehavior = ECBMyBehavior.new(this, component)
  end
end
</code>

If events are supported you can give an example of how to use listeners.

<code>
class MyListener extends ECBMyBehavior.DefaultListener
  func new(ECBMyBehavior behavior)
  end
  
  func void eventName(ECBMyBehavior.Instance instance)
    // do something here
  end
end
</code>

====== Behavior Factory ======

Using element class supporting adding behaviors the behavior can be added like this (again create an example which creates a valid element class):

<code xml>
<?xml version='1.0' encoding='UTF-8'?>
<elementClass name='MyClass' class='GenericBehaviorElement'>
  <behavior type='ECBehaviorComponent'/>
  
  <behavior type='ECBMyBehavior'>
    <!-- optional: use component with id instead of empty string -->
    <string name='component'>second</string>
    
    <!-- optional: use BaseGameApp trigger table. game can add more supported values.
                   default is 'default' -->
    <string name='triggerTable'>default</string>
    
    <!-- set element properties. omit property prefix if used inside behavior tag -->
    <string name='.path'>default.deanimator</string>
  </behavior>
  
  <!-- for adding multiple behaviors use unique identifiers -->
  <behavior type='ECBMyBehavior' id='second'/>
</elementClass>
</code>

====== Live Examples ======

If you have live examples you can link them here:

  * [[https://github.com/LordOfDragons/democap|DEMoCap Repository]]
