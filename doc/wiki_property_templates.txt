ECComposeAttachResource
///////////////////////

===== position =====

Position to attach resource to collider.

  * Full name: ''myBehavior.position'' or ''myBehavior({id}).position''
  * Type: 3-component float vector
  * Default Value: ''(0, 0, 0)''
  * Example (*.deeclass) <code xml><vector name='myBehavior.position' x='0' y='0' z='0.1'/></code>

===== orientation =====

Orientation to attach resource to collider in degrees.

  * Full name: ''myBehavior.orientation'' or ''myBehavior({id}).orientation''
  * Type: 3-component float vector
  * Default Value: ''(0, 0, 0)''
  * Example (*.deeclass) <code xml><vector name='myBehavior.orientation' x='30' y='0' z='0'/></code>

===== bone =====

Bone to attach resource to. If empty string attach to collider.

  * Full name: ''myBehavior.bone'' or ''myBehavior({id}).bone''
  * Type: string
  * Default Value: empty string
  * Example (*.deeclass) <code xml><string name='myBehavior.bone'>attach</string></code>



ECComposeCollider
/////////////////

===== physicsType =====

Set physics type.

  * Full name: ''myBehavior.physicsType'' or ''myBehavior({id}).physicsType''
  * Type: enumeration
  * <WRAP>Allowed Values:
^Value^Description^
|''none''|No response. Collider is not moving and will not move by collisions.|
|''dynamic''|Dynamic collision response. Collider reacts to impacts using physical simulation.|
|''kinematic''|Kinematic collision response. Game scripts define the collision response.|
</WRAP>
  * Default Value: ''none''
  * Example (*.deeclass) <code xml><string name='myBehavior.physicsType'>dynamic</string></code>

===== localGravity =====

Set local gravity or ''null'' to use the world gravity.

  * Full name: ''myBehavior.localGravity'' or ''myBehavior({id}).localGravity''
  * Type: 3-component float vector
  * Default Value: ''null''
  * Example (*.deeclass) <code xml><vector name='myBehavior.localGravity' x='0' y='-0.5' z='0'/></code>

===== weight =====

Set weight in kg.

  * Full name: ''myBehavior.weight'' or ''myBehavior({id}).weight''
  * Type: float
  * Default Value: ''1''
  * Restriction: At least ''0''
  * Example (*.deeclass) <code xml><float name='myBehavior.weight'>1.5</float></code>

===== enabled =====

Set enable collider.

  * Full name: ''myBehavior.enabled'' or ''myBehavior({id}).enabled''
  * Type: boolean
  * Default Value: true
  * Example (*.deeclass) <code xml><boolean name='myBehavior.enabled'>false</boolean></code>

===== shape =====

Set shape if no component is used.

  * Full name: ''myBehavior.shape'' or ''myBehavior({id}).shape''
  * Type: string (shape format). See "Shape List Encoding" in CodecPropertyString.
  * Default Value: empty string
  * Example (*.deeclass) <code xml><string name='myBehavior.shape'>box:position,0,0.5,0:extends,2,1,0.5</string></code>



ECComposeComponent
//////////////////

===== model =====

Set path of model resource to use.

  * Full name: ''myBehavior.model'' or ''myBehavior({id}).model''
  * Type: string
  * Default Value: empty string
  * Expected File Type: ''*.demodel''
  * Example (*.deeclass) <code xml><string name='myBehavior.model'>box.demodel</string></code>

===== skin =====

Set path of skin resource to use.

  * Full name: ''myBehavior.skin'' or ''myBehavior({id}).skin''
  * Type: string
  * Default Value: empty string
  * Expected File Type: ''*.deskin''
  * Example (*.deeclass) <code xml><string name='myBehavior.skin'>box.deskin</string></code>

===== rig =====

Set path of rig resource to use.

  * Full name: ''myBehavior.rig'' or ''myBehavior({id}).rig''
  * Type: string
  * Default Value: empty string
  * Expected File Type: ''*.derig''
  * Example (*.deeclass) <code xml><string name='myBehavior.rig'>box.derig</string></code>

===== occlusionMesh =====

Set path of occlusion mesh resource to use.

  * Full name: ''myBehavior.occlusionMesh'' or ''myBehavior({id}).occlusionMesh''
  * Type: string
  * Default Value: empty string
  * Expected File Type: ''*.deoccmesh''
  * Example (*.deeclass) <code xml><string name='myBehavior.occlusionMesh'>box.deoccmesh</string></code>

===== audioModel =====

Set path of audio model resource to use.

  * Full name: ''myBehavior.audioModel'' or ''myBehavior({id}).audioModel''
  * Type: string
  * Default Value: empty string
  * Expected File Type: ''*.demodel''
  * Example (*.deeclass) <code xml><string name='myBehavior.audioModel'>box.demodel</string></code>

===== renderEnvMap =====

Set if component is rendered in environment maps.

  * Full name: ''myBehavior.renderEnvMap'' or ''myBehavior({id}).renderEnvMap''
  * Type: boolean
  * Default Value: ''true''
  * Example (*.deeclass) <code xml><boolean name='myBehavior.renderEnvMap'>false</boolean></code>

===== affectsAudio =====

Set if component is affecting audio.

  * Full name: ''myBehavior.affectsAudio'' or ''myBehavior({id}).affectsAudio''
  * Type: boolean
  * Default Value: ''true''
  * Example (*.deeclass) <code xml><boolean name='myBehavior.affectsAudio'>false</boolean></code>

===== hintMovement =====

Set movement hint.

  * Full name: ''myBehavior.hintMovement'' or ''myBehavior({id}).hintMovement''
  * Type: enumeration
  * <WRAP>Allowed Values:
^Value^Description^
|''stationary''|Component remains static for the entire lifetime.|
|''jittering''|Component remains mostly static jittering in a small area.|
|''dynamic''|Component moves around freely.|
</WRAP>
  * Default Value: ''stationary''
  * Example (*.deeclass) <code xml><string name='myBehavior.hintMovement'>dynamic</string></code>

===== enableGI =====

Set enable GI in graphic module if supported.

  * Full name: ''myBehavior.enableGI'' or ''myBehavior({id}).enableGI''
  * Type: boolean
  * Default Value: ''true''
  * Example (*.deeclass) <code xml><boolean name='myBehavior.enableGI'>false</boolean></code>

===== hintGIImportance =====

Set GI important hint. Value is in the range from ''0'' (very unimportant) to ''4'' (very important). This hint can be used by the graphic module to improve performance by excluding components with a GI important below a user chosen threashold.

  * Full name: ''myBehavior.hintGIImportance'' or ''myBehavior({id}).hintGIImportance''
  * Type: integer
  * Default Value: ''4''
  * Restriction: At least ''0'' and at most ''4''
  * Example (*.deeclass) <code xml><integer name='myBehavior.hintGIImportance'>3</integer></code>

===== textureReplacements =====

Set texture replacements.

  * Full name: ''myBehavior.textureReplacements'' or ''myBehavior({id}).textureReplacements''
  * Type: map
  * Default Value: ''4''
  * Restriction: At least ''0'' and at most ''4''
  * <WRAP>Example (*.deeclass)
<code xml>
<map name='component.textureReplacements'>
  <!-- define texture replacement with unique identifier 'material' -->
  <map key='material'>
    <!-- optional: path to skin to replace texture with -->
    <string key='skin'>different_material.deskin</string>
    
    <!-- optional: apply tinting to material. requires color type renderable named 'tint' -->
    <color key='tint' r='0.5' g='0.8' b='1'/>
    
    <!-- optional: transform texture coordinates -->
    <map key='transform'>
      <!-- optional: texture coordinate scaling with center of texture as origin -->
      <vector2 key='scale' x='2' y='2'/>
      
      <!-- optional: texture coordinate rotation with center of texture as pivot point -->
      <float key='rotate'>90</float>
      
      <!-- optional: texture coordinate translation -->
      <vector2 key='translate' x='0.5' y='0'/>
    </map>
  </map>
</map>
</code></WRAP>



ECComposeEnvMapProbe
////////////////////

===== influenceArea =====

Set influence shape. Geometry touching this shape is affected by this environment map probe. Has to be box shapes.

  * Full name: ''myBehavior.influenceArea'' or ''myBehavior({id}).influenceArea''
  * Type: string (shape format). See "Shape List Encoding" in CodecPropertyString.
  * Default Value: empty string
  * Example (*.deeclass) <code xml><string name='myBehavior.influenceArea'>box:position,0,0.5,0:extends,2,1,0.5</string></code>

===== influenceBorderSize =====

Set influence border size. Geometry inside this distance from the border is faded out gradually.

  * Full name: ''myBehavior.influenceBorderSize'' or ''myBehavior({id}).influenceBorderSize''
  * Type: float
  * Default Value: ''0.1''
  * Restriction: At least ''0''
  * Example (*.deeclass) <code xml><float name='myBehavior.influenceBorderSize'>0.2</float></code>

===== influencePriority =====

Set influence priority. If multiple environment maps overlap the same geometry the influence priority decided which probe affects the geometry. Higher values win over lower values.

  * Full name: ''myBehavior.influencePriority'' or ''myBehavior({id}).influencePriority''
  * Type: integer
  * Default Value: ''0''
  * Example (*.deeclass) <code xml><float name='myBehavior.influencePriority'>10</float></code>

===== reflectionShape =====

Set reflection shape. Has to be a single box shape.

  * Full name: ''myBehavior.reflectionShape'' or ''myBehavior({id}).reflectionShape''
  * Type: string (shape format). See "Shape List Encoding" in CodecPropertyString.
  * Default Value: empty string
  * Example (*.deeclass) <code xml><string name='myBehavior.reflectionShape'>box:position,0,0.5,0:extends,2,1,0.5</string></code>

===== reflectionMask =====

Set reflection mask. Cuts holes into the environment map. Useful for hallways to avoid exits looking flat. Has to be box shapes.

  * Full name: ''myBehavior.reflectionMask'' or ''myBehavior({id}).reflectionMask''
  * Type: string (shape format). See "Shape List Encoding" in CodecPropertyString.
  * Default Value: empty string
  * Example (*.deeclass) <code xml><string name='myBehavior.reflectionMask'>box:position,0,0.5,0:extends,2,1,0.5</string></code>



ECComposeForceField
///////////////////

===== influenceArea =====

Set influence area. Geometry touching this shape is affected by this force field.

  * Full name: ''myBehavior.influenceArea'' or ''myBehavior({id}).influenceArea''
  * Type: string (shape format). See "Shape List Encoding" in CodecPropertyString.
  * Default Value: empty string
  * Example (*.deeclass) <code xml><string name='myBehavior.influenceArea'>box:position,0,0.5,0:extends,2,1,0.5</string></code>

===== radius =====

Set falloff radius. Geometry inside this distance from the border is faded out gradually.

  * Full name: ''myBehavior.radius'' or ''myBehavior({id}).radius''
  * Type: float
  * Default Value: ''0''
  * Restriction: At least ''0''
  * Example (*.deeclass) <code xml><float name='myBehavior.radius'>2</float></code>

===== exponent =====

Set falloff exponent. Shape of the fading out applied due to radius. Value of ''1'' represents linear fading. Values less than 1 fade of stronger near the border. Values greater than 1 fade of stronger near the inner border.

  * Full name: ''myBehavior.exponent'' or ''myBehavior({id}).exponent''
  * Type: float
  * Default Value: ''1''
  * Restriction: At least ''0''
  * Example (*.deeclass) <code xml><float name='myBehavior.exponent'>0.5</float></code>

===== fieldType =====

Set field type.

  * Full name: ''myBehavior.fieldType'' or ''myBehavior({id}).fieldType''
  * Type: enumeration
  * <WRAP>Allowed Values:
^Value^Description^
|''radial''|Force is applied radial from the center.|
|''linear''|Force is applied along the force direction.|
|''vortex''|Force is applied vortex like swirling around.|
</WRAP>
  * Default Value: ''radial''
  * Example (*.deeclass) <code xml><string name='myBehavior.fieldType'>linear</string></code>

===== applicationType =====

Set force application type.

  * Full name: ''myBehavior.applicationType'' or ''myBehavior({id}).applicationType''
  * Type: enumeration
  * <WRAP>Allowed Values:
^Value^Description^
|''direct''|Apply force equally to all elements independend of shape.|
|''surface''|Apply force on exposed surface area.|
|''mass''|Apply force on mass.|
|''speed''|Apply force relative to speed of element.|
</WRAP>
  * Default Value: ''direct''
  * Example (*.deeclass) <code xml><string name='myBehavior.applicationType'>mass</string></code>

===== direction =====

Set force direction.

  * Full name: ''myBehavior.direction'' or ''myBehavior({id}).direction''
  * Type: 3-component float vector
  * Default Value: ''(0, 0, 0)''
  * Example (*.deeclass) <code xml><vector name='myBehavior.direction' x='0' y='1' z='0'/></code>

===== force =====

Set force in newton. Negative force reverse direction.

  * Full name: ''myBehavior.force'' or ''myBehavior({id}).force''
  * Type: float
  * Default Value: ''1''
  * Example (*.deeclass) <code xml><float name='myBehavior.force'>50</float></code>

===== fluctuationDirection =====

Set fluctuation of direction in degrees.

  * Full name: ''myBehavior.fluctuationDirection'' or ''myBehavior({id}).fluctuationDirection''
  * Type: float
  * Default Value: ''0''
  * Example (*.deeclass) <code xml><float name='myBehavior.fluctuationDirection'>45</float></code>

===== fluctuationForce =====

Set force in newton. Negative force reverse direction.

  * Full name: ''myBehavior.fluctuationForce'' or ''myBehavior({id}).fluctuationForce''
  * Type: float
  * Default Value: ''0''
  * Example (*.deeclass) <code xml><float name='myBehavior.fluctuationForce'>20</float></code>

===== enabled =====

Set force field enabled.

  * Full name: ''myBehavior.enabled'' or ''myBehavior({id}).enabled''
  * Type: boolean
  * Default Value: ''true''
  * Example (*.deeclass) <code xml><boolean name='myBehavior.enabled'>false</boolean></code>

===== shape =====

Set shape from which the force originates. If not set force originates from origin position.

  * Full name: ''myBehavior.shape'' or ''myBehavior({id}).shape''
  * Type: string (shape format). See "Shape List Encoding" in CodecPropertyString.
  * Default Value: empty string
  * Example (*.deeclass) <code xml><string name='myBehavior.shape'>box:position,0,0.5,0:extends,2,1,0.5</string></code>



ECComposeLight
//////////////

===== type =====

Set light type.

  * Full name: ''myBehavior.type'' or ''myBehavior({id}).type''
  * Type: enumeration
  * <WRAP>Allowed Values:
^Value^Description^
|''point''|Point light.|
|''spot''|Spot light.|
|''projector''|Projector light.|
</WRAP>
  * Default Value: ''point''
  * Example (*.deeclass) <code xml><string name='myBehavior.type'>spot</string></code>

===== color =====

Set light color.

  * Full name: ''myBehavior.color'' or ''myBehavior({id}).color''
  * Type: 3-component color
  * Default Value: ''(1, 1, 1)''
  * Example (*.deeclass) <code xml><color name='myBehavior.color' r='0.8' g='0.6' b='0.4'/></code>

===== intensity =====

Set value.

  * Full name: ''myBehavior.intensity'' or ''myBehavior({id}).intensity''
  * Type: float
  * Default Value: ''1''
  * Restriction: At least ''0''
  * Example (*.deeclass) <code xml><float name='myBehavior.intensity'>2.5</float></code>

===== ambientRatio =====

Set ambient ratio. Percentage of total light to use as ambient light.

  * Full name: ''myBehavior.ambientRatio'' or ''myBehavior({id}).ambientRatio''
  * Type: float
  * Default Value: ''0''
  * Restriction: At least ''0'' and at most ''1''.
  * Example (*.deeclass) <code xml><float name='myBehavior.ambientRatio'>0.2</float></code>

===== range =====

Set range im meters. Beyond this range light has no effect.

  * Full name: ''myBehavior.range'' or ''myBehavior({id}).range''
  * Type: float
  * Default Value: ''10''
  * Restriction: At least ''0''
  * Example (*.deeclass) <code xml><float name='myBehavior.range'>2.5</float></code>

===== halfIntensityDistance =====

Set half intensity distance relative to range. At this position the light dropped to 50% strength. Allows to shape fall-off curve. A value of ''0.1'' is natural fall-off. Values larger than 0.1 make light fall off faster near the light source. Values smaller than 0.1 make light fall off faster near the light range.

  * Full name: ''myBehavior.halfIntensityDistance'' or ''myBehavior({id}).halfIntensityDistance''
  * Type: float
  * Default Value: ''0.1''
  * Restriction: At least ''0'' and at most ''1''.
  * Example (*.deeclass) <code xml><float name='myBehavior.halfIntensityDistance'>0.2</float></code>

===== spotAngle =====

Set spot angle in degrees (opening angle).

  * Full name: ''myBehavior.spotAngle'' or ''myBehavior({id}).spotAngle''
  * Type: float
  * Default Value: ''30''
  * Restriction: At least ''0'' and at most ''179''.
  * Example (*.deeclass) <code xml><float name='myBehavior.spotAngle'>45</float></code>

===== spotRatio =====

Set spot ratio as height divided by width. Hence this is the aspect ratio of the spot light.

  * Full name: ''myBehavior.spotRatio'' or ''myBehavior({id}).spotRatio''
  * Type: float
  * Default Value: ''1''
  * Restriction: At least ''0''
  * Example (*.deeclass) <code xml><float name='myBehavior.spotRatio'>1.5</float></code>

===== spotSmoothness =====

Set spot smoothness. Percentage distance from border to center where light fall-off begins. A value of ''0'' produces constant light intensity across the entire spot cone. A value of ''1'' produces linear fade across the entire spot cone.

  * Full name: ''myBehavior.spotSmoothness'' or ''myBehavior({id}).spotSmoothness''
  * Type: float
  * Default Value: ''1''
  * Restriction: At least ''0'' and at most ''1''.
  * Example (*.deeclass) <code xml><float name='myBehavior.spotSmoothness'>0.2</float></code>

===== spotExponent =====

Set spot exponent. Shape of light fall-off from spot center to spot border. A value of ''1'' is linear fall-off. Values larger than 0.1 make light fall off faster near the spot center. Values smaller than 0.1 make light fall off faster near the spot border.

  * Full name: ''myBehavior.spotExponent'' or ''myBehavior({id}).spotExponent''
  * Type: float
  * Default Value: ''2''
  * Restriction: At least ''0''
  * Example (*.deeclass) <code xml><float name='myBehavior.spotExponent'>1.5</float></code>

===== shape =====

Set shape.

  * Full name: ''myBehavior.shape'' or ''myBehavior({id}).shape''
  * Type: string (shape format). See "Shape List Encoding" in CodecPropertyString.
  * Default Value: empty string
  * Example (*.deeclass) <code xml><string name='myBehavior.shape'>box:position,0,0.5,0:extends,2,1,0.5</string></code>

===== lightSkin =====

Set path of skin resource to use.

  * Full name: ''myBehavior.lightSkin'' or ''myBehavior({id}).lightSkin''
  * Type: string
  * Default Value: empty string
  * Expected File Type: ''*.deskin''
  * Example (*.deeclass) <code xml><string name='myBehavior.lightSkin'>spot.deskin</string></code>

===== hintMovement =====

Set movement hint.

  * Full name: ''myBehavior.hintMovement'' or ''myBehavior({id}).hintMovement''
  * Type: enumeration
  * <WRAP>Allowed Values:
^Value^Description^
|''stationary''|Light remains static for the entire lifetime.|
|''jittering''|Light remains mostly static jittering in a small area.|
|''dynamic''|Light moves around freely.|
</WRAP>
  * Default Value: ''stationary''
  * Example (*.deeclass) <code xml><string name='myBehavior.hintMovement'>dynamic</string></code>

===== hintParameter =====

Set parameter hint.

  * Full name: ''myBehavior.hintParameter'' or ''myBehavior({id}).hintParameter''
  * Type: enumeration
  * <WRAP>Allowed Values:
^Value^Description^
|''initial''|Light parameters never change.|
|''activation''|Light parameters never change except activation.|
|''flicker''|Geometric light parameters never change but others can.|
|''dynamic''|All light parameters can change at will any time.|
</WRAP>
  * Default Value: ''initial''
  * Example (*.deeclass) <code xml><string name='myBehavior.hintParameter'>dynamic</string></code>

===== hintShadowImportance =====

Set hint shadow importance. Can be used by graphics module to decide which shadows can be reduced in quality or omitted if performance is low. A value of ''100'' indicates this shadow is important and should always be shown if possible. A value of ''0'' marks the shadow as unimportant which can be quickly reduced if required.

  * Full name: ''myBehavior.hintShadowImportance'' or ''myBehavior({id}).hintShadowImportance''
  * Type: float
  * Default Value: ''100''
  * Restriction: At least ''0'' and at most ''100''
  * Example (*.deeclass) <code xml><float name='myBehavior.hintShadowImportance'>75</float></code>

===== activated =====

Set light active.

  * Full name: ''myBehavior.activated'' or ''myBehavior({id}).activated''
  * Type: boolean
  * Default Value: ''true''
  * Example (*.deeclass) <code xml><boolean name='myBehavior.activated'>false</boolean></code>

===== castShadows =====

Set light cast shadows.

  * Full name: ''myBehavior.castShadows'' or ''myBehavior({id}).castShadows''
  * Type: boolean
  * Default Value: ''true''
  * Example (*.deeclass) <code xml><boolean name='myBehavior.castShadows'>false</boolean></code>



ECComposeNavigationBlocker
//////////////////////////

===== layer =====

Set layer. Only spaces, blockers and navigators on the same layer affect each other.

  * Full name: ''myBehavior.layer'' or ''myBehavior({id}).layer''
  * Type: integer
  * Default Value: ''0''
  * Example (*.deeclass) <code xml><integer name='myBehavior.layer'>1</integer></code>

===== shape =====

Set blocker shape. Carves space inside shape out of touching navigation spaces.

  * Full name: ''myBehavior.shape'' or ''myBehavior({id}).shape''
  * Type: string (shape format). See "Shape List Encoding" in CodecPropertyString.
  * Default Value: empty string
  * Example (*.deeclass) <code xml><string name='myBehavior.shape'>box:position,0,0.5,0:extends,2,1,0.5</string></code>

===== priority =====

Set priority. Blockers only carve space out of navigation spaces with the same priority or lower as the blocker priority.

  * Full name: ''myBehavior.priority'' or ''myBehavior({id}).priority''
  * Type: integer
  * Default Value: ''0''
  * Example (*.deeclass) <code xml><integer name='myBehavior.priority'>1</integer></code>



ECComposeNavigationSpace
////////////////////////

===== layer =====

Set layer. Only spaces, blockers and navigators on the same layer affect each other.

  * Full name: ''myBehavior.layer'' or ''myBehavior({id}).layer''
  * Type: integer
  * Default Value: ''0''
  * Example (*.deeclass) <code xml><integer name='myBehavior.layer'>1</integer></code>

===== path =====

Set path to navigation space resource to use.

  * Full name: ''myBehavior.path'' or ''myBehavior({id}).path''
  * Type: string
  * Default Value: empty string
  * Expected File Pattern: ''*.denavspace''
  * Example (*.deeclass) <code xml><string name='myBehavior.path'>room.denavspace</string></code>

===== snapDistance =====

Set snap distance. If two navigation spaces nearly touch or overlap each other navigation points are aligned if they are closer than the snap distance. This does potentially modify points on navigation spaces but it ensures two separate navigation spaces turn into one large navigation space.

  * Full name: ''myBehavior.snapDistance'' or ''myBehavior({id}).snapDistance''
  * Type: float
  * Default Value: ''0.001''
  * Restriction: At least ''0.001''
  * Example (*.deeclass) <code xml><float name='myBehavior.snapDistance'>0.01</float></code>

===== blockerShape =====

Set blocker shape. Carves space inside shape out of touching navigation spaces. After carving out space the navigation space is merged with the other navigation spaces. This allows for example to add a passage way across navigation spaces by first carving out the stairs area and then merging the passage way navigation space with the underlaying navigation space. If done correctly placing such an element in the world makes navigators be automatically able to use the passage way properly.

  * Full name: ''myBehavior.blockerShape'' or ''myBehavior({id}).blockerShape''
  * Type: string (shape format). See "Shape List Encoding" in CodecPropertyString.
  * Default Value: empty string
  * Example (*.deeclass) <code xml><string name='myBehavior.blockerShape'>box:position,0,0.5,0:extends,2,1,0.5</string></code>

===== blockerPriority =====

Set blocker priority. Blockers only carve space out of navigation spaces with the same priority or lower as the blocker priority.

  * Full name: ''myBehavior.blockerPriority'' or ''myBehavior({id}).blockerPriority''
  * Type: integer
  * Default Value: ''0''
  * Example (*.deeclass) <code xml><integer name='myBehavior.blockerPriority'>1</integer></code>



ECComposeParticleEmitter
////////////////////////

===== path =====

Set path to particle emitter resource to use.

  * Full name: ''myBehavior.path'' or ''myBehavior({id}).path''
  * Type: string
  * Default Value: empty string
  * Expected File Pattern: ''*.depemit''
  * Example (*.deeclass) <code xml><string name='myBehavior.path'>fire.depemit</string></code>

===== timeScale =====

Set time scale for controllers advanced by time.

  * Full name: ''myBehavior.timeScale'' or ''myBehavior({id}).timeScale''
  * Type: float
  * Default Value: ''1''
  * Example (*.deeclass) <code xml><float name='myBehavior.timeScale'>0.5</float></code>

===== warmUpTime =====

Set warm up time in seconds. If larger than 0 particle emitter starts with particles already simulated this many seconds.

  * Full name: ''myBehavior.warmUpTime'' or ''myBehavior({id}).warmUpTime''
  * Type: float
  * Default Value: ''0''
  * Example (*.deeclass) <code xml><float name='myBehavior.warmUpTime'>2</float></code>

===== casting =====

Set particle emitter is casting particles.

  * Full name: ''myBehavior.casting'' or ''myBehavior({id}).casting''
  * Type: boolean
  * Default Value: ''true''
  * Example (*.deeclass) <code xml><boolean name='myBehavior.casting'>false</boolean></code>



ECComposeAnimator
/////////////////

===== path =====

Set path to animator to use.

  * Full name: ''myBehavior.path'' or ''myBehavior({id}).path''
  * Type: string
  * Default Value: empty string
  * Expected File Pattern: ''*.deanimator''
  * Example (*.deeclass) <code xml><string name='myBehavior.path'>default.deanimator</string></code>

===== animation =====

Set path to animation to use. If used replaces animation defined in assigned animators.

  * Full name: ''myBehavior.animation'' or ''myBehavior({id}).animation''
  * Type: string
  * Default Value: empty string
  * Expected File Pattern: ''*.deanim'' (all supported animation type modules)
  * Example (*.deeclass) <code xml><string name='myBehavior.animation'>default.deanim</string></code>

===== playSpeed =====

Set playback speed. Value of ''1'' plays back at normal speed. Values larger than 1 play back faster. Values less then 1 play back slower.

  * Full name: ''myBehavior.playSpeed'' or ''myBehavior({id}).playSpeed''
  * Type: float
  * Default Value: ''1''
  * Example (*.deeclass) <code xml><float name='myBehavior.playSpeed'>0.5</float></code>

===== playing =====

Set if animator is playing back after creating element.

  * Full name: ''myBehavior.playing'' or ''myBehavior({id}).playing''
  * Type: boolean
  * Default Value: ''true''
  * Example (*.deeclass) <code xml><boolean name='myBehavior.playing'>false</boolean></code>

===== playbackController =====

Set name of controller used to play back the animation. Controller value is incremended by elapsed time multiplied by ''playSpeed''.

  * Full name: ''myBehavior.playbackController'' or ''myBehavior({id}).playbackController''
  * Type: string
  * Default Value: ''playback''
  * Example (*.deeclass) <code xml><string name='myBehavior.playbackController'>animation</string></code>

===== move =====

Set move name. If animator is not set this creates a temporary animator with a single //animation// type rule playing back ''move''. This can be used to play animation moves without needing to create an animator.

  * Full name: ''myBehavior.move'' or ''myBehavior({id}).move''
  * Type: string
  * Default Value: empty string
  * Example (*.deeclass) <code xml><string name='myBehavior.move'>idle</string></code>

===== loopMove =====

Set loop animation move. Used only if animator is not set and animation and move is set.

  * Full name: ''myBehavior.loopMove'' or ''myBehavior({id}).loopMove''
  * Type: boolean
  * Default Value: ''true''
  * Example (*.deeclass) <code xml><boolean name='myBehavior.loopMove'>false</boolean></code>



ECComposeSpeaker
////////////////

===== type =====

Speaker type.

  * Full name: ''myBehavior.type'' or ''myBehavior({id}).type''
  * Type: enumeration
  * <WRAP>Allowed Values:
^Value^Description^
|''point''|Omnidirectional.|
|''directed''|Directed.|
</WRAP>
  * Default Value: ''point''
  * Example (*.deeclass) <code xml><string name='myBehavior.type'>directed</string></code>

===== sound =====

Path of sound resource to use.

  * Full name: ''myBehavior.sound'' or ''myBehavior({id}).sound''
  * Type: string
  * Default Value: empty string
  * Expected File Type: ''*.ogg'' (all sound modules)
  * Example (*.deeclass) <code xml><string name='myBehavior.sound'>click.ogg</string></code>

===== synthesizer =====

Path of synthesizer resource to use.

  * Full name: ''myBehavior.synthesizer'' or ''myBehavior({id}).synthesizer''
  * Type: string
  * Default Value: empty string
  * Expected File Type: ''*.desynth''
  * Example (*.deeclass) <code xml><string name='myBehavior.synthesizer'>sound.desynth</string></code>

===== volume =====

Speaker volume.

  * Full name: ''myBehavior.volume'' or ''myBehavior({id}).volume''
  * Type: float
  * Default Value: ''1''
  * Restriction: At least ''0''
  * Example (*.deeclass) <code xml><float name='myBehavior.volume'>0.8</float></code>

===== range =====

Speaker range in meters. Speaker is inaudible beyond range.

  * Full name: ''myBehavior.range'' or ''myBehavior({id}).range''
  * Type: float
  * Default Value: ''30''
  * Restriction: At least ''0''
  * Example (*.deeclass) <code xml><float name='myBehavior.range'>20</float></code>

===== rollOff =====

Roll off. Value ''1'' is realistic (normal) roll-off. Values larger than ''1'' reduce volume faster near the sound source. Values smaller than ''1'' reduce volume faster near the sound range.

  * Full name: ''myBehavior.rollOff'' or ''myBehavior({id}).rollOff''
  * Type: float
  * Default Value: ''1''
  * Restriction: At least ''0''
  * Example (*.deeclass) <code xml><float name='myBehavior.rollOff'>1.5</float></code>

===== distanceOffset =====

Distance offset for attenuation calculation. For use by distance sounds. Offsets the true distance to the sound source for attenuation calculation to make the sound appear coming from far away. Requires increasing the volume to compensate for the distance increased attenuation.

  * Full name: ''myBehavior.distanceOffset'' or ''myBehavior({id}).distanceOffset''
  * Type: float
  * Default Value: ''0''
  * Restriction: At least ''0''
  * Example (*.deeclass) <code xml><float name='myBehavior.distanceOffset'>500</float></code>

===== playSpeed =====

Play speed. Value of ''1'' is normal play speed. Values larger than ''1'' are faster (1.5 for example 150% play speed). Values less than ''1'' are slower (0.75 for example 75% play speed).

  * Full name: ''myBehavior.playSpeed'' or ''myBehavior({id}).playSpeed''
  * Type: float
  * Default Value: ''1''
  * Example (*.deeclass) <code xml><float name='myBehavior.playSpeed'>1.5</float></code>

===== muted =====

Speaker is muted. Affects only volume not play state.

  * Full name: ''myBehavior.muted'' or ''myBehavior({id}).muted''
  * Type: boolean
  * Default Value: ''false''
  * Example (*.deeclass) <code xml><boolean name='myBehavior.muted'>true</boolean></code>

===== looping =====

Speaker plays back looping. If fase playback stops after end of sound or synthesizer.

  * Full name: ''myBehavior.looping'' or ''myBehavior({id}).looping''
  * Type: boolean
  * Default Value: ''true''
  * Example (*.deeclass) <code xml><boolean name='myBehavior.looping'>false</boolean></code>

===== playing =====

Speaker is playing back after being created.

  * Full name: ''myBehavior.playing'' or ''myBehavior({id}).playing''
  * Type: boolean
  * Default Value: ''true''
  * Example (*.deeclass) <code xml><boolean name='myBehavior.playing'>false</boolean></code>

===== shape =====

Shape of speaker.

  * Full name: ''myBehavior.shape'' or ''myBehavior({id}).shape''
  * Type: string (shape format). See "Shape List Encoding" in CodecPropertyString.
  * Default Value: empty string
  * Example (*.deeclass) <code xml><string name='myBehavior.shape'>box:position,0,0.5,0:extends,2,1,0.5</string></code>



Common
//////

===== float =====

Value.

  * Full name: ''myBehavior.value'' or ''myBehavior({id}).value''
  * Type: float
  * Default Value: ''0''
  * Restriction: At least ''0'' and at most ''0''
  * Example (*.deeclass) <code xml><float name='myBehavior.value'>0.5</float></code>

===== int =====

Value.

  * Full name: ''myBehavior.value'' or ''myBehavior({id}).value''
  * Type: integer
  * Default Value: ''0''
  * Restriction: At least ''0'' and at most ''0''
  * Example (*.deeclass) <code xml><integer name='myBehavior.value'>0.5</integer></code>

===== vector3 =====

Value.

  * Full name: ''myBehavior.value'' or ''myBehavior({id}).value''
  * Type: 3-component float vector
  * Default Value: ''(0, 0, 0)''
  * Example (*.deeclass) <code xml><vector name='myBehavior.value' x='0' y='0' z='0.2'/></code>

===== point2 =====

Value.

  * Full name: ''myBehavior.value'' or ''myBehavior({id}).value''
  * Type: 2-component integer vector
  * Default Value: ''(0, 0)''
  * Example (*.deeclass) <code xml><point name='myBehavior.value' x='0' y='0'/></code>

===== point3 =====

Value.

  * Full name: ''myBehavior.value'' or ''myBehavior({id}).value''
  * Type: 3-component integer vector
  * Default Value: ''(0, 0, 0)''
  * Example (*.deeclass) <code xml><point3 name='myBehavior.value' x='0' y='0' z='0'/></code>

===== color3 =====

Value.

  * Full name: ''myBehavior.value'' or ''myBehavior({id}).value''
  * Type: 3-component color
  * Default Value: ''(0, 0, 0)''
  * Example (*.deeclass) <code xml><color name='myBehavior.value' r='0.8' g='0.6' b='0.4'/></code>

===== color4 =====

Value.

  * Full name: ''myBehavior.value'' or ''myBehavior({id}).value''
  * Type: 4-component color
  * Default Value: ''(0, 0, 0, 1)''
  * Example (*.deeclass) <code xml><color name='myBehavior.value' r='0.8' g='0.6' b='0.4' a='0.75'/></code>

===== boolean =====

Value.

  * Full name: ''myBehavior.value'' or ''myBehavior({id}).value''
  * Type: boolean
  * Default Value: ''true''
  * Example (*.deeclass) <code xml><boolean name='myBehavior.value'>false</boolean></code>

===== string =====

Value.

  * Full name: ''myBehavior.value'' or ''myBehavior({id}).value''
  * Type: string
  * Default Value: empty string
  * Example (*.deeclass) <code xml><string name='myBehavior.value'>value</string></code>

===== enumeration =====

Value.

  * Full name: ''myBehavior.value'' or ''myBehavior({id}).value''
  * Type: enumeration
  * <WRAP>Allowed Values:
^Value^Description^
|''const1''|Const 1|
</WRAP>
  * Default Value: ''const1''
  * Example (*.deeclass) <code xml><string name='myBehavior.value'>const1</string></code>

===== shape =====

Value.

  * Full name: ''myBehavior.value'' or ''myBehavior({id}).value''
  * Type: string (shape format). See "Shape List Encoding" in CodecPropertyString.
  * Default Value: empty string
  * Example (*.deeclass) <code xml><string name='myBehavior.value'>box:position,0,0.5,0:extends,2,1,0.5</string></code>

===== path =====

Value.

  * Full name: ''myBehavior.value'' or ''myBehavior({id}).value''
  * Type: string
  * Default Value: empty string
  * Expected File Type: ''*.pattern''
  * Example (*.deeclass) <code xml><string name='myBehavior.value'>file.pattern</string></code>

===== trigger =====

Trigger enabling. If no trigger is set the state of ''enabled'' property is used.

  * Full name: ''myBehavior.trigger'' or ''myBehavior({id}).trigger''
  * Type: string
  * Default Value: empty string
  * Example (*.deeclass) <code xml><string name='myBehavior.trigger'>@switchOnVent & @powerEnabled</string></code>

===== skin =====

Path of skin resource to use.

  * Full name: ''myBehavior.skin'' or ''myBehavior({id}).skin''
  * Type: string
  * Default Value: empty string
  * Expected File Type: ''*.deskin''
  * Example (*.deeclass) <code xml><string name='myBehavior.skin'>box.deskin</string></code>
