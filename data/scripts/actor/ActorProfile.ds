/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Actors

pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * Profile of an actor performing motion capture.
 * 
 * Profiles are stored under "/actors" directory in the user game configure directory
 * as files of type "*.demcap" .
 */
class ActorProfile
	private var String pName
	private var float pArmLength
	private var float pShoulderLevel
	
	
	
	/** Create actor. */
	public func new(String name)
		setName(name)
		pArmLength = 0.65
		resetCalibration()
	end
	
	/** Dispose of actor profile. */
	public func void dispose()
	end
	
	
	
	/** Name of actor profile. */
	public func String getName()
		return pName
	end
	
	/** Set name of actor profile. */
	public func void setName(String name)
		if name == null
			throw ENullPointer.new("name")
		end
		if name.empty()
			throw EInvalidParam.new("name is empty string")
		end
		
		pName = name
	end
	
	/** Arm length in meters. */
	public func float getArmLength()
		return pArmLength
	end
	
	/** Set arm length in meters. */
	public func void setArmLength(float length)
		pArmLength = DEMath.max(length, 0.4)
	end
	
	/** Shoulder level in meters. */
	public func float getShoulderLevel()
		return pShoulderLevel
	end
	
	/** Set shoulder level in meters. */
	public func void setShoulderLevel(float level)
		pShoulderLevel = DEMath.max(level, 1.0)
	end
	
	
	
	/** Reset calibration. */
	public func void resetCalibration()
		pShoulderLevel = 1.6
	end
	
	/** Calibrate actor. */
	public func void calibrate(BaseVRActor actor)
		var Vector rightHand, leftHand
		
		if actor.getVRRightHand().isAttached()
			rightHand = actor.getVRRightHand().getPositionPlayspace()
		end
		if actor.getVRLeftHand().isAttached()
			leftHand = actor.getVRLeftHand().getPositionPlayspace()
		end
		
		if rightHand == null or leftHand == null
			resetCalibration()
			return
		end
		
		pShoulderLevel = (rightHand.getY() + leftHand.getY()) * 0.5
		GameApp.getGameApp().getConsole().addMessage("ActorProfile.calibrate: shoulder level " + pShoulderLevel)
	end
end
