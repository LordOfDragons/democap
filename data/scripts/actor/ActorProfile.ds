/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Actors

pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * Profile of an actor performing motion capture.
 * 
 * Profiles are stored under "/actors" directory in the user game configure directory
 * as files of type "*.demcap" .
 */
class ActorProfile
	var String pName
	var float pArmLength
	var float pLegLength
	var float pShoulderLevel
	var float pShoulderWidth
	var float pFootDistance
	
	
	
	/** Create actor. */
	func new(String name)
		setName(name)
		pArmLength = 0.65
		pLegLength = 1
		pShoulderWidth = 0.3
		pFootDistance = 0.15
		resetCalibration()
	end
	
	/** Create copy of actor. */
	func new(String name, ActorProfile profile)
		setName(name)
		pArmLength = profile.pArmLength
		pLegLength = profile.pLegLength
		pShoulderLevel = profile.pShoulderLevel
		pShoulderWidth = profile.pShoulderWidth
		pFootDistance = profile.pFootDistance
	end
	
	/** Dispose of actor profile. */
	func void dispose()
	end
	
	
	
	/** Name of actor profile. */
	func String getName()
		return pName
	end
	
	/** Set name of actor profile. */
	func void setName(String name)
		if name == null
			throw ENullPointer.new("name")
		end
		if name.empty()
			throw EInvalidParam.new("name is empty string")
		end
		
		pName = name
	end
	
	/** Arm length in meters from shoulder joint to hand controller. */
	func float getArmLength()
		return pArmLength
	end
	
	/** Set arm length in meters from shoulder joint to hand controller. */
	func void setArmLength(float length)
		pArmLength = DEMath.max(length, 0.4)
	end
	
	/** Leg length in meters from hip joint to foot joint. */
	func float getLegLength()
		return pLegLength
	end
	
	/** Set leg length in meters from hip joint to foot joint. */
	func void setLegLength(float length)
		pLegLength = DEMath.max(length, 0.4)
	end
	
	/** Shoulder level in meters. */
	func float getShoulderLevel()
		return pShoulderLevel
	end
	
	/** Set shoulder level in meters. */
	func void setShoulderLevel(float level)
		pShoulderLevel = DEMath.max(level, 1.0)
	end
	
	/** Shoulder width in meters. */
	func float getShoulderWidth()
		return pShoulderWidth
	end
	
	/** Set shoulder width in meters. */
	func void setShoulderWidth(float width)
		pShoulderWidth = DEMath.max(width, 0.1)
	end
	
	/** Foot distance in meters. */
	func float getFootDistance()
		return pFootDistance
	end
	
	/** Set foot distance in meters. */
	func void setFootDistance(float distance)
		pFootDistance = DEMath.max(distance, 0.1)
	end
	
	
	
	/** Reset calibration. */
	func void resetCalibration()
		pShoulderLevel = 1.6
	end
	
	/** Calibrate actor. */
	func void calibrate(BaseVRActor actor)
		var Vector rightHand, leftHand
		
		if actor.getVRRightHand().isAttached()
			rightHand = actor.getVRRightHand().getPositionPlayspace()
		end
		if actor.getVRLeftHand().isAttached()
			leftHand = actor.getVRLeftHand().getPositionPlayspace()
		end
		
		if rightHand == null or leftHand == null
			resetCalibration()
			return
		end
		
		pShoulderLevel = (rightHand.getY() + leftHand.getY()) * 0.5
	end
	
	/** Actor profile path. */
	func String getPathProfile()
		return (File.new(GameApp.getGameApp().getActorProfiles().getDirectory()) + (pName + ".demcap")).getPath()
	end
	
	/** Save actor. */
	func void save()
		GameApp.getGameApp().getLoadActorProfile().save(getPathProfile(), this)
	end
	
	/** Delete actor. */
	func void delete()
		if FileSystem.existsFile(getPathProfile())
			FileSystem.deleteFile(getPathProfile())
		end
	end
	
	
	
	/** Compare actor profile for sorting. */
	func int compare(Object obj)
		if obj castable ActorProfile
			return pName.compare((obj cast ActorProfile).pName)
		end
		return 0
	end
	
	/** String representation. Returns name. */
	func String toString()
		return pName
	end
end
