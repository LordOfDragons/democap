/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Actors

pin Dragengine.Utils


/**
 * List of actor profiles.
 * 
 * Profiles are stored under "/actors" directory in the user game configure directory
 * as files of type "*.demcap" .
 */
class ActorProfiles
	var String pDirectory
	var Array pProfiles
	var Array pListeners
	
	
	
	/** Create actor list. */
	func new(String directory)
		if directory == null
			throw ENullPointer.new("directory")
		end
		
		pListeners = Array.new()
		pDirectory = directory
		pProfiles = Array.new()
	end
	
	/** Dispose of list. */
	func void dispose()
		pListeners.removeAll()
		removeAll()
	end
	
	
	
	/** Directory to save actor profiles to. */
	func String getDirectory()
		return pDirectory
	end
	
	
	
	/** Count of profiles. */
	func int getCount()
		return pProfiles.getCount()
	end
	
	/** Named profile is present. */
	func bool hasNamed(String name)
		return getNamed(name) != null
	end
	
	/** Profile at index. */
	func ActorProfile getAt(int index)
		return pProfiles.getAt(index) cast ActorProfile
	end
	
	/** Named profile or null if absent. */
	func ActorProfile getNamed(String name)
		name = name.toLower()
		return pProfiles.find(block ActorProfile each
			return each.getName().compareNoCase(name) == 0
		end) cast ActorProfile
	end
	
	/** Add profile. Throws exception if named profile is present. */
	func void add(ActorProfile profile)
		if hasNamed(profile.getName())
			throw EInvalidParam.new("named profile is present: " + profile.getName())
		end
		pProfiles.add(profile)
		
		pListeners.forEach(block ActorProfilesListener each
			each.profileAdded(this, profile)
		end)
	end
	
	/** Remove profile. Throws exception if named profile is absent. */
	func void remove(ActorProfile profile)
		pProfiles.remove(profile)
		
		pListeners.forEach(block ActorProfilesListener each
			each.profileRemoved(this, profile)
		end)
		
		profile.dispose()
	end
	
	/** Remove all profiles. */
	func void removeAll()
		pProfiles.forEach(block ActorProfile each
			each.dispose()
		end)
		pProfiles.removeAll()
		
		pListeners.forEach(block ActorProfilesListener each
			each.allProfilesRemoved(this)
		end)
	end
	
	/**
	 * Visit profiles with block. Block receives as only argument ActorProfile.
	 */
	func void forEach(Block ablock)
		pProfiles.forEach(ablock)
	end
	
	/**
	 * Collect profiles with block. Block receives as only argument ActorProfile and
	 * has to return true to include or false to exclude profile.
	 * Returns Array of ActorProfile.
	 */
	func Array collect(Block ablock)
		return pProfiles.collect(ablock)
	end
	
	/** List of profiles as Array of ActorProfile. */
	func Array toArray()
		return Array.new(pProfiles)
	end
	
	
	
	/** Load actors from directory (*.dmcc). */
	func void loadAll()
		var LoadActorProfile loader = GameApp.getGameApp().getLoadActorProfile()
		var Console console = GameApp.getGameApp().getConsole()
		
		console.addMessage("Load actor profiles...")
		
		FileSystem.searchFiles(pDirectory, true, block String each, FileType type
			if type == FileType.file and FileSystem.pathMatchesPattern(File.new(each).getName(), "*.demcap")
				try
					add(loader.load(each))
					
				catch Exception e
					console.addError("Failed loading actor profile: " + each, e)
					return true
				end
			end
			return true
		end)
	end
	
	/** Save actors to directory (*.dmcc). */
	func void saveAll()
		var LoadActorProfile loader = GameApp.getGameApp().getLoadActorProfile()
		var Console console = GameApp.getGameApp().getConsole()
		
		console.addMessage("Save actor profiles...")
		
		pProfiles.forEach(block ActorProfile each
			try
				loader.save(each.getPathProfile(), each)
				
			catch Exception e
				console.addError("Failed saving actor profile: " + each.getName(), e)
			end
		end)
	end
	
	
	
	/** Add listener. */
	func void addListener(ActorProfilesListener listener)
		if listener == null
			throw ENullPointer.new("listener")
		end
		pListeners.add(listener)
	end
	
	/** Remove listener. */
	func void removeListener(ActorProfilesListener listener)
		pListeners.remove(listener)
	end
end
