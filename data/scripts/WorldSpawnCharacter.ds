/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap

pin Democap.Characters
pin Democap.Elements

pin Dragengine.CameraDirectors
pin Dragengine.Gui
pin Dragengine.Scenery
pin Dragengine.Preloading
pin Dragengine.Utils



/**
 * Task ensuring active character is present in game world. Also stores the VR Menu and
 * other gadgets potentially used by the player.
 */
class WorldSpawnCharacter
	/** Frame updater. */
	protected class UpdateCheck extends FrameUpdateListener
		private var WorldSpawnCharacter pOwner
		
		public func new(WorldSpawnCharacter owner)
			pOwner = owner
		end
		
		public func void frameUpdate(float elapsed)
			pOwner.updateCheck()
		end
	end
	
	/** Character listener. */
	protected class UpdateCharacter extends DefaultCharacterListener
		private var WorldSpawnCharacter pOwner
		
		public func new(WorldSpawnCharacter owner)
			pOwner = owner
		end
		
		public func void calibrated(CharacterProfile profile, CharacterConfiguration config)
			pOwner.recreateActor()
		end
	end
	
	
	
	private var GameWorld pGameWorld
	private var SpawnPoint pSpawnPoint
	private var CharacterConfiguration pCharacter
	private var BaseVRActor pActor
	private var UpdateCheck pUpdateCheck
	private var UpdateCharacter pUpdateCharacter
	private var DVector pLastActorPosition
	private var Quaternion pLastActorOrientation
	private var BehaviorElement pVRMenu
	private var ElementClass pNoCharacterActorClass
	
	
	
	/** Create. */
	public func new()
		pUpdateCharacter = UpdateCharacter.new(this)
		pLastActorPosition = DVector.new()
		pLastActorOrientation = Quaternion.new()
		pNoCharacterActorClass = GameApp.getGameApp().getElementClassList().getNamed("NoCharacterActor")
	end
	
	/** Dispose. */
	public func void dispose()
		stopUpdateCheck()
		disposeActor()
		pUpdateCharacter = null
		
		if pVRMenu != null
			pVRMenu.safeDispose()
			pVRMenu = null
		end
	end
	
	
	
	/** Game world or null. */
	public func GameWorld getGameWorld()
		return pGameWorld
	end
	
	/** Set game world or null. */
	public func void setGameWorld(GameWorld gameWorld)
		if gameWorld == pGameWorld
			return
		end
		
		if pVRMenu != null
			pVRMenu.removeFromGameWorldIfPresent()
		end
		
		disposeActor()
		pSpawnPoint = null
		
		pGameWorld = gameWorld
		
		if gameWorld != null
			pSpawnPoint = gameWorld.getSpawnPoints().getNamed("player")
			
			if pVRMenu == null
				pVRMenu = createVRMenu()
			end
			gameWorld.addElement(pVRMenu)
		end
		
		startUpdateCheck()
	end
	
	/** Spawn point or null. */
	public func SpawnPoint getSpawnPoint()
		return pSpawnPoint
	end
	
	/** Character or null. */
	public func CharacterConfiguration getCharacter()
		return pCharacter
	end
	
	/** Set character or null. */
	public func void setCharacter(CharacterConfiguration character)
		if character == pCharacter
			return
		end
		
		if character != null
			GameApp.getGameApp().getConsole().addMessage("Activate character: profile='" \
				+ character.getProfile().getName() + "' configuration='" + character.getName() + "'")
			
		else
			GameApp.getGameApp().getConsole().addMessage("Activate null character")
		end
		
		if pCharacter != null
			pCharacter.getProfile().removeListener(pUpdateCharacter)
		end
		disposeActor()
		
		pCharacter = character
		
		if character != null
			character.getProfile().addListener(pUpdateCharacter)
		end
		
		startUpdateCheck()
	end
	
	/** Recreate actor. */
	public func void recreateActor()
		disposeActor()
		startUpdateCheck()
	end
	
	
	
	/** VR Menu or null if not created yet. */
	public func BehaviorElement getVRMenu()
		return pVRMenu
	end
	
	
	
	/** Start update check if not running. */
	protected func void startUpdateCheck()
		if pUpdateCheck == null
			pUpdateCheck = UpdateCheck.new(this)
		end
	end
	
	/** Stop update check if running. */
	protected func void stopUpdateCheck()
		if pUpdateCheck != null
			pUpdateCheck.giveUp()
			pUpdateCheck = null
		end
	end
	
	/** Update check. */
	public func void updateCheck()
		if pGameWorld == null or pActor != null
			stopUpdateCheck()
			return
		end
		
		if pCharacter != null and (pCharacter.getElementClass() == null or pCharacter.isElementClassPreloading())
			return
		end
		
		stopUpdateCheck()
		
		try
			createActor()
		catch Exception e
			GameApp.getGameApp().getConsole().addError("creating actor failed", e)
			disposeActor()
		end
	end
	
	/** Dispose actor if present. */
	protected func void disposeActor()
		if pActor == null
			return
		end
		
		pLastActorPosition = pActor.getPosition()
		pLastActorOrientation = pActor.getOrientation()
		
		pActor.safeDispose()
		pActor = null
	end
	
	/** Create actor. */
	protected func void createActor()
		// ensure spawn point is present
		if pSpawnPoint == null
			throw EInvalidParam.new("Spawn point 'player' not found in game world")
		end
		
		// spawn player actor
		var StubElement stub
		
		if pCharacter != null
			stub = pCharacter.createStubElement()
			
		else
			stub = StubElement.new(pNoCharacterActorClass, GameApp.getGameApp().getIDGenerator().nextID())
		end
		
		stub.setPosition(pLastActorPosition)
		stub.setRotation(pLastActorOrientation.getEulerAngles())
		
		pActor = stub.createElement() cast BaseVRActor
		pSpawnPoint.spawn(pGameWorld, pActor)
		
		// take control of actor
		pActor.getPlayerControllable().takeControl()
	end
	
	/** Create VR menu. */
	protected func BehaviorElement createVRMenu()
		var ElementClass eclass = GameApp.getGameApp().getElementClassList().getNamed("VRMenu")
		var StubElement stub = StubElement.new(eclass, GameApp.getGameApp().getIDGenerator().nextID())
		
		// add properties if required
		stub.setPosition(DVector.new(0, 1, 0))
		
		stub.setPosition(DVector.new(-0.75, 1.6, 0.75))
		stub.setRotation(Vector.new(0, -135, 0))
		
		return stub.createElement() cast BehaviorElement
	end
end
