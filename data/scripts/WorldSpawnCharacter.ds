/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap

pin Democap.Characters
pin Democap.Behaviors
pin Democap.Elements

pin Dragengine.CameraDirectors
pin Dragengine.Gui
pin Dragengine.Scenery
pin Dragengine.Preloading
pin Dragengine.Utils



/**
 * Task ensuring active character is present in game world. Also stores the VR Menu and
 * other gadgets potentially used by the player.
 */
class WorldSpawnCharacter
	/** Listener. */
	public interface Listener
		/** Character configuration changed. */
		func void characterChanged(WorldSpawnCharacter wsc)
		
		/** Charatcer actor is ready to be used. */
		func void actorReady(WorldSpawnCharacter wsc)
		
		/** Charatcer actor is not ready to be used anymore. */
		func void actorNotReady(WorldSpawnCharacter wsc)
		
		/** Game world changed. */
		func void gameWorldChanged(WorldSpawnCharacter wsc)
	end
	
	/** Default implementation of listener. */
	class DefaultListener implements Listener
		func new()
		end
		
		/** Character configuration changed. */
		func void characterChanged(WorldSpawnCharacter wsc)
		end
		
		/** Charatcer actor is ready to be used. */
		func void actorReady(WorldSpawnCharacter wsc)
		end
		
		/** Charatcer actor is not ready to be used anymore. */
		func void actorNotReady(WorldSpawnCharacter wsc)
		end
		
		/** Game world changed. */
		func void gameWorldChanged(WorldSpawnCharacter wsc)
		end
	end
	
	/** Character listener. */
	protected class UpdateCharacter extends DefaultCharacterListener
		var WorldSpawnCharacter pOwner
		
		func new(WorldSpawnCharacter owner)
			pOwner = owner
		end
		
		func void calibrated(CharacterProfile profile, CharacterConfiguration config)
			pOwner.recreateActor()
		end
		
		func void reset(CharacterProfile profile, CharacterConfiguration config, bool calibrating)
			if not calibrating
				pOwner.recreateActor()
			end
		end
	end
	
	enum State
		prepareElementClass
		createActor
		actorReady
		actorBroken
		recreateActor
	end
	
	
	
	var GameWorld pGameWorld
	var SpawnPoint pSpawnPoint
	var CharacterConfiguration pCharacter
	var MoCapActor pActor
	var UpdateCharacter pUpdateCharacter
	var DVector pLastActorPosition
	var Quaternion pLastActorOrientation
	var bool pLastActorSelected
	var BehaviorElement pVRMenu
	var BehaviorElement pWristMenuRight
	var BehaviorElement pWristMenuLeft
	var BehaviorElement pMirrorLarge
	var ElementClass pMoCapActorClass
	var BehaviorElement pLoadingCharacter
	var State pState
	var Array pListeners
	var DefaultTextModel pEstimatedFloorOffset
	
	
	
	/** Create. */
	func new()
		pState = State.prepareElementClass
		pUpdateCharacter = UpdateCharacter.new(this)
		pMoCapActorClass = GameApp.getGameApp().getElementClassList().getNamed("MoCapActor")
		pListeners = Array.new()
		pEstimatedFloorOffset = DefaultTextModel.new("0")
	end
	
	/** Dispose. */
	func void dispose()
		dropElements()
		
		pListeners.removeAll()
		
		disposeActor()
		pUpdateCharacter = null
		
		if pLoadingCharacter != null
			pLoadingCharacter.safeDispose()
			pLoadingCharacter = null
		end
		
		pEstimatedFloorOffset = null
	end
	
	
	
	/** Game world or null. */
	func GameWorld getGameWorld()
		return pGameWorld
	end
	
	/** Set game world or null. */
	func void setGameWorld(GameWorld gameWorld)
		if gameWorld == pGameWorld
			return
		end
		
		// remove VR menus from game world. they will be reused
		if pVRMenu != null
			pVRMenu.removeFromGameWorldIfPresent()
		end
		if pWristMenuRight != null
			pWristMenuRight.removeFromGameWorldIfPresent()
		end
		if pWristMenuLeft != null
			pWristMenuLeft.removeFromGameWorldIfPresent()
		end
		
		// remove large mirror from game world. it will be reused
		if pMirrorLarge != null
			pMirrorLarge.removeFromGameWorldIfPresent()
		end
		
		// remove loading character from game world
		if pLoadingCharacter != null
			pLoadingCharacter.removeFromGameWorldIfPresent()
		end
		
		// dispose of the actor. we could move the actor to the new game world but better
		// start with a fresh copy
		disposeActor()
		pState = State.actorBroken
		
		pSpawnPoint = null
		pLastActorPosition = null
		pLastActorOrientation = null
		pLastActorSelected = false
		
		// set game world
		pGameWorld = gameWorld
		
		if gameWorld != null
			// find spawn point
			pSpawnPoint = gameWorld.getSpawnPoints().getNamed("player")
			if pSpawnPoint != null
				pLastActorPosition = pSpawnPoint.getPosition()
				pLastActorOrientation = pSpawnPoint.getOrientation()
			end
			
			// add VR menus creating them if required
			if pVRMenu == null
				pVRMenu = createVRMenu()
			end
			pVRMenu.setVisible(false)
			pVRMenu.setTouchable(false)
			gameWorld.addElement(pVRMenu)
			
			if pWristMenuRight == null
				pWristMenuRight = createWristMenu(true)
			end
			gameWorld.addElement(pWristMenuRight)
			
			if pWristMenuLeft == null
				pWristMenuLeft = createWristMenu(false)
			end
			gameWorld.addElement(pWristMenuLeft)
			
			// add large mirror creating it if required
			if pMirrorLarge == null
				pMirrorLarge = createMirrorLarge()
			end
			pMirrorLarge.setVisible(false)
			pMirrorLarge.setTouchable(false)
			gameWorld.addElement(pMirrorLarge)
			
			// add loading character
			if pLoadingCharacter == null
				pLoadingCharacter = createLoadingCharacter()
			end
			pLoadingCharacter.setVisible(false)
			gameWorld.addElement(pLoadingCharacter)
			
			// move the camera to a good starting position showing the character
			var VRCameraDirector director = GameApp.getGameApp().getVRCameraDirector()
			
			if director != null
				var DMatrix matrix = DMatrix.new()
				if pSpawnPoint != null
					matrix = pSpawnPoint.getMatrix()
				end
				
				var Vector angles = (Matrix.newRotation(-20, 180, 0) * matrix.getRotation().toMatrix()).getEulerAngles()
				director.setPivot(matrix * DVector.new(0, 1.4, 1))
				director.setAzimuth(angles.getY())
				director.setElevation(-angles.getX())
			end
			
			pState = State.prepareElementClass
			createActorPlaceholder()
			showLoadingCharacter(true)
		end
		
		pListeners.forEach(block Listener each
			each.gameWorldChanged(this)
		end)
	end
	
	/** Spawn point or null. */
	func SpawnPoint getSpawnPoint()
		return pSpawnPoint
	end
	
	/** Character or null. */
	func CharacterConfiguration getCharacter()
		return pCharacter
	end
	
	/** Set character or null. */
	func void setCharacter(CharacterConfiguration character)
		if character == pCharacter
			return
		end
		
		if pCharacter != null
			pCharacter.getProfile().removeListener(pUpdateCharacter)
		end
		recreateActor()
		
		pCharacter = character
		
		if character != null
			character.getProfile().addListener(pUpdateCharacter)
		end
		
		pListeners.forEach(block Listener each
			each.characterChanged(this)
		end)
	end
	
	/** Recreate actor. */
	func void recreateActor()
		// disposing of the character is delayed since this call can potentially happen while
		// the mocap actor processes user input during thinking or post thinking. disposing
		// elements during that time can have hard to debug exceptions
		pState = State.recreateActor
	end
	
	/** Actor or null. */
	func MoCapActor getActor()
		return pActor
	end
	
	/** Reset calibration. */
	func void resetCalibration()
		if pCharacter != null and pActor != null
			pCharacter.resetCalibration(pActor, false)
			recreateActor()
		end
	end
	
	
	/** VR Menu or null if not created yet. */
	func BehaviorElement getVRMenu()
		return pVRMenu
	end
	
	/** Right hand wrist menu Menu or null if not created yet. */
	func BehaviorElement getWristMenuRight()
		return pWristMenuRight
	end
	
	/** Left hand wrist menu or null if not created yet. */
	func BehaviorElement getWristMenuLeft()
		return pWristMenuLeft
	end
	
	/** Large mirror or null if not created yet. */
	func BehaviorElement getMirrorLarge()
		return pMirrorLarge
	end
	
	
	
	/** Estimated floor offset model. */
	func DefaultTextModel getEstimatedFloorOffset()
		return pEstimatedFloorOffset
	end
	
	
	
	/** Add listener. */
	func void addListener(Listener listener)
		if listener == null
			throw ENullPointer.new("listener")
		end
		pListeners.add(listener)
	end
	
	/** Remove listener. */
	func void removeListener(Listener listener)
		pListeners.remove(listener)
	end
	
	
	
	/** Frame update. */
	func void update()
		if pState == State.recreateActor
			disposeActor()
			createActorPlaceholder()
			
			if pGameWorld == null
				pState = State.actorBroken
				showLoadingCharacter(false)
				setCharacter(null)
				
			else
				pState = State.prepareElementClass
				showLoadingCharacter(true)
			end
		end
		
		if pState == State.prepareElementClass
			if pGameWorld == null
				pState = State.actorBroken
				showLoadingCharacter(false)
				setCharacter(null)
				return
			end
			
			if pCharacter != null
				try
					pCharacter.getElementClass() // starts preloading if required
					if not pCharacter.isElementClassPreloading()
						pState = State.createActor
					end
					
				catch Exception e
					GameApp.getGameApp().getConsole().addError("prepare actor element class failed", e)
					pState = State.actorBroken
					disposeActor()
					createActorPlaceholder()
					showLoadingCharacter(false)
					setCharacter(null)
				end
				
			else
				pState = State.createActor
			end
		end
		
		if pState == State.createActor
			if pGameWorld == null
				pState = State.actorBroken
				showLoadingCharacter(false)
				setCharacter(null)
				return
			end
			
			try
				createActor()
				pState = State.actorReady
				showLoadingCharacter(false)
				
				pListeners.forEach(block Listener each
					each.actorReady(this)
				end)
				
			catch Exception e
				GameApp.getGameApp().getConsole().addError("creating actor failed", e)
				pState = State.actorBroken
				disposeActor()
				createActorPlaceholder()
				showLoadingCharacter(false)
				setCharacter(null)
			end
		end
	end
	
	/** Modifications changed. */
	func void onModsChanged()
		dropElements()
		disposeActor()
		
		if pLoadingCharacter != null
			pLoadingCharacter.safeDispose()
			pLoadingCharacter = null
		end
		
		pMoCapActorClass = GameApp.getGameApp().getElementClassList().getNamed("MoCapActor")
	end
	
	/** Drop elements. */
	protected func void dropElements()
		if pWristMenuLeft != null
			pWristMenuLeft.safeDispose()
			pWristMenuLeft = null
		end
		if pWristMenuRight != null
			pWristMenuRight.safeDispose()
			pWristMenuRight = null
		end
		if pVRMenu != null
			pVRMenu.safeDispose()
			pVRMenu = null
		end
		if pMirrorLarge != null
			pMirrorLarge.safeDispose()
			pMirrorLarge = null
		end
	end
	
	/** Dispose actor if present. */
	protected func void disposeActor()
		if pActor == null
			return
		end
		
		GameApp.getGameApp().getConsole().addMessage("WorldSpawnCharacter: dispose actor")
		pLastActorPosition = pActor.getPosition()
		pLastActorOrientation = pActor.getOrientation()
		pLastActorSelected = pActor.selectable.isSelected()
		
		try
			pActor.safeDispose()
			
		catch Exception e
			GameApp.getGameApp().getConsole().addError("dispose actor failed", e)
		end
		pActor = null
		
		pListeners.forEach(block Listener each
			each.actorNotReady(this)
		end)
	end
	
	/** Create actor. */
	protected func void createActor()
		GameApp.getGameApp().getConsole().addMessage("WorldSpawnCharacter: create actor")
		createActor(false)
	end
	
	protected func void createActorPlaceholder()
		GameApp.getGameApp().getConsole().addMessage("WorldSpawnCharacter: create actor placeholder")
		createActor(true)
	end
	
	protected func void createActor(bool placeholder)
		disposeActor()
		
		// spawn player actor
		var StubElement stub
		
		if pCharacter != null and not placeholder
			stub = pCharacter.createStubElement()
			
		else
			stub = StubElement.new(pMoCapActorClass) // no generated ID on purpose
		end
		
		pActor = stub.createElement() cast MoCapActor
		if pSpawnPoint != null
			pSpawnPoint.spawn(pGameWorld, pActor)
			
		else
			pGameWorld.addElement(pActor)
		end
		
		if pLastActorPosition != null
			pActor.setGeometry(pLastActorPosition, pLastActorOrientation)
			
			pLastActorPosition = null
			pLastActorOrientation = null
		end
		
		var ECBMoCapAnimator.Instance mocapAnimator = ECBMoCapAnimator.getInstanceIn(pActor)
		if mocapAnimator != null
			mocapAnimator.resetPhysicsBones()
		end
		
		// select actor if required
		if pLastActorSelected
			pLastActorSelected = false
			
			pActor.selectable.selectElement()
		end
		
		// take control of actor
		pActor.getPlayerControllable().takeControl()
	end
	
	/** Create VR menu. */
	protected func BehaviorElement createVRMenu()
		var ElementClass eclass = GameApp.getGameApp().getElementClassList().getNamed("VRMenu")
		var StubElement stub = StubElement.new(eclass) // no generated ID on purpose
		
		// add properties if required
		
		return stub.createElement() cast BehaviorElement
	end
	
	/** Create wrist menu. */
	protected func BehaviorElement createWristMenu(bool rightHand)
		var ElementClass eclass = GameApp.getGameApp().getElementClassList().getNamed(\
			rightHand if "VRWristMenuRight" else "VRWristMenuLeft")
		var StubElement stub = StubElement.new(eclass) // no generated ID on purpose
		
		// add properties if required
		
		return stub.createElement() cast BehaviorElement
	end
	
	/** Create large mirror. */
	protected func BehaviorElement createMirrorLarge()
		var ElementClass eclass = GameApp.getGameApp().getElementClassList().getNamed("MirrorLarge")
		var StubElement stub = StubElement.new(eclass) // no generated ID on purpose
		
		// add properties if required
		
		return stub.createElement() cast BehaviorElement
	end
	
	/** Create loading character model. */
	protected func BehaviorElement createLoadingCharacter()
		var ElementClass eclass = GameApp.getGameApp().getElementClassList().getNamed("LoadingCharacter")
		var StubElement stub = StubElement.new(eclass) // no generated ID on purpose
		return stub.createElement() cast BehaviorElement
	end
	
	/** Show or hide loading character. */
	protected func void showLoadingCharacter(bool show)
		pLoadingCharacter.setVisible(show)
		if show and pLastActorPosition != null
			pLoadingCharacter.setGeometry(pLastActorPosition, pLastActorOrientation)
		end
	end
end
