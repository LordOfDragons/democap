/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap

pin Dragengine.Scenery
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Democap.Elements


/**
 * MoCap game world.
 */
class MoCapGameWorld extends GameWorld
	var Project pProject
	var Scene pScene
	
	
	/** Create game world. */
	func new(Project project, Scene scene)
		pProject = project
		pScene = scene
		
		GameApp.getGameApp().forEachModification(block Modification each
			each.addGameWorldBehaviors(this)
		end)
	end
	
	/** Dispose of game world. */
	func void dispose()
		pScene = null
		pProject = null
		super.dispose()
	end
	
	
	/** Project. */
	func Project getProject()
		return pProject
	end
	
	/** Scene. */
	func Scene getScene()
		return pScene
	end
	
	
	
	/** Frame update. */
	func void update(float elapsed)
		var GameApp app = GameApp.getGameApp()
		
		app.getPlaybackScene().update(elapsed)
		app.getRecordScene().update(elapsed)
		app.getWorldSpawnCharacter().update()
		
		super.update(elapsed)
		
		var DNServer server = app.getServer()
		if server.isListening()
			server.updateCaptureFrame()
		end
	end
	
	
	
	/** Read game world from file. */
	func void readFromFile(PersistencyEnvironment env, FileReader reader)
		setEnablePersistency(pScene.getEnableWorldPersistency())
		super.readFromFile(env, reader)
	end
	
	/** Write game world to file. */
	func void writeToFile(PersistencyEnvironment env, FileWriter writer)
		setEnablePersistency(true)
		super.writeToFile(env, writer)
	end
	
	/**
	 * \brief Loading element from persistency failed.
	 * 
	 * Replace element with InvalidBrokenElement wrapping element data.
	 * This ensures the loading can continue and that the element can be
	 * loaded again the next time if the breaking circumstances are fixed.
	 */
	func StubElement onFailLoadAndAddPersistableElements(PersistencyEnvironment env,\
	FileReader reader, StubElement stub, int dataSize, Exception exception)
		GameApp.getApp().getConsole().addError("Load element failed", exception)
		
		var InvalidBrokenElementClass eclass = InvalidBrokenElementClass.new(stub.getClass().getClassname())
		
		var PreloadCounter counter = PreloadCounter.new()
		eclass.preloadResources(counter)
		while counter.isNotZero()
			Engine.updateResourceLoading()
		end
		
		return eclass.createAndAddElement(stub, this, reader, dataSize, exception)
	end
end
