/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Actions

pin Democap.Behaviors
pin Democap.Elements

pin Dragengine.Scenery


/**
 * Base BaseVRActor action. Extends BAAFirstPersonVR with empty implementations for all
 * supported commands that can be send to actions.
 */
abstract class AABase extends BAAFirstPersonVR implements AAControllerInput, AAControlCommands
	/** Create action. */
	public func new()
	end
	
	
	
	/** Trigger touched. */
	public func void triggerTouch(bool rightHand)
	end
	
	/** Trigger untouched. */
	public func void triggerUntouch(bool rightHand)
	end
	
	/** Trigger pulled. */
	public func void triggerPull(bool rightHand)
	end
	
	/** Trigger released. */
	public func void triggerRelease(bool rightHand)
	end
	
	
	
	/** Menu button touched. */
	public func void menuTouch(bool rightHand)
	end
	
	/** Menu button untouched. */
	public func void menuUntouch(bool rightHand)
	end
	
	/** Menu button pressed. */
	public func void menuPress(bool rightHand)
	end
	
	/** Menu button released. */
	public func void menuRelease(bool rightHand)
	end
	
	
	
	/** Secondary button touched. */
	public func void secondaryTouch(bool rightHand)
	end
	
	/** Secondary button untouched. */
	public func void secondaryUntouch(bool rightHand)
	end
	
	/** Secondary button pressed. */
	public func void secondaryPress(bool rightHand)
	end
	
	/** Secondary button released. */
	public func void secondaryRelease(bool rightHand)
	end
	
	
	
	/** Track pad touched. */
	public func void trackPadTouch(bool rightHand)
	end
	
	/** Track pad untouched. */
	public func void trackPadUntouch(bool rightHand)
	end
	
	/** Track pad up-down. */
	public func void trackPadUD(bool rightHand, float value)
	end
	
	/** Track pad left-right. */
	public func void trackPadLR(bool rightHand, float value)
	end
	
	
	
	/** Grip touched. */
	public func void gripTouch(bool rightHand)
	end
	
	/** Grip untouched. */
	public func void gripUntouch(bool rightHand)
	end
	
	/** Grip grab. */
	public func void gripGrab(bool rightHand)
	end
	
	/** Grip ungrab. */
	public func void gripUngrab(bool rightHand)
	end
	
	/** Grip grab analog. */
	public func void gripGrabAnalog(bool rightHand, float value)
	end
	
	
	
	/** Start calibration. Return true if calibration started. */
	public func bool startCalibrate()
		return false
	end
	
	/** Cancel calibration. */
	public func void cancelCalibrate()
	end
	
	/** Start recording. Return true if recording started. */
	public func bool startRecording()
		return false
	end
	
	/** Stop recording. */
	public func void stopRecording()
	end
	
	/** Controller capabilities changed. */
	public func void controllerCapabilitiesChanged()
	end
	
	
	
	/** Stop pointing at anything. */
	public func void stopPointingAtAnything()
		var MoCapActor actor = getActor() cast MoCapActor
		actor.controlDesktop.cancel()
		actor.interactHandle.cancel()
		
		vrRightHandPointAt.setEnabled(false)
		vrLeftHandPointAt.setEnabled(false)
	end
	
	/** Stop grabbing. */
	public func void stopGrabbing()
		var MoCapActor actor = getActor() cast MoCapActor
		actor.grabRightHand.ungrab()
		actor.grabRightHand.ungrab()
	end
	
	/** Hide VR Menu. */
	public func void hideVRMenu()
		var BehaviorElement vrmenu = GameApp.getGameApp().getWorldSpawnCharacter().getVRMenu()
		if vrmenu == null
			return
		end
		
		var ECBToggleVisibility.Instance toggleVisibility = ECBToggleVisibility.getInstanceIn(vrmenu)
		if toggleVisibility == null
			return
		end
		
		toggleVisibility.setVisible(false)
	end
	
	/** Hide VR Mirror. */
	public func void hideVRMirror()
		var BehaviorElement vrmirror = GameApp.getGameApp().getWorldSpawnCharacter().getMirrorLarge()
		if vrmirror == null
			return
		end
		
		var ECBToggleVisibility.Instance toggleVisibility = ECBToggleVisibility.getInstanceIn(vrmirror)
		if toggleVisibility == null
			return
		end
		
		toggleVisibility.setVisible(false)
	end
end
