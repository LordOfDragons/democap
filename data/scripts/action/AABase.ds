/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Actions

pin Democap.Behaviors
pin Democap.Elements

pin Dragengine.Scenery


/**
 * Base BaseVRActor action. Extends BAAFirstPersonVR with empty implementations for all
 * supported commands that can be send to actions.
 */
abstract class AABase extends BAAFirstPersonVR implements AAControllerInput, AAControlCommands
	protected var ECBAMovementHelper.Instance movementHelper
	protected var ECBehaviorVRHandLocomotion.Instance vrRightHandLocomotion, vrLeftHandLocomotion
	
	
	
	/** Create action. */
	func new()
	end
	
	
	
	/** Init behaviors. */
	protected func void initBehaviors()
		super.initBehaviors()
		
		var MoCapActor moc = actor cast MoCapActor
		movementHelper = moc.movementHelper
		vrRightHandLocomotion = moc.getVRRightHandLocomotion()
		vrLeftHandLocomotion = moc.getVRLeftHandLocomotion()
	end
	
	
	func void triggerTouch(bool rightHand)
	end
	
	func void triggerUntouch(bool rightHand)
	end
	
	func void triggerPull(bool rightHand)
	end
	
	func void triggerRelease(bool rightHand)
	end
	
	
	func void menuTouch(bool rightHand)
	end
	
	func void menuUntouch(bool rightHand)
	end
	
	func void menuPress(bool rightHand)
	end
	
	func void menuRelease(bool rightHand)
	end
	
	
	func void secondaryTouch(bool rightHand)
	end
	
	func void secondaryUntouch(bool rightHand)
	end
	
	func void secondaryPress(bool rightHand)
	end
	
	func void secondaryRelease(bool rightHand)
	end
	
	
	func void trackPadTouch(bool rightHand)
	end
	
	func void trackPadUntouch(bool rightHand)
	end
	
	func void trackPadUD(bool rightHand, float value)
	end
	
	func void trackPadLR(bool rightHand, float value)
	end
	
	
	func void gripTouch(bool rightHand)
	end
	
	func void gripUntouch(bool rightHand)
	end
	
	func void gripGrab(bool rightHand)
	end
	
	func void gripUngrab(bool rightHand)
	end
	
	func void gripGrabAnalog(bool rightHand, float value)
	end
	
	
	func void twoFingerPress(bool rightHand, int finger)
		if isHandFacingUser(rightHand) and isHandInFrontOfUser(rightHand)
			select finger
			case 1
				menuPress(rightHand)
				
			case 2
				(rightHand if vrRightHandLocomotion else vrLeftHandLocomotion).start()
			end
		end
	end
	
	func void twoFingerRelease(bool rightHand, int finger)
		select finger
		case 1
			menuRelease(rightHand)
			
		case 2
			(rightHand if vrRightHandLocomotion else vrLeftHandLocomotion).stop()
		end
	end
	
	
	/** Start calibration. Return true if calibration started. */
	func bool startCalibrate()
		return false
	end
	
	/** Cancel calibration. */
	func void cancelCalibrate()
	end
	
	/** Start recording. Return true if recording started. */
	func bool startRecording()
		return false
	end
	
	/** Stop recording. */
	func void stopRecording()
	end
	
	/** Controller capabilities changed. */
	func void controllerCapabilitiesChanged()
	end
	
	
	
	protected func void doTurnLook(float elapsed)
		super.doTurnLook(elapsed)
		
		movementHelper.updateSmoothRotation(elapsed)
		applySmoothRotation(movementHelper.getSmoothRotation())
	end
	
	protected func void applyLookAroundChanges(float deltaHorizontal, float deltaVertical)
		locomotion.applyLookAround(0, deltaVertical)
		movementHelper.addSmoothRotation(deltaHorizontal)
	end
	
	protected func void applySmoothRotation(float rotation)
		movementHelper.rotate(Vector.new(0, 1, 0), -rotation)
	end
	
	
	
	/** Stop pointing at anything. */
	func void stopPointingAtAnything()
		var MoCapActor mcactor = getActor() cast MoCapActor
		mcactor.controlDesktop.cancel(true)
		mcactor.controlDesktop.cancel(false)
		mcactor.interactHandle.cancel()
		
		vrRightHandPointAt.setEnabled(false)
		vrLeftHandPointAt.setEnabled(false)
	end
	
	/** Stop grabbing. */
	func void stopGrabbing()
		var MoCapActor mcactor = getActor() cast MoCapActor
		mcactor.grabRightHand.ungrab()
		mcactor.grabLeftHand.ungrab()
	end
	
	/** Hide VR Menu. */
	func void hideVRMenu()
		var BehaviorElement vrmenu = GameApp.getGameApp().getWorldSpawnCharacter().getVRMenu()
		if vrmenu == null
			return
		end
		
		var ECBToggleVisibility.Instance toggleVisibility = ECBToggleVisibility.getInstanceIn(vrmenu)
		if toggleVisibility == null
			return
		end
		
		toggleVisibility.setVisible(false)
	end
	
	/** Hide VR Mirror. */
	func void hideVRMirror()
		var BehaviorElement vrmirror = GameApp.getGameApp().getWorldSpawnCharacter().getMirrorLarge()
		if vrmirror == null
			return
		end
		
		var ECBToggleVisibility.Instance toggleVisibility = ECBToggleVisibility.getInstanceIn(vrmirror)
		if toggleVisibility == null
			return
		end
		
		toggleVisibility.setVisible(false)
	end
	
	/** VR hand is facing user. */
	func bool isHandFacingUser(bool rightHand)
		return (rightHand if vrRightHandPointAt else vrLeftHandPointAt).getVRHand().isFacingUser()
	end
	
	/** VR hand is clearly in front of user. */
	func bool isHandInFrontOfUser(bool rightHand)
		var ECBehaviorVRHandPointAt.Instance p = rightHand if vrRightHandPointAt else vrLeftHandPointAt
		var Vector position = getVRHMD().getInverseMatrixPlayspace() * p.getVRHand().getPositionPlayspace()
		if position.getZ() < 0.1
			return false
		end
		
		var float angleY = DEMath.atan2(-position.getX(), position.getZ())
		var float angleX = DEMath.atan2(position.getY(), Vector2.new(position.getX(), position.getZ()).getLength())
		return DEMath.fabs(angleY) < 45 and DEMath.fabs(angleX) < 45
	end
end
