/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Actions

pin Democap.Actors
pin Democap.Behaviors
pin Democap.Characters

pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * BaseVRActor action running while actor calibrates trackers.
 */
class AACalibrate extends AABase
	/** Factory for loading actor actions. */
	public class Factory implements PersistencyFactory, ECBehaviorActorAIAction.ActionFactory
		public static fixed var String name = "AACalibrate"
		
		public func new()
		end
		
		public func Persistable readObjectFromFile(PersistencyEnvironment env, FileReader reader)
			return AACalibrate.new()
		end
		
		public static func void registerFactory(Persistency persistency)
			persistency.addFactory(name, Factory.new())
		end
		
		public func BaseActorAction createAction(ECBehaviorActorAIAction.Instance instance)
			return AACalibrate.new()
		end
	end
	
	
	
	protected var ECBVRHudInfo.Instance vrHudInfo
	
	
	
	/** Create action. */
	public func new()
	end
	
	
	
	/** Init behaviors. */
	protected func void initBehaviors()
		super.initBehaviors()
		
		vrHudInfo = ECBVRHudInfo.getInstanceIn(actor)
	end
	
	
	
	/** Action has been activated. */
	public func void activate(BehaviorElement actor)
		super.activate(actor)
		log("Enter Calibration")
		
		var ECBAControlDesktop.Instance acd = ECBAControlDesktop.getInstanceIn(actor)
		if acd != null
			acd.cancel()
		end
		
		var ActorProfile actorProfile = GameApp.getGameApp().getActiveActorProfile()
		var CharacterConfiguration character = GameApp.getGameApp().getWorldSpawnCharacter().getCharacter()
		if actor != null and character != null
			character.resetCalibration()
		end
		
		if vrHudInfo != null
			vrHudInfo.setSkin(Skin.new("/content/models/hudinfo/calibrate.deskin"))
		end
	end
	
	/** Deactivate action. */
	public func void deactivate()
		if vrHudInfo != null
			vrHudInfo.clearSkin()
		end
	end
	
	
	/** Trigger pulled. */
	public func void triggerPull(bool rightHand)
		var ActorProfile actorProfile = GameApp.getGameApp().getActiveActorProfile()
		var CharacterConfiguration character = GameApp.getGameApp().getWorldSpawnCharacter().getCharacter()
		if actor == null or character == null
			return
		end
		
		log("Calibrate")
		var BaseVRActor vrActor = actor cast BaseVRActor
		//actorProfile.calibrate(vrActor)
		character.calibrate(vrActor, actorProfile)
		
		// TODO use a 1 second delay after pulling the trigger
		// after this point the actor has been disposed and a new one will be created
// 		log("Done")
// 		aiAction.setAction(AADefault.new())
	end
	
	/** Trigger released. */
	public func void triggerRelease(bool rightHand)
	end
	
	
	
	/** Menu button pressed. */
	public func void menuPress(bool rightHand)
		log("Abort Calibration")
		aiAction.setAction(AADefault.new())
	end
	
	/** Cancel calibrate. */
	public func void cancelCalibrate()
		aiAction.setAction(AADefault.new())
	end
	
	
	/** Name of PersistencyFactory required to load object from file. */
	public func String persistencyFactoryName()
		return Factory.name
	end
end
