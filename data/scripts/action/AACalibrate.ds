/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Actions

pin Democap.Actors
pin Democap.Behaviors
pin Democap.Characters

pin Dragengine.Gui.Layouts
pin Dragengine.Scenery


/**
 * BaseVRActor action running while actor calibrates trackers.
 */
class AACalibrate extends AABase
	enum State
		waiting
		calibrating
		done
	end
	
	
	
	protected var ECBVRHudInfo.Instance vrHudInfo
	protected var Panel panelCalibrate
	protected var RangeModel modelProgress
	protected var State state
	protected var float calibrateElapsed
	protected var float calibrateWaitTime
	protected var int triggerPressCount
	
	
	
	/** Create action. */
	public func new()
		state = State.waiting
		calibrateWaitTime = 1
	end
	
	
	
	/** Init behaviors. */
	protected func void initBehaviors()
		super.initBehaviors()
		
		vrHudInfo = ECBVRHudInfo.getInstanceIn(actor)
	end
	
	
	
	/** Action has been activated. */
	public func void activate(BehaviorElement actor)
		super.activate(actor)
		
		stopPointingAtAnything()
		stopGrabbing()
		hideVRMenu()
		hideVRMirror()
		hideActorModel()
		
		projectToGround.setEnabled(false)
		
		var ActorProfile actorProfile = GameApp.getGameApp().getActiveActorProfile()
		var CharacterConfiguration character = GameApp.getGameApp().getWorldSpawnCharacter().getCharacter()
		if actor != null and character != null
			character.resetCalibration(true)
		end
		
		if vrHudInfo != null
			modelProgress = DefaultRangeModel.new(0, 100, 1, 0, 1)
			
			panelCalibrate = Panel.new(StackLayout.new(), block Panel p
				p.setDesignerSelector("Panel.HudInfo.Calibrate")
				
				p.addWidget(DisplayRotatingImage.new(Image.new("/content/gui/images/calibrate.png")))
				
				p.addWidget(Panel.new(CentrizedBoxLayout.new(LayoutAxis.y, 0.5, 0.615), block Panel p2
					var ProgressBar progressBar = ProgressBar.new(Orientation.horizontal, modelProgress)
					progressBar.setDesignerSelector("ProgressBar.HudInfo.Calibrate")
					progressBar.setShowPercentage(false)
					p2.addWidget(progressBar)
				end))
			end)
			
			vrHudInfo.addPanel(panelCalibrate)
		end
	end
	
	/** Deactivate action. */
	public func void deactivate()
		if vrHudInfo != null and panelCalibrate != null
			vrHudInfo.removePanel(panelCalibrate)
			panelCalibrate.safeDispose()
			panelCalibrate = null
		end
		
		modelProgress = null
		
		showActorModel()
	end
	
	
	
	/** Player think. Do nothing. */
	public func void playerThink(float elapsed)
	end
	
	
	
	/** Trigger pulled. */
	public func void triggerPull(bool rightHand)
		var CharacterConfiguration character = GameApp.getGameApp().getWorldSpawnCharacter().getCharacter()
		if actor == null or character == null
			return
		end
		
		select state
		case State.waiting
			state = State.calibrating
			triggerPressCount++
			
		case State.calibrating
			triggerPressCount++
		end
	end
	
	/** Trigger released. */
	public func void triggerRelease(bool rightHand)
		if state != State.calibrating
			return
		end
		
		triggerPressCount--
		
		if triggerPressCount == 0
			resetToWaiting()
		end
	end
	
	
	
	/** Menu button pressed. */
	public func void menuPress(bool rightHand)
		cancelCalibrate()
	end
	
	/** Cancel calibrate. */
	public func void cancelCalibrate()
		state = State.done
		aiAction.setAction(AADefault.new())
	end
	
	
	
	/** Frame update. */
	public func void think(float elapsed)
		super.think(elapsed)
		
		select state
		case State.calibrating
			// sanity check
			var ActorProfile actorProfile = GameApp.getGameApp().getActiveActorProfile()
			var CharacterConfiguration character = GameApp.getGameApp().getWorldSpawnCharacter().getCharacter()
			if actor == null or character == null
				resetToWaiting()
				return
			end
			
			// wait until timeout
			calibrateElapsed += elapsed
			
			if modelProgress != null
				modelProgress.setValue(DEMath.linearStep(calibrateElapsed, 0, calibrateWaitTime, 0, 100) cast int)
			end
			
			// once timout elapsed calibrate and finish
			if calibrateElapsed >= calibrateWaitTime
				resetToWaiting()
				
				var BaseVRActor vrActor = actor cast BaseVRActor
				//actorProfile.calibrate(vrActor)
				
				character.calibrate(vrActor, actorProfile)
				
				try
					character.getProfile().save()
				catch Exception e
					log(e)
				end
			end
		end
	end
	
	/** Reset to waiting. */
	protected func void resetToWaiting()
		state = State.waiting
		calibrateElapsed = 0
		if modelProgress != null
			modelProgress.setValue(0)
		end
	end
	
	/**
	 * The actor can get in the way during calibrating. If we hide the entire actor then
	 * the virtual hand devices are hidden too. Instead just hide the component only.
	 * This can be improvd in the future to hide also attachments if present.
	 * This requires though some kind of notification
	 */
	protected func void hideActorModel()
		ECBehaviorComponent.getInstanceIn(actor).getComponent().setVisible(false)
	end
	
	/** Show actor model. */
	protected func void showActorModel()
		ECBehaviorComponent.getInstanceIn(actor).getComponent().setVisible(true)
	end
end
