/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Actions

pin Democap.Actors
pin Democap.Behaviors
pin Democap.Characters

pin Dragengine.Gui.Layouts
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * BaseVRActor action running while actor calibrates trackers.
 */
class AACalibrate extends AABase
	enum State
		waiting
		delayCalibrating
		calibrating
		done
	end
	
	
	
	protected var ECBVRHudInfo.Instance vrHudInfo
	protected var Panel panelCalibrate
	protected var State state
	protected var float calibrateElapsed
	protected var float calibrateDelayTime
	protected var float calibrateWaitTime
	protected var int triggerPressCount
	
	
	
	/** Create action. */
	func new()
		state = State.waiting
		calibrateDelayTime = 0.5
		calibrateWaitTime = 1.5
	end
	
	
	
	/** Init behaviors. */
	protected func void initBehaviors()
		super.initBehaviors()
		
		vrHudInfo = ECBVRHudInfo.getInstanceIn(actor)
	end
	
	
	
	/** Action has been activated. */
	func void activate(BehaviorElement actor)
		super.activate(actor)
		
		var GameApp app = GameApp.getGameApp()
		var CharacterConfiguration character = app.getWorldSpawnCharacter().getCharacter()
		
		stopPointingAtAnything()
		stopGrabbing()
		hideVRMenu()
		hideVRMirror()
		hideActorModel()
		
		projectToGround.setEnabled(false)
		
		character.resetCalibration(actor cast BaseVRActor, true)
		
		if vrHudInfo != null
			panelCalibrate = Panel.new(StackLayout.new(), block Panel p
				p.setDesignerSelector("Panel.HudInfo.Calibrate")
				
				p.addWidget(DisplayRotatingImage.new(Image.new("/content/gui/images/calibrate.png")))
				
				p.addWidget(Panel.new(CentrizedBoxLayout.new(LayoutAxis.y, 0.5, 0.615), block Panel p2
					var ProgressBar progressBar = ProgressBar.new(Orientation.horizontal,\
						SessionState.get().getModelCalibrateProgressPrepare())
					progressBar.setDesignerSelector("ProgressBar.HudInfo.CalibratePrepare")
					progressBar.setShowPercentage(false)
					p2.addWidget(progressBar)
					
					progressBar = ProgressBar.new(Orientation.horizontal, SessionState.get().getModelCalibrateProgress())
					progressBar.setDesignerSelector("ProgressBar.HudInfo.Calibrate")
					progressBar.setShowPercentage(false)
					p2.addWidget(progressBar)
				end))
			end)
			
			vrHudInfo.addPanel(panelCalibrate)
		end
		
		SessionState.get().getModelIsCalibrating().setToggled(true)
	end
	
	/** Deactivate action. */
	func void deactivate()
		SessionState.get().getModelIsCalibrating().setToggled(false)
		
		if vrHudInfo != null and panelCalibrate != null
			vrHudInfo.removePanel(panelCalibrate)
			panelCalibrate.safeDispose()
			panelCalibrate = null
		end
		
		SessionState.get().getModelCalibrateProgress().setValue(0)
		SessionState.get().getModelCalibrateProgressPrepare().setValue(0)
		
		showActorModel()
	end
	
	
	
	/** Player think. Do nothing. */
	func void playerThink(float elapsed)
	end
	
	
	
	/** Trigger pulled. */
	func void triggerPull(bool rightHand)
		triggerPressCount++
		
		var GameApp app = GameApp.getGameApp()
		var ActorProfile actorProfile = app.getActiveActorProfile()
		var CharacterConfiguration character = app.getWorldSpawnCharacter().getCharacter()
		
		if actor == null or character == null or actorProfile == null
			return
		end
		
		select state
		case State.waiting
			log("Delay calibration")
			calibrateDelayTime = SessionSettings.get().getCalibratePrepareTimeout()
			character.beginCalibration(actor cast BaseVRActor, actorProfile)
			state = State.delayCalibrating
		end
	end
	
	/** Trigger released. */
	func void triggerRelease(bool rightHand)
		triggerPressCount--
		
		/*
		select state
		case State.delayCalibrating, State.calibrating
			if triggerPressCount == 0
				log("Trigger released. Reset to waiting")
				resetToWaiting()
			end
		end
		*/
	end
	
	func bool startCalibrate()
		if state == State.waiting
			triggerPull(true)
			return state == State.delayCalibrating
			
		else
			return false
		end
	end
	
	
	
	/** Menu button pressed. */
	func void menuPress(bool rightHand)
		log("Menu pressed. Cancel calibration")
		cancelCalibrate()
	end
	
	/** Cancel calibrate. */
	func void cancelCalibrate()
		log("Cancel calibration")
		var CharacterConfiguration character = GameApp.getGameApp().getWorldSpawnCharacter().getCharacter()
		if actor != null and character != null
			character.resetCalibration(actor cast BaseVRActor, false)
		end
		
		state = State.done
		aiAction.setAction(AADefault.new())
	end
	
	
	
	/** Frame update. */
	func void think(float elapsed)
		super.think(elapsed)
		
		select state
		case State.delayCalibrating
			// sanity check
			var CharacterConfiguration character = GameApp.getGameApp().getWorldSpawnCharacter().getCharacter()
			if actor == null or character == null
				log("Actor/Character lost. Reset to waiting")
				resetToWaiting()
				return
			end
			
			// wait until timeout
			calibrateElapsed += elapsed
			
			SessionState.get().getModelCalibrateProgressPrepare().setValue(\
				DEMath.linearStep(calibrateElapsed, 0, calibrateDelayTime, 0, 100) cast int)
			
			// once timout elapsed calibrate and finish
			if calibrateElapsed >= calibrateDelayTime
				log("Delay finished. Begin collecting calibration data")
				state = State.calibrating
				calibrateElapsed = 0
				character.updateCalibration()
			end
			
		case State.calibrating
			// sanity check
			var ActorProfile actorProfile = GameApp.getGameApp().getActiveActorProfile()
			var CharacterConfiguration character = GameApp.getGameApp().getWorldSpawnCharacter().getCharacter()
			if actor == null or character == null
				log("Actor/Character lost. Go back to waiting")
				resetToWaiting()
				return
			end
			
			character.updateCalibration()
			
			// wait until timeout
			calibrateElapsed += elapsed
			
			SessionState.get().getModelCalibrateProgress().setValue(\
				DEMath.linearStep(calibrateElapsed, 0, calibrateWaitTime, 0, 100) cast int)
			
			// once timout elapsed calibrate and finish
			if calibrateElapsed >= calibrateWaitTime
				resetToWaiting()
				
				var BaseVRActor vrActor = actor cast BaseVRActor
				//actorProfile.calibrate(vrActor)
				
				log("Collecting calibration finished. Calibrate character")
				character.calibrate(vrActor, actorProfile)
				
				try
					character.getProfile().save()
				catch Exception e
					log(e)
				end
				
				toggleLargeMirror()
			end
		end
	end
	
	/** Reset to waiting. */
	protected func void resetToWaiting()
		state = State.waiting
		calibrateElapsed = 0
		SessionState.get().getModelCalibrateProgress().setValue(0)
		SessionState.get().getModelCalibrateProgressPrepare().setValue(0)
	end
	
	/**
	 * The actor can get in the way during calibrating. If we hide the entire actor then
	 * the virtual hand devices are hidden too. Instead just hide the component only.
	 * This can be improvd in the future to hide also attachments if present.
	 * This requires though some kind of notification
	 */
	protected func void hideActorModel()
		ECBehaviorComponent.getInstanceIn(actor).getComponent().setVisible(false)
	end
	
	/** Show actor model. */
	protected func void showActorModel()
		ECBehaviorComponent.getInstanceIn(actor).getComponent().setVisible(true)
	end
	
	/** Toggle large mirror. */
	func void toggleLargeMirror()
		var WorldSpawnCharacter wsc = GameApp.getGameApp().getWorldSpawnCharacter()
		var BehaviorElement mirror = wsc.getMirrorLarge()
		if mirror == null
			return
		end
		
		var ECBToggleVisibility.Instance toggleVisibility = ECBToggleVisibility.getInstanceIn(mirror)
		if toggleVisibility == null or toggleVisibility.getVisible()
			return
		end
		
		ShowLargeMirrorTimer.new()
	end
	
	/** Show large mirror timer. */
	class ShowLargeMirrorTimer extends Timer
		protected var int state
		
		func new() super(0, true)
		end
		
		func void fire()
			var WorldSpawnCharacter wsc = GameApp.getGameApp().getWorldSpawnCharacter()
			var BehaviorElement mirror = wsc.getMirrorLarge()
			if mirror == null
				giveUp()
				return
			end
			
			var ECBToggleVisibility.Instance toggleVisibility = ECBToggleVisibility.getInstanceIn(mirror)
			if toggleVisibility == null
				giveUp()
				return
			end
			
			var CharacterConfiguration character = wsc.getCharacter()
			var BaseVRActor vractor = wsc.getActor()
			if vractor == null or character == null
				return
			end
			
			select state
			case 0
				if character.isCalibrated()
					state++
				end
				
			case 1, 2, 3
				state++
				
			case 4
				state++
				toggleVisibility.repositionHmd(vractor, Vector.new(0, 0, 0.5))
				toggleVisibility.setVisible(true)
				
			else
				giveUp()
			end
		end
	end
end
