/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Actions

pin Democap.Behaviors
pin Democap.Elements

pin Dragengine.Gui.Layouts
pin Dragengine.Scenery


/**
 * BaseVRActor action running while animation is recorded.
 */
class AARecordAnimation extends AABase
	enum State
		prepare
		recording
		finished
		done
	end
	
	
	
	protected var ECBVRHudInfo.Instance vrHudInfo
	protected var ECBAGrab.Instance grabRightHand
	protected var ECBAGrab.Instance grabLeftHand
	protected var Panel panelInfo
	protected var RangeModel modelProgress
	protected var State state
	protected var float elapsedTime
	protected var float waitTime
	protected var float waitTimeFinished
	
	
	
	/** Create action. */
	public func new()
		state = State.prepare
		elapsedTime = 0
		waitTime = 3
		waitTimeFinished = 1
	end
	
	
	
	/** Action has been activated. */
	public func void activate(BehaviorElement actor)
		super.activate(actor)
		
		stopPointingAtAnything()
		
		grabRightHand.getGrabber().setEnabled(true)
		grabLeftHand.getGrabber().setEnabled(true)
		
		if vrHudInfo != null
			modelProgress = DefaultRangeModel.new(0, 100, 1, 0, 1)
			
			panelInfo = Panel.new(StackLayout.new(), block Panel p
				p.setDesignerSelector("Panel.HudInfo.Recording")
				
				p.addWidget(DisplayRotatingImage.new(Image.new("/content/gui/images/prepare_recording.png")))
				
				p.addWidget(Panel.new(CentrizedBoxLayout.new(LayoutAxis.y, 0.5, 0.735), block Panel p2
					var ProgressBar progressBar = ProgressBar.new(Orientation.horizontal, modelProgress)
					progressBar.setDesignerSelector("ProgressBar.HudInfo.Recording")
					progressBar.setShowPercentage(false)
					p2.addWidget(progressBar)
				end))
			end)
			
			vrHudInfo.addPanel(panelInfo)
		end
		
		GameApp.getGameApp().getRecordScene().prepare()
	end
	
	/** Deactivate action. */
	public func void deactivate()
		GameApp.getGameApp().getRecordScene().stop(true)
		removeHudInfoPanel()
		modelProgress = null
	end
	
	/**
	 * Init behaviors
	 */
	protected func void initBehaviors()
		super.initBehaviors()
		
		var MoCapActor mcactor = actor cast MoCapActor
		
		vrHudInfo = ECBVRHudInfo.getInstanceIn(actor)
		grabRightHand = mcactor.grabRightHand
		grabLeftHand = mcactor.grabLeftHand
	end
	
	
	
	/** Player think. */
	public func void playerThink(float elapsed)
		// no super call on purpose
		
		var SessionSettings settings = SessionSettings.get()
		projectToGround.setEnabled(settings.getProjectToGround())
	end
	
	
	
	/** Trigger pulled. */
	public func void triggerPull(bool rightHand)
		if rightHand
			if grabRightHand.triggerPull()
				
			end
			
		else
			if grabLeftHand.triggerPull()
				
			end
		end
	end
	
	/** Trigger released. */
	public func void triggerRelease(bool rightHand)
		if rightHand
			grabRightHand.triggerRelease()
			
		else
			grabLeftHand.triggerRelease()
		end
	end
	
	
	
	/** Menu button pressed. */
	public func void menuPress(bool rightHand)
		stopRecording()
	end
	
	/** Stop recording. */
	public func void stopRecording()
		GameApp.getGameApp().getRecordScene().stop(true)
		
		select state
		case State.prepare
			removeHudInfoPanel()
			state = State.done
			aiAction.setAction(AADefault.new())
			
		case State.recording
			elapsedTime = 0
			state = State.finished
			
			removeHudInfoPanel()
			
			if vrHudInfo != null
				panelInfo = Panel.new(StackLayout.new(), block Panel p
					p.setDesignerSelector("Panel.HudInfo.Recording")
					p.addWidget(DisplayRotatingImage.new(Image.new("/content/gui/images/finished_recording.png")))
				end)
				
				vrHudInfo.addPanel(panelInfo)
			end
		end
	end
	
	
	
	/** Grip grab. */
	public func void gripGrab(bool rightHand)
		if rightHand
			if grabRightHand.grab()
			end
			
		else
			if grabLeftHand.grab()
			end
		end
	end
	
	/** Grip ungrab. */
	public func void gripUngrab(bool rightHand)
		if rightHand
			grabRightHand.ungrab()
			
		else
			grabLeftHand.ungrab()
		end
	end
	
	
	
	/** Frame update. */
	public func void think(float elapsed)
		super.think(elapsed)
		
		grabRightHand.updateGrab()
		grabLeftHand.updateGrab()
		
		select state
		case State.prepare
			if GameApp.getGameApp().getRecordScene().getState() != RecordScene.State.preparing
				stopRecording()
				return
			end
			
			elapsedTime += elapsed
			
			if modelProgress != null
				modelProgress.setValue(DEMath.linearStep(elapsedTime, 0, waitTime, 0, 100) cast int)
			end
			
			if elapsedTime >= waitTime
				removeHudInfoPanel()
				
				if vrHudInfo != null
					panelInfo = Panel.new(StackLayout.new(), block Panel p
						p.setDesignerSelector("Panel.HudInfo.Recording")
						
						p.addWidget(Panel.new(CentrizedBoxLayout.new(LayoutAxis.y, 0.7, 0.3), block Panel p2
							p2.addWidget(DisplayImage.new(Image.new("/content/gui/images/recording.png")))
						end))
					end)
					vrHudInfo.addPanel(panelInfo)
				end
				
				state = State.recording
				
				GameApp.getGameApp().getRecordScene().record()
			end
			
		case State.recording
			if GameApp.getGameApp().getRecordScene().getState() != RecordScene.State.recording
				stopRecording()
			end
			
		case State.finished
			elapsedTime += elapsed
			
			if elapsedTime >= waitTimeFinished
				removeHudInfoPanel()
				state = State.done
				aiAction.setAction(AADefault.new())
			end
		end
	end
	
	
	
	/** Remove and dispose hud info panel if present. */
	protected func void removeHudInfoPanel()
		if vrHudInfo != null and panelInfo != null
			vrHudInfo.removePanel(panelInfo)
			panelInfo.safeDispose()
			panelInfo = null
		end
	end
end
