/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Actions

pin Democap.Behaviors

pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * Default BaseVRActor action. Used when the character is spawned in the world but no
 * particular action is running. This is the default action characters spawn with.
 */
class AADefault extends AABase
	/** Factory for loading actor actions. */
	public class Factory implements PersistencyFactory, ECBehaviorActorAIAction.ActionFactory
		public static fixed var String name = "AADefault"
		
		public func new()
		end
		
		public func Persistable readObjectFromFile(PersistencyEnvironment env, FileReader reader)
			return AADefault.new()
		end
		
		public static func void registerFactory(Persistency persistency)
			persistency.addFactory(name, Factory.new())
		end
		
		public func BaseActorAction createAction(ECBehaviorActorAIAction.Instance instance)
			return AADefault.new()
		end
	end
	
	
	
	/** Create action. */
	public func new()
	end
	
	
	
	/** Trigger pulled. */
	public func void triggerPull(bool rightHand)
		if rightHand
			if vrRightHandPointAt.hasVRHandPointAtElement()
				pointAtPull(vrRightHandPointAt)
			end
			
		else
			if vrLeftHandPointAt.hasVRHandPointAtElement()
				pointAtPull(vrLeftHandPointAt)
			end
		end
	end
	
	/** Trigger released. */
	public func void triggerRelease(bool rightHand)
		if rightHand
			if vrRightHandPointAt.hasVRHandPointAtElement()
				pointAtRelease(vrRightHandPointAt)
			end
			
		else
			if vrLeftHandPointAt.hasVRHandPointAtElement()
				pointAtRelease(vrLeftHandPointAt)
			end
		end
	end
	
	
	
	/** Menu button pressed. */
	public func void menuPress(bool rightHand)
		if rightHand
			if ECBCharacterConfiguration.getInstanceIn(actor) != null
				aiAction.setAction(AACalibrate.new())
			end
			
		else
			var ECBRecordAnimation.Instance behavior = ECBRecordAnimation.getInstanceIn(actor)
			if behavior != null and not behavior.isRecording()
				aiAction.setAction(AARecordAnimation.new())
			end
		end
	end
	
	/** Menu button released. */
	public func void menuRelease(bool rightHand)
	end
	
	
	
	/** Secondary button pressed. */
	public func void secondaryPress(bool rightHand)
	end
	
	/** Secondary button released. */
	public func void secondaryRelease(bool rightHand)
	end
	
	
	
	/** Pointing at element. */
	public func void pointAt(ECBehaviorVRHandPointAt.Instance behavior)
		var BehaviorElement element = behavior.getPointAtBehaviorElement()
		var DVector hitPoint = behavior.getPointAtHitPoint()
		if element == null or hitPoint == null
			return
		end
		
		// interact with desktop widget if present
		if element.findInstance(block ECBehaviorControlDesktop.Instance each
// 			log("check " + each.planePosition(hitPoint) + " " + each.desktopPoint(hitPoint))
			return each.moveMouse(hitPoint)
		end) != null
			return
		end
	end
	
	/** Pull trigger on pointed at element. */
	public func void pointAtPull(ECBehaviorVRHandPointAt.Instance behavior)
		var BehaviorElement element = behavior.getPointAtBehaviorElement()
		var DVector hitPoint = behavior.getPointAtHitPoint()
		if element == null or hitPoint == null
			return
		end
		
		// interact with desktop widget if present
		if element.findInstance(block ECBehaviorControlDesktop.Instance each
			if each.planePosition(hitPoint) != null
				each.leftMousePress()
				return true
				
			else
				return false
			end
		end) != null
			return
		end
	end
	
	/** Release trigger on pointed at element. */
	public func void pointAtRelease(ECBehaviorVRHandPointAt.Instance behavior)
		var BehaviorElement element = behavior.getPointAtBehaviorElement()
		var DVector hitPoint = behavior.getPointAtHitPoint()
		if element == null or hitPoint == null
			return
		end
		
		// interact with desktop widget if present
		if element.findInstance(block ECBehaviorControlDesktop.Instance each
			if each.planePosition(hitPoint) != null
				each.leftMouseRelease()
				return true
				
			else
				return false
			end
		end) != null
			return
		end
	end
	
	
	
	/** Frame update thinking. */
	public func void playerThink(float elapsed)
		// interact with pointed at elements
		if vrRightHandPointAt.hasVRHandPointAtElement()
			pointAt(vrRightHandPointAt)
		end
// 		if vrLeftHandPointAt.hasVRHandPointAtElement()
// 			pointAt(vrLeftHandPointAt)
// 		end
	end
	
	
	
	/** Name of PersistencyFactory required to load object from file. */
	public func String persistencyFactoryName()
		return Factory.name
	end
end
