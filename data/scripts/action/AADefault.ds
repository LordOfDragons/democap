/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Actions

pin Democap.Behaviors

pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * Default BaseVRActor action. Used when the character is spawned in the world but no
 * particular action is running. This is the default action characters spawn with.
 */
class AADefault extends AABase
	/** Factory for loading actor actions. */
	public class Factory implements PersistencyFactory, ECBehaviorActorAIAction.ActionFactory
		public static fixed var String name = "AADefault"
		
		public func new()
		end
		
		public func Persistable readObjectFromFile(PersistencyEnvironment env, FileReader reader)
			return AADefault.new()
		end
		
		public static func void registerFactory(Persistency persistency)
			persistency.addFactory(name, Factory.new())
		end
		
		public func BaseActorAction createAction(ECBehaviorActorAIAction.Instance instance)
			return AADefault.new()
		end
	end
	
	
	
	protected var ECBAControlDesktop.Instance controlDesktop
	protected var ECBVRHudInfo.Instance vrHudInfo
	
	
	
	/** Create action. */
	public func new()
	end
	
	
	
	/** Init behaviors. */
	protected func void initBehaviors()
		super.initBehaviors()
		
		controlDesktop = ECBAControlDesktop.getInstanceIn(actor)
		vrHudInfo = ECBVRHudInfo.getInstanceIn(actor)
	end
	
	
	/** Trigger pulled. */
	public func void triggerPull(bool rightHand)
		if rightHand
			if vrRightHandPointAt.hasVRHandPointAtElement()
				pointAtPull(vrRightHandPointAt)
			end
			
		else
			if vrLeftHandPointAt.hasVRHandPointAtElement()
				pointAtPull(vrLeftHandPointAt)
			end
		end
	end
	
	/** Trigger released. */
	public func void triggerRelease(bool rightHand)
		if rightHand
			if vrRightHandPointAt.hasVRHandPointAtElement()
				pointAtRelease(vrRightHandPointAt)
			end
			
		else
			if vrLeftHandPointAt.hasVRHandPointAtElement()
				pointAtRelease(vrLeftHandPointAt)
			end
		end
	end
	
	
	
	/** Menu button pressed. */
	public func void menuPress(bool rightHand)
		var BehaviorElement vrmenu = GameApp.getGameApp().getWorldSpawnCharacter().getVRMenu()
		if vrmenu == null
			return
		end
		
		var ECBToggleVisibility.Instance toggleVisibility = ECBToggleVisibility.getInstanceIn(vrmenu)
		if toggleVisibility == null
			return
		end
		
		if toggleVisibility.getVisible()
			toggleVisibility.setVisible(false)
			
		else
			aiAction.setAction(AAShowToggleVisible.new(toggleVisibility,\
				rightHand, AAShowToggleVisible.Button.menu))
		end
	end
	
	/** Menu button released. */
	public func void menuRelease(bool rightHand)
	end
	
	
	
	/** Secondary button pressed. */
	public func void secondaryPress(bool rightHand)
	end
	
	/** Secondary button released. */
	public func void secondaryRelease(bool rightHand)
	end
	
	
	
	/** Touch track pad. */
	public func void trackPadTouch(bool rightHand)
		if rightHand
			vrRightHandPointAt.setEnabled(true)
			
		else
			vrLeftHandPointAt.setEnabled(true)
		end
	end
	
	/** Untouch track pad. */
	public func void trackPadUntouch(bool rightHand)
		if rightHand
			if controlDesktop != null and controlDesktop.getPointAt() == vrRightHandPointAt
				controlDesktop.cancel()
			end
			vrRightHandPointAt.setEnabled(false)
			
		else
			if controlDesktop != null and controlDesktop.getPointAt() == vrLeftHandPointAt
				controlDesktop.cancel()
			end
			vrLeftHandPointAt.setEnabled(false)
		end
	end
	
	
	
	/** Pointing at element. */
	public func void pointAt(ECBehaviorVRHandPointAt.Instance behavior)
		if controlDesktop != null and controlDesktop.pointAt(behavior)
			return
		end
	end
	
	/** Pull trigger on pointed at element. */
	public func void pointAtPull(ECBehaviorVRHandPointAt.Instance behavior)
		if controlDesktop != null and controlDesktop.pointAtPull(behavior)
			return
		end
	end
	
	/** Release trigger on pointed at element. */
	public func void pointAtRelease(ECBehaviorVRHandPointAt.Instance behavior)
		if controlDesktop != null and controlDesktop.pointAtRelease(behavior)
			return
		end
	end
	
	
	
	/** Frame update thinking. */
	public func void playerThink(float elapsed)
		// interact with pointed at elements
		if vrRightHandPointAt.getEnabled()
			pointAt(vrRightHandPointAt)
		end
		if vrLeftHandPointAt.getEnabled()
			pointAt(vrLeftHandPointAt)
		end
	end
	
	
	
	/** Start calibration. Return true if calibration started. */
	public func bool startCalibrate()
		if ECBCharacterConfiguration.getInstanceIn(actor) == null
			return false
		end
		
		aiAction.setAction(AACalibrate.new())
		return true
	end
	
	/** Start recording. Return true if recording started. */
	public func bool startRecording()
		if ECBCharacterConfiguration.getInstanceIn(actor) == null
			return false
		end
		
		aiAction.setAction(AARecordAnimation.new())
		return true
	end
	
	
	
	/** Name of PersistencyFactory required to load object from file. */
	public func String persistencyFactoryName()
		return Factory.name
	end
end
