/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap

pin Democap.Characters
pin Democap.MotionTransferSystem

pin Dragengine.Animators
pin Dragengine.LoadSave
pin Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.XML



/**
 * Load/Save character profile from/to XML file.
 */
class LoadCharacterProfile extends BaseXmlLoader
	/** Create loader. */
	public func new(Console console) this(console, "LoadCharacterProfile")
	end
	
	/** Create loader. */
	public func new(Console console, String name) super(console, name)
	end
	
	
	
	/** Load character profile from file. */
	public func CharacterProfile load(String filename)
		logLoadingFromFile(filename)
		
		var EasyXML document = EasyXML.new(filename)
		if document.hasParseFailed()
			logParsingFailed(document.getParseLog())
			throw EInvalidParam.new("parsing document failed")
		end
		
		var EasyXMLElement root = document.getRootElement()
		if not root.getTagName().equals("characterProfile")
			logUnknownTag(root)
			throw EInvalidParam.new("root tag name mismatch")
		end
		
		// name of profile is the file name without extension
		var CharacterProfile profile = CharacterProfile.new(File.new(filename).getName().substring(0, -7))
		
		readCharacterProfile(root, profile)
		return profile
	end
	
	/** Save character profile to file. */
	public func void save(String filename, CharacterProfile profile)
		if profile == null
			throw ENullPointer.new("profile")
		end
		
		logSavingFromFile(filename)
		
		var EasyXML document = EasyXML.new()
		var EasyXMLElement root = document.getRootElement()
		
		root.setTagName("characterProfile")
		
		writeCharacterProfile(root, profile)
		
		var MemoryFile safe = MemoryFile.new("safe")
		document.writeToFile(safe.getWriter(false), false)
		FileWriter.new(filename).writeData(safe.getReader())
	end
	
	
	
	/** Read character profile tag. */
	public func void readCharacterProfile(EasyXMLElement root, CharacterProfile profile)
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("appearance")
				readAppearance(element, profile.getAppearance())
				
			elif tagName.equals("configuration")
				readConfiguration(element, profile)
				
			elif tagName.equals("originBone")
				profile.setOriginBone(element.getFirstCData())
				
			elif tagName.equals("teleportBone")
				profile.setTeleportBone(element.getFirstCData())
				
			elif tagName.equals("shoulderLevel")
				profile.setShoulderLevel(element.getFirstCDataFloat())
				
			elif tagName.equals("previewMove")
				profile.setPreviewMove(element.getFirstCData())
				
			elif tagName.equals("boneAxis")
				profile.setBoneAxis(CharacterProfile.BoneAxis.named(element.getFirstCData()))
				
			elif tagName.equals("scale")
				profile.setScale(element.getFirstCDataFloat())
			end
		end)
	end
	
	/** Read appearance tag. */
	public func void readAppearance(EasyXMLElement root, CharacterAppearance appearance)
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("model")
				appearance.setPathModel(element.getFirstCData())
				
			elif tagName.equals("skin")
				appearance.setPathSkin(element.getFirstCData())
				
			elif tagName.equals("rig")
				appearance.setPathRig(element.getFirstCData())
				
			elif tagName.equals("animation")
				appearance.setPathAnimation(element.getFirstCData())
			end
		end)
	end
	
	/** Read configuration tag. */
	public func void readConfiguration(EasyXMLElement root, CharacterProfile profile)
		var CharacterConfiguration configuration = CharacterConfiguration.new(profile, root.getAttributeNamed("name"))
		var MotionTransferFactories motionTransferFactories = GameApp.getGameApp().getMotionTransferFactories()
		profile.getConfigurations().add(configuration)
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("scaleMode")
				configuration.setScaleMode(CharacterConfiguration.ScaleMode.named(element.getFirstCData()))
				
			elif tagName.equals("cameraBone")
				configuration.setCameraBone(element.getFirstCData())
				
			elif tagName.equals("cameraPosition")
				configuration.setCameraPosition(readVector(element))
				
			elif tagName.equals("cameraRotation")
				configuration.setCameraRotation(readVector(element))
				
			elif tagName.equals("grabBoneRight")
				configuration.setGrabBoneRight(element.getFirstCData())
				
			elif tagName.equals("grabTipBoneRight")
				configuration.setGrabTipBoneRight(element.getFirstCData())
				
			elif tagName.equals("grabBaseBoneRight")
				configuration.setGrabBaseBoneRight(element.getFirstCData())
				
			elif tagName.equals("grabBoneLeft")
				configuration.setGrabBoneLeft(element.getFirstCData())
				
			elif tagName.equals("grabTipBoneLeft")
				configuration.setGrabTipBoneLeft(element.getFirstCData())
				
			elif tagName.equals("grabBaseBoneLeft")
				configuration.setGrabBaseBoneLeft(element.getFirstCData())
				
			elif tagName.equals("moveCalibrate")
				configuration.setMoveCalibrate(element.getFirstCData())
				
			elif tagName.equals("calibrated")
				readConfigurationCalibrate(element, configuration)
				
			elif tagName.equals("trackerSlot")
				readTrackerSlot(element, configuration)
				
			elif tagName.equals("motionTransfer")
				var String type = element.getAttributeNamed("type")
				var MotionTransferFactory factory = motionTransferFactories.getAt(type)
				if factory == null
					logInvalidAttributeValue(element, "type", type)
					throw EInvalidParam.new("Invalid motion transfer type '" + type + "'")
				end
				
				var MotionTransfer transfer = factory.createMotionTransfer()
				transfer.load(this, element)
				
				configuration.getMotionTransfers().add(transfer)
			end
		end)
		
		configuration.getMotionTransfers().forEach(block MotionTransfer each
			each.postLoadInit(configuration)
		end)
	end
	
	/** Read configuration calibration tag. */
	public func void readConfigurationCalibrate(EasyXMLElement root, CharacterConfiguration configuration)
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("scale")
				configuration.setCalibrateScale(element.getFirstCDataFloat())
				configuration.markCalibrated()
				
			elif tagName.equals("matrix")
				configuration.setMatrixCalibrate(readMatrix(element))
				configuration.markCalibrated()
			end
		end)
	end
	
	/** Read matrix tag. */
	public func Matrix readMatrix(EasyXMLElement tag)
		return Matrix.new(\
			tag.getAttributeFloatNamed("a11"), tag.getAttributeFloatNamed("a12"), \
			tag.getAttributeFloatNamed("a13"), tag.getAttributeFloatNamed("a14"), \
			tag.getAttributeFloatNamed("a21"), tag.getAttributeFloatNamed("a22"), \
			tag.getAttributeFloatNamed("a23"), tag.getAttributeFloatNamed("a24"), \
			tag.getAttributeFloatNamed("a31"), tag.getAttributeFloatNamed("a32"), \
			tag.getAttributeFloatNamed("a33"), tag.getAttributeFloatNamed("a34"))
	end
	
	/** Read quaternion tag. */
	public func Quaternion readQuaternion(EasyXMLElement tag)
		return Quaternion.new(\
			tag.getAttributeFloatNamed("x"), tag.getAttributeFloatNamed("y"), \
			tag.getAttributeFloatNamed("z"), tag.getAttributeFloatNamed("w"))
	end
	
	/** Read tracker slot tag. */
	public func void readTrackerSlot(EasyXMLElement root, CharacterConfiguration configuration)
		var CharacterTrackerSlot slot = CharacterTrackerSlot.new(configuration, root.getAttributeNamed("name"))
		configuration.getTrackerSlots().add(slot)
		
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("type")
				slot.setType(CharacterTrackerSlot.Type.named(element.getFirstCData()))
				
			elif tagName.equals("position")
				slot.setPosition(readVector(element))
				
			elif tagName.equals("rotation")
				slot.setRotation(readVector(element))
				
			elif tagName.equals("targetPosition")
				slot.setTargetPosition(readVector(element))
				
			elif tagName.equals("targetRotation")
				slot.setTargetRotation(readVector(element))
				
			elif tagName.equals("inputDeviceType")
				slot.setInputDeviceType(InputDeviceType.named(element.getFirstCData()))
				
			elif tagName.equals("inputDevice")
				slot.setInputDeviceID(element.getFirstCData())
				
			elif tagName.equals("offsetPosition")
				slot.setOffsetPosition(readVector(element))
				
			elif tagName.equals("offsetRotation")
				slot.setOffsetRotation(readVector(element))
				
			elif tagName.equals("forceCalibrateRotation")
				slot.setForceCalibrateRotation(readVector(element))
				
			elif tagName.equals("calibrated")
				readTrackerSlotCalibrate(element, slot)
			end
		end)
	end
	
	/** Read tracker slot calibration tag. */
	public func void readTrackerSlotCalibrate(EasyXMLElement root, CharacterTrackerSlot slot)
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("matrix")
				slot.setCalibrateMatrix(readMatrix(element))
				
			elif tagName.equals("referenceMatrix")
				slot.setCalibrateReferenceMatrix(readMatrix(element))
				
			elif tagName.equals("recalibrateMatrix")
				slot.setRecalibrateMatrix(readMatrix(element))
			end
		end)
	end
	
	
	
	
	/** Write character profile. */
	public func void writeCharacterProfile(EasyXMLElement root, CharacterProfile profile)
		writeAppearance(root, profile.getAppearance())
		
		root.addDataTag("originBone", profile.getOriginBone())
		root.addDataTag("teleportBone", profile.getTeleportBone())
		root.addDataTag("shoulderLevel", profile.getShoulderLevel())
		root.addDataTag("previewMove", profile.getPreviewMove())
		root.addDataTag("boneAxis", profile.getBoneAxis().name())
		root.addDataTag("scale", profile.getScale())
		
		profile.getConfigurations().forEach(block CharacterConfiguration each
			writeConfiguration(root, each)
		end)
	end
	
	/** Write appearance. */
	public func void writeAppearance(EasyXMLElement root, CharacterAppearance appearance)
		var EasyXMLElement tag = root.addTag("appearance")
		tag.addDataTag("model", appearance.getPathModel())
		tag.addDataTag("skin", appearance.getPathSkin())
		tag.addDataTag("rig", appearance.getPathRig())
		tag.addDataTag("animation", appearance.getPathAnimation())
	end
	
	/** Write configuration. */
	public func void writeConfiguration(EasyXMLElement root, CharacterConfiguration configuration)
		var EasyXMLElement tag = root.addTag("configuration")
		tag.setAttribute("name", configuration.getName())
		
		tag.addDataTag("scaleMode", configuration.getScaleMode().name())
		tag.addDataTag("moveCalibrate", configuration.getMoveCalibrate())
		tag.addDataTag("cameraBone", configuration.getCameraBone())
		writeVector(tag, "cameraPosition", configuration.getCameraPosition())
		writeVector(tag, "cameraRotation", configuration.getCameraRotation())
		
		tag.addDataTag("grabBoneRight", configuration.getGrabBoneRight())
		tag.addDataTag("grabTipBoneRight", configuration.getGrabTipBoneRight())
		tag.addDataTag("grabBaseBoneRight", configuration.getGrabBaseBoneRight())
		tag.addDataTag("grabBoneLeft", configuration.getGrabBoneLeft())
		tag.addDataTag("grabTipBoneLeft", configuration.getGrabTipBoneLeft())
		tag.addDataTag("grabBaseBoneLeft", configuration.getGrabBaseBoneLeft())
		
		configuration.getTrackerSlots().forEach(block CharacterTrackerSlot each
			writeTrackerSlot(tag, each)
		end)
		
		configuration.getMotionTransfers().forEach(block MotionTransfer each
			var EasyXMLElement childTag = tag.addTag("motionTransfer")
			childTag.setAttribute("type", each.factoryID())
			each.save(this, childTag)
		end)
		
		writeConfigurationCalibrate(tag, configuration)
	end
	
	/** Write configuration calibration. */
	public func void writeConfigurationCalibrate(EasyXMLElement root, CharacterConfiguration configuration)
		var EasyXMLElement tag = root.addTag("calibrated")
		
		tag.addDataTag("scale", configuration.getCalibrateScale())
		writeMatrix(tag, "matrix", configuration.getMatrixCalibrate())
	end
	
	/** Write matrix. */
	public func void writeMatrix(EasyXMLElement root, String name, Matrix matrix)
		var EasyXMLElement tag = root.addTag(name)
		tag.setAttribute("a11", matrix.get11())
		tag.setAttribute("a12", matrix.get12())
		tag.setAttribute("a13", matrix.get13())
		tag.setAttribute("a14", matrix.get14())
		tag.setAttribute("a21", matrix.get21())
		tag.setAttribute("a22", matrix.get22())
		tag.setAttribute("a23", matrix.get23())
		tag.setAttribute("a24", matrix.get24())
		tag.setAttribute("a31", matrix.get31())
		tag.setAttribute("a32", matrix.get32())
		tag.setAttribute("a33", matrix.get33())
		tag.setAttribute("a34", matrix.get34())
	end
	
	/** Write quaternion. */
	public func void writeQuaternion(EasyXMLElement root, String name, Quaternion quaternion)
		var EasyXMLElement tag = root.addTag(name)
		tag.setAttribute("x", quaternion.getX())
		tag.setAttribute("y", quaternion.getY())
		tag.setAttribute("z", quaternion.getZ())
		tag.setAttribute("w", quaternion.getW())
	end
	
	/** Write tracker slot. */
	public func void writeTrackerSlot(EasyXMLElement root, CharacterTrackerSlot slot)
		var EasyXMLElement tag = root.addTag("trackerSlot")
		tag.setAttribute("name", slot.getName())
		
		tag.addDataTag("type", slot.getType().name())
		writeVector(tag, "position", slot.getPosition())
		writeVector(tag, "rotation", slot.getRotation())
		writeVector(tag, "targetPosition", slot.getTargetPosition())
		writeVector(tag, "targetRotation", slot.getTargetRotation())
		tag.addDataTag("inputDevice", slot.getInputDeviceID())
		tag.addDataTag("inputDeviceType", slot.getInputDeviceType().name())
		writeVector(tag, "offsetPosition", slot.getOffsetPosition())
		writeVector(tag, "offsetRotation", slot.getOffsetRotation())
		if slot.getForceCalibrateRotation() != null
			writeVector(tag, "forceCalibrateRotation", slot.getForceCalibrateRotation())
		end
		
		writeTrackerSlotCalibrate(tag, slot)
	end
	
	/** Write tracker slot calibrate. */
	public func void writeTrackerSlotCalibrate(EasyXMLElement root, CharacterTrackerSlot slot)
		var EasyXMLElement tag = root.addTag("calibrated")
		writeMatrix(tag, "matrix", slot.getCalibrateMatrix())
		writeMatrix(tag, "referenceMatrix", slot.getCalibrateReferenceMatrix())
		writeMatrix(tag, "recalibrateMatrix", slot.getRecalibrateMatrix())
	end
end
