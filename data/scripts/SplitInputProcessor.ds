/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap

pin Dragengine.Commands
pin Dragengine.Gui
pin Dragengine.Scenery



/**
 * BindingInputProcessor modified to forward mouse and keyboard inputs to application desktop.
 * Device add, remove and configuration changed are forwarded to both input processors.
 */
class SplitInputProcessor extends BindingInputProcessor
	var WidgetInputProcessor pDesktopProcessor
	
	
	
	/**
	 * Create input processor.
	 */
	func new(BindingManager bindingManager, Desktop desktop) super(bindingManager)
		pDesktopProcessor = WidgetInputProcessor.new(desktop)
	end
	
	
	
	/**
	 * Forward mouse and keyboard input to desktop processor. All others go to bindings.
	 */
	func void inputEvent(InputEvent event)
		select event.getType()
		case InputEventType.keyPress, InputEventType.keyRelease, \
			InputEventType.mousePress, InputEventType.mouseRelease, \
			InputEventType.mouseMove, InputEventType.mouseWheel
				pDesktopProcessor.inputEvent(event)
			
		case InputEventType.deviceAttached, InputEventType.deviceDetached, \
			InputEventType.deviceParamsChanged
				pDesktopProcessor.inputEvent(event)
				super.inputEvent(event)
			
		else
			super.inputEvent(event)
		end
	end
end
