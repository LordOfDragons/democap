/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap

pin Democap.Actors
pin Democap.Behaviors
pin Democap.Characters
pin Democap.Commands
pin Democap.Elements
pin Democap.Gui
pin Democap.MotionTransferSystem
pin Democap.Worlds

pin Dragengine.Commands
pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events
pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * Game Application.
 */
class GameApp extends BaseGameApp
	/** Toggle Show VR camera listener. */
	class ToggleShowVRCameraListener extends DefaultToggleModelListener
		public func new()
		end
		
		public func void toggledChanged(ToggleModel model)
			var WindowGameWorld window = GameApp.getGameApp().getWindowGameWorld()
			
			if model.getToggled()
				window.getWorldRenderer().setCamera(GameApp.getGameApp().getVRCamera())
				
			else
				window.getWorldRenderer().setCamera(window.getCamera())
			end
		end
	end
	
	
	
	private var ActorProfiles pActorProfiles
	private var ActorProfile pActiveActorProfile
	private var ActorProfile pDefaultActorProfile
	private var CharacterProfiles pCharacterProfiles
	private var LoadableWorlds pLoadableWorlds
	private var DefaultToggleModel pModelShowVRCamera
	
	private var MotionTransferFactories pMotionTransferFactories
	private var LoadActorProfile pLoadActorProfile
	private var LoadCharacterProfile pLoadCharacterProfile
	private var MutableID pNextElementClassID
	
	private var WorldSpawnCharacter pWorldSpawnCharacter
	private var Camera pVRCamera
	private var VRCameraDirector pVRCameraDirector
	private var ElementClassList pECListHandles
	private var ECBSelectable.Tracker pSelectionTracker
	
	private var WindowMain pWindowMain
	
	
	
	/**
	 * Create Game Application.
	 */
	public func new()
		pathDesktopGuiTheme = "/content/gui/main.guitheme.xml"
// 		defaultConsoleBufferSize = 100
	end
	
	
	
	/**
	 * Main window.
	 */
	public func WindowMain getWindowMain()
		return pWindowMain
	end
	
	
	/**
	 * Initialize game.
	 */
	public func void initGame()
		// has to come before super call since createAndAddElementClasses() uses it
		pECListHandles = ElementClassList.new()
		
		super.initGame()
		
		// has to come after super call since class list is filled not earlier
		addECListHandles()
		
		pModelShowVRCamera = DefaultToggleModel.new(true)
		pDefaultActorProfile = ActorProfile.new("Default")
		
		pMotionTransferFactories = MotionTransferFactories.new()
		addMotionTransferFactories()
		
		pNextElementClassID = MutableID.new(1)
		pLoadActorProfile = LoadActorProfile.new(getConsole())
		pLoadCharacterProfile = LoadCharacterProfile.new(getConsole())
		pSelectionTracker = ECBSelectable.Tracker.new()
		
		pActorProfiles = ActorProfiles.new("/content/actors")
		pCharacterProfiles = CharacterProfiles.new("/content/characters")
		pLoadableWorlds = LoadableWorlds.new("/content/worlds")
		
		pWorldSpawnCharacter = WorldSpawnCharacter.new()
		
		// modify render window to be a regular window showing the VR view
		var Desktop desktop = getDesktop()
		var WindowGameWorld windowGameWorld = getWindowGameWorld()
		windowGameWorld.setTitle("VR View")
		windowGameWorld.setPosition(Point.new(10, 30))
		windowGameWorld.setSize(desktop.getContainerSize() - Point.new(350, 50))
		windowGameWorld.setCanClose(false)
		windowGameWorld.setCanMaximize(false)
		windowGameWorld.setCanMinimize(false)
		windowGameWorld.setCanReorder(false)
		
		// create main window
		pWindowMain = WindowMain.new(desktop, false)
		pWindowMain.setQuitOnClose(true)
		
		// do not capture input. this allows the window to be used like regular windows
		InputSystem.setCaptureInputDevices(false)
		
		// show Drag[en]gine logo then launch the application
		WindowLogo.showDragengineLogo(this.getDesktop(), BlockActionListener.new(\
			block ActionEvent event
				launchApplication()
			end))
	end
	
	/**
	 * Prevent console window from being created. We will create our own.
	 */
	protected func WindowConsole createWindowConsole()
		return null
	end
	
	/**
	 * Launch example application.
	 */
	public func void launchApplication()
		//getWindowGameWorld().addWidget(ShoutConsole.new(getConsole()))
		
		// set input processor to forward mouse and keyboard input to the desktop widget
		// while processing all other inputs using bindings. adding, removing and changing
		// device events are forwarded to both input processors.
		setSplitInputProcessor()
		
		// start VR runtime. this can fail hence capture exceptions
		getConsole().addMessage("Start VR Runtime...")
		try
			VRSystem.startRuntime()
			
		catch Exception e
			getConsole().addMessage("Failed starting VR Runtime")
		end
		
		// load stuff
		pActorProfiles.loadAll()
		
		if pActorProfiles.getCount() > 0
			setActiveActorProfile(pActorProfiles.getAt(0))
		end
		
		pCharacterProfiles.loadAll()
		pLoadableWorlds.scanWorlds()
		
		// create VR camera
		pVRCamera = Camera.new()
		pVRCamera.setFov(80)
		pVRCamera.setViewDistance(300)
		pVRCamera.setLowestIntensity(20)
		pVRCamera.setHighestIntensity(20)
		pVRCamera.setAdaptionTime(30)
		
		// create VR camera director
		pVRCameraDirector = VRCameraDirector.new()
		pVRCameraDirector.setViewDistance(300)
		pVRCameraDirector.setLowestIntensity(20)
		pVRCameraDirector.setHighestIntensity(20)
		pVRCameraDirector.setAdaptionTime(30)
		pVRCameraDirector.setVRCamera(pVRCamera)
		
		// add model listeners
		pModelShowVRCamera.addListener(ToggleShowVRCameraListener.new())
		
		// add support to navigate the view
		var WindowGameWorld windowGameWorld = getWindowGameWorld()
		windowGameWorld.addMouseListener(RotateCameraMouseListener.new(\
			pVRCameraDirector, InputEventMouseButton.right, InputEventModifier.none))
		
		windowGameWorld.addMouseListener(PanCameraMouseListener.new(\
			pVRCameraDirector, InputEventMouseButton.right, InputEventModifier.shift))
		
		windowGameWorld.addMouseListener(MoveCameraMouseListener.new(\
			pVRCameraDirector, InputEventMouseButton.right, InputEventModifier.control))
		
		windowGameWorld.addMouseListener(ZoomCameraMouseListener.new(\
			pVRCameraDirector, InputEventMouseButton.right,\
			InputEventModifier.shift | InputEventModifier.control))
		
		windowGameWorld.addMouseListener(InteractMouseListener.new())
		
		// load default game world
		startLoadGameWorld(StartGame.new(getWindowGameWorld(), "/content/worlds/default.deworld"))
	end
	
	/** Create element classes and add them to element class list. */
	protected func void createAndAddElementClasses()
		super.createAndAddElementClasses()
		
		var ElementClassList eclist = getElementClassList()
		eclist.add(MoCapActorClass.new())
		eclist.add(VRMenuClass.new())
		eclist.add(MirrorLargeClass.new())
		eclist.add(CharacterPreviewClass.new())
		
		getLoaders().getElementClass().addXmlElementClasses(eclist, "/content/models", true)
	end
	
	/** Add handle element classes. */
	protected func void addECListHandles()
		var ElementClassList eclist = getElementClassList()
// 		pECListHandles.add(eclist.getNamed("HandleMoveX"))
	end
	
	/** Add commands. */
	protected func void createAndAddCommands()
		var CommandManager commands = getCommandManager()
// 		CommandsBAAMovement.addCommands(pCommandManager, pPlayerControlledActor)
// 		CommandsBAAInteract.addCommands(pCommandManager, pPlayerControlledActor)
		CommandsAAControllerInput.addCommands(commands, getPlayerControlledActor())
	end
	
	/**
	 * Create helper containing default bindings.
	 */
	public func DefaultBindingHelper defaultBindings()
		var DefaultBindingHelper helper = super.defaultBindings()
		
		CommandsAAControllerInput.addDefaultBindings(helper)
		
		// remove mouse and keyboard bindings since we redirect them
		if helper.getMouse() != null
			helper.removeAllDeviceBindings(helper.getMouse())
		end
		if helper.getKeyboard() != null
			helper.removeAllDeviceBindings(helper.getKeyboard())
		end
		
		return helper
	end
	
	/**
	 * Create motion transfer factories.
	 */
	protected func void addMotionTransferFactories()
		pMotionTransferFactories.add(MotionTransferChild.Factory.new())
		pMotionTransferFactories.add(MotionTransferIK.Factory.new())
		pMotionTransferFactories.add(MotionTransferFingers.Factory.new())
		pMotionTransferFactories.add(MotionTransferSlot.Factory.new())
		pMotionTransferFactories.add(MotionTransferBend.Factory.new())
		pMotionTransferFactories.add(MotionTransferCopy.Factory.new())
		pMotionTransferFactories.add(MotionTransferSecondary.Factory.new())
		pMotionTransferFactories.add(MotionTransferAnimation.Factory.new())
	end
	
	/**
	 * Cleaning up.
	 */
	public func void cleanUp()
		saveSettings()
		
		if pWindowMain != null
			pWindowMain.safeDispose()
			pWindowMain = null
		end
		
		if pWorldSpawnCharacter != null
			pWorldSpawnCharacter.dispose()
			pWorldSpawnCharacter = null
		end
		
		pLoadableWorlds = null
		
		if pCharacterProfiles != null
			pCharacterProfiles.dispose()
			pCharacterProfiles = null
		end
		
		pActiveActorProfile = null
		
		if pDefaultActorProfile != null
			pDefaultActorProfile.dispose()
			pDefaultActorProfile = null
		end
		
		if pActorProfiles != null
			pActorProfiles.dispose()
			pActorProfiles = null
		end
		
		pSelectionTracker = null
		pLoadCharacterProfile = null
		pLoadActorProfile = null
		pModelShowVRCamera = null
		pVRCameraDirector = null
		pECListHandles = null
		
		super.cleanUp()
	end
	
	/** Finished loading game world. */
	public func void finishLoadGameWorld()
		super.finishLoadGameWorld()
		
		if pVRCamera.getParentWorld() != null
			pVRCamera.getParentWorld().removeCamera(pVRCamera)
		end
		
		pWorldSpawnCharacter.setGameWorld(getWindowGameWorld().getGameWorld())
		
		getWindowGameWorld().getGameWorld().getWorld().addCamera(pVRCamera)
	end
	
	/** Set split input processor. */
	public func void setSplitInputProcessor()
		setInputProcessor(SplitInputProcessor.new(getBindingManager(), getDesktop()))
	end
	
	
	
	/** Get app instance for convenience. */
	static public func GameApp getGameApp()
		return getApp() cast GameApp
	end
	
	/** Actor profiles. */
	public func ActorProfiles getActorProfiles()
		return pActorProfiles
	end
	
	/** Active actor profile or null. */
	public func ActorProfile getActiveActorProfile()
		return pActiveActorProfile
	end
	
	/** Set active actor profile or null. */
	public func void setActiveActorProfile(ActorProfile profile)
		pActiveActorProfile = profile
	end
	
	/** Default actor profile or null. */
	public func ActorProfile getDefaultActorProfile()
		return pDefaultActorProfile
	end
	
	/** Character profiles. */
	public func CharacterProfiles getCharacterProfiles()
		return pCharacterProfiles
	end
	
	/** Loadable worlds. */
	public func LoadableWorlds getLoadableWorlds()
		return pLoadableWorlds
	end
	
	/** VR camera. */
	public func Camera getVRCamera()
		return pVRCamera
	end
	
	/** VR camera director. */
	public func VRCameraDirector getVRCameraDirector()
		return pVRCameraDirector
	end
	
	/** Show VR camera model. */
	public func DefaultToggleModel getModelShowVRCamera()
		return pModelShowVRCamera
	end
	
	
	
	/** Next unique element class ID generator. */
	public func MutableID getNextElementClassID()
		return pNextElementClassID
	end
	
	/** Motion transfer factories. */
	public func MotionTransferFactories getMotionTransferFactories()
		return pMotionTransferFactories
	end
	
	/** Load/save actor profile. */
	public func LoadActorProfile getLoadActorProfile()
		return pLoadActorProfile
	end
	
	/** Load/save character profile. */
	public func LoadCharacterProfile getLoadCharacterProfile()
		return pLoadCharacterProfile
	end
	
	/** World spawn character. */
	public func WorldSpawnCharacter getWorldSpawnCharacter()
		return pWorldSpawnCharacter
	end
	
	/** Handles element class list. */
	public func ElementClassList getECListHandles()
		return pECListHandles
	end
	
	/** Selection tracker. */
	public func ECBSelectable.Tracker getSelectionTracker()
		return pSelectionTracker
	end
end
