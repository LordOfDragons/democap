/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap

pin Democap.Characters

pin Dragengine.Commands
pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events
pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * Game Application.
 */
class GameApp extends BaseGameApp
	private var CharacterProfiles pCharacterProfiles
	private var CharacterProfile pActiveCharacterProfile
	
	private var LoadCharacterProfile pLoadCharacterProfile
	
	
	
	/**
	 * Create Game Application.
	 */
	public func new()
		pathDesktopGuiTheme = "/content/gui/main.guitheme.xml"
	end
	
	/**
	 * Initialize game.
	 */
	public func void initGame()
		super.initGame()
		
		// do not capture input. this allows the window to be used like regular windows
		InputSystem.setCaptureInputDevices(false)
		
		// show Drag[en]gine logo then launch the application
		WindowLogo.showDragengineLogo(this.getDesktop(), BlockActionListener.new(\
			block ActionEvent event
				launchApplication()
			end))
	end
	
	class TestListResLoad implements CharacterAppearance.ListenerResourcesLoaded
		public func new(): end
		public func void loadingFinished()
			GameApp.getGameApp().getConsole().addMessage("Loading resources finished")
		end
	end
	
	/**
	 * Launch example application.
	 */
	public func void launchApplication()
		getWindowGameWorld().addWidget(ShoutConsole.new(getConsole()))
		
		// start VR runtime. this can fail hence capture exceptions
		getConsole().addMessage("Start VR Runtime...")
		try
			VRSystem.startRuntime()
			
		catch Exception e
			WindowDialog.message(getWindowGameWorld(), "Start VR Runtime Failed", \
			e.toString(), null, null, WindowDialog.BlockResultListener.new(block Object result
				quitGame()
			end))
			return
		end
		
		// create other stuff
		pLoadCharacterProfile = LoadCharacterProfile.new(getConsole())
		
		pCharacterProfiles = CharacterProfiles.new("/characters")
		pCharacterProfiles.loadAll()
		
		setActiveCharacterProfile(pCharacterProfiles.getAt("Georgo"))
		
		pActiveCharacterProfile.getAppearance().loadResources(TestListResLoad.new())
		
		// load game world
		getConsole().addMessage("Loading world...")
		startLoadGameWorld(StartGame.new(getWindowGameWorld(), "/content/test/scene1/scene1.deworld"))
// 		startLoadGameWorld(StartGame.new(getWindowGameWorld(), "/content/worlds/default.deworld"))
	end
	
	/**
	 * Create element classes and add them to element class list.
	 */
	protected func void createAndAddElementClasses()
		super.createAndAddElementClasses()
		
		var ElementClassList eclist = getElementClassList()
		//eclist.add(MyElementClass.new())
		
		getLoaders().getElementClass().addXmlElementClasses(eclist, "/content/models", true)
	end
	
	/**
	 * Create helper containing default bindings.
	 */
	public func DefaultBindingHelper defaultBindings()
		var DefaultBindingHelper helper = super.defaultBindings()
		
		// remove mouse bindings. we redirect them to the operator window anyway
		if helper.getMouse() != null
			helper.removeAllDeviceBindings( helper.getMouse() )
		end
		
		return helper
	end
	
	/**
	 * Cleaning up.
	 */
	public func void cleanUp()
		super.cleanUp()
	end
	
	
	
	/** Get app instance for convenience. */
	static public func GameApp getGameApp()
		return getApp() cast GameApp
	end
	
	/** Character profiles. */
	public func CharacterProfiles getCharacterProfiles()
		return pCharacterProfiles
	end
	
	/** Active character profile or null. */
	public func CharacterProfile getActiveCharacterProfile()
		return pActiveCharacterProfile
	end
	
	/** Set active character profile or null. */
	public func void setActiveCharacterProfile(CharacterProfile profile)
		if profile == pActiveCharacterProfile
			return
		end
		pActiveCharacterProfile = profile
		// TODO notification
	end
	
	
	
	/** Load/save Character profile. */
	public func LoadCharacterProfile getLoadCharacterProfile()
		return pLoadCharacterProfile
	end
end
