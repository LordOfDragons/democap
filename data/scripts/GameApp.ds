/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap

requires "Introspection"

pin Democap.Actors
pin Democap.Behaviors
pin Democap.Characters
pin Democap.Commands
pin Democap.Elements
pin Democap.Gui
pin Democap.MotionTransferSystem
pin Democap.Worlds

pin Dragengine.Commands
pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events
pin Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.Services
pin Introspection



/**
 * Game Application.
 */
class GameApp extends BaseGameApp
	/** Collision filter bits. Extends BaseGameApp.CollisionFilterBit. */
	class CollisionFilterBit extends BaseGameApp.CollisionFilterBit
		/** Interaction. */
		public static fixed var int interaction = custom
	end
	
	/** World layer bits. Extends BaseGameApp.WorldLayerBit. */
	class WorldLayerBit extends BaseGameApp.WorldLayerBit
		/** Elements with this bit set show also in remote views. */
		public static fixed var int remoteView = custom
	end
	
	
	public static var int versionMajor = 1
	public static var int versionMinor = 2 // 0..99
	public static var int versionPatch = 0 // 0..9
	
	public static var String defaultCameraParameters = "/content/camera/default.decamera"
	
	
	var String pPathCaptureAnimations
	var String pPathProjects
	var String pPathObjects
	
	var ActorProfiles pActorProfiles
	var ActorProfile pActiveActorProfile
	var ActorProfile pDefaultActorProfile
	var CharacterProfiles pCharacterProfiles
	var LoadableWorlds pLoadableWorlds
	var SessionSettings pSessionSettings
	var SessionState pSessionState
	
	var MotionTransferFactories pMotionTransferFactories
	var LoadActorProfile pLoadActorProfile
	var LoadCharacterProfile pLoadCharacterProfile
	var LoadStageDirections pLoadStageDirections
	var MutableID pNextElementClassID
	var TrackControllerCaps pTrackControllerCaps
	
	var WorldSpawnCharacter pWorldSpawnCharacter
	var Camera pVRCamera
	var VRCameraDirector pVRCameraDirector
	var ElementClassList pECListHandles
	var ECBSelectable.Tracker pSelectionTracker
	var ECBCapturable.Tracker pCapturableTracker
	var ElementClassList pECListSceneObjects
	var Dictionary pInteractionBubbleButtonFactories
	
	var Project pProject
	var Scene pScene
	var PanelMain pPanelMain
	var PlaybackScene pPlaybackScene
	var RecordScene pRecordScene
	
	var Array pPatternsProject
	
	var Array pListeners
	
	var bool pGameArgsEnableVR
	var String pGameArgsLoadProject
	
	var DNServer pServer
	var HmdDisabledWorld pHmdDisabledWorld
	
	var Array pGlobalElementClasses
	
	var Array pModifications
	
	public var ParameterTree debugParamTree
	
	
	/**
	 * Create Game Application.
	 */
	func new()
		pathDesktopGuiTheme = "/content/gui/main.guitheme.xml"
		pathLanguagePacks = "/content/langpacks"
		defaultLanguagePackName = UnicodeString.newFromUTF8("English")
		
		pPathCaptureAnimations = "/capture/animations"
		pPathProjects = "/config/projects"
		pPathObjects = "/content/models/objects"
// 		defaultConsoleBufferSize = 100
		
		pPatternsProject = Array.newWith(FileExtension.new("DEMoCap Project", Array.newWith(".demcp"), ".demcp"))
		pGlobalElementClasses = Array.new()
		
		pModifications = Array.new()
		findModifications()
		
		Resources.load()
	end
	
	
	
	/** Path to overlay capture animations directory. */
	func String getPathCaptureAnimations()
		return pPathCaptureAnimations
	end
	
	/** Path to projects directory. */
	func String getPathProjects()
		return pPathProjects
	end
	
	/** Path to objects directory. */
	func String getPathObjects()
		return pPathObjects
	end
	
	/** Get app instance for convenience. */
	static func GameApp getGameApp()
		return getApp() cast GameApp
	end
	
	
	
	/** Main panel. */
	func PanelMain getPanelMain()
		return pPanelMain
	end
	
	
	
	/** Actor profiles. */
	func ActorProfiles getActorProfiles()
		return pActorProfiles
	end
	
	/** Active actor profile or null. */
	func ActorProfile getActiveActorProfile()
		return pActiveActorProfile
	end
	
	/** Set active actor profile or null. */
	func void setActiveActorProfile(ActorProfile profile)
		pActiveActorProfile = profile
	end
	
	/** Default actor profile or null. */
	func ActorProfile getDefaultActorProfile()
		return pDefaultActorProfile
	end
	
	/** Character profiles. */
	func CharacterProfiles getCharacterProfiles()
		return pCharacterProfiles
	end
	
	/** Loadable worlds. */
	func LoadableWorlds getLoadableWorlds()
		return pLoadableWorlds
	end
	
	/** VR camera. */
	func Camera getVRCamera()
		return pVRCamera
	end
	
	/** VR camera director. */
	func VRCameraDirector getVRCameraDirector()
		return pVRCameraDirector
	end
	
	/** Session settings. */
	func SessionSettings getSessionSettings()
		return pSessionSettings
	end
	
	/** Session state. */
	func SessionState getSessionState()
		return pSessionState
	end
	
	
	
	/** Next unique element class ID generator. */
	func MutableID getNextElementClassID()
		return pNextElementClassID
	end
	
	/** Motion transfer factories. */
	func MotionTransferFactories getMotionTransferFactories()
		return pMotionTransferFactories
	end
	
	/** Load/save actor profile. */
	func LoadActorProfile getLoadActorProfile()
		return pLoadActorProfile
	end
	
	/** Load/save character profile. */
	func LoadCharacterProfile getLoadCharacterProfile()
		return pLoadCharacterProfile
	end
	
	/** Load/save stage directions. */
	func LoadStageDirections getLoadStageDirections()
		return pLoadStageDirections
	end
	
	/** Track hand controller capabilities. */
	func TrackControllerCaps getTrackControllerCaps()
		return pTrackControllerCaps
	end
	
	/** World spawn character. */
	func WorldSpawnCharacter getWorldSpawnCharacter()
		return pWorldSpawnCharacter
	end
	
	/** Handles element class list. */
	func ElementClassList getECListHandles()
		return pECListHandles
	end
	
	/** Scene object element class list. */
	func ElementClassList getECListSceneObjects()
		return pECListSceneObjects
	end
	
	/** Selection tracker. */
	func ECBSelectable.Tracker getSelectionTracker()
		return pSelectionTracker
	end
	
	/** Captured tracker. */
	func ECBCapturable.Tracker getCapturableTracker()
		return pCapturableTracker
	end
	
	/** Interaction bubble button factories as Dictionary of String key and ECBInteractionBubble.ButtonFactory value. */
	func Dictionary getInteractionBubbleButtonFactories()
		return pInteractionBubbleButtonFactories
	end
	
	/** Server. */
	func DNServer getServer()
		return pServer
	end
	
	
	
	/** Project. */
	func Project getProject()
		return pProject
	end
	
	/** Set project. */
	func void setProject(Project project)
		if project == pProject
			return
		end
		
		pWorldSpawnCharacter.setCharacter(null) // avoid problems
		setScene(null) // saves project
		removeNonGlobalElementClasses()
		var Project disposeProject = pProject
		
		pProject = project
		
		if project != null
			try
				project.loadElementClasses()
				
			catch Exception e
				getConsole().addError("open project failed (load element classes)", e)
				WindowDialog.message(getWindowGameWorld(), "Open Project",\
					"Failed opening project (load element classes)\n" + e, null, null, null)
			end
		end
		
		pListeners.forEach(block GameListener each
			each.projectChanged(this)
		end)
		
		if disposeProject != null
			disposeProject.dispose()
		end
		
		pCharacterProfiles.reloadAll()
		pLoadableWorlds.rescanAllWorlds()
	end
	
	/** Scene. */
	func Scene getScene()
		return pScene
	end
	
	/** Set scene. */
	func void setScene(Scene scene)
		if scene == pScene
			return
		end
		
		pRecordScene.stop(true)
		pPlaybackScene.stop()
		pSelectionTracker.clear()
		pCapturableTracker.clear()
		
		if pScene != null
			pScene.getFileUsage().setLocked(true)
			
			try
				cancelLoadGameWorld()
				
				if getWindowGameWorld().getGameWorld() != null
					pScene.saveWorld(getWindowGameWorld().getGameWorld())
					pWorldSpawnCharacter.setGameWorld(null)
					getWindowGameWorld().setGameWorld(null)
				end
				
			catch Exception e
				getConsole().addError("setGameApp.setScene", e)
				pWorldSpawnCharacter.setGameWorld(null)
				getWindowGameWorld().setGameWorld(null)
				pScene.getFileUsage().setLocked(false)
				throw
			end
			
			pScene.getFileUsage().setLocked(false)
			pProject.save()
		end
		
		pScene = scene
		
		if scene != null
			scene.loadWorld(pProject, null)
		end
		
		pListeners.forEach(block GameListener each
			each.sceneChanged(this)
		end)
	end
	
	/** Playback scene. */
	func PlaybackScene getPlaybackScene()
		return pPlaybackScene
	end
	
	/** Record scene. */
	func RecordScene getRecordScene()
		return pRecordScene
	end
	
	/** File dialog patterns for project files as Array of FileExtension. */
	func Array getPatternsProject()
		return pPatternsProject
	end
	
	func HmdDisabledWorld getHmdDisabledWorld()
		return pHmdDisabledWorld
	end
	
	/** Remove all non-global element classes without disposing of them. */
	func void removeNonGlobalElementClasses()
		var ElementClassList eclist = getElementClassList()
		var Array collect = Array.new()
		
		eclist.forEach(block ElementClass each
			if not pGlobalElementClasses.has(each)
				collect.add(each)
			end
		end)
		
		collect.forEach(block ElementClass each
			eclist.removeNoDispose(each)
		end)
	end
	
	/** Add handle element classes. */
	public func void storeECListHandles()
		pECListHandles.removeAllNoDispose()
		getElementClassList().forEachCastable(block BehaviorElementClass each
			if ECBInteractHandle.getBehaviorIn(each) != null
				pECListHandles.add(each)
			end
		end)
	end
	
	/** Add scene object element classes. */
	public func void storeECListSceneObjects()
		pECListSceneObjects.removeAllNoDispose()
		getElementClassList().forEachCastable(block BehaviorElementClass each
			var ECBSceneObject sceneObject = ECBSceneObject.getBehaviorIn(each)
			if sceneObject != null and sceneObject.addActorOffset.getVector() != null
				pECListSceneObjects.add(each)
			end
		end)
	end
	
	/**
	 * Run block on each found modification.
	 * 
	 * Block is called with \ref Modification argument.
	 */
	func void forEachModification(Block ablock)
		pModifications.forEach(ablock)
	end
	
	
	/** Add listener. */
	func void addListener(GameListener listener)
		if listener == null
			throw ENullPointer.new("listener")
		end
		pListeners.add(listener)
	end
	
	/** Remove listener. */
	func void removeListener(GameListener listener)
		pListeners.remove(listener)
	end
	
	/** Notify listeners saved animations changed. */
	func void notifySavedAnimationsChanged()
		pListeners.forEach(block GameListener each
			each.savedAnimationsChanged(this)
		end)
	end
	
	
	
	/** Find modificaitons. */
	private func void findModifications()
		Engine.log("Find modifications")
		
		var Class c, ns
		try
			ns = Introspection.Class.new("Democap.Modifications")
		catch Exception e
			return
		end
		
		var int i, count = ns.getClassCount()
		var Modification mod
		
		for i = 0 to count
			c = ns.getClass(i)
			if c.getClassType() != Class.CLASS
				continue
			end
			
			try
				mod = c.getFunction("new", Array.new()).call(null, Array.new()) cast Modification
				if mod == null
					throw ENullPointer.new("constructor returned object")
				end
				
				pModifications.add(mod)
				Engine.log("- " + c.getName())
				
			catch Exception e
				Engine.log("Failed loading modification class " + c.getName())
				throw e
			end
		end
	end
	
	/** Initialize game. */
	func void initGame()
		pListeners = Array.new()
		pPlaybackScene = PlaybackScene.new()
		pRecordScene = RecordScene.new()
		pSessionState = SessionState.new()
		
		// has to come before super call since createAndAddElementClasses() uses it
		pECListHandles = ElementClassList.new()
		pECListSceneObjects = ElementClassList.new()
		pInteractionBubbleButtonFactories = Dictionary.new()
		
		super.initGame()
		
		// debug
		FileUsageManager.debugUsage = debugParamTree.getBoolAt("FileUsageManager/Enable", false)
		CharacterConfiguration.debugAnimatorDefinition =\
			debugParamTree.getBoolAt("CharacterConfiguration/LogAnimatorDefinition", false)
		
		// only enable this in debug build
		getLoaders().getPersistency().setDebugEnableCanaryValue(true)
		
		// has to come after super call since class list is filled not earlier
		addInteractionBubbleButtonFactories()
		storeECListHandles()
		storeECListSceneObjects()
		
		getElementClassList().forEach(block ElementClass each
			pGlobalElementClasses.add(each)
		end)
		
		pTrackControllerCaps = TrackControllerCaps.new()
		getBindingManager().addListener(pTrackControllerCaps)
		pTrackControllerCaps.updateCapabilities(getBindingManager())
		
		pDefaultActorProfile = ActorProfile.new("Default")
		
		pMotionTransferFactories = MotionTransferFactories.new()
		addMotionTransferFactories()
		
		pNextElementClassID = MutableID.new(1)
		pLoadActorProfile = LoadActorProfile.new(getConsole())
		pLoadCharacterProfile = LoadCharacterProfile.new(getConsole())
		pLoadStageDirections = LoadStageDirections.new(getConsole())
		pSelectionTracker = ECBSelectable.Tracker.new()
		pCapturableTracker = ECBCapturable.Tracker.new()
		
		pActorProfiles = ActorProfiles.new("/config/actors")
		pCharacterProfiles = CharacterProfiles.new("/config/characters")
		
		pLoadableWorlds = LoadableWorlds.new("/content/worlds")
		
		pWorldSpawnCharacter = WorldSpawnCharacter.new()
		
		pServer = DNServer.new()
		
		// allow moving mouse outside desktop
		getDesktop().setAllowMoveOutsideDesktop(true)
		
		// modify game world window. add main panel to the right side
		pPanelMain = PanelMain.new(getDesktop(), false)
		getWindowGameWorld().getPanelBorder().addWidget(pPanelMain, BorderLayout.Area.right)
		
		// do not capture input. this allows the window to be used like regular windows
		InputSystem.setCaptureInputDevices(false)
		
		// parse game arguments
		parseGameArguments()
		
		pModifications.forEach(block Modification each
			each.initGame(this)
		end)
		
		if restoreRestarted()
			return
		end
		
		// show Drag[en]gine logo then launch the application
		//WindowLogo.showDragengineLogo(this.getDesktop(), BlockActionListener.new(
		if pGameArgsEnableVR
			launchApplication()
			
		else
			WindowLogo.showImageLogo(this.getDesktop(), Image.new("/content/images/splashscreen.jpg"),\
			BlockActionListener.new(block ActionEvent event
				launchApplication()
			end))
		end
	end
	
	/**
	 * \brief Restore to state prior to restart if possible.
	 * \returns true if restored otherwise false.
	 */
	protected func bool restoreRestarted()
		var String info = getRestartInfo()
		if info.empty()
			return false
		end
		
		launchApplication()
		
		if info.equals("modsRequiredRestart")
		end
		
		return true
	end
	
	protected func void loadSettings()
		super.loadSettings()
		pSessionSettings = SessionSettings.new()
		
		debugParamTree = ParameterTree.new()
		if FileSystem.existsFile("/debug.ptree.xml")
			getLoaders().getParameterTree().loadFromFile("/debug.ptree.xml", debugParamTree)
		end
	end
	
	/**
	 * Prevent console window from being created. We will create our own.
	 */
	protected func WindowConsole createWindowConsole()
		return null
	end
	
	/**
	 * Launch example application.
	 */
	func void launchApplication()
		//getWindowGameWorld().addWidget(ShoutConsole.new(getConsole()))
		
		// first run handling
		var int version = versionMajor * 1000 + versionMinor * 10 + versionPatch
		if getSettings().getIntAt("firstRun", 0) < version
			firstRun()
			getSettings().setAt("firstRun", version)
			saveSettings()
		end
		
		// create hmd disabled world. this starts loading the resources asynchronously
		pHmdDisabledWorld = HmdDisabledWorld.new()
		
		// set input processor to forward mouse and keyboard input to the desktop widget
		// while processing all other inputs using bindings. adding, removing and changing
		// device events are forwarded to both input processors.
		setSplitInputProcessor()
		
		// load stuff
		pActorProfiles.loadAll()
		
		if pActorProfiles.getCount() > 0
			setActiveActorProfile(pActorProfiles.getAt(0))
		end
		
		pCharacterProfiles.loadAll()
		pLoadableWorlds.scanWorlds()
		
		// create VR camera and VR camera director
		pVRCamera = Camera.new()
		pVRCamera.setLayerMask(LayerMask.newWith(WorldLayerBit.default, WorldLayerBit.remoteView))
		
		pVRCameraDirector = createVRCameraDirector()
		pVRCameraDirector.setVRCamera(pVRCamera)
		
		getLoaders().getCamera().loadFromFile(defaultCameraParameters, pVRCameraDirector)
		pVRCameraDirector.setEnableGI(SessionSettings.get().getModelCameraEnableGI().getToggled())
		pVRCameraDirector.initCameraParameters()
		
		// add support to navigate the view. requires hud panel to be either set invisible
		// or to not allow hovering. doing the later in case a hud is required later on
		getPanelHud().setPreventHover(true)
		
		var WorldRenderer worldRenderer = getWindowGameWorld().getWorldRenderer()
		worldRenderer.addMouseListener(RotateCameraMouseListener.new(\
			pVRCameraDirector, InputEventMouseButton.right, InputEventModifier.none))
		
		worldRenderer.addMouseListener(PanCameraMouseListener.new(\
			pVRCameraDirector, InputEventMouseButton.right, InputEventModifier.shift))
		
		worldRenderer.addMouseListener(MoveCameraMouseListener.new(\
			pVRCameraDirector, InputEventMouseButton.right, InputEventModifier.control))
		
		worldRenderer.addMouseListener(ZoomCameraMouseListener.new(\
			pVRCameraDirector, InputEventMouseButton.right,\
			InputEventModifier.shift | InputEventModifier.control))
		
		worldRenderer.addMouseListener(InteractMouseListener.new())
		
		// load auto save project if present
		if pGameArgsLoadProject != null
			try
				setProject(Project.load(pGameArgsLoadProject))
				
			catch Exception e
				getConsole().addError("open project failed: " + pGameArgsLoadProject, e)
				WindowDialog.message(getWindowGameWorld(), "Open Project",\
					"Failed opening project\n" + pGameArgsLoadProject + "\n" + e, null, null, null)
			end
		end
		
		var String pathAutoSaveProject = File.new(pPathProjects, "autosave.demcp").getPath()
		if pProject == null
			if FileSystem.existsFile(pathAutoSaveProject)
				try
					setProject(Project.load(pathAutoSaveProject))
					
				catch Exception e
					getConsole().addError("Failed loading auto save project", e)
				end
			end
		end
		
		if pProject == null
			var Project project = Project.new(pathAutoSaveProject)
			project.getScenes().add(Scene.new("Scene"))
			project.save()
			setProject(project)
		end
		
		if pProject.getPostLoadActivateScene() != null
			setScene(pProject.getScenes().getNamed(pProject.getPostLoadActivateScene()))
			
		else
			setScene(pProject.getScenes().getAt(0))
		end
		
		pModifications.forEach(block Modification each
			each.launchApplication(this)
		end)
		
		// switch on VR if requested using game arguments
		if pGameArgsEnableVR
			pSessionSettings.getModelEnableVR().setToggled(true)
		end
	end
	
	/** First run. */
	protected func void firstRun()
		// copy initial content to overlay directory
		var File basePath = File.new(pCharacterProfiles.getDirectory())
		
		FileSystem.searchFiles("/content/initial/config/characters", false, block String path, FileType type
			if type == FileType.file
				FileWriter.new((basePath + File.new(path).getName()).getPath()).writeData(FileReader.new(path))
			end
			return true
		end)
	end
	
	protected func void createAndAddBehaviorFactories()
		super.createAndAddBehaviorFactories()
		
		var BehaviorFactoryList factories = getBehaviorFactories()
		factories.add(ECBAnimated.Factory.new())
		factories.add(ECBBehaviorGuiPanels.Factory.new())
		factories.add(ECBCameraFeedView.Factory.new())
		factories.add(ECBCapturedAnimations.Factory.new())
		factories.add(ECBColliderPhysics.Factory.new())
		factories.add(ECBComponent.Factory.new())
		factories.add(ECBCopyObject.Factory.new())
		factories.add(ECBCustomColor.Factory.new())
		factories.add(ECBGrabAttach.Factory.new())
		factories.add(ECBGrabbedEnableCamera.Factory.new())
		factories.add(ECBHelpTopic.Factory.new())
		factories.add(ECBHideCondition.Factory.new())
		factories.add(ECBHideWhileRecording.Factory.new())
		factories.add(ECBHighlightPointedAt.Factory.new())
		factories.add(ECBRecordAnimation.Factory.new())
		factories.add(ECBRemoteCamera.Factory.new())
		factories.add(ECBRenderableCamera.Factory.new())
		factories.add(ECBSceneObject.Factory.new())
		factories.add(ECBSelectable.Factory.new())
		factories.add(ECBShowInteractHandles.Factory.new())
		factories.add(ECBShowInteractionBubble.Factory.new())
		factories.add(ECBTemporaryGhost.Factory.new())
		factories.add(ECBToggleVisibility.Factory.new())
	end
	
	protected func void createAndAddElementClasses()
		super.createAndAddElementClasses()
		
		var ElementClassList eclist = getElementClassList()
		eclist.add(LoadingCharacterClass.new())
		eclist.add(VisualizeVRDeviceClass.new())
		eclist.add(MoCapActorClass.new())
		eclist.add(VRMenuClass.new("VRMenu", false))
		eclist.add(VRMenuClass.new("VRMenuWide", true))
		eclist.add(VRWristMenuClass.new("VRWristMenuRight", true))
		eclist.add(VRWristMenuClass.new("VRWristMenuLeft", false))
		eclist.add(MirrorLargeClass.new())
		eclist.add(CharacterPreviewClass.new())
		eclist.add(ActorMarkerClass.new())
		eclist.add(StaticPropClass.new())
		eclist.add(DynamicPropClass.new())
		eclist.add(VideoCameraClass.new())
		eclist.add(CapturedCharacterClass.new())
		eclist.add(GrabObjectClass.new())
		eclist.add(InteractHandleMoveClass.new())
		eclist.add(InteractHandleRotateClass.new())
		eclist.add(InteractHandleMoveHMDClass.new())
		eclist.add(InteractHandleHideClass.new())
		eclist.add(InteractHandleRemoveClass.new())
		eclist.add(InteractHandleTeleportClass.new())
		eclist.add(InteractHandleActorMarkerClass.new())
		eclist.add(InteractionBubbleClass.new())
		eclist.add(InvalidBrokenElementClass.new())
		
		pModifications.forEach(block Modification each
			each.createAndAddElementClasses(this)
		end)
		
		var LoadSave.LoadElementClass loadEClass = getLoaders().getElementClass()
		loadEClass.addXmlElementClasses(eclist, "/content/models", true)
		loadEClass.addXmlElementClasses(eclist, "/content/worlds", true)
	end
	
	/**
	 * \brief Reload after modifications changed.
	 */
	func void reloadAfterModsChanged()
		var String path = pProject.getPath()
		pWorldSpawnCharacter.setCharacter(null)
		setProject(null)
		
		getTranslationManager().removeAll()
		initLanguages()
		pSessionSettings.reloadLanguages()
		
		getElementClassList().removeAll()
		createAndAddElementClasses()
		
		storeECListHandles()
		storeECListSceneObjects()
		
		pGlobalElementClasses.removeAll()
		getElementClassList().forEach(block ElementClass each
			pGlobalElementClasses.add(each)
		end)
		
		pWorldSpawnCharacter.onModsChanged()
		pWorldSpawnCharacter.setGameWorld(getWindowGameWorld().getGameWorld())
		
		pCharacterProfiles.reloadAll()
		pLoadableWorlds.rescanAllWorlds()
		
		var Project project = Project.load(path)
		setProject(project)
		setScene(project.getScenes().getNamed(project.getPostLoadActivateScene()))
	end
	
	/** Add interaction bubble button factories. */
	protected func void addInteractionBubbleButtonFactories()
		pInteractionBubbleButtonFactories.setAt("remove", IBRemove.Factory.new())
		pInteractionBubbleButtonFactories.setAt("hide", IBHide.Factory.new())
		pInteractionBubbleButtonFactories.setAt("teleport", IBTeleport.Factory.new())
		pInteractionBubbleButtonFactories.setAt("record", IBRecord.Factory.new())
		pInteractionBubbleButtonFactories.setAt("capture", IBCapture.Factory.new())
		pInteractionBubbleButtonFactories.setAt("ghost", IBGhost.Factory.new())
		pInteractionBubbleButtonFactories.setAt("duplicate", IBDuplicate.Factory.new())
		
		pModifications.forEach(block Modification each
			each.addInteractionBubbleButtonFactories(this)
		end)
	end
	
	/** Add commands. */
	protected func void createAndAddCommands()
		var CommandManager commands = getCommandManager()
		CommandsBAAMovement.addCommands(commands, getPlayerControlledActor())
// 		CommandsBAAInteract.addCommands(commands, getPlayerControlledActor())
		CommandsAAControllerInput.addCommands(commands, getPlayerControlledActor())
	end
	
	/**
	 * Create helper containing default bindings.
	 */
	func DefaultBindingHelper defaultBindings()
		var DefaultBindingHelper helper = super.defaultBindings()
		
		if helper.hasVRHand(true)
			helper.vrHandBindStick(true, InputDeviceAxisType.stick, 0, "analogLookLR", "")
		end
		if helper.hasVRHand(false)
			helper.vrHandBindStick(false, InputDeviceAxisType.stick, 0, "analogMoveLR", "analogMoveFB")
		end
		
		CommandsAAControllerInput.addDefaultBindings(helper)
		
		// remove mouse and keyboard bindings since we redirect them
		if helper.getMouse() != null
			helper.removeAllDeviceBindings(helper.getMouse())
		end
		if helper.getKeyboard() != null
			helper.removeAllDeviceBindings(helper.getKeyboard())
		end
		
		return helper
	end
	
	/**
	 * Create motion transfer factories.
	 */
	protected func void addMotionTransferFactories()
		pMotionTransferFactories.add(MotionTransferChild.Factory.new())
		pMotionTransferFactories.add(MotionTransferIK.Factory.new())
		pMotionTransferFactories.add(MotionTransferFingers.Factory.new())
		pMotionTransferFactories.add(MotionTransferEyes.Factory.new())
		pMotionTransferFactories.add(MotionTransferFace.Factory.new())
		pMotionTransferFactories.add(MotionTransferSlot.Factory.new())
		pMotionTransferFactories.add(MotionTransferBend.Factory.new())
		pMotionTransferFactories.add(MotionTransferCopy.Factory.new())
		pMotionTransferFactories.add(MotionTransferBaseShiftSlots.Factory.new())
		pMotionTransferFactories.add(MotionTransferScaleSlots.Factory.new())
		pMotionTransferFactories.add(MotionTransferRotation.Factory.new())
		pMotionTransferFactories.add(MotionTransferSecondary.Factory.new())
		pMotionTransferFactories.add(MotionTransferAnimation.Factory.new())
		
		pMotionTransferFactories.add(MotionTransferAutoHuman.Factory.new())
		pMotionTransferFactories.add(MotionTransferAutoFPV.Factory.new())
		
		pModifications.forEach(block Modification each
			each.addMotionTransferFactories(this)
		end)
	end
	
	/** Create VR camera director. */
	protected func VRCameraDirector createVRCameraDirector()
		return VRCameraDirector.new()
	end
	
	/**
	 * Cleaning up.
	 */
	func void cleanUp()
		saveSettings()
		
		pModifications.forEach(block Modification each
			each.cleanUp(this)
		end)
		
		if pServer != null
			pServer.stopListening()
		end
		
		setProject(null) // has to come first since this saves the project... at least for now
		
		if getWindowGameWorld() != null
			getWindowGameWorld().setGameWorld(null) // avoid problems while cleaning up
		end
		if pPanelMain != null
			pPanelMain.safeDispose()
			pPanelMain = null
		end
		if pWorldSpawnCharacter != null
			pWorldSpawnCharacter.dispose()
			pWorldSpawnCharacter = null
		end
		
		pLoadableWorlds = null
		
		if pCharacterProfiles != null
			pCharacterProfiles.dispose()
			pCharacterProfiles = null
		end
		
		pActiveActorProfile = null
		
		if pDefaultActorProfile != null
			pDefaultActorProfile.dispose()
			pDefaultActorProfile = null
		end
		
		if pActorProfiles != null
			pActorProfiles.dispose()
			pActorProfiles = null
		end
		
		pServer = null
		pSelectionTracker = null
		pCapturableTracker = null
		pLoadStageDirections = null
		pLoadCharacterProfile = null
		pLoadActorProfile = null
		pSessionSettings = null
		pVRCameraDirector = null
		pECListHandles = null
		pECListSceneObjects = null
		pListeners = null
		pPlaybackScene = null
		pRecordScene = null
		pGlobalElementClasses = null
		pSessionState = null
		
		if pHmdDisabledWorld != null
			pHmdDisabledWorld.dispose()
			pHmdDisabledWorld = null
		end
		
		super.cleanUp()
	end
	
	/** Finished loading game world. */
	func void finishLoadGameWorld()
		super.finishLoadGameWorld()
		
		if pVRCamera.getParentWorld() != null
			pVRCamera.getParentWorld().removeCamera(pVRCamera)
		end
		
		pWorldSpawnCharacter.setGameWorld(getWindowGameWorld().getGameWorld())
		
		if pSessionSettings.getModelEnableHMD().getToggled()
			getWindowGameWorld().getGameWorld().getWorld().addCamera(pVRCamera)
			
		else
			pHmdDisabledWorld.getWorld().addCamera(pVRCamera)
		end
		
		pListeners.forEach(block GameListener each
			each.gameWorldChanged(this)
		end)
		
		pPlaybackScene.updatePlaytime()
		pSessionSettings.updateModelHudCamera()
	end
	
	/** Set split input processor. */
	func void setSplitInputProcessor()
		setInputProcessor(SplitInputProcessor.new(getBindingManager(), getDesktop()))
	end
	
	/** Render window size changed. */
	func void onResizeRenderWindow()
		super.onResizeRenderWindow()
		
		// resize console?
	end
	
	/** Parse game arguments. */
	protected func void parseGameArguments()
		var int i, count = getArgumentCount()
		var String arg
		
		for i = 0 to count
			arg = getArgumentAt(i)
			
			if arg.equals("--enable-vr")
				pGameArgsEnableVR = true
				
			elif pGameArgsLoadProject == null
				pGameArgsLoadProject = arg
				
			else
				getConsole().addMessage("Unknown game argument '" + arg + "'")
			end
		end
	end
end
