/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap

pin Democap.Characters

pin Dragengine.LoadSave
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * Motion capture project.
 * 
 * Projects are stored under "/projects" directory in the user game configure directory
 * as files of type "*.demcp" .
 */
class Project
	/** Animation directory name. */
	static public fixed var String animationDirectory = "animation"
	
	/** Export directory name. */
	static public fixed var String exportDirectory = "export"
	
	
	
	/** Animation path. */
	class AnimationPath
		private var UniqueID pID
		private var String pPath
		private var String pPathMeta
		private var String pPathDevices
		private var String pPathDevicesRig
		
		public func new(UniqueID id, String path, String pathMeta,\
		String pathDevices, String pathDevicesRig)
			pID = id
			pPath = path
			pPathMeta = pathMeta
			pPathDevices = pathDevices
			pPathDevicesRig = pathDevicesRig
		end
		
		public func UniqueID getID()
			return pID
		end
		
		public func String getPath()
			return pPath
		end
		
		public func String getPathMeta()
			return pPathMeta
		end
		
		public func String getPathDevices()
			return pPathDevices
		end
		
		public func String getPathDevicesRig()
			return pPathDevicesRig
		end
	end
	
	
	
	private var String pPath
	private var File pDataDirectory
	private var FileUsageManager pFileUsage
	private var MutableID pAnimationIDGenerator
	private var Scenes pScenes
	private var CharacterAnimations pSavedAnimations
	private var String pPostLoadActivateScene
	
	
	
	/** Create project. */
	public func new(String path)
		pPath = path
		pFileUsage = FileUsageManager.new()
		pAnimationIDGenerator = MutableID.new(1)
		pScenes = Scenes.new(pFileUsage)
		pSavedAnimations = CharacterAnimations.new(pFileUsage)
		updateDirectories()
	end
	
	/** Load project from file. */
	static public func Project load(String path)
		var PersistencyEnvironment env = PersistencyEnvironment.new(GameApp.getGameApp().getLoaders().getPersistency())
		var FileReader reader = env.getPersistency().getDebugEnableCanaryValue() \
			if FileReader.new(path) else FileReader.newZCompressed(path)
		
		var Project project = Project.new(path)
		
		select reader.readByte() // version
		case 0
			project.readV0(env, reader)
			
		case 1
			project.readV1(env, reader)
			
		else
			throw EInvalidParam.new("Unsupported scene file version")
		end
		
		if FileUsageManager.debugUsage
			project.pFileUsage.log(GameApp.getGameApp().getConsole(), "Project.load()")
		end
		return project
	end
	
	protected func void readV0(PersistencyEnvironment env, FileReader reader)
		reader.readByte() // flags
		
		var int i, count
		count = reader.readUShort()
		for i = 0 to count
			pScenes.add(Scene.new(env, reader))
		end
		
		pAnimationIDGenerator.readFromFile(reader)
		pPostLoadActivateScene = reader.readString8()
	end
	
	protected func void readV1(PersistencyEnvironment env, FileReader reader)
		readV0(env, reader)
		
		var int i, count
		count = reader.readUShort()
		for i = 0 to count
			pSavedAnimations.add(CharacterAnimation.new(reader))
		end
	end
	
	/** Dispose of list. */
	public func void dispose()
		pFileUsage.setDeleteFiles(false)
		pFileUsage.setLocked(true)
		
		pSavedAnimations.dispose()
		pScenes.dispose()
	end
	
	
	
	/** Project path. */
	public func String getPath()
		return pPath
	end
	
	/** Scenes. */
	public func Scenes getScenes()
		return pScenes
	end
	
	/** Post load active scene for loading use only. */
	public func String getPostLoadActivateScene()
		return pPostLoadActivateScene
	end
	
	/** Data directory. */
	public func File getDataDirectory()
		return pDataDirectory
	end
	
	/** Animation ID generator. */
	public func MutableID getAnimationIDGenerator()
		return pAnimationIDGenerator
	end
	
	/** Generate animation path. */
	public func AnimationPath nextAnimationPath()
		return nextAnimationPath("deanim", "derig")
	end
	
	/** Generate animation path. */
	public func AnimationPath nextAnimationPath(String extensionAnim, String extensionRig)
		var UniqueID id = pAnimationIDGenerator.nextID()
		var String base = animationDirectory + "/captured-" + id.toHexString()
		return AnimationPath.new(id,\
			base + "." + extensionAnim,\
			base + ".demca",\
			base + "-devices." + extensionAnim,\
			base + "-devices." + extensionRig)
	end
	
	/** Generate export animation path. */
	public func AnimationPath exportAnimationPath(String name, String extensionAnim, String extensionRig)
		/*
		var String safeName = ""
		var int i, len = name.getLength()
		var byte c
		
		for i = 0 to len
			c = name.getAt(i)
			if (c >= 'A' and c <= 'Z') or (c >= 'a' and c <= 'z') or (c >= '0' and c <= '9') \
			or c == '-' or c == ' '
				safeName = safeName + c
				
			else
				safeName = safeName + "%{:02x}".format(Array.newWith(c))
			end
		end
		*/
		
		var String base = exportDirectory + "/" + name
		return AnimationPath.new(null,\
			base + "." + extensionAnim,\
			base + ".demca",\
			base + "-devices." + extensionAnim,\
			base + "-devices." + extensionRig)
	end
	
	/** Get file usage. */
	public func FileUsageManager getFileUsage()
		return pFileUsage
	end
	
	/** Saved animations. */
	public func CharacterAnimations getSavedAnimations()
		return pSavedAnimations
	end
	
	
	
	/** Save to file. */
	public func void save()
		var GameApp app = GameApp.getGameApp()
		var Scene scene = app.getScene()
		var GameWorld gameWorld = app.getWindowGameWorld().getGameWorld()
		
		if scene != null and gameWorld != null
			scene.saveWorld(gameWorld)
		end
		
		var MemoryFile safe = MemoryFile.new("safe")
		
		var PersistencyEnvironment env = PersistencyEnvironment.new(app.getLoaders().getPersistency())
		var FileWriter writer = env.getPersistency().getDebugEnableCanaryValue()\
			if safe.getWriter(false) else safe.getWriterZCompressed()
		
		writer.writeByte(1) // version
		writer.writeByte(0) // flags
		
		writer.writeUShort(pScenes.getCount())
		pScenes.forEach(block Scene each
			each.writeToFile(env, writer)
		end)
		
		pAnimationIDGenerator.writeToFile(writer)
		
		if scene == null
			scene = pScenes.getAt(0)
		end
		writer.writeString8(scene.getName())
		
		writer.writeUShort(pSavedAnimations.getCount())
		pSavedAnimations.forEach(block CharacterAnimation each
			each.writeToFile(writer)
		end)
		
		FileWriter.new(pPath).writeData(safe.getReader())
	end
	
	/** Update data directory from path. */
	protected func void updateDirectories()
		var File file = File.new(pPath)
		var String name = file.getName()
		name = name.substring(0, name.findReverse('.'))
		pDataDirectory = File.new(file.getParent(), name + "-data")
		
		pFileUsage.setDataDirectory(pDataDirectory)
		pFileUsage.setDeleteFiles(true)
	end
end
