/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap

pin Democap.Characters

pin Dragengine.LoadSave
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * Motion capture project.
 * 
 * Projects are stored under "/projects" directory in the user game configure directory
 * as files of type "*.demcp" .
 */
class Project
	/** Animation directory name. */
	static public fixed var String animationDirectory = "animation"
	
	/** Export directory name. */
	static public fixed var String exportDirectory = "export"
	
	/** Characters directory name. */
	static public fixed var String charactersDirectory = "characters"
	
	/** World directory name. */
	static public fixed var String worldsDirectory = "worlds"
	
	
	
	/** Animation path. */
	class AnimationPath
		var UniqueID pID
		var String pPath
		var String pPathMeta
		var String pPathDevices
		var String pPathDevicesRig
		var String pPathObject
		var String pPathObjectRig
		
		func new(UniqueID id, String path, String pathMeta, String pathDevices,\
		String pathDevicesRig, String pathObject, String pathObjectRig)
			pID = id
			pPath = path
			pPathMeta = pathMeta
			pPathDevices = pathDevices
			pPathDevicesRig = pathDevicesRig
			pPathObject = pathObject
			pPathObjectRig = pathObjectRig
		end
		
		func UniqueID getID()
			return pID
		end
		
		func String getPath()
			return pPath
		end
		
		func String getPathMeta()
			return pPathMeta
		end
		
		func String getPathDevices()
			return pPathDevices
		end
		
		func String getPathDevicesRig()
			return pPathDevicesRig
		end
		
		func String getPathObject()
			return pPathObject
		end
		
		func String getPathObjectRig()
			return pPathObjectRig
		end
	end
	
	
	
	var String pPath
	var File pDataDirectory
	var FileUsageManager pFileUsage
	var MutableID pAnimationIDGenerator
	var Scenes pScenes
	var CharacterAnimations pSavedAnimations
	var String pPostLoadActivateScene
	
	
	
	/** Create project. */
	func new(String path)
		pPath = path
		pFileUsage = FileUsageManager.new()
		pAnimationIDGenerator = MutableID.new(1)
		pScenes = Scenes.new(pFileUsage)
		pSavedAnimations = CharacterAnimations.new(pFileUsage)
		updateDirectories()
	end
	
	/** Load project from file. */
	static func Project load(String path)
		var Persistency persistency = GameApp.getGameApp().getLoaders().getPersistency()
		
		var FileReader reader = persistency.getDebugEnableCanaryValue() \
			if FileReader.new(path) else FileReader.newZCompressed(path)
		
		var PersistencyEnvironment env = PersistencyEnvironment.new(persistency, reader.readByte())
		var Project project = Project.new(path)
		
		select env.getVersion()
		case 0
			project.readV0(env, reader)
			
		case 1
			project.readV1(env, reader)
			
		else
			throw EInvalidParam.new("Unsupported scene file version")
		end
		
		project.pFileUsage.removeZeroUsageFiles()
		
		if FileUsageManager.debugUsage
			project.pFileUsage.log(GameApp.getGameApp().getConsole(), "Project.load()")
		end
		return project
	end
	
	protected func void readV0(PersistencyEnvironment env, FileReader reader)
		reader.readByte() // flags
		
		var int i, count
		count = reader.readUShort()
		for i = 0 to count
			pScenes.add(Scene.new(env, reader))
		end
		
		pAnimationIDGenerator.readFromFile(reader)
		pPostLoadActivateScene = reader.readString8()
	end
	
	protected func void readV1(PersistencyEnvironment env, FileReader reader)
		readV0(env, reader)
		
		var int i, count
		count = reader.readUShort()
		for i = 0 to count
			pSavedAnimations.add(CharacterAnimation.new(reader))
		end
	end
	
	/** Dispose of list. */
	func void dispose()
		pFileUsage.setDeleteFiles(false)
		pFileUsage.setLocked(true)
		
		pSavedAnimations.dispose()
		pScenes.dispose()
	end
	
	
	
	/** Project path. */
	func String getPath()
		return pPath
	end
	
	/** Scenes. */
	func Scenes getScenes()
		return pScenes
	end
	
	/** Post load active scene for loading use only. */
	func String getPostLoadActivateScene()
		return pPostLoadActivateScene
	end
	
	/** Data directory. */
	func File getDataDirectory()
		return pDataDirectory
	end
	
	/** Characters directory. */
	func File getCharactersDirectory()
		return pDataDirectory + charactersDirectory
	end
	
	/** Worlds directory. */
	func File getWorldsDirectory()
		return pDataDirectory + worldsDirectory
	end
	
	/** Animation ID generator. */
	func MutableID getAnimationIDGenerator()
		return pAnimationIDGenerator
	end
	
	/** Generate animation path. */
	func AnimationPath nextAnimationPath()
		return nextAnimationPath("deanim", "derig")
	end
	
	/** Generate animation path. */
	func AnimationPath nextAnimationPath(String extensionAnim, String extensionRig)
		var UniqueID id = pAnimationIDGenerator.nextID()
		var String base = animationDirectory + "/captured-" + id.toHexString()
		return AnimationPath.new(id,\
			base + "." + extensionAnim,\
			base + ".demca",\
			base + "-devices." + extensionAnim,\
			base + "-devices." + extensionRig,\
			base + "-object." + extensionAnim,\
			base + "-object." + extensionRig)
	end
	
	/** Generate export animation path. */
	func AnimationPath exportAnimationPath(String name, String extensionAnim, String extensionRig)
		/*
		var String safeName = ""
		var int i, len = name.getLength()
		var byte c
		
		for i = 0 to len
			c = name.getAt(i)
			if (c >= 'A' and c <= 'Z') or (c >= 'a' and c <= 'z') or (c >= '0' and c <= '9') \
			or c == '-' or c == ' '
				safeName = safeName + c
				
			else
				safeName = safeName + "%{:02x}".format(Array.newWith(c))
			end
		end
		*/
		
		var String base = exportDirectory + "/" + name
		return AnimationPath.new(null,\
			base + "." + extensionAnim,\
			base + ".demca",\
			base + "-devices." + extensionAnim,\
			base + "-devices." + extensionRig,\
			base + "-object." + extensionAnim,\
			base + "-object." + extensionRig)
	end
	
	/** Get file usage. */
	func FileUsageManager getFileUsage()
		return pFileUsage
	end
	
	/** Saved animations. */
	func CharacterAnimations getSavedAnimations()
		return pSavedAnimations
	end
	
	
	/** Browse exported animations directory. */
	func void browseExportedAnimations()
		var String path = (pDataDirectory + exportDirectory).getPath()
		if path.startsWith("/config")
			FileSystem.browseConfig(path)
			
		elif path.startsWith("/capture")
			FileSystem.browseCapture(path)
			
		else
			FileSystem.browseOverlay(path)
		end
	end
	
	
	/** Convert project path to absolute path. */
	func String pathToAbsolute(String path)
		return File.absolutePath(path, pDataDirectory.toString()).toString()
	end
	
	/** Convert path from to project path. */
	func String pathToProject(String path)
		var File relative = pDataDirectory.relativePath(path)
		if relative != null
			path = relative.toString()
		end
		return path
	end
	
	
	/** Save to file. */
	func void save()
		var Persistency persistency = GameApp.getGameApp().getLoaders().getPersistency()
		var GameApp app = GameApp.getGameApp()
		var Scene scene = app.getScene()
		var GameWorld gameWorld = app.getWindowGameWorld().getGameWorld()
		
		if scene != null and gameWorld != null
			scene.saveWorld(gameWorld)
		end
		
		var MemoryFile safe = MemoryFile.new("safe")
		
		var PersistencyEnvironment env = PersistencyEnvironment.new(persistency, 1)
		var FileWriter writer = persistency.getDebugEnableCanaryValue()\
			if safe.getWriter(false) else safe.getWriterZCompressed()
		
		writer.writeByte(env.getVersion())
		writer.writeByte(0) // flags
		
		writer.writeUShort(pScenes.getCount())
		pScenes.forEach(block Scene each
			each.writeToFile(env, writer)
		end)
		
		pAnimationIDGenerator.writeToFile(writer)
		
		if scene == null
			scene = pScenes.getAt(0)
		end
		writer.writeString8(scene.getName())
		
		writer.writeUShort(pSavedAnimations.getCount())
		pSavedAnimations.forEach(block CharacterAnimation each
			each.writeToFile(writer)
		end)
		
		FileWriter.new(pPath).writeData(safe.getReader())
	end
	
	/** Update data directory from path. */
	protected func void updateDirectories()
		var File file = File.new(pPath)
		var String name = file.getName()
		name = name.substring(0, name.findReverse('.'))
		pDataDirectory = File.new(file.getParent(), name + "-data")
		
		pFileUsage.setDataDirectory(pDataDirectory)
		pFileUsage.setDeleteFiles(true)
	end
end
