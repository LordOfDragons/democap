/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap

pin Dragengine.LoadSave
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * Motion capture project.
 * 
 * Projects are stored under "/projects" directory in the user game configure directory
 * as files of type "*.demcp" .
 */
class Project
	/** Animation directory name. */
	static public fixed var String animationDirectory = "animation"
	
	
	
	/** Animation path. */
	class AnimationPath
		private var UniqueID pID
		private var String pPath
		private var String pPathMeta
		
		public func new(UniqueID id, String path, String pathMeta)
			pID = id
			pPath = path
			pPathMeta = pathMeta
		end
		
		public func UniqueID getID()
			return pID
		end
		
		public func String getPath()
			return pPath
		end
		
		public func String getPathMeta()
			return pPathMeta
		end
	end
	
	
	
	private var String pPath
	private var File pDataDirectory
	private var FileUsageManager pFileUsage
	private var MutableID pAnimationIDGenerator
	private var Scenes pScenes
	
	
	
	/** Create project. */
	public func new(String path)
		pPath = path
		pFileUsage = FileUsageManager.new()
		pAnimationIDGenerator = MutableID.new(1)
		pScenes = Scenes.new(pFileUsage)
		updateDirectories()
	end
	
	/** Load project from file. */
	static public func Project load(String path)
		var PersistencyEnvironment env = PersistencyEnvironment.new(GameApp.getGameApp().getLoaders().getPersistency())
		var FileReader reader = env.getPersistency().getDebugEnableCanaryValue() \
			if FileReader.new(path) else FileReader.newZCompressed(path)
		
		var Project project = Project.new(path)
		var int size, i, count
		
		select reader.readByte() // version
		case 0
			reader.readByte() // flags
			
			count = reader.readUShort()
			for i = 0 to count
				project.pScenes.add(Scene.new(env, reader))
			end
			
			project.pAnimationIDGenerator.readFromFile(reader)
			
		else
			throw EInvalidParam.new("Unsupported scene file version")
		end
		
		if FileUsageManager.debugUsage
			project.pFileUsage.log(GameApp.getGameApp().getConsole(), "Project.load()")
		end
		return project
	end
	
	/** Dispose of list. */
	public func void dispose()
		pFileUsage.setDeleteFiles(false)
		pFileUsage.setLocked(true)
		
		pScenes.dispose()
	end
	
	
	
	/** Project path. */
	public func String getPath()
		return pPath
	end
	
	/** Scenes. */
	public func Scenes getScenes()
		return pScenes
	end
	
	/** Data directory. */
	public func File getDataDirectory()
		return pDataDirectory
	end
	
	/** Animation ID generator. */
	public func MutableID getAnimationIDGenerator()
		return pAnimationIDGenerator
	end
	
	/** Generate animation path. */
	public func AnimationPath nextAnimationPath(String extension)
		var UniqueID id = pAnimationIDGenerator.nextID()
		var String base = animationDirectory + "/captured-" + id.toHexString() + "."
		return AnimationPath.new(id, base + extension, base + "demca")
	end
	
	/** Get file usage. */
	public func FileUsageManager getFileUsage()
		return pFileUsage
	end
	
	
	
	/** Save to file. */
	public func void save()
		var MemoryFile safe = MemoryFile.new("safe")
		
		var PersistencyEnvironment env = PersistencyEnvironment.new(GameApp.getGameApp().getLoaders().getPersistency())
		var FileWriter writer = env.getPersistency().getDebugEnableCanaryValue()\
			if safe.getWriter(false) else safe.getWriterZCompressed()
		
		writer.writeByte(0) // version
		writer.writeByte(0) // flags
		
		writer.writeUShort(pScenes.getCount())
		pScenes.forEach(block Scene each
			each.writeToFile(env, writer)
		end)
		
		pAnimationIDGenerator.writeToFile(writer)
		
		FileWriter.new(pPath).writeData(safe.getReader())
	end
	
	/** Update data directory from path. */
	protected func void updateDirectories()
		var File file = File.new(pPath)
		var String name = file.getName()
		name = name.substring(0, name.findReverse('.'))
		pDataDirectory = File.new(file.getParent(), name + "-data")
		
		pFileUsage.setDataDirectory(pDataDirectory)
		pFileUsage.setDeleteFiles(true)
	end
end
