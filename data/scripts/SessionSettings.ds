/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2022, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap

pin Democap.Behaviors

pin Dragengine.CameraDirectors
pin Dragengine.Gui.Events
pin Dragengine.Utils
pin Dragengine.Scenery


/**
 * Session settings.
 */
class SessionSettings
	static public var String globalEventLanguageChanged = "languageChanged"
	
	/** Record devices. */
	enum RecordDevices
		none /** None. */
		device /** Device position. */
		reference /** Reference slot position. */
		target /** Target slot position. */
	end
	
	/** Wrist menu panel. */
	enum WristMenuPanel
		none /** No panel. Hide wrist menu. */
		settings /** WMPanelSettings. */
		character /** WMPanelCharacter. */
		project /** WMPanelProject. */
		actorControl /** WMPanelActorControl. */
		session /** WMPanelSession. */
	end
	
	/** Toggle Show VR camera listener. */
	class ToggleShowVRCameraListener extends DefaultToggleModelListener
		func new()
		end
		
		func void toggledChanged(ToggleModel model)
			var WindowGameWorld window = GameApp.getGameApp().getWindowGameWorld()
			
			if model.getToggled()
				window.getWorldRenderer().setCamera(GameApp.getGameApp().getVRCamera())
				
			else
				window.getWorldRenderer().setCamera(window.getCamera())
			end
		end
	end
	
	/** Toggle Enable VR listener. */
	class ToggleEnableVRListener extends DefaultToggleModelListener
		func new()
		end
		
		func void toggledChanged(ToggleModel model)
			var GameApp app = GameApp.getGameApp()
			var SessionSettings settings = app.getSessionSettings()
			var Console console = app.getConsole()
			
			// VR runtimes can be crashy. save project just in case
			app.getProject().save()
			
			if model.getToggled()
				console.addMessage("Start VR Runtime...")
				try
					VRSystem.requestFeatureEyeGazeTracking(settings.getModelUseEyeGazeTracking().getToggled()\
						if VRFeatureSupportLevel.optional else VRFeatureSupportLevel.disabled)
					VRSystem.requestFeatureFacialTracking(settings.getModelUseFacialTracking().getToggled()\
						if VRFeatureSupportLevel.optional else VRFeatureSupportLevel.disabled)
					VRSystem.startRuntime()
					
				catch Exception e
					console.addError("Failed starting VR Runtime", e)
				end
				
				settings.getModelShowVRCamera().setToggled(VRSystem.isRuntimeRunning())
				
			else
				console.addMessage("Stop VR Runtime...")
				
				try
					VRSystem.stopRuntime()
					
				catch Exception e
					console.addError("Failed stopping VR Runtime", e)
				end
				
				settings.getModelShowVRCamera().setToggled(false)
			end
		end
	end
	
	class ToggleEnableHMDListener extends DefaultToggleModelListener
		func new()
		end
		
		func void toggledChanged(ToggleModel model)
			var GameApp app = GameApp.getGameApp()
			var Camera camera = app.getVRCamera()
			if camera == null or app.getHmdDisabledWorld() == null
				return
			end
			
			if model.getToggled()
				app.getHmdDisabledWorld().getWorld().removeCamera(camera)
				app.getWindowGameWorld().getGameWorld().getWorld().addCamera(camera)
				
			else
				app.getWindowGameWorld().getGameWorld().getWorld().removeCamera(camera)
				app.getHmdDisabledWorld().getWorld().addCamera(camera)
			end
		end
	end
	
	class ToggleCameraEnableGIVisitor extends ElementVisitor
		var bool pEnable
		
		func new(bool enable)
			pEnable = enable
		end
		
		func void visitBehaviorElement(BehaviorElement element)
			if element.getClass() castable Elements.VideoCameraClass
				ECBehaviorCamera.getInstanceIn(element).getCamera().setEnableGI(pEnable)
			end
		end
	end
	
	class ToggleCameraEnableGI extends DefaultToggleModelListener
		func new()
		end
		
		func void toggledChanged(ToggleModel model)
			var bool enable = model.getToggled()
			var GameApp app = GameApp.getGameApp()
			
			var CameraDirector director = app.getVRCameraDirector()
			if director != null
				director.setEnableGI(enable)
			end
			
			var Camera camera = app.getWindowGameWorld().getCamera()
			if camera != null
				camera.setEnableGI(enable)
			end
			
			camera = app.getVRCamera()
			if camera != null
				camera.setEnableGI(enable)
			end
			
			app.getWindowGameWorld().getGameWorld().visitElements(ToggleCameraEnableGIVisitor.new(enable))
		end
	end
	
	class ToggleFullBright extends DefaultToggleModelListener
		func new()
		end
		
		func void toggledChanged(ToggleModel model)
			var GameWorld gameWorld = GameApp.getGameApp().getWindowGameWorld().getGameWorld()
			if gameWorld != null
				gameWorld.getWorld().setDisableLights(model.getToggled())
			end
		end
	end
	
	class SaveRangeModelChanged extends DefaultRangeModelListener
		var String pSettingPath
		var float pScale
		
		func new(String settingPath, float scale)
			pSettingPath = settingPath
			pScale = scale
		end
		
		func void valueChanged(RangeModel rangeModel)
			GameApp.getGameApp().getSettings().setAt(pSettingPath, pScale * rangeModel.getValue())
		end
	end
	
	class SaveToggleModelChanged extends DefaultToggleModelListener
		var String pSettingPath
		
		func new(String settingPath)
			pSettingPath = settingPath
		end
		
		func void toggledChanged(ToggleModel model)
			GameApp.getGameApp().getSettings().setAt(pSettingPath, model.getToggled())
		end
	end
	
	class SaveTextModelChanged extends DefaultTextModelListener
		var String pSettingPath
		
		func new(String settingPath)
			pSettingPath = settingPath
		end
		
		func void textChanged(TextModel model)
			GameApp.getGameApp().getSettings().setAt(pSettingPath, model.getText())
		end
	end
	
	class SaveWristMenuChanged extends DefaultListModelListener
		var String pSettingPath
		
		func new(String settingPath)
			pSettingPath = settingPath
		end
		
		func void selectionChanged(ListModel listModel)
			if listModel.getSelected() != -1
				GameApp.getGameApp().getSettings().setAt(pSettingPath,\
					(listModel.getAt(listModel.getSelected()) cast WristMenuPanel).name())
					
			else
				GameApp.getGameApp().getSettings().setAt(pSettingPath, "none")
			end
		end
	end
	
	class SaveLanguageChanged extends DefaultListModelListener
		var String pSettingPath
		
		func new(String settingPath)
			pSettingPath = settingPath
		end
		
		func void selectionChanged(ListModel listModel)
			if listModel.getSelected() == -1
				return
			end
			
			var LanguagePack langpack = listModel.getAt(listModel.getSelected()) cast LanguagePack
			
			GameApp.getGameApp().getSettings().setAt(pSettingPath, langpack.getIdentifier())
			
			TranslationManager.get().setActive(langpack)
			EngineTranslations.get().setActiveWithIdIfPresent(langpack.getIdentifier())
			GameApp.getGameApp().getDesktop().onTranslationChanged()
			GameApp.getGameApp().getGlobalEvents().sendEvent(SessionSettings.globalEventLanguageChanged)
		end
	end
	
	
	
	var DefaultToggleModel pModelEnableVR
	var DefaultToggleModel pModelEnableHMD
	var DefaultToggleModel pModelShowVRCamera
	var DefaultToggleModel pModelAutoExport
	var DefaultRangeModel pModelRecordFrameRate
	var DefaultListModel pModelRecordDevices
	var DefaultRangeModel pModelSmoothSlotStrength
	var DefaultToggleModel pModelAutoStopRecord
	var DefaultRangeModel pModelInteractionBubbleSize
	var DefaultToggleModel pModelCameraEnableGI
	var DefaultToggleModel pModelFullBright
	var DefaultToggleModel pModelUseEyeGazeTracking
	var DefaultToggleModel pModelUseFacialTracking
	var DefaultTextModel pModelFloorOffset
	
	var DefaultListModel pModelHudCamera
	var DefaultToggleModel pModelShowVRControllers
	var DefaultListModel pModelRightWristMenuPanel
	var DefaultListModel pModelLeftWristMenuPanel
	var DefaultToggleModel pModelProjectToGround
	var DefaultTextModel pModelManualMovementStep
	var DefaultTextModel pModelManualRotationStep
	var DefaultToggleModel pModelTeleportMovement
	var DefaultToggleModel pModelVRStageDirectionsReadOnly
	var DefaultRangeModel pModelVRMenuScale
	
	var DefaultTextModel pModelServerAddress
	
	var DefaultListModel pModelLanguage
	
	
	
	/** Create listener. */
	func new()
		var ParameterTree s = GameApp.getGameApp().getSettings()
		
		pModelEnableVR = DefaultToggleModel.new(false)
		pModelEnableVR.addListener(ToggleEnableVRListener.new())
		
		pModelEnableHMD = DefaultToggleModel.new(true)
		pModelEnableHMD.addListener(ToggleEnableHMDListener.new())
		
		pModelShowVRCamera = DefaultToggleModel.new(false)
		pModelShowVRCamera.addListener(ToggleShowVRCameraListener.new())
		
		pModelUseEyeGazeTracking = DefaultToggleModel.new(s.getBoolAt("UseEyeGazeTracking", false))
		pModelUseEyeGazeTracking.addListener(SaveToggleModelChanged.new("UseEyeGazeTracking"))
		
		pModelUseFacialTracking = DefaultToggleModel.new(s.getBoolAt("UseFacialTracking", false))
		pModelUseFacialTracking.addListener(SaveToggleModelChanged.new("UseFacialTracking"))
		
		pModelAutoExport = DefaultToggleModel.new(s.getBoolAt("AutoExport", false))
		pModelAutoExport.addListener(SaveToggleModelChanged.new("AutoExport"))
		
		pModelRecordDevices = DefaultListModel.new(RecordDevices.all().toArray())
		
		pModelRecordFrameRate = DefaultRangeModel.new(5, 90, 10, 25, 1)
		pModelRecordFrameRate.setValue(s.getIntAt("RecordFrameRate", 25))
		pModelRecordFrameRate.addListener(SaveRangeModelChanged.new("RecordFrameRate", 1))
		
		pModelSmoothSlotStrength = DefaultRangeModel.new(0, 10, 5, 10, 1)
		pModelSmoothSlotStrength.setValue((s.getFloatAt("SmoothSlotStrength", 1) * 10 + 0.5) cast int)
		pModelSmoothSlotStrength.addListener(SaveRangeModelChanged.new("SmoothSlotStrength", 0.1))
		
		pModelAutoStopRecord = DefaultToggleModel.new(s.getBoolAt("AutoStopRecord", true))
		pModelAutoStopRecord.addListener(SaveToggleModelChanged.new("AutoStopRecord"))
		
		pModelInteractionBubbleSize = DefaultRangeModel.new(20, 80, 20, 40, 1)
		pModelInteractionBubbleSize.setValue((s.getFloatAt("InteractionBubbleSize", 0.4) * 100 + 0.5) cast int)
		pModelInteractionBubbleSize.addListener(SaveRangeModelChanged.new("InteractionBubbleSize", 0.01))
		
		pModelCameraEnableGI = DefaultToggleModel.new(s.getBoolAt("CameraEnableGI", false))
		pModelCameraEnableGI.addListener(SaveToggleModelChanged.new("CameraEnableGI"))
		pModelCameraEnableGI.addListener(ToggleCameraEnableGI.new())
		
		pModelFullBright = DefaultToggleModel.new(s.getBoolAt("FullBright", false))
		pModelFullBright.addListener(SaveToggleModelChanged.new("FullBright"))
		pModelFullBright.addListener(ToggleFullBright.new())
		
		pModelFloorOffset = DefaultTextModel.new(s.getStringAt("FloorOffset", "0"))
		pModelFloorOffset.addListener(SaveTextModelChanged.new("FloorOffset"))
		
		pModelHudCamera = DefaultListModel.new()
		pModelHudCamera.add(null)
		
		pModelShowVRControllers = DefaultToggleModel.new(s.getBoolAt("ShowVRControllers", true))
		pModelShowVRControllers.addListener(SaveToggleModelChanged.new("ShowVRControllers"))
		
		pModelRightWristMenuPanel = DefaultListModel.new(WristMenuPanel.all().toArray())
		pModelRightWristMenuPanel.setSelectedElement(WristMenuPanel.named(s.getStringAt("RightWristMenuPanel", "none")))
		pModelRightWristMenuPanel.addListener(SaveWristMenuChanged.new("RightWristMenuPanel"))
		
		pModelLeftWristMenuPanel = DefaultListModel.new(WristMenuPanel.all().toArray())
		pModelLeftWristMenuPanel.setSelectedElement(WristMenuPanel.named(s.getStringAt("LeftWristMenuPanel", "none")))
		pModelLeftWristMenuPanel.addListener(SaveWristMenuChanged.new("LeftWristMenuPanel"))
		
		pModelProjectToGround = DefaultToggleModel.new(s.getBoolAt("ProjectToGround", true))
		pModelProjectToGround.addListener(SaveToggleModelChanged.new("ProjectToGround"))
		
		pModelManualMovementStep = DefaultTextModel.new(s.getStringAt("ManualMovementStep", "0.1"))
		pModelManualMovementStep.addListener(SaveTextModelChanged.new("ManualMovementStep"))
		
		pModelManualRotationStep = DefaultTextModel.new(s.getStringAt("ManualRotationStep", "10"))
		pModelManualRotationStep.addListener(SaveTextModelChanged.new("ManualRotationStep"))
		
		pModelTeleportMovement = DefaultToggleModel.new(s.getBoolAt("TeleportMovement", true))
		pModelTeleportMovement.addListener(SaveToggleModelChanged.new("TeleportMovement"))
		
		pModelVRStageDirectionsReadOnly = DefaultToggleModel.new(s.getBoolAt("VRStageDirectionsReadOnly", false))
		pModelVRStageDirectionsReadOnly.addListener(SaveToggleModelChanged.new("VRStageDirectionsReadOnly"))
		
		pModelVRMenuScale = DefaultRangeModel.new(10, 30, 5, 10, 1)
		pModelVRMenuScale.setValue((s.getFloatAt("VRMenuScale", 1) * 20 + 0.5) cast int)
		pModelVRMenuScale.addListener(SaveRangeModelChanged.new("VRMenuScale", 0.05))
		
		pModelServerAddress = DefaultTextModel.new(s.getStringAt("ServerAddress", "localhost"))
		pModelServerAddress.addListener(SaveTextModelChanged.new("ServerAddress"))
		
		var TranslationManager tm = TranslationManager.get()
		pModelLanguage = DefaultListModel.new(tm.allSorted())
		var LanguagePack langpack = tm.getWithId(GameApp.getGameApp().getSettings().getStringAt("Language", "en"))
		if langpack == null
			langpack = tm.getActive()
		end
		tm.setActive(langpack)
		EngineTranslations.get().setActiveWithIdIfPresent(langpack.getIdentifier())
		pModelLanguage.setSelectedElement(langpack)
		pModelLanguage.addListener(SaveLanguageChanged.new("Language"))
	end
	
	
	
	/** Get session settings. */
	public static func SessionSettings get()
		return GameApp.getGameApp().getSessionSettings()
	end
	
	
	
	/** Enable VR model. */
	func DefaultToggleModel getModelEnableVR()
		return pModelEnableVR
	end
	
	/** Enable HMD. */
	func DefaultToggleModel getModelEnableHMD()
		return pModelEnableHMD
	end
	
	/** Show VR camera model. */
	func DefaultToggleModel getModelShowVRCamera()
		return pModelShowVRCamera
	end
	
	/** Use Eye Gaze Tracking model. */
	func DefaultToggleModel getModelUseEyeGazeTracking()
		return pModelUseEyeGazeTracking
	end
	
	/** Use Facial Tracking model. */
	func DefaultToggleModel getModelUseFacialTracking()
		return pModelUseFacialTracking
	end
	
	/** Auto export model. */
	func DefaultToggleModel getModelAutoExport()
		return pModelAutoExport
	end
	
	/** Record animation frame rate model. */
	func DefaultRangeModel getModelRecordFrameRate()
		return pModelRecordFrameRate
	end
	
	/** Record devices model. */
	func DefaultListModel getModelRecordDevices()
		return pModelRecordDevices
	end
	
	/** Record devices. */
	func RecordDevices getRecordDevices()
		return pModelRecordDevices.getAt(pModelRecordDevices.getSelected()) cast RecordDevices
	end
	
	/** Smooth slot strength model. */
	func DefaultRangeModel getModelSmoothSlotStrength()
		return pModelSmoothSlotStrength
	end
	
	/** Smooth slot strength. */
	func float getSmoothSlotStrength()
		return 0.1 * pModelSmoothSlotStrength.getValue()
	end
	
	/** Auto stop recording model. */
	func DefaultToggleModel getModelAutoStopRecord()
		return pModelAutoStopRecord
	end
	
	/** Interaction bubble size model. */
	func DefaultRangeModel getModelInteractionBubbleSize()
		return pModelInteractionBubbleSize
	end
	
	/** Interaction bubble size. */
	func float getInteractionBubbleSize()
		return 0.01 * pModelInteractionBubbleSize.getValue()
	end
	
	/** Camera enable GI model. */
	func DefaultToggleModel getModelCameraEnableGI()
		return pModelCameraEnableGI
	end
	
	/** Full bright model. */
	func DefaultToggleModel getModelFullBright()
		return pModelFullBright
	end
	
	/** Model floor offset. */
	func DefaultTextModel getModelFloorOffset()
		return pModelFloorOffset
	end
	
	/** Floor offset. */
	func float getFloorOffset()
		return pModelFloorOffset.getText().toFloat()
	end
	
	/** Floor offset vector. */
	func Vector getFloorOffsetVector()
		return Vector.new(0, -getFloorOffset(), 0)
	end
	
	/** Floor offset matrix. */
	func Matrix getFloorOffsetMatrix()
		return Matrix.newTranslation(0, -getFloorOffset(), 0)
	end
	
	
	
	/** Actor HUD Camera. */
	func DefaultListModel getModelHudCamera()
		return pModelHudCamera
	end
	
	/** Selected Actor HUD Camera or null. */
	func ECBRemoteCamera.Instance getHudCamera()
		return pModelHudCamera.getSelectedElement() cast ECBRemoteCamera.Instance
	end
	
	/** Update actor HUD camera model. */
	func void updateModelHudCamera()
		var Array content = Array.new()
		
		var ECBRemoteCamera.Instance selection = getHudCamera()
		
		var GameWorld gameWorld = GameApp.getGameApp().getWindowGameWorld().getGameWorld()
		if gameWorld != null
			gameWorld.forEachElement(block BehaviorElement each
				content.addAll(ECBRemoteCamera.getAllInstancesIn(each))
			end)
		end
		
		content.sort(block ECBRemoteCamera.Instance a, ECBRemoteCamera.Instance b
			return a.getName().compare(b.getName())
		end)
		
		content.insert(0, null)
		
		pModelHudCamera.setContent(content)
		pModelHudCamera.setSelectedElement(selection)
	end
	
	/** Show VR Controllers model. */
	func DefaultToggleModel getModelShowVRControllers()
		return pModelShowVRControllers
	end
	
	/** Model right wrist menu panel. */
	func DefaultListModel getModelRightWristMenuPanel()
		return pModelRightWristMenuPanel
	end
	
	/** Right wrist menu panel. */
	func WristMenuPanel getRightWristMenuPanel()
		return pModelRightWristMenuPanel.getSelectedElement() cast WristMenuPanel
	end
	
	/** Model left wrist menu panel. */
	func DefaultListModel getModelLeftWristMenuPanel()
		return pModelLeftWristMenuPanel
	end
	
	/** Left wrist menu panel. */
	func WristMenuPanel getLeftWristMenuPanel()
		return pModelLeftWristMenuPanel.getSelectedElement() cast WristMenuPanel
	end
	
	/** Model project actor to ground. */
	func DefaultToggleModel getModelProjectToGround()
		return pModelProjectToGround
	end
	
	/** Project actor to ground. */
	func bool getProjectToGround()
		return pModelProjectToGround.getToggled()
	end
	
	/** Model manual movement step. */
	func DefaultTextModel getModelManualMovementStep()
		return pModelManualMovementStep
	end
	
	/** Manual movement step. */
	func float getManualMovementStep()
		return pModelManualMovementStep.getText().toFloat()
	end
	
	/** Model manual rotation step. */
	func DefaultTextModel getModelManualRotationStep()
		return pModelManualRotationStep
	end
	
	/** Manual rotation step. */
	func float getManualRotationStep()
		return pModelManualRotationStep.getText().toFloat()
	end
	
	/** Model teleport movement. */
	func DefaultToggleModel getModelTeleportMovement()
		return pModelTeleportMovement
	end
	
	/** Teleport movement. */
	func bool getTeleportMovement()
		return pModelTeleportMovement.getToggled()
	end
	
	/** Model VR stage directions read-only. */
	func DefaultToggleModel getModelVRStageDirectionsReadOnly()
		return pModelVRStageDirectionsReadOnly
	end
	
	/** VR stage directions read-only. */
	func bool getVRStageDirectionsReadOnly()
		return pModelVRStageDirectionsReadOnly.getToggled()
	end
	
	/** VR menu scale model. */
	func DefaultRangeModel getModelVRMenuScale()
		return pModelVRMenuScale
	end
	
	/** VR menu scale. */
	func float getVRMenuScale()
		return 0.05 * pModelVRMenuScale.getValue()
	end
	
	
	
	/** Server address. */
	func DefaultTextModel getModelServerAddress()
		return pModelServerAddress
	end
	
	
	
	/** Language. */
	func DefaultListModel getModelLanguage()
		return pModelLanguage
	end
end
