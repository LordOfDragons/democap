/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2022, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap

pin Democap.Behaviors

pin Dragengine.CameraDirectors
pin Dragengine.Gui.Events
pin Dragengine.Utils
pin Dragengine.Scenery


/**
 * Session settings.
 */
public class SessionSettings
	/** Record devices. */
	enum RecordDevices
		none /** None. */
		device /** Device position. */
		reference /** Reference slot position. */
		target /** Target slot position. */
	end
	
	/** Wrist menu panel. */
	enum WristMenuPanel
		none /** No panel. Hide wrist menu. */
		settings /** WMPanelSettings. */
		character /** WMPanelCharacter. */
		project /** WMPanelProject. */
		actorControl /** WMPanelActorControl. */
		session /** WMPanelSession. */
	end
	
	/** Toggle Show VR camera listener. */
	class ToggleShowVRCameraListener extends DefaultToggleModelListener
		public func new()
		end
		
		public func void toggledChanged(ToggleModel model)
			var WindowGameWorld window = GameApp.getGameApp().getWindowGameWorld()
			
			if model.getToggled()
				window.getWorldRenderer().setCamera(GameApp.getGameApp().getVRCamera())
				
			else
				window.getWorldRenderer().setCamera(window.getCamera())
			end
		end
	end
	
	/** Toggle Enable VR listener. */
	class ToggleEnableVRListener extends DefaultToggleModelListener
		public func new()
		end
		
		public func void toggledChanged(ToggleModel model)
			var GameApp app = GameApp.getGameApp()
			var SessionSettings settings = app.getSessionSettings()
			var Console console = app.getConsole()
			
			// VR runtimes can be crashy. save project just in case
			app.getProject().save()
			
			if model.getToggled()
				console.addMessage("Start VR Runtime...")
				try
					VRSystem.requestFeatureEyeGazeTracking(settings.getModelUseEyeGazeTracking().getToggled()\
						if VRFeatureSupportLevel.optional else VRFeatureSupportLevel.disabled)
					VRSystem.requestFeatureFacialTracking(settings.getModelUseFacialTracking().getToggled()\
						if VRFeatureSupportLevel.optional else VRFeatureSupportLevel.disabled)
					VRSystem.startRuntime()
					
				catch Exception e
					console.addError("Failed starting VR Runtime", e)
				end
				
				settings.getModelShowVRCamera().setToggled(VRSystem.isRuntimeRunning())
				
			else
				console.addMessage("Stop VR Runtime...")
				
				try
					VRSystem.stopRuntime()
					
				catch Exception e
					console.addError("Failed stopping VR Runtime", e)
				end
				
				settings.getModelShowVRCamera().setToggled(false)
			end
		end
	end
	
	class ToggleEnableHMDListener extends DefaultToggleModelListener
		public func new()
		end
		
		public func void toggledChanged(ToggleModel model)
			var GameApp app = GameApp.getGameApp()
			var Camera camera = app.getVRCamera()
			if camera == null or app.getHmdDisabledWorld() == null
				return
			end
			
			if model.getToggled()
				app.getHmdDisabledWorld().getWorld().removeCamera(camera)
				app.getWindowGameWorld().getGameWorld().getWorld().addCamera(camera)
				
			else
				app.getWindowGameWorld().getGameWorld().getWorld().removeCamera(camera)
				app.getHmdDisabledWorld().getWorld().addCamera(camera)
			end
		end
	end
	
	class ToggleCameraEnableGI extends DefaultToggleModelListener
		public func new()
		end
		
		public func void toggledChanged(ToggleModel model)
			var bool enable = model.getToggled()
			
			var CameraDirector director = GameApp.getGameApp().getVRCameraDirector()
			if director != null
				director.setEnableGI(enable)
			end
			
			var Camera camera = GameApp.getGameApp().getWindowGameWorld().getCamera()
			if camera != null
				camera.setEnableGI(enable)
			end
			
			camera = GameApp.getGameApp().getVRCamera()
			if camera != null
				camera.setEnableGI(enable)
			end
		end
	end
	
	class ToggleFullBright extends DefaultToggleModelListener
		public func new()
		end
		
		public func void toggledChanged(ToggleModel model)
			var GameWorld gameWorld = GameApp.getGameApp().getWindowGameWorld().getGameWorld()
			if gameWorld != null
				gameWorld.getWorld().setDisableLights(model.getToggled())
			end
		end
	end
	
	class SaveRangeModelChanged extends DefaultRangeModelListener
		private var String pSettingPath
		private var float pScale
		
		public func new(String settingPath, float scale)
			pSettingPath = settingPath
			pScale = scale
		end
		
		public func void valueChanged(RangeModel rangeModel)
			GameApp.getGameApp().getSettings().setAt(pSettingPath, pScale * rangeModel.getValue())
		end
	end
	
	class SaveToggleModelChanged extends DefaultToggleModelListener
		private var String pSettingPath
		
		public func new(String settingPath)
			pSettingPath = settingPath
		end
		
		public func void toggledChanged(ToggleModel model)
			GameApp.getGameApp().getSettings().setAt(pSettingPath, model.getToggled())
		end
	end
	
	class SaveTextModelChanged extends DefaultTextModelListener
		private var String pSettingPath
		
		public func new(String settingPath)
			pSettingPath = settingPath
		end
		
		public func void textChanged(TextModel model)
			GameApp.getGameApp().getSettings().setAt(pSettingPath, model.getText())
		end
	end
	
	class SaveWristMenuChanged extends DefaultListModelListener
		private var String pSettingPath
		
		public func new(String settingPath)
			pSettingPath = settingPath
		end
		
		public func void selectionChanged(ListModel listModel)
			if listModel.getSelected() != -1
				GameApp.getGameApp().getSettings().setAt(pSettingPath,\
					(listModel.getAt(listModel.getSelected()) cast WristMenuPanel).name())
					
			else
				GameApp.getGameApp().getSettings().setAt(pSettingPath, "none")
			end
		end
	end
	
	
	
	private var DefaultToggleModel pModelEnableVR
	private var DefaultToggleModel pModelEnableHMD
	private var DefaultToggleModel pModelShowVRCamera
	private var DefaultToggleModel pModelAutoExport
	private var DefaultRangeModel pModelRecordFrameRate
	private var DefaultListModel pModelRecordDevices
	private var DefaultRangeModel pModelSmoothSlotStrength
	private var DefaultToggleModel pModelAutoStopRecord
	private var DefaultRangeModel pModelInteractionBubbleSize
	private var DefaultToggleModel pModelCameraEnableGI
	private var DefaultToggleModel pModelFullBright
	private var DefaultToggleModel pModelUseEyeGazeTracking
	private var DefaultToggleModel pModelUseFacialTracking
	
	private var DefaultListModel pModelHudCamera
	private var DefaultToggleModel pModelShowVRControllers
	private var DefaultListModel pModelRightWristMenuPanel
	private var DefaultListModel pModelLeftWristMenuPanel
	private var DefaultToggleModel pModelProjectToGround
	private var DefaultTextModel pModelManualMovementStep
	private var DefaultTextModel pModelManualRotationStep
	private var DefaultToggleModel pModelTeleportMovement
	
	private var DefaultTextModel pModelServerAddress
	
	
	
	/** Create listener. */
	public func new()
		var ParameterTree s = GameApp.getGameApp().getSettings()
		
		pModelEnableVR = DefaultToggleModel.new(false)
		pModelEnableVR.addListener(ToggleEnableVRListener.new())
		
		pModelEnableHMD = DefaultToggleModel.new(true)
		pModelEnableHMD.addListener(ToggleEnableHMDListener.new())
		
		pModelShowVRCamera = DefaultToggleModel.new(false)
		pModelShowVRCamera.addListener(ToggleShowVRCameraListener.new())
		
		pModelUseEyeGazeTracking = DefaultToggleModel.new(s.getBoolAt("UseEyeGazeTracking", false))
		pModelUseEyeGazeTracking.addListener(SaveToggleModelChanged.new("UseEyeGazeTracking"))
		
		pModelUseFacialTracking = DefaultToggleModel.new(s.getBoolAt("UseFacialTracking", false))
		pModelUseFacialTracking.addListener(SaveToggleModelChanged.new("UseFacialTracking"))
		
		pModelAutoExport = DefaultToggleModel.new(s.getBoolAt("AutoExport", false))
		pModelAutoExport.addListener(SaveToggleModelChanged.new("AutoExport"))
		
		pModelRecordDevices = DefaultListModel.new(RecordDevices.all().toArray())
		
		pModelRecordFrameRate = DefaultRangeModel.new(5, 90, 10, 25, 1)
		pModelRecordFrameRate.setValue(s.getIntAt("RecordFrameRate", 25))
		pModelRecordFrameRate.addListener(SaveRangeModelChanged.new("RecordFrameRate", 1))
		
		pModelSmoothSlotStrength = DefaultRangeModel.new(0, 10, 5, 10, 1)
		pModelSmoothSlotStrength.setValue((s.getFloatAt("SmoothSlotStrength", 1) * 10 + 0.5) cast int)
		pModelSmoothSlotStrength.addListener(SaveRangeModelChanged.new("SmoothSlotStrength", 0.1))
		
		pModelAutoStopRecord = DefaultToggleModel.new(s.getBoolAt("AutoStopRecord", true))
		pModelAutoStopRecord.addListener(SaveToggleModelChanged.new("AutoStopRecord"))
		
		pModelInteractionBubbleSize = DefaultRangeModel.new(20, 80, 20, 40, 1)
		pModelInteractionBubbleSize.setValue((s.getFloatAt("InteractionBubbleSize", 0.4) * 100 + 0.5) cast int)
		pModelInteractionBubbleSize.addListener(SaveRangeModelChanged.new("InteractionBubbleSize", 0.01))
		
		pModelCameraEnableGI = DefaultToggleModel.new(s.getBoolAt("CameraEnableGI", false))
		pModelCameraEnableGI.addListener(SaveToggleModelChanged.new("CameraEnableGI"))
		pModelCameraEnableGI.addListener(ToggleCameraEnableGI.new())
		
		pModelFullBright = DefaultToggleModel.new(s.getBoolAt("FullBright", false))
		pModelFullBright.addListener(SaveToggleModelChanged.new("FullBright"))
		pModelFullBright.addListener(ToggleFullBright.new())
		
		pModelHudCamera = DefaultListModel.new()
		pModelHudCamera.add(null)
		
		pModelShowVRControllers = DefaultToggleModel.new(s.getBoolAt("ShowVRControllers", true))
		pModelShowVRControllers.addListener(SaveToggleModelChanged.new("ShowVRControllers"))
		
		pModelRightWristMenuPanel = DefaultListModel.new(WristMenuPanel.all().toArray())
		pModelRightWristMenuPanel.setSelectedElement(WristMenuPanel.named(s.getStringAt("RightWristMenuPanel", "none")))
		pModelRightWristMenuPanel.addListener(SaveWristMenuChanged.new("RightWristMenuPanel"))
		
		pModelLeftWristMenuPanel = DefaultListModel.new(WristMenuPanel.all().toArray())
		pModelLeftWristMenuPanel.setSelectedElement(WristMenuPanel.named(s.getStringAt("LeftWristMenuPanel", "none")))
		pModelLeftWristMenuPanel.addListener(SaveWristMenuChanged.new("LeftWristMenuPanel"))
		
		pModelProjectToGround = DefaultToggleModel.new(s.getBoolAt("ProjectToGround", true))
		pModelProjectToGround.addListener(SaveToggleModelChanged.new("ProjectToGround"))
		
		pModelManualMovementStep = DefaultTextModel.new(s.getStringAt("ManualMovementStep", "0.1"))
		pModelManualMovementStep.addListener(SaveTextModelChanged.new("ManualMovementStep"))
		
		pModelManualRotationStep = DefaultTextModel.new(s.getStringAt("ManualRotationStep", "10"))
		pModelManualRotationStep.addListener(SaveTextModelChanged.new("ManualRotationStep"))
		
		pModelTeleportMovement = DefaultToggleModel.new(s.getBoolAt("TeleportMovement", true))
		pModelTeleportMovement.addListener(SaveToggleModelChanged.new("TeleportMovement"))
		
		pModelServerAddress = DefaultTextModel.new(s.getStringAt("ServerAddress", "localhost"))
		pModelServerAddress.addListener(SaveTextModelChanged.new("ServerAddress"))
	end
	
	
	
	/** Get session settings. */
	public static func SessionSettings get()
		return GameApp.getGameApp().getSessionSettings()
	end
	
	
	
	/** Enable VR model. */
	public func DefaultToggleModel getModelEnableVR()
		return pModelEnableVR
	end
	
	/** Enable HMD. */
	public func DefaultToggleModel getModelEnableHMD()
		return pModelEnableHMD
	end
	
	/** Show VR camera model. */
	public func DefaultToggleModel getModelShowVRCamera()
		return pModelShowVRCamera
	end
	
	/** Use Eye Gaze Tracking model. */
	public func DefaultToggleModel getModelUseEyeGazeTracking()
		return pModelUseEyeGazeTracking
	end
	
	/** Use Facial Tracking model. */
	public func DefaultToggleModel getModelUseFacialTracking()
		return pModelUseFacialTracking
	end
	
	/** Auto export model. */
	public func DefaultToggleModel getModelAutoExport()
		return pModelAutoExport
	end
	
	/** Record animation frame rate model. */
	public func DefaultRangeModel getModelRecordFrameRate()
		return pModelRecordFrameRate
	end
	
	/** Record devices model. */
	public func DefaultListModel getModelRecordDevices()
		return pModelRecordDevices
	end
	
	/** Record devices. */
	public func RecordDevices getRecordDevices()
		return pModelRecordDevices.getAt(pModelRecordDevices.getSelected()) cast RecordDevices
	end
	
	/** Smooth slot strength model. */
	public func DefaultRangeModel getModelSmoothSlotStrength()
		return pModelSmoothSlotStrength
	end
	
	/** Smooth slot strength. */
	public func float getSmoothSlotStrength()
		return 0.1 * pModelSmoothSlotStrength.getValue()
	end
	
	/** Auto stop recording model. */
	public func DefaultToggleModel getModelAutoStopRecord()
		return pModelAutoStopRecord
	end
	
	/** Interaction bubble size model. */
	public func DefaultRangeModel getModelInteractionBubbleSize()
		return pModelInteractionBubbleSize
	end
	
	/** Interaction bubble size. */
	public func float getInteractionBubbleSize()
		return 0.01 * pModelInteractionBubbleSize.getValue()
	end
	
	/** Camera enable GI model. */
	public func DefaultToggleModel getModelCameraEnableGI()
		return pModelCameraEnableGI
	end
	
	/** Full bright model. */
	public func DefaultToggleModel getModelFullBright()
		return pModelFullBright
	end
	
	
	
	/** Actor HUD Camera. */
	public func DefaultListModel getModelHudCamera()
		return pModelHudCamera
	end
	
	/** Selected Actor HUD Camera or null. */
	public func ECBRemoteCamera.Instance getHudCamera()
		return pModelHudCamera.getSelectedElement() cast ECBRemoteCamera.Instance
	end
	
	/** Update actor HUD camera model. */
	public func void updateModelHudCamera()
		var Array content = Array.new()
		
		var ECBRemoteCamera.Instance selection = getHudCamera()
		
		var GameWorld gameWorld = GameApp.getGameApp().getWindowGameWorld().getGameWorld()
		if gameWorld != null
			gameWorld.forEachElement(block BehaviorElement each
				content.addAll(ECBRemoteCamera.getAllInstancesIn(each))
			end)
		end
		
		content.sort(block ECBRemoteCamera.Instance a, ECBRemoteCamera.Instance b
			return a.getName().compare(b.getName())
		end)
		
		content.insert(0, null)
		
		pModelHudCamera.setContent(content)
		pModelHudCamera.setSelectedElement(selection)
	end
	
	/** Show VR Controllers model. */
	public func DefaultToggleModel getModelShowVRControllers()
		return pModelShowVRControllers
	end
	
	/** Model right wrist menu panel. */
	public func DefaultListModel getModelRightWristMenuPanel()
		return pModelRightWristMenuPanel
	end
	
	/** Right wrist menu panel. */
	public func WristMenuPanel getRightWristMenuPanel()
		return pModelRightWristMenuPanel.getSelectedElement() cast WristMenuPanel
	end
	
	/** Model left wrist menu panel. */
	public func DefaultListModel getModelLeftWristMenuPanel()
		return pModelLeftWristMenuPanel
	end
	
	/** Left wrist menu panel. */
	public func WristMenuPanel getLeftWristMenuPanel()
		return pModelLeftWristMenuPanel.getSelectedElement() cast WristMenuPanel
	end
	
	/** Model project actor to ground. */
	public func DefaultToggleModel getModelProjectToGround()
		return pModelProjectToGround
	end
	
	/** Project actor to ground. */
	public func bool getProjectToGround()
		return pModelProjectToGround.getToggled()
	end
	
	/** Model manual movement step. */
	public func DefaultTextModel getModelManualMovementStep()
		return pModelManualMovementStep
	end
	
	/** Manual movement step. */
	public func float getManualMovementStep()
		return pModelManualMovementStep.getText().toFloat()
	end
	
	/** Model manual rotation step. */
	public func DefaultTextModel getModelManualRotationStep()
		return pModelManualRotationStep
	end
	
	/** Manual rotation step. */
	public func float getManualRotationStep()
		return pModelManualRotationStep.getText().toFloat()
	end
	
	/** Model teleport movement. */
	public func DefaultToggleModel getModelTeleportMovement()
		return pModelTeleportMovement
	end
	
	/** Teleport movement. */
	public func bool getTeleportMovement()
		return pModelTeleportMovement.getToggled()
	end
	
	
	
	/** Server address. */
	public func DefaultTextModel getModelServerAddress()
		return pModelServerAddress
	end
end
