/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap

pin Democap.Behaviors

pin Dragengine.LoadSave
pin Dragengine.Scenery
pin Dragengine.Preloading
pin Dragengine.Utils


/**
 * Scene used for motion capturing. Scenes compose of a world file and scene objects.
 * Scene objects can be motion captured characters and props.
 */
class Scene
	var String pName
	var String pPathWorld
	var StageDirections pStageDirections
	var MemoryFile pSaveState
	var FileUsageManager pFileUsage
	var SafeArray pListeners
	var bool pEnableWorldPersistency
	
	
	
	/** Create actor. */
	func new(String name)
		pPathWorld = "/content/worlds/default.deworld"
		pStageDirections = StageDirections.new()
		pFileUsage = FileUsageManager.new()
		pListeners = SafeArray.new()
		setName(name)
	end
	
	/** Create copy of actor. */
	func new(String name, Scene scene)
		pPathWorld = scene.pPathWorld
		pStageDirections = StageDirections.new(scene.pStageDirections)
		pFileUsage = FileUsageManager.new(scene.pFileUsage)
		pListeners = SafeArray.new()
		pEnableWorldPersistency = scene.pEnableWorldPersistency
		setName(name)
		
		if scene.pSaveState != null
			pSaveState = MemoryFile.new(scene.pSaveState)
		end
	end
	
	/** Load scene. */
	func new(PersistencyEnvironment env, FileReader reader)
		pStageDirections = StageDirections.new()
		pFileUsage = FileUsageManager.new()
		pListeners = SafeArray.new()
		
		if env.getPersistency().getDebugEnableCanaryValue()
			if not reader.readString(Persistency.debugCanaryValue_BEGIN.getLength() ).equals(Persistency.debugCanaryValue_BEGIN)
				throw EInvalidParam.new("Begin canary value invalid at reader position " + reader.getPosition())
			end
		end
		
		select reader.readByte() // version
		case 0
			readVersion0(env, reader)
			
		case 1
			readVersion0(env, reader)
			
			var int i, count = reader.readUShort()
			for i = 0 to count
				pStageDirections.add(StageDirection.new(env, reader))
			end
			
		else
			throw EInvalidParam.new("Unsupported scene file version")
		end
		
		if env.getPersistency().getDebugEnableCanaryValue()
			if not reader.readString(Persistency.debugCanaryValue_END.getLength() ).equals(Persistency.debugCanaryValue_END)
				throw EInvalidParam.new("End canary value invalid at reader position " + reader.getPosition())
			end
		end
	end
	
	private func void readVersion0(PersistencyEnvironment env, FileReader reader)
		var PersistencyFlags flags = PersistencyFlags.new(1, reader)
		pEnableWorldPersistency = flags.getAt(0)
		
		pName = reader.readString8()
		pPathWorld = reader.readString8()
		
		pFileUsage.readFromFile(reader)
		
		reader.readUShort() // TODO custom object classes
		
		var int size = reader.readUInt() // save state size
		if size > 0 // 0 size means not saved
			pSaveState = MemoryFile.new("saveState")
			pSaveState.getWriter(false).writeData(reader, size)
		end
	end
	
	/** Dispose of scene. */
	func void dispose()
		pListeners.removeAll()
		
		if pStageDirections != null
			pStageDirections.dispose()
			pStageDirections = null
		end
		
		if pFileUsage != null
			pFileUsage.setParent(null)
			pFileUsage = null
		end
	end
	
	
	
	/** Name. */
	func String getName()
		return pName
	end
	
	/** Set name. */
	func void setName(String name)
		if name.equals(pName)
			return
		end
		if name.empty()
			throw EInvalidParam.new("name is empty string")
		end
		
		pName = name
		
		pListeners.forEach(block SceneListener each
			each.sceneNameChanged(this)
		end)
	end
	
	/** Path to world file. */
	func String getPathWorld()
		return pPathWorld
	end
	
	/** Set path to world file. */
	func void setPathWorld(String path)
		if path == null
			throw ENullPointer.new("path")
		end
		
		pPathWorld = path
	end
	
	/** Save state or null. */
	func MemoryFile getSaveState()
		return pSaveState
	end
	
	/** File usage. */
	func FileUsageManager getFileUsage()
		return pFileUsage
	end
	
	/** Enable game world persistency. */
	func bool getEnableWorldPersistency()
		return pEnableWorldPersistency
	end
	
	
	
	/** Stage directions. */
	func StageDirections getStageDirections()
		return pStageDirections
	end
	
	/** Notify listeners stage directions added or removed. */
	func void notifyStageDirectionsChanged()
		pListeners.forEach(block SceneListener each
			each.stageDirectionsChanged(this)
		end)
	end
	
	/** Notify listeners stage direction name changed. */
	func void notifyStageDirectionNameChanged(StageDirection stageDirection)
		var int index = pStageDirections.getModel().indexOf(stageDirection)
		pStageDirections.getModel().notifyContentChanged(index, index)
		
		pListeners.forEach(block SceneListener each
			each.stageDirectionNameChanged(this, stageDirection)
		end)
	end
	
	/** Notify listeners stage direction content changed. */
	func void notifyStageDirectionContentChanged(StageDirection stageDirection)
		var int index = pStageDirections.getModel().indexOf(stageDirection)
		pStageDirections.getModel().notifyContentChanged(index, index)
		
		pListeners.forEach(block SceneListener each
			each.stageDirectionContentChanged(this, stageDirection)
		end)
	end
	
	
	
	/** Load world. */
	func void loadWorld(Project project, Array keepObjects)
		var GameApp app = GameApp.getGameApp()
		var StartGame loader
		try
			loader = StartGame.new(app.getWindowGameWorld(), project, this, keepObjects)
			
		catch Exception e
			app.getConsole().addError("Scene.loadWorld", e)
			revertWorldToDefault(project, keepObjects)
			return
		end
		
		// only try-catched here since BaseGameApp.startLoadGameWorld does already call
		// cancelLoading() on the loader in case of failure. doing it twice would cause
		// re-entrant exceptions
		try
			app.startLoadGameWorld(loader)
			
		catch Exception e
			return
		end
	end
	
	/** Save state. */
	func void saveWorld(GameWorld gameWorld)
		if gameWorld == null
			pSaveState = null
			return
		end
		
		var MemoryFile saveState = MemoryFile.new("saveSate")
		
		var PersistencyEnvironment env = PersistencyEnvironment.new(GameApp.getGameApp().getLoaders().getPersistency(), 0)
		var FileWriter writer = saveState.getWriter(false)
		
		var World world = gameWorld.getWorld()
		
		writer.writeByte(env.getVersion())
		
		// write element id generator state. required to be known before loading stubs
		GameApp.getGameApp().getIDGenerator().writeToFile(writer)
		
		// write game world information
		gameWorld.writeToFile(env, writer)
		
		// write all game world stub. required for preloading
		gameWorld.writeElementStubsToFile(env, writer)
		gameWorld.getUniqueIDRemapper().forEach(block UniqueIDRemapper.RemapEntry each
			GameApp.getGameApp().getConsole().addMessage("  - remap " + each.getFirstID() \
				+ " : " + each.getLastID() + " offset " + each.getOffset())
		end)
		
		// write dynamic content
		gameWorld.writeDynamicElementDataToFile(env, writer)
		
		// store save state
		pSaveState = saveState
		pEnableWorldPersistency = true
	end
	
	/** Drop save state. */
	func void dropSaveState()
		pSaveState = null
	end
	
	/** Revert scene world to default. */
	func void revertWorldToDefault(Project project, Array keepObjects)
		GameApp.getGameApp().getConsole().addMessage("Reverting scene '" + pName + "' world to default")
		pSaveState = null
		pPathWorld = "/content/worlds/default.deworld"
		project.save()
		loadWorld(project, keepObjects)
	end
	
	
	/** Add listener. */
	func void addListener(SceneListener listener)
		if listener == null
			throw ENullPointer.new("listener")
		end
		pListeners.add(listener)
	end
	
	/** Remove listener. */
	func void removeListener(SceneListener listener)
		pListeners.remove(listener)
	end
	
	/** Notify listeners scene object added to game world. */
	func void notifyObjectAdded(ECBSceneObject.Instance object)
		pListeners.forEach(block SceneListener each
			each.objectAdded(this, object)
		end)
	end
	
	/** Notify listeners scene object removed to game world. */
	func void notifyObjectRemoved(ECBSceneObject.Instance object)
		pListeners.forEach(block SceneListener each
			each.objectRemoved(this, object)
		end)
	end
	
	/** Notify listeners all scene objects removed to game world. */
	func void notifyAllObjectsRemoved()
		pListeners.forEach(block SceneListener each
			each.allObjectsRemoved(this)
		end)
	end
	
	/** Notify listeners scene object name changed. */
	func void notifyObjectNameChanged(ECBSceneObject.Instance object)
		pListeners.forEach(block SceneListener each
			each.objectNameChanged(this, object)
		end)
	end
	
	/** Notify listeners scene object geometry changed. */
	func void notifyObjectGeometryChanged(ECBSceneObject.Instance object)
		pListeners.forEach(block SceneListener each
			each.objectGeometryChanged(this, object)
		end)
	end
	
	/** Notify listeners scene object parameter changed. */
	func void notifyObjectParameterChanged(ECBSceneObject.Instance object)
		pListeners.forEach(block SceneListener each
			each.objectParameterChanged(this, object)
		end)
	end
	
	
	
	/** Write scene to file. */
	func void writeToFile(PersistencyEnvironment env, FileWriter writer)
		if env.getPersistency().getDebugEnableCanaryValue()
			writer.writeString(Persistency.debugCanaryValue_BEGIN)
		end
		
		writer.writeByte(1) // version
		
		var PersistencyFlags flags = PersistencyFlags.new(1)
		flags.setAt(0, pEnableWorldPersistency)
		flags.writeToFile(writer)
		
		writer.writeString8(pName)
		writer.writeString8(pPathWorld)
		
		pFileUsage.writeToFile(writer)
		
		writer.writeUShort(0) // TODO custom object classes
		
		if pSaveState != null
			writer.writeUInt(pSaveState.getSize())
			writer.writeData(pSaveState.getReader())
			
		else
			writer.writeUInt(0)
		end
		
		writer.writeUShort(pStageDirections.getCount())
		pStageDirections.forEach(block StageDirection each
			each.writeToFile(env, writer)
		end)
		
		if env.getPersistency().getDebugEnableCanaryValue()
			writer.writeString(Persistency.debugCanaryValue_END)
		end
	end
	
	
	
	/** Compare scene for sorting. */
	func int compare(Object obj)
		if obj castable Scene
			return pName.compare((obj cast Scene).pName)
		end
		return 0
	end
	
	/** String representation. Returns name. */
	func String toString()
		return pName
	end
end
