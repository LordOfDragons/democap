/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap

pin Democap.Behaviors
pin Democap.Characters

pin Dragengine.CameraDirectors
pin Dragengine.Commands
pin Dragengine.Scenery


/**
 * VR camera director. PlayerControlledActorCameraDirector is used as base class to
 * get the player tracking for free.
 */
class VRCameraDirector extends PlayerControlledActorCameraDirector
	private var ECBehaviorVRHMD.Instance pHMD
	
	protected var ECBCharacterConfiguration.Instance character
	protected var ECBehaviorComponent.Instance component
	protected var ECBVRHudInfo.Instance vrHudInfo
	
	protected var Camera pVRCamera
	
	protected var Quaternion pStallProtection
	protected var float pStallProtectionTimer
	
	
	
	/** Create director. */
	public func new()
		setLayerMask(LayerMask.newWith(\
			BaseGameApp.WorldLayerBit.default,\
			GameApp.WorldLayerBit.remoteView))
	end
	
	/** Camera director has been activated. */
	public func void activate()
		super.activate()
		VRSystem.setCamera(pVRCamera)
		pStallProtection = null
	end
	
	/** Camera director has been deactivated. */
	public func void deactivate()
		pStallProtection = null
		VRSystem.setCamera(null)
		super.deactivate()
	end
	
	/** Actor changed. */
	protected func void actorChanged()
		var ECBehaviorPlayerControllable.Instance actor = getActor()
		
		if actor != null
			pHMD = ECBehaviorVRHMD.getInstanceIn(actor.getElement())
			
		else
			pHMD = null
		end
		
		pStallProtection = null
	end
	
	/** Init behaviors. */
	protected func void initBehaviors(BehaviorElement element)
		super.initBehaviors(element)
		character = ECBCharacterConfiguration.getInstanceIn(element)
		component = ECBehaviorComponent.getInstanceIn(element)
		vrHudInfo = ECBVRHudInfo.getInstanceIn(element)
	end
	
	/** Init camera parameters. */
	/*
	public func void initCameraParameters()
		super.initCameraParameters()
		
		if getCamera() != pVRCamera
			getCamera().setEnableGI(false)
		end
	end
	*/
	
	/** Set VR camera. */
	public func void setVRCamera(Camera camera)
		pVRCamera = camera
	end
	
	/** Update camera. */
	public func void updateCamera(float elapsed)
		// update stalling protection timer
		pStallProtectionTimer += elapsed
		
		// update VR camera
		//pVRCamera.setEnableGI(false)
		
		if pHMD == null or pHMD.isDetached()
			// try finding the input device directly. this is temporary
			var InputDevice device = GameApp.getGameApp().getBindingManager().findDevice(block InputDevice each
				return each.getType() == InputDeviceType.vrHMD
			end)
			
			if device != null
				pVRCamera.setPosition(DVector.new(device.getDevicePosePosition()))
				pVRCamera.setOrientation(device.getDevicePoseOrientation())
			end
			
		else
			var DMatrix matrix = getVRCameraMatrix()
			pVRCamera.setPosition(matrix.getPosition())
			pVRCamera.setOrientation(matrix.toQuaternion())
		end
		
		// update free moving camera
		var DMatrix matrix = getCameraMatrix()
		var Camera camera = getCamera()
		camera.setPosition(matrix.getPosition())
		camera.setOrientation(matrix.toQuaternion())
		
		// if controllable actor has ECBVRHudInfo update it
		if vrHudInfo != null
			vrHudInfo.update()
		end
	end
	
	/** Calculate camera matrix. Has to ignore element in contrary to VR camera matrix. */
	public func DMatrix getCameraMatrix()
		return getLocalMatrix() * DMatrix.newTranslation(0, 0, -getDistance()) \
			* DMatrix.newRotation(-getElevation(), getAzimuth(), 0) * DMatrix.newTranslation(getPivot())
	end
	
	/** Calculate VR camera matrix */
	public func DMatrix getVRCameraMatrix()
		if pHMD == null or pHMD.isDetached()
			return DMatrix.newWorld(pVRCamera.getPosition(), pVRCamera.getOrientation())
		end
		
		if character == null or component == null
			return pHMD.getMatrix()
		end
		
		var CharacterConfiguration config = character.getCharacter()
		if not config.isCalibrated()
			return pHMD.getMatrix()
		end
		
// 		var CharacterTrackerSlot slotHmd = config.getTrackerSlots().firstAttachedWithType(CharacterTrackerSlot.Type.headHmd)
// 		if slotHmd == null
// 			return pHMD.getMatrix()
// 		end
		
		var String bone = config.getCameraBone()
		if bone.empty()
			return pHMD.getMatrix()
		end
		
		var int boneIndex = component.getComponent().indexOfBoneNamed(bone)
		if boneIndex == -1
			return pHMD.getMatrix()
		end
		
		var Matrix matrix = config.getCameraMatrix() * component.getComponent().boneGetMatrix(boneIndex)
		
		// protect against stalling. stalling can happen for various reasons:
		// - activate a configuration previously calibrated against head tracker
		// - calibrating a configuration with broken setup
		// - tracking device getting lost
		// 
		// in all these situations the bone the HDM is attached to can stop moving and rotating.
		// this can prevent the user from using the VR menu to fix the problem.
		// 
		// to solve this problem the orientation of the HMD bone is tracked. if the orientation
		// does not change for a certain amount of time the tracking is considered stalled and
		// the camera is switched to HMD matrix. once the bone starts rotating again the stalling
		// is cleared. tracking the orientation is enough. tracking the position is not required
		if pStallProtection != null
			var Quaternion orientation = matrix.toQuaternion()
			if orientation.isEqualTo(pStallProtection, 0.001)
				if pStallProtectionTimer > 1
					return pHMD.getMatrix() // stalled
				end
				
			else
				pStallProtection = orientation
				pStallProtectionTimer = 0
			end
			
		else
			pStallProtection = matrix.toQuaternion()
			pStallProtectionTimer = 0
		end
		
		// attach to bone
		return (matrix.toDMatrix() * getActor().getElement().getElementMatrix()).normalize()
	end
end
