/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap

pin Dragengine.CameraDirectors
pin Dragengine.Commands
pin Dragengine.Scenery


/**
 * VR camera director. PlayerControlledActorCameraDirector is used as base class to
 * get the player tracking for free.
 */
class VRCameraDirector extends PlayerControlledActorCameraDirector
	private var ECBehaviorVRHMD.Instance pHMD
	
	/** Create director. */
	public func new()
	end
	
	/** Camera director has been activated. */
	public func void activate()
		super.activate()
		VRSystem.setCamera(getCamera())
	end
	
	/** Camera director has been deactivated. */
	public func void deactivate()
		VRSystem.setCamera(null)
		super.deactivate()
	end
	
	/** Actor changed. */
	protected func void actorChanged()
		var ECBehaviorPlayerControllable.Instance actor = getActor()
		
		if actor != null
			pHMD = ECBehaviorVRHMD.getInstanceIn(actor.getElement())
			
		else
			pHMD = null
		end
	end
	
	/** Set camera. */
	public func void setCamera(Camera camera)
		super.setCamera(camera)
		VRSystem.setCamera(camera)
	end
	
	/** Update camera. */
	public func void updateCamera(float elapsed)
		//getCamera().setEnableGI(false)
		
		if pHMD == null or pHMD.isDetached()
			return
		end
		
		var DMatrix matrix = getCameraMatrix()
		var Quaternion orientation = matrix.toQuaternion()
		
		var Vector angles = orientation.getEulerAngles()
		setAzimuth(angles.getY())
		setElevation(angles.getX())
		
		var Camera camera = getCamera()
		camera.setPosition(matrix.getPosition())
		camera.setOrientation(orientation)
	end
	
	/** Overrides ElementCameraDirector.getCameraMatrix() */
	public func DMatrix getCameraMatrix()
		if pHMD != null and pHMD.isAttached()
			return pHMD.getMatrix()
			
		else
			return DMatrix.newWorld(getCamera().getPosition(), getCamera().getOrientation())
		end
	end
end
