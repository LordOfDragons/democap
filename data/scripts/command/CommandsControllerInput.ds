/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Commands

pin Democap.Actions

pin Dragengine.Commands
pin Dragengine.Scenery


/**
 * Commands for actor actions with AAControllerInput support.
 * 
 * Contains various commands as sub classes. A static helper method adds instances of each
 * command to the command manager of a BaseGameApp.
 */
class CommandsAAControllerInput
	/** Base class operating only on actors with AAControllerInput action. */
	class Base extends Command
		protected var ECBehaviorPlayerControllable.Tracker pTracker
		protected var bool pRightHand
		
		func new(ECBehaviorPlayerControllable.Tracker tracker, String name, \
		String description, bool rightHand) super(name, description)
			if tracker == null
				throw ENullPointer.new("tracker")
			end
			pTracker = tracker
			pRightHand = rightHand
		end
		
		protected func ECBehaviorPlayerControllable.Tracker getTracker()
			return pTracker
		end
		
		protected func AAControllerInput getControllerInput()
			var ECBehaviorPlayerControllable.Instance actor = pTracker.getActor()
			if actor == null
				return null
			end
			
			var ECBehaviorActorAIAction.Instance aiAction = \
				ECBehaviorActorAIAction.getInstanceIn(actor.getElement())
			if aiAction != null and aiAction.getAction() castable AAControllerInput
				return aiAction.getAction() cast AAControllerInput
				
			else
				return null
			end
		end
		
		func void touch()
			var AAControllerInput cinput = getControllerInput()
			if cinput != null
				touch(cinput)
			end
		end
		
		func void untouch()
			var AAControllerInput cinput = getControllerInput()
			if cinput != null
				untouch(cinput)
			end
		end
		
		func void start()
			var AAControllerInput cinput = getControllerInput()
			if cinput != null
				press(cinput)
			end
		end
		
		func void stop()
			var AAControllerInput cinput = getControllerInput()
			if cinput != null
				release(cinput)
			end
		end
		
		func void analogAbsolute(float value)
			var AAControllerInput cinput = getControllerInput()
			if cinput != null
				analogAbsolute(cinput, value)
			end
		end
		
		
		/** Touched. */
		func void touch(AAControllerInput action)
		end
		
		/** Untouched. */
		func void untouch(AAControllerInput action)
		end
		
		/** Pressed. */
		func void press(AAControllerInput action)
		end
		
		/** Released. */
		func void release(AAControllerInput action)
		end
		
		/** Analog absolute. */
		func void analogAbsolute(AAControllerInput action, float value)
		end
	end
	
	
	
	/** Trigger action. */
	class TriggerAction extends Base
		func new(ECBehaviorPlayerControllable.Tracker tracker, String name, \
		String description, bool rightHand) super(tracker, name, description, rightHand)
		end
		
		func void touch(AAControllerInput action)
			action.triggerTouch(pRightHand)
		end
		
		func void untouch(AAControllerInput action)
			action.triggerUntouch(pRightHand)
		end
		
		func void press(AAControllerInput action)
			action.triggerPull(pRightHand)
		end
		
		func void release(AAControllerInput action)
			action.triggerRelease(pRightHand)
		end
	end
	
	/** Menu button. */
	class MenuAction extends Base
		func new(ECBehaviorPlayerControllable.Tracker tracker, String name, \
		String description, bool rightHand) super(tracker, name, description, rightHand)
		end
		
		func void touch(AAControllerInput action)
			action.menuTouch(pRightHand)
		end
		
		func void untouch(AAControllerInput action)
			action.menuUntouch(pRightHand)
		end
		
		func void press(AAControllerInput action)
			action.menuPress(pRightHand)
		end
		
		func void release(AAControllerInput action)
			action.menuRelease(pRightHand)
		end
	end
	
	/** Secondary button. */
	class SecondaryAction extends Base
		func new(ECBehaviorPlayerControllable.Tracker tracker, String name, \
		String description, bool rightHand) super(tracker, name, description, rightHand)
		end
		
		func void touch(AAControllerInput action)
			action.secondaryTouch(pRightHand)
		end
		
		func void untouch(AAControllerInput action)
			action.secondaryUntouch(pRightHand)
		end
		
		func void press(AAControllerInput action)
			action.secondaryPress(pRightHand)
		end
		
		func void release(AAControllerInput action)
			action.secondaryRelease(pRightHand)
		end
	end
	
	/** Track pad analog up-down. */
	class TrackPadUDAction extends Base
		func new(ECBehaviorPlayerControllable.Tracker tracker, String name, \
		String description, bool rightHand) super(tracker, name, description, rightHand)
		end
		
		func void analogAbsolute(AAControllerInput action, float value)
			action.trackPadUD(pRightHand, value)
		end
	end
	
	/** Track pad analog left-right. */
	class TrackPadLRAction extends Base
		func new(ECBehaviorPlayerControllable.Tracker tracker, String name, \
		String description, bool rightHand) super(tracker, name, description, rightHand)
		end
		
		func void analogAbsolute(AAControllerInput action, float value)
			action.trackPadLR(pRightHand, value)
		end
	end
	
	/** Track pad touch. */
	class TrackPadTouchAction extends Base
		func new(ECBehaviorPlayerControllable.Tracker tracker, String name, \
		String description, bool rightHand) super(tracker, name, description, rightHand)
		end
		
		func void touch(AAControllerInput action)
			action.trackPadTouch(pRightHand)
		end
		
		func void untouch(AAControllerInput action)
			action.trackPadUntouch(pRightHand)
		end
	end
	
	/** Grip action. */
	class GripGrabAction extends Base
		func new(ECBehaviorPlayerControllable.Tracker tracker, String name, \
		String description, bool rightHand) super(tracker, name, description, rightHand)
		end
		
		func void touch(AAControllerInput action)
			action.gripTouch(pRightHand)
		end
		
		func void untouch(AAControllerInput action)
			action.gripUntouch(pRightHand)
		end
		
		func void press(AAControllerInput action)
			action.gripGrab(pRightHand)
		end
		
		func void release(AAControllerInput action)
			action.gripUngrab(pRightHand)
		end
		
		func void analogAbsolute(AAControllerInput action, float value)
			action.gripGrabAnalog(pRightHand, value)
		end
	end
	
	/** Two finger action. */
	class TwoFingerAction extends Base
		var int pFinger
		
		func new(ECBehaviorPlayerControllable.Tracker tracker, String name, String description,\
		bool rightHand, int finger) super(tracker, name, description, rightHand)
			pFinger = finger
		end
		
		func void press(AAControllerInput action)
			action.twoFingerPress(pRightHand, pFinger)
		end
		
		func void release(AAControllerInput action)
			action.twoFingerRelease(pRightHand, pFinger)
		end
	end
	
	
	
	/** Add commands to command manager. */
	public static func void addCommands(CommandManager commands, ECBehaviorPlayerControllable.Tracker tracker)
		commands.add(TriggerAction.new(tracker, "triggerRight", "Trigger Right Hand", true))
		commands.add(MenuAction.new(tracker, "menuRight", "Menu Right Hand", true))
		commands.add(SecondaryAction.new(tracker, "secondaryRight", "Secondary Right Hand", true))
		commands.add(TrackPadUDAction.new(tracker, "trackPadUDRight", "Track Pad Up-Down Right Hand", true))
		commands.add(TrackPadLRAction.new(tracker, "trackPadLRRight", "Track Pad Left-Right Right Hand", true))
		commands.add(TrackPadTouchAction.new(tracker, "trackPadTouchRight", "Track Pad Touch Right Hand", true))
		commands.add(GripGrabAction.new(tracker, "gripGrabRight", "Grip Grab Right Hand", true))
		commands.add(TwoFingerAction.new(tracker, "twoFinger1Right", "Index Finger Input Right Hand", true, 0))
		commands.add(TwoFingerAction.new(tracker, "twoFinger2Right", "Middle Finger Input Right Hand", true, 1))
		commands.add(TwoFingerAction.new(tracker, "twoFinger3Right", "Ring Finger Input Right Hand", true, 2))
		commands.add(TwoFingerAction.new(tracker, "twoFinger4Right", "Pinky Finger Input Right Hand", true, 3))
		
		commands.add(TriggerAction.new(tracker, "triggerLeft", "Trigger Left Hand", false))
		commands.add(MenuAction.new(tracker, "menuLeft", "Menu Left Hand", false))
		commands.add(SecondaryAction.new(tracker, "secondaryLeft", "Secondary Left Hand", false))
		commands.add(TrackPadUDAction.new(tracker, "trackPadUDLeft", "Track Pad Up-Down Left Hand", false))
		commands.add(TrackPadLRAction.new(tracker, "trackPadLRLeft", "Track Pad Left-Right Left Hand", false))
		commands.add(TrackPadTouchAction.new(tracker, "trackPadTouchLeft", "Track Pad Touch Left Hand", false))
		commands.add(GripGrabAction.new(tracker, "gripGrabLeft", "Grip Grab Left Hand", false))
		commands.add(TwoFingerAction.new(tracker, "twoFinger1Left", "Index Finger Input Left Hand", false, 0))
		commands.add(TwoFingerAction.new(tracker, "twoFinger2Left", "Middle Finger Input Left Hand", false, 1))
		commands.add(TwoFingerAction.new(tracker, "twoFinger3Left", "Ring Finger Input Left Hand", false, 2))
		commands.add(TwoFingerAction.new(tracker, "twoFinger4Left", "Pinky Finger Input Left Hand", false, 3))
	end
	
	
	
	/**
	 * Add default bindings for commands.
	 * 
	 * Adds bindings for these commands:
	 * - "trigger"
	 * - "menu"
	 */
	public static func void addDefaultBindings(DefaultBindingHelper helper)
		if helper.hasVRHand(true)
			helper.vrHandBindButton(true, InputDeviceButtonType.trigger, 0, "triggerRight")
			helper.vrHandBindButton(true, InputDeviceButtonType.action, 0, "menuRight")
			helper.vrHandBindButton(true, InputDeviceButtonType.action, 1, "secondaryRight")
			helper.vrHandBindStick(true, InputDeviceAxisType.touchPad, 0, "trackPadLRRight", "trackPadUDRight")
			helper.vrHandBindButton(true, InputDeviceButtonType.touchPad, 0, "trackPadTouchRight")
			helper.vrHandBindTrigger(true, InputDeviceAxisType.gripGrab, 0, "gripGrabRight")
			helper.vrHandBindButton(true, InputDeviceButtonType.twoFingerTrigger, 0, "twoFinger1Right")
			helper.vrHandBindButton(true, InputDeviceButtonType.twoFingerTrigger, 1, "twoFinger2Right")
			helper.vrHandBindButton(true, InputDeviceButtonType.twoFingerTrigger, 2, "twoFinger3Right")
			helper.vrHandBindButton(true, InputDeviceButtonType.twoFingerTrigger, 3, "twoFinger4Right")
		end
		
		if helper.hasVRHand(false)
			helper.vrHandBindButton(false, InputDeviceButtonType.trigger, 0, "triggerLeft")
			helper.vrHandBindButton(false, InputDeviceButtonType.action, 0, "menuLeft")
			helper.vrHandBindButton(false, InputDeviceButtonType.action, 1, "secondaryLeft")
			helper.vrHandBindStick(false, InputDeviceAxisType.touchPad, 0, "trackPadLRLeft", "trackPadUDLeft")
			helper.vrHandBindButton(false, InputDeviceButtonType.touchPad, 0, "trackPadTouchLeft")
			helper.vrHandBindTrigger(false, InputDeviceAxisType.gripGrab, 0, "gripGrabLeft")
			helper.vrHandBindButton(false, InputDeviceButtonType.twoFingerTrigger, 0, "twoFinger1Left")
			helper.vrHandBindButton(false, InputDeviceButtonType.twoFingerTrigger, 1, "twoFinger2Left")
			helper.vrHandBindButton(false, InputDeviceButtonType.twoFingerTrigger, 2, "twoFinger3Left")
			helper.vrHandBindButton(false, InputDeviceButtonType.twoFingerTrigger, 3, "twoFinger4Left")
		end
	end
end
