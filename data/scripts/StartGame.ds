/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap

pin Dragengine.CameraDirectors
pin Dragengine.Gui
pin Dragengine.Preloading
pin Dragengine.LoadSave
pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * Start game loader class.
 */
class StartGame extends WindowGameWorld.Loader
	private var Scene pScene
	
	
	
	/** Create start game loader. */
	public func new(WindowGameWorld window, Scene scene) super(window)
		pScene = scene
		setPathWorld(scene.getPathWorld())
		
		// load initial data from save state
		if scene.getSaveState() != null
			setPersistency(PersistencyEnvironment.new(\
				GameApp.getGameApp().getLoaders().getPersistency()), scene.getSaveState().getReader())
			
			select getPersistencyReader().readByte() // version
			case 0
				getIDGenerator().readFromFile(getPersistencyReader())
				
			else
				throw EInvalidParam.new("Unsupported version")
			end
			
			setIgnorePersistableElements(true)
			
		else
			getIDGenerator().setFrom(UniqueID.new(1))
		end
	end
	
	
	
	/** Scene. */
	public func Scene getScene()
		return pScene
	end
	
	
	
	/** Create loading window. */
	protected func void createLoadingWindow()
		super.createLoadingWindow()
		
		// the base class implementation activates the desktop input processor.
		// revert back to our split input processor
		GameApp.getGameApp().setSplitInputProcessor()
	end
	
	/** Create game world. */
	protected func GameWorld createGameWorld()
		return MoCapGameWorld.new()
	end
	
	/** Loading world finished successfully. */
	public func void onLoadWorldFinished()
		var GameApp app = BaseGameApp.getApp() cast GameApp
		
		// assign camera director attaching the camera to the player controlled actor
		getWindow().setCameraDirector(app.getVRCameraDirector())
		
		// finish loading world. sets the game world disposing of the previous one
		super.onLoadWorldFinished()
		
		// activate vr camera if required
		if app.getModelShowVRCamera().getToggled()
			getWindow().getWorldRenderer().setCamera(app.getVRCamera())
		end
		
		// finish loading
		app.finishLoadGameWorld()
	end
	
	/** Loading world failed. */
	public func void onLoadWorldFailed()
		super.onLoadWorldFailed()
		
		BaseGameApp.getApp().cancelLoadGameWorld()
	end
end
