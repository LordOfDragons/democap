/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap

pin Dragengine.CameraDirectors
pin Dragengine.Gui
pin Dragengine.Scenery



/**
 * Start game loader class.
 */
class StartGame extends WindowGameWorld.Loader
	/** Create start game loader. */
	public func new(WindowGameWorld window, String pathWorld) super(window)
		setPathWorld(pathWorld)
	end
	
	
	
	/** Create loading window. */
	protected func void createLoadingWindow()
		super.createLoadingWindow()
		
		// the base class implementation activates the desktop input processor.
		// revert back to our split input processor
		GameApp.getGameApp().setSplitInputProcessor()
	end
	
	/** Loading world finished successfully. */
	public func void onLoadWorldFinished()
		var GameApp app = BaseGameApp.getApp() cast GameApp
		
		// assign camera director attaching the camera to the player controlled actor
		getWindow().setCameraDirector(app.getVRCameraDirector())
		
		// finish loading. the super call calls WindowWorldRenderer.setGameWorld() which in
		// turn disposes of the previously set game world. usually this is fine but we want
		// to reused elements across loading new game worlds. for this reason we first clear
		// the previous the game world using the non-dispose version of setGameWorld().
		// then the super call and finishLoadGameWorld() is called. afterwards the game
		// world is disposed. this ensures elements properly transfer to the new game world
		// without needing to know all the details
		var GameWorld oldWorld = getWindow().getGameWorld()
		
		try
			getWindow().setGameWorld(null, false)
			super.onLoadWorldFinished()
			
			if app.getModelShowVRCamera().getToggled()
				getWindow().getWorldRenderer().setCamera(app.getVRCamera())
			end
			
			app.finishLoadGameWorld()
			
		catch Exception e
			app.getConsole().addError("Loading game world failed: " + getPathWorld(), e)
			onLoadWorldFailed()
		end
		
		if oldWorld != null
			oldWorld.dispose()
		end
	end
	
	/** Loading world failed. */
	public func void onLoadWorldFailed()
		// the super call calls WindowWorldRenderer.setGameWorld() which in turn disposes of
		// the previously set game world. usually this is fine but we want to reused elements
		// across loading new game worlds. for this reason we first clear the previous the
		// game world using the non-dispose version of setGameWorld(). then the super call
		// and cancelLoadGameWorld() is called. afterwards the game world is disposed. this
		// ensures elements properly move out of the game world without being disposed of
		var GameWorld oldWorld = getWindow().getGameWorld()
		
		try
			getWindow().setGameWorld(null, false)
			super.onLoadWorldFailed()
			BaseGameApp.getApp().cancelLoadGameWorld()
			
		catch Exception e
			GameApp.getGameApp().getConsole().addError("Cancel game world failed: " + getPathWorld(), e)
		end
		
		if oldWorld != null
			oldWorld.dispose()
		end
	end
end
