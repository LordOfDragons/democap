/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap

pin Dragengine.CameraDirectors
pin Dragengine.Gui
pin Dragengine.Preloading
pin Dragengine.LoadSave
pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * Start game loader class.
 */
class StartGame extends WindowGameWorld.Loader
	private var Scene pScene
	private var PersistencyEnvironment pPersistEnv
	private var FileReader pReader
	
	
	
	/** Create start game loader. */
	public func new(WindowGameWorld window, Scene scene) super(window)
		pScene = scene
		setPathWorld(scene.getPathWorld())
		
		// load initial data from save state
		if scene.getSaveState() != null
			pReader = scene.getSaveState().getReader()
			pPersistEnv = PersistencyEnvironment.new(GameApp.getGameApp().getLoaders().getPersistency())
			
			select pReader.readByte() // version
			case 0
				GameApp.getGameApp().getIDGenerator().readFromFile(pReader)
				
			else
				throw EInvalidParam.new("Unsupported version")
			end
			
			setIgnorePersistableElements(true)
			
		else
			GameApp.getGameApp().getIDGenerator().setFrom(UniqueID.new(1))
		end
	end
	
	
	
	/** Scene. */
	public func Scene getScene()
		return pScene
	end
	
	
	
	/** Create loading window. */
	protected func void createLoadingWindow()
		super.createLoadingWindow()
		
		// the base class implementation activates the desktop input processor.
		// revert back to our split input processor
		GameApp.getGameApp().setSplitInputProcessor()
	end
	
	/** Load world from *.deworld file. */
	protected func void loadWorld()
		super.loadWorld()
		
		// store next object ID. this is done always
		var StubGameWorld stubGameWorld = getStubWorld()
		var GameWorld gameWorld = stubGameWorld.getGameWorld()
		var MutableID idGenerator = GameApp.getGameApp().getIDGenerator()
		
		var UniqueID nextObjectID = stubGameWorld.getNextObjectID()
		gameWorld.setNextObjectID(nextObjectID)
		
		var UniqueID firstID = UniqueID.new(1)
		if idGenerator.toUniqueID() > firstID
			gameWorld.getUniqueIDRemapper().add(firstID, nextObjectID, idGenerator.toUniqueID() - firstID)
		end
		idGenerator.incrementBy(nextObjectID - firstID)
		
		// for loading from file read game world from file
		if pPersistEnv != null
			getStubWorld().getGameWorld().readFromFile(pPersistEnv, pReader)
		end
		
		// read element stubs from file. this call does a couple of things.
		// 
		// first it reads the next object ID and unique ID remapper.
		// 
		// then it remaps the elements stubs created while loading the world using the unique
		// ID remapper load in the previous step. for this reason this call has to come after
		// the create element calls above.
		// 
		// then the dynamic element stubs are read. this creates the dynamnic elements not
		// present in the game world at the time the world has been designed
		gameWorld.readElementStubsFromFile(pPersistEnv, pReader, GameApp.getGameApp().getIDGenerator(), \
			GameApp.getGameApp().getElementClassList(), stubGameWorld )
		
		gameWorld.getUniqueIDRemapper().forEach(block UniqueIDRemapper.RemapEntry each
			GameApp.getGameApp().getConsole().addMessage("  - remap " + each.getFirstID() + " : " \
				+ each.getLastID() + " offset " + each.getOffset())
		end)
	end
	
	/** Create content from stubs. */
	protected func void createContentFromStub()
		if pPersistEnv == null
			super.createContentFromStub()
			return
		end
		
		var StubGameWorld stubGameWorld = getStubWorld()
		var GameWorld gameWorld = stubGameWorld.getGameWorld()
		var Console console = getConsole()
		
		// verify preloading
		stubGameWorld.verifyPreloading(console)
		if getDebugVerifyStubProperties() != null
			getDebugVerifyStubProperties().verifyWorld(stubGameWorld)
		end
		
		// create all non-persistable elements from the world file
		stubGameWorld.createAndAddNonPersistableElements(console)
		
		// create persistable elements added to the world file since the last saving
		if stubGameWorld.getNewElementsRange() != null
			stubGameWorld.createAndAddPersistableElements(console, stubGameWorld.getNewElementsRange())
		end
		
		// load all persistable elements from the save state
		stubGameWorld.loadAndAddPersistableElements(console, pPersistEnv, pReader)
		
// 		addDecalVisitor.setWorld( this.pWorld )
		stubGameWorld.createWorldDecals(getDecalBuilder(), console)
	end
	
	/** Loading world finished successfully. */
	public func void onLoadWorldFinished()
		var GameApp app = BaseGameApp.getApp() cast GameApp
		
		// assign camera director attaching the camera to the player controlled actor
		getWindow().setCameraDirector(app.getVRCameraDirector())
		
		// finish loading world. sets the game world disposing of the previous one
		super.onLoadWorldFinished()
		
		// activate vr camera if required
		if app.getModelShowVRCamera().getToggled()
			getWindow().getWorldRenderer().setCamera(app.getVRCamera())
		end
		
		// finish loading
		app.finishLoadGameWorld()
	end
	
	/** Loading world failed. */
	public func void onLoadWorldFailed()
		super.onLoadWorldFailed()
		
		BaseGameApp.getApp().cancelLoadGameWorld()
	end
end
