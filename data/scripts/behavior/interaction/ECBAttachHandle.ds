/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Behaviors

pin Democap.Characters

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * Behavior attaching handle to parent. Calculates the position to attach to using position
 * vector which indicates position for each axis individual using 0 for center, positive value
 * for positive axis and negative value for negative axis. Position vector is multiplied
 * with half-size of parent. Resizes element relative to size of parent.
 */
class ECBAttachHandle extends DefaultECBehavior
	/** Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		var ECBAttachHandle pECBehavior
		var Vector pPosition
		var Vector pOffset
		var Vector pRotation
		var float pScale
		var bool pAbsolute
		var bool pFixScale
		
		
		
		/** Create behavior instance. */
		func new(ECBAttachHandle ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
		end
		
		/** Init behavior instance. */
		func void init(StubElement stub)
			var CodecPropertyString codec = getElement().getClass().getCodecPropertyString()
			
			pPosition = pECBehavior.position.getVector(stub, codec)
			pOffset = pECBehavior.offset.getVector(stub, codec)
			pRotation = pECBehavior.rotation.getVector(stub, codec)
			pScale = DEMath.max(pECBehavior.scale.getValue(stub), 0.0)
			pAbsolute = pECBehavior.absolute.getValue(stub)
			pFixScale = pECBehavior.fixScale.getValue(stub)
		end
		
		
		
		/**
		 * Position for each axis relative to parent element. Uses 0 for center, positive value
		 * for positive axis and negative value for negative axis. Position vector is multiplied
		 * by half-size of parent.
		 */
		func Vector getPosition()
			return pPosition
		end
		
		/**
		 * Offset relative to position affected by scaling but not parent element size.
		 */
		func Vector getOffset()
			return pOffset
		end
		
		/** Rotation relative to parent element. */
		func Vector getRotation()
			return pRotation
		end
		
		/** Resizes element relative to size of parent. */
		func float getScale()
			return pScale
		end
		
		/** Attach absolute or relative. */
		func bool getAbsolute()
			return pAbsolute
		end
		
		/** Fix scale. */
		func bool getFixScale()
			return pFixScale
		end
		
		
		
		/** Attach to parent. */
		func void attachToParent(Element parent)
			var BehaviorElement beparent = parent cast BehaviorElement
			
			var ECBShowInteractHandles.Instance parentSih = ECBShowInteractHandles.getInstanceIn(beparent)
			if parentSih == null
				return
			end
			
			var Collider parentCollider = ECBehaviorCollider.getInstanceIn(beparent).getCollider()
			if parentCollider == null
				return
			end
			
			var DMatrix parentMatrix = parent.getElementMatrix()
			var Vector parentMinExtend = Vector.new(-0.5, -0.5, -0.5)
			var Vector parentMaxExtend = Vector.new(0.5, 0.5, 0.5)
			
			var Component parentComponent = ECBehaviorComponent.getInstanceIn(beparent).getComponent()
			if parentComponent != null
				parentMatrix = parentComponent.getMatrix()
				
				var Model parentModel = parentComponent.getModel()
				if parentModel != null
					parentMinExtend = parentModel.getMinimumExtend()
					parentMaxExtend = parentModel.getMaximumExtend()
				end
			end
			
			// scale element
			var Vector parentSize = parentMaxExtend - parentMinExtend
			var Vector parentCenter = (parentMinExtend + parentMaxExtend) / 2
			var Vector parentHalfSize = (parentSize / 2).largest(Vector.new(0.01, 0.01, 0.01))
			
			var float scaleValue = pScale
			if not pFixScale
				scaleValue *= parentSih.getHandleSize()
			end
			scaleValue = DEMath.max(scaleValue, 0.01)
			var Vector scale = Vector.new(scaleValue, scaleValue, scaleValue)
			
			// position and rotation
			var DMatrix matrix
			
			if pAbsolute
				var Matrix offset = Matrix.newRT(pRotation,\
					parentHalfSize.compMultiply(pPosition) + pOffset * scaleValue)
				matrix = offset.toDMatrix() * parentMatrix
				
			else
				var Matrix offset = Matrix.newRT(pRotation, parentCenter \
					+ parentHalfSize.compMultiply(pPosition) + pOffset * scaleValue)
				matrix = offset.toDMatrix() * parentMatrix
			end
			
			var DVector position = matrix.getPosition()
			var Quaternion orientation = matrix.toQuaternion()
			
			// attach element. requires first positioning the element then attaching it
			// statically using relative attachment. we could also use absolute attaching
			// but using relative we do not need to deal with offsets of the component
			var BehaviorElement element = getElement()
			element.setGeometry(position, orientation, scale)
			
			var Collider collider = pECBehavior.attachable.instance(element).getCollider().getCollider()
			parentCollider.attachStatic(collider)
			
			element.setParent(parent)
		end
	end
	
	
	
	public var ECBehaviorAttachable attachable
	
	/**
	 * Position for each axis relative to parent element. Uses 0 for center, positive value
	 * for positive axis and negative value for negative axis. Position vector is multiplied
	 * by half-size of parent.
	 */
	public var ECPVector position
	
	/**
	 * Offset relative to position affected by scaling but not parent element size.
	 */
	public var ECPVector offset
	
	/** Rotation relative to parent element. */
	public var ECPVector rotation
	
	/** Resizes element relative to size of parent. */
	public var ECPFloat scale
	
	/** Attach absolute or relative. */
	public var ECPBoolean absolute
	
	/** Fixed scale. */
	public var ECPBoolean fixScale
	
	
	
	/** Create behavior and add it to element class. */
	func new(BehaviorElementClass eclass, ECBehaviorAttachable attachable) super(eclass)
		if attachable == null
			throw ENullPointer.new("attachable")
		end
		
		var String prefix = "attachHandle."
		this.attachable = attachable
		
		position = ECPVector.new(prefix + "position", Vector.new())
		eclass.addProperty(position)
		
		offset = ECPVector.new(prefix + "offset", Vector.new())
		eclass.addProperty(offset)
		
		rotation = ECPVector.new(prefix + "rotation", Vector.new())
		eclass.addProperty(rotation)
		
		scale = ECPFloat.new(prefix + "scale", 1, 0)
		eclass.addProperty(scale)
		
		absolute = ECPBoolean.new(prefix + "absolute", false)
		eclass.addProperty(absolute)
		
		fixScale = ECPBoolean.new(prefix + "fixScale", false)
		eclass.addProperty(fixScale)
		
		eclass.addBehavior(this)
	end
	
	/** Dispose of behavior. */
	func void dispose()
		attachable = null
		super.dispose()
	end
	
	
	
	/** Get instance in element from owner element class. */
	func Instance instance( BehaviorElement element )
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/** Create behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
