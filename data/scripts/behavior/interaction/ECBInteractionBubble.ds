/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2022, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Behaviors

pin Democap.Gui

pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events
pin Dragengine.Preloading
pin Dragengine.Scenery


/**
 * Behavior adding an interaction bubble to the element.
 */
class ECBInteractionBubble extends DefaultECBehavior
	/** Factory creating buttons. */
	interface ButtonFactory
		/** Create buttons and add it to the appropriate panel. */
		func void createAndAddButtons(Instance instance)
	end
	
	/** Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		class SelectableChanged extends ECBSelectable.DefaultListener
			private var Instance pInstance
			
			public func new(Instance instance)
				pInstance = instance
			end
			
			public func void selected(ECBSelectable.Instance instance)
				if pInstance.getElement() != null
					pInstance.selectableChanged()
				end
			end
			
			public func void deselected(ECBSelectable.Instance instance)
				if pInstance.getElement() != null
					pInstance.selectableChanged()
				end
			end
		end
		
		class FlexibleGridLayout implements Layout
			private var Point cellSize, cellHalfSize
			private var int gap, minColumns
			
			public func new(int minColumns)
				cellSize = Point.new(48, 48)
				cellHalfSize = Point.new(24, 24)
				gap = 12
				this.minColumns = minColumns
			end
			
			public func void addWidget(Widget widget, Object settings)
			end
			
			public func void removeWidget(Widget widget)
			end
			
			public func Point getMinimumSize(Container container)
				var int count = getVisibleWidgets(container).getCount()
				var int rows = (DEMath.max(count - 1, 0)) / 4 + 1
				var int columns = DEMath.clamp(count, minColumns, 4)
				return container.getPadding().getSize() + Point.new(\
					cellSize.getX() * columns + gap * (columns - 1),\
					cellSize.getY() * rows + gap * (rows - 1))
			end
			
			public func Point getMinimumSizeForWidth(Container container, int width)
				return getMinimumSize(container)
			end
			
			public func Point getMinimumSizeForHeight(Container container, int height)
				return getMinimumSize(container)
			end
			
			public func void doLayout(Container container)
				var Array list = getVisibleWidgets(container)
				var int count = list.getCount()
				var int rows = (DEMath.max(count - 1, 0)) / 4 + 1
				var int columns = DEMath.clamp(count, minColumns, 4)
				var int halfRows = rows * 2
				var int halfColumns = columns * 2
				var int width = container.getContainerWidth()
				var int height = container.getContainerHeight()
				var BorderSize padding = container.getPadding()
				var Point cellCenter
				var Point cellOffset = Point.new(padding.getLeft(), padding.getTop())
				
				list.forEach(block int index, Widget each
					cellCenter = cellOffset + Point.new(\
						width * ((index % columns) * 2 + 1) / halfColumns,\
						height * ((index / columns) * 2 + 1) / halfRows)
					
					each.setSize(cellSize)
					each.setPosition(cellCenter - cellHalfSize)
				end)
			end
			
			protected func Array getVisibleWidgets(Container container)
				var Array list = Array.new()
				container.forEachWidget(block Widget each
					if each.getVisible()
						list.add(each)
					end
				end)
				return list
			end
		end
		
		class AttachRecordAnimation extends ECBehaviorPlayerControllable.Tracker.DefaultListener
			private var Instance pInstance
			
			public func new(Instance instance)
				pInstance = instance
			end
			
			public func void activeActorChanged(ECBehaviorPlayerControllable.Tracker tracker)
				if tracker.getActor() != null
					pInstance.setRecordAnimation(ECBRecordAnimation.getInstanceIn(tracker.getActor().getElement()))
					
				else
					pInstance.setRecordAnimation(null)
				end
			end
		end
		
		class RecordingStateChanged extends ECBRecordAnimation.DefaultListener
			private var Instance pInstance
			
			public func new(Instance instance)
				pInstance = instance
			end
			
			public func void prepareRecording(ECBRecordAnimation.Instance instance)
				pInstance.updateVisibility()
			end
			
			public func void stopRecording(ECBRecordAnimation.Instance instance)
				pInstance.updateVisibility()
			end
		end
		
		class BubbleToolTipManager extends ToolTipManager
			private var DefaultTextModel pModel
			
			public func new(Desktop desktop, DefaultTextModel model) super(desktop)
				pModel = model
				setPopup(null)
			end
			
			public func void onToolTipChanged()
				var Object toolTip = getToolTip()
				if toolTip == null
					toolTip = ""
				end
				pModel.setText(toolTip.toString())
			end
		end
		
		class SceneObjectNameChanged extends ECBSceneObject.DefaultListener
			private var Instance pInstance
			
			public func new(Instance instance)
				pInstance = instance
			end
			
			public func void nameChanged(ECBSceneObject.Instance instance)
				pInstance.updateModelObjectName()
			end
		end
		
		
		
		private var ECBInteractionBubble pECBehavior
		private var ECBRecordAnimation.Instance pRecordAnimation
		private var AttachRecordAnimation pAttachRecordAnimation
		private var RecordingStateChanged pRecordingStateChanged
		private var ECBSceneObject.Instance pSceneObject
		private var ColliderVolume pCollider
		
		private var Window pWindow
		private var TabLayout pTabLayout
		private var Panel pPanelButtonsSelected
		private var Panel pPanelButtonsDeselected
		private var Vector pAttachPosition
		private var Quaternion pAttachOrientation
		private var ECBSelectable.Instance pParentSelectable
		private var ECBShowInteractHandles.Instance pParentShowInteractHandles
		private var bool pShowSelected
		private var float pDesktopFactorHalfX, pDesktopFactorHalfY
		private var float pDesktopFactorX, pDesktopFactorY
		private var Vector2 pEnlargePanelSize
		private var DefaultTextModel pModelObjectName
		private var DefaultTextModel pModelToolTip
		
		
		/** Create behavior instance. */
		public func new(ECBInteractionBubble ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pAttachPosition = Vector.new()
			pAttachOrientation = Quaternion.newFromEulerY(180)
			pRecordingStateChanged = RecordingStateChanged.new(this)
			pEnlargePanelSize = Vector2.new(20, 20)
			pModelObjectName = DefaultTextModel.new()
			pModelToolTip = DefaultTextModel.new()
		end
		
		/** Init behavior instance. */
		public func void init(StubElement stub)
			var BehaviorElement element = getElement()
			
			pCollider = pECBehavior.attachable.instance(element).getCollider().getCollider() cast ColliderVolume
			
			var Desktop desktop = pECBehavior.renderableDesktop.instance(element).getDesktop()
			pDesktopFactorHalfX = 0.5 / desktop.getWidth()
			pDesktopFactorHalfY = 0.5 / desktop.getHeight()
			pDesktopFactorX = 1.0 / desktop.getWidth()
			pDesktopFactorY = 1.0 / desktop.getHeight()
			
			pWindow = Window.new(Point.new(), desktop.getSize())
			pWindow.runWhileBlockingLayout(block
				pWindow.setDesignerSelector("Window.Bubble")
				pWindow.setCanClose(false)
				pWindow.setCanMaximize(true)
				pWindow.setCanMinimize(false)
				pWindow.setCanMove(false)
				pWindow.setCanResize(false)
				pWindow.setCanReorder(false)
				pWindow.setWindowState(Window.WindowState.maximized)
				
				pTabLayout = TabLayout.new()
				pWindow.setLayout(pTabLayout)
				
				pWindow.addWidget(Panel.new(CentrizedBoxLayout.new(LayoutAxis.y, 0.5, 1), block Panel p
					p.addWidget(Panel.new(FlowLayout.new(LayoutAxis.y), block Panel p2
						p2.setDesignerSelector("Panel.Bubble")
						
						pPanelButtonsDeselected = Panel.new(FlexibleGridLayout.new(1))
						p2.addWidget(pPanelButtonsDeselected)
					end))
				end))
				
				pWindow.addWidget(Panel.new(BorderLayout.new(), block Panel p
					p.addWidget(Panel.new(BorderLayout.new(2), block Panel p2
						p2.setDesignerSelector("Panel.Bubble.Selected")
						
						p2.addWidget(Label.new(pModelObjectName, "Label.Bubble.ObjectName"), BorderLayout.Area.top)
						
						pPanelButtonsSelected = Panel.new(FlexibleGridLayout.new(1))
						p2.addWidget(pPanelButtonsSelected, BorderLayout.Area.content)
						
						p2.addWidget(Label.new(pModelToolTip, "Label.Bubble.ToolTip"), BorderLayout.Area.bottom)
					end), BorderLayout.Area.bottom)
				end))
			end)
			desktop.addWindow(pWindow)
			pWindow.doLayout()
			
			desktop.setToolTipManager(BubbleToolTipManager.new(desktop, pModelToolTip))
		end
		
		/** Dispose of behavior instance. */
		public func void dispose()
			super.dispose()
			
			pPanelButtonsSelected = null
			pPanelButtonsDeselected = null
			pWindow = null
			pTabLayout = null
			pParentSelectable = null
			pParentShowInteractHandles = null
			
			pRecordAnimation = null
			pAttachRecordAnimation = null
			pRecordingStateChanged = null
			pCollider = null
			pSceneObject = null
			pModelObjectName = null
			pModelToolTip = null
		end
		
		
		/** Behavior. */
		public func ECBInteractionBubble getECBehavior()
			return pECBehavior
		end
		
		/** Window. */
		public func Window getWindow()
			return pWindow
		end
		
		/** Selected panel to add buttons to. */
		public func Panel getPanelButtonsSelected()
			return pPanelButtonsSelected
		end
		
		/** Deselected panel to add buttons to. */
		public func Panel getPanelButtonsDeselected()
			return pPanelButtonsDeselected
		end
		
		
		
		/** Align bubble. */
		public func void alignBubble()
			var BehaviorElement element = getElement()
			if not element.getVisible()
				return
			end
			
			var bool sphericalRotation
			var Camera camera
			
			if SessionSettings.get().getModelShowVRCamera().getToggled()
				camera = GameApp.getGameApp().getVRCamera()
				sphericalRotation = true
				
			else
				camera = GameApp.getGameApp().getWindowGameWorld().getCamera()
			end
			
			// we use 90 degrees as field of view because this way it is easier to calculate.
			// the maximum size is limited to avoid problems
			var DVector direction = element.getPosition() - camera.getPosition()
			var float distance = direction.getLength()
			var float referenceSize = DEMath.min(distance, 10.0)
			
			var float scaleValue = referenceSize * SessionSettings.get().getInteractionBubbleSize()
			element.setScaling(Vector.new(scaleValue, scaleValue, scaleValue))
			
			// rotate. for operator view use the camera orientation. this yields a screen oriented
			// billboard type of bubble. for vr lock the up-axis.
			var Quaternion orientation
			
			if sphericalRotation
				var DVector view = direction.normalize()
				var DVector up = DVector.new(0, 1, 0)
				
				if DEMath.fabs(up * view) > 0.999
					return
				end
				
				orientation = DMatrix.newVU(view, up).toQuaternion()
				
			else
				orientation = camera.getOrientation()
			end
			
			element.setOrientation(pAttachOrientation * orientation)
		end
		
		/** Selectable changed. */
		public func void selectableChanged()
			setShowSelected(pParentSelectable != null and pParentSelectable.isSelected())
		end
		
		
		
		/** Record animation or null. */
		public func ECBRecordAnimation.Instance getRecordAnimation()
			return pRecordAnimation
		end
		
		/** Set record animation or null. */
		public func void setRecordAnimation(ECBRecordAnimation.Instance recordAnimation)
			if recordAnimation == pRecordAnimation
				return
			end
			
			if pRecordAnimation != null
				if pRecordAnimation.getElement() != null // not disposed
					pRecordAnimation.removeListener(pRecordingStateChanged)
				end
			end
			
			pRecordAnimation = recordAnimation
			
			if recordAnimation != null
				recordAnimation.addListener(pRecordingStateChanged)
			end
			
			updateVisibility()
		end
		
		
		
		/** Update visibility. */
		public func void updateVisibility()
			var bool visible = true
			
			var BehaviorElement element = getElement()
			if element.getParent() != null
				visible &= element.getParent().getVisible()
			end
			
			if pRecordAnimation != null
				visible &= pRecordAnimation.isNotRecording()
			end
			
			if not pShowSelected
				visible &= pPanelButtonsDeselected.findWidget(block Widget each
					return each.getVisible()
				end) != null
			end
			
			element.setVisible(visible)
			element.setTouchable(visible)
			updateColliderShape()
		end
		
		
		
		/** State changed for example visibility. */
		public func void stateChanged()
			updateRequiresThink()
		end
		
		/** Post think. */
		public func void postThink(float elapsed)
			alignBubble()
		end
		
		/** Added to game world. */
		public func void addToGameWorld()
			pAttachRecordAnimation = AttachRecordAnimation.new(this)
			GameApp.getGameApp().getPlayerControlledActor().addListener(pAttachRecordAnimation)
			pAttachRecordAnimation.activeActorChanged(GameApp.getGameApp().getPlayerControlledActor())
			
			updateVisibility()
		end
		
		/** Remove from game world. */
		public func void removeFromGameWorld()
			setRecordAnimation(null)
			GameApp.getGameApp().getPlayerControlledActor().removeListener(pAttachRecordAnimation)
			pAttachRecordAnimation = null
		end
		
		/** Attach to parent. */
		public func void attachToParent(Element parent)
			if not parent castable BehaviorElement
				return
			end
			
			var BehaviorElement parentElement = parent cast BehaviorElement
			var ECBSelectable.Instance parentSelectable = ECBSelectable.getInstanceIn(parentElement)
			var ECBShowInteractHandles.Instance parentSih = ECBShowInteractHandles.getInstanceIn(parentElement)
			var ECBSceneObject.Instance parentSceneObject = ECBSceneObject.getInstanceIn(parentElement)
			var Collider parentCollider = ECBehaviorCollider.getInstanceIn(parentElement).getCollider()
			if parentSelectable == null or parentCollider == null or parentSceneObject == null
				return
			end
			
			pParentSelectable = parentSelectable
			pParentShowInteractHandles = parentSih
			pSceneObject = parentSceneObject
			
			updateAttachPosition()
			
			var BehaviorElement element = getElement()
			element.setPosition(parentElement.getPosition() + DVector.new(pAttachPosition))
			
			parentCollider.attachRelativeMovement(pCollider)
			
			element.setParent(parentElement)
			
			parentSelectable.addListener(SelectableChanged.new(this))
			
			pSceneObject.addListener(SceneObjectNameChanged.new(this))
			
			updateModelObjectName()
			updateRequiresThink()
			selectableChanged()
		end
		
		public func void updateModelObjectName()
			if pSceneObject != null
				pModelObjectName.setText(pSceneObject.getDisplayName())
				
			else
				pModelObjectName.setText("??")
			end
		end
		
		protected func void updateRequiresThink()
			setRequiresThink(getElement().getVisible())
		end
		
		protected func void setShowSelected(bool showSelected)
			if showSelected == pShowSelected
				return
			end
			
			pShowSelected = showSelected
			
			pTabLayout.selectTab(pWindow, showSelected if 1 else 0)
			pWindow.getDesktop().warpMousePointer(Point.new()) // move top-left corner to clear hover widget
			updateVisibility()
		end
		
		protected func void updateColliderShape()
			var Panel panel = pShowSelected if pPanelButtonsSelected else pPanelButtonsDeselected
			var Vector2 panelSize = Vector2.new(panel.getSize())
			var Vector2 panelCenter = Vector2.new(panel.getDesktopPosition()) + panelSize / 2
			panelSize = panelSize + pEnlargePanelSize
			
			var float halfSizeX = pDesktopFactorHalfX * panelSize.getX()
			var float halfSizeY = pDesktopFactorHalfY * panelSize.getY()
			var float positionX = 0.5 - pDesktopFactorX * panelCenter.getX()
			var float positionY = 1.0 - pDesktopFactorY * panelCenter.getY()
			
			var ShapeList shape = ShapeList.new()
			shape.addBox(Vector.new(positionX, positionY, 0.005), Vector.new(halfSizeX, halfSizeY, 0.005))
			
			pCollider.setShape(shape)
		end
		
		protected func void updateAttachPosition()
			if pSceneObject == null
				return
			end
			
			var Vector parentMinExtend = Vector.new(-0.5, -0.5, -0.5)
			var Vector parentMaxExtend = Vector.new(0.5, 0.5, 0.5)
			
			var Component parentComponent = ECBehaviorComponent.getInstanceIn(pSceneObject.getElement()).getComponent()
			if parentComponent != null
				var Model parentModel = parentComponent.getModel()
				if parentModel != null
					var Matrix matrix = Matrix.newFromQuaternion(pSceneObject.getElement().getOrientation())
					var Vector a = parentModel.getMaximumExtend()
					var Vector b = parentModel.getMinimumExtend()
					var Vector p
					
					parentMinExtend = Vector.new(1000, 1000, 1000)
					parentMaxExtend = Vector.new(-1000, -1000, -1000)
					
					p = matrix * a
					parentMinExtend = parentMinExtend.smallest(p)
					parentMaxExtend = parentMaxExtend.largest(p)
					
					p = matrix * Vector.new(a.getX(), a.getY(), b.getZ())
					parentMinExtend = parentMinExtend.smallest(p)
					parentMaxExtend = parentMaxExtend.largest(p)
					
					p = matrix * Vector.new(a.getX(), b.getY(), a.getZ())
					parentMinExtend = parentMinExtend.smallest(p)
					parentMaxExtend = parentMaxExtend.largest(p)
					
					p = matrix * Vector.new(a.getX(), b.getY(), b.getZ())
					parentMinExtend = parentMinExtend.smallest(p)
					parentMaxExtend = parentMaxExtend.largest(p)
					
					p = matrix * Vector.new(b.getX(), a.getY(), a.getZ())
					parentMinExtend = parentMinExtend.smallest(p)
					parentMaxExtend = parentMaxExtend.largest(p)
					
					p = matrix * Vector.new(b.getX(), a.getY(), b.getZ())
					parentMinExtend = parentMinExtend.smallest(p)
					parentMaxExtend = parentMaxExtend.largest(p)
					
					p = matrix * Vector.new(b.getX(), b.getY(), a.getZ())
					parentMinExtend = parentMinExtend.smallest(p)
					parentMaxExtend = parentMaxExtend.largest(p)
					
					p = matrix * b
					parentMinExtend = parentMinExtend.smallest(p)
					parentMaxExtend = parentMaxExtend.largest(p)
				end
			end
			
			pAttachPosition = (parentMinExtend + parentMaxExtend) / 2
			parentMinExtend = parentMinExtend - pAttachPosition
			parentMaxExtend = parentMaxExtend - pAttachPosition
			
			var float offsetTop = DEMath.max(parentMaxExtend.getY(), parentMinExtend.getY())
			offsetTop += 0.01
			if pParentShowInteractHandles != null
				offsetTop += pParentShowInteractHandles.getHandleSize()
			end
			
			pAttachPosition = pAttachPosition + Vector.new(0, offsetTop, 0)
		end
	end
	
	
	public var ECBehaviorAttachable attachable
	public var ECBehaviorRenderableDesktop renderableDesktop
	
	
	/** Create behavior and add it to element class. */
	public func new(BehaviorElementClass eclass, ECBehaviorAttachable attachable,\
	ECBehaviorRenderableDesktop renderabledesktop) super(eclass)
		if attachable == null
			throw ENullPointer.new("attachable")
		end
		if renderabledesktop == null
			throw ENullPointer.new("renderabledesktop")
		end
		
		var String prefix = "interactionBubble."
		
		this.attachable = attachable
		this.renderableDesktop = renderabledesktop
		
		eclass.addBehavior(this)
	end
	
	/** Dispose of behavior. */
	public func void dispose()
		attachable = null
		renderableDesktop = null
		super.dispose()
	end
	
	
	/** Get instance in element from owner element class. */
	public func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	/** Get behavior in element class or null if absent. */
	static public func ECBInteractionBubble getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBInteractionBubble each
			return true
		end) cast ECBInteractionBubble
	end
	
	/** Get instance in element or null if absent. */
	static public func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	
	/** Create behavior instance. */
	public func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
