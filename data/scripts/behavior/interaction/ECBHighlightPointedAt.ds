/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Behaviors

pin Democap.Characters

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * Behavior adding support to highlight element if pointed at by the user.
 * Uses ECBehaviorOutline to do the highlighting in response to
 * ECBehaviorVRHandPointedAt events.
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/democap:behavior_ecbhighlightpointedat
 */
class ECBHighlightPointedAt extends DefaultECBehavior
	/**
	 * Behavior factory.
	 * 
	 * Automatically assigns these behaviors if present before adding:
	 * - Required: \ref ECBehaviorComponent
	 * - Required: \ref ECBehaviorCollider
	 * - Required: \ref ECBehaviorVRHandPointedAt
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorComponent'/>
	 * <behavior type='ECBehaviorCollider'/>
	 * <behavior type='ECBehaviorVRHandPointedAt'/>
	 * 
	 * <behavior type='ECBHighlightPointedAt'>
	 * </behavior>
	 * \endcode
	 * 
	 * Element class properties added by the behavior can also be set directly inside the tag
	 * be removing the property name prefix and starting with a "." (for exampler ".propertyName").
	 * 
	 * Behavior adds an instance of ECBehaviorOutline. Set outline element properties using
	 * prefix '.outline(highlightPointedAt).*'
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBHighlightPointedAt"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			if not id.empty()
				throw EInvalidParam.new("id is not empty string")
			end
			
			var ECBHighlightPointedAt behavior = ECBHighlightPointedAt.new(eclass,\
				eclass.sharedFactoryHelper.defaultComponent(eclass, parameters),\
				ECBehaviorCollider.getBehaviorIn(eclass),\
				ECBehaviorVRHandPointedAt.getBehaviorIn(eclass))
			
			BehaviorElementClass.sharedFactoryHelper.setPropertiesFromParameters(eclass, parameters)
			
			return behavior
		end
	end
	
	/** Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/** Pointed at changed. */
		class PointedAtChanged extends ECBehaviorVRHandPointedAt.DefaultListener
			protected var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func void handStartsPointingAt(ECBehaviorVRHandPointedAt.Instance instance,\
			ECBehaviorVRHandPointAt.Instance hand)
				pInstance.show()
			end
			
			func void handStopsPointingAt(ECBehaviorVRHandPointedAt.Instance instance,\
			ECBehaviorVRHandPointAt.Instance hand)
				if instance.getPointingHandCount() == 0
					pInstance.hide()
				end
			end
		end
		
		
		protected var ECBHighlightPointedAt pECBehavior
		protected var ECBehaviorVRHandPointedAt.Instance pVRHandPointedAt
		protected var ECBehaviorOutline.Instance pOutline
		
		
		
		/** Create behavior instance. */
		func new(ECBHighlightPointedAt ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			
			pVRHandPointedAt = ecbehavior.getVRHandPointedAt().instance(element)
			pOutline = ecbehavior.getOutline().instance(element)
		end
		
		/** Init behavior instance. */
		func void init(StubElement stub)
			pVRHandPointedAt.addListener(PointedAtChanged.new(this))
		end
		
		
		
		/** Show highlight. */
		func void show()
			pOutline.setVisible(true)
		end
		
		/** Hide highlight. */
		func void hide()
			pOutline.setVisible(false)
		end
		
		
		
		/** Read behavior from file. */
		func void readFromFile( PersistencyEnvironment env, FileReader reader )
			super.readFromFile(env, reader)
			
			// while saving it is possible the user pointed at the element.
			// make sure highlighting is invisible after loading
			pOutline.setVisible(false)
		end
	end
	
	
	
	protected var ECBehaviorVRHandPointedAt pVRHandPointedAt
	protected var ECBehaviorOutline pOutline
	
	
	
	/** Create behavior and add it to element class. */
	func new(BehaviorElementClass eclass, ECBehaviorComponent component,\
	ECBehaviorCollider collider, ECBehaviorVRHandPointedAt vrHandPointedAt) super(eclass)
		if vrHandPointedAt == null
			throw ENullPointer.new("vrHandPointedAt")
		end
		
		pVRHandPointedAt = vrHandPointedAt
		
		pOutline = ECBehaviorOutline.new(eclass, component, collider, "highlightPointedAt")
		pOutline.getSkin().setPath("/content/materials/outline/outlinePointAt.deskin")
		
		eclass.addBehavior(this)
	end
	
	/** Dispose of behavior. */
	func void dispose()
		pOutline = null
		pVRHandPointedAt = null
		super.dispose()
	end
	
	
	
	/** VR hand pointed at behavior. */
	func ECBehaviorVRHandPointedAt getVRHandPointedAt()
		return pVRHandPointedAt
	end
	
	/** Outline behavior. */
	func ECBehaviorOutline getOutline()
		return pOutline
	end
	
	
	
	/** Get instance in element from owner element class. */
	func Instance instance( BehaviorElement element )
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/** Create behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
