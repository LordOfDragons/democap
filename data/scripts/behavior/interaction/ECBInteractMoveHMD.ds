/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Behaviors

pin Dragengine.Scenery
pin Dragengine.Preloading
pin Dragengine.Utils


/**
 * Behavior adding support to move object relative to HMD using handle. Requires object to
 * support ECBToggleVisibility.
 */
class ECBInteractMoveHMD extends ECBInteractHandle
	/** Behavior instance. */
	class Instance extends ECBInteractHandle.Instance
		protected var ECBInteractMoveHMD pECBehavior
		protected var ECBToggleVisibility.Instance pToggleVisibility
		protected var DMatrix pInteractMatrix
		protected var DVector pPlanePosition
		protected var DVector pPlaneOffset
		protected var Vector pPlaneX
		protected var Vector pPlaneY
		protected var float pSphereRadius
		
		
		
		/** Create behavior instance. */
		func new(ECBInteractMoveHMD ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
		end
		
		/** Dispose of behavior instance. */
		func void dispose()
			pToggleVisibility = null
			super.dispose()
		end
		
		
		
		/** Behavior. */
		func ECBInteractMoveHMD getECBehavior()
			return pECBehavior
		end
		
		
		
		/** Start interacting. */
		func void startInteract(Matrix viewMatrix, DVector rayOrigin, Vector rayDirection, DVector hitPoint)
			var BehaviorElement element = getElement().getParent() cast BehaviorElement
			if element == null
				return
			end
			
			pToggleVisibility = ECBToggleVisibility.getInstanceIn(element)
			if pToggleVisibility == null or not pToggleVisibility.getVisible()
				return
			end
			
			var ECBehaviorPlayerControllable.Instance player = \
				GameApp.getGameApp().getPlayerControlledActor().getActor()
			if player == null
				return
			end
			
			var BaseVRActor actor = player.getElement() cast BaseVRActor
			var DVector actorPosition = actor.getPosition()
			
			pInteractMatrix = element.getElementMatrix().normalize()
			
			pPlanePosition = actorPosition.combine(hitPoint, true, false, true)
			pPlaneOffset = pPlanePosition - actorPosition
			
			var float denom = rayDirection.getY()
			if denom != 0
				var float lambda = (pPlanePosition - rayOrigin).getY() / denom
				var DVector hp = rayOrigin + DVector.new(rayDirection) * lambda
				pPlaneX = (hp - pPlanePosition).toVector().normalize()
				
			else
				pPlaneX = (hitPoint - pPlanePosition).toVector().normalize()
			end
			
			pPlaneY = (Vector.new(0, 1, 0) % pPlaneX).normalize()
		end
		
		/** Start interacting. */
		func void startInteract(ECBehaviorVRHandPointAt.Instance pointAt)
			var BehaviorElement element = getElement().getParent() cast BehaviorElement
			if element == null
				return
			end
			
			pToggleVisibility = ECBToggleVisibility.getInstanceIn(element)
			if pToggleVisibility == null or not pToggleVisibility.getVisible()
				return
			end
			
			var ECBehaviorPlayerControllable.Instance player = \
				GameApp.getGameApp().getPlayerControlledActor().getActor()
			if player == null
				return
			end
			
			var BaseVRActor actor = player.getElement() cast BaseVRActor
			var DVector actorPosition = actor.getPosition()
			
			pInteractMatrix = element.getElementMatrix().normalize()
			
			var DVector hitPoint = pointAt.getPointAtHitPoint()
			var DVector rayOrigin = pointAt.getPointAtOrigin()
			var Vector rayDirection = pointAt.getPointAtDirection().toVector().normalize()
			
			pPlanePosition = actorPosition.combine(hitPoint, true, false, true)
			pPlaneOffset = pPlanePosition - actorPosition
			
			pSphereRadius = (hitPoint - pPlanePosition).getLength() + 2
			
			var DVector hpsphere = raySphere(rayOrigin, rayDirection)
			var DVector hp = hpsphere.combine(pPlanePosition, true, false, true)
			
			pPlaneX = (hp - pPlanePosition).toVector().normalize()
			pPlaneY = (Vector.new(0, 1, 0) % pPlaneX).normalize()
		end
		
		/** Update interacting. */
		func void updateInteract(Matrix viewMatrix, DVector rayOrigin, Vector rayDirection)
			if pInteractMatrix == null
				return
			end
			
			// calculate intersecton of view ray with interaction plane
			var float denom = rayDirection.getY()
			if denom == 0
				return
			end
			
			var float lambda = (pPlanePosition - rayOrigin).getY() / denom
			var DVector hp = rayOrigin + DVector.new(rayDirection) * lambda
			
			// apply interaction
			var Vector v = (hp - pPlanePosition).toVector()
			if v.getLength() < 0.001
				return
			end
			
			var float angle = DEMath.atan2(pPlaneY * v, pPlaneX * v)
			
			if lambda < 0
				// lambda is negative if the ray points away from the plane. in this case the
				// hit point is at the opposite direction causing angle to be 180 degrees off.
				// it does not matter in what direction the 180 degrees are corrected since
				// the angle is normalized anyway
				angle -= 180
			end
			
			angle = DEMath.normalize(angle, -180.0, 180.0)
			
			var DMatrix matrix = pInteractMatrix * DMatrix.newTranslation(-pPlanePosition)\
				* DMatrix.newRotationY(-angle) * DMatrix.newTranslation(pPlanePosition)
			
			getElement().getParent().setGeometry(matrix.getPosition(), matrix.toQuaternion())
		end
		
		/** Update interacting. */
		func void updateInteract(ECBehaviorVRHandPointAt.Instance pointAt)
			if pInteractMatrix == null
				return
			end
			
			// calculate intersecton of view ray with interaction plane
			var DMatrix matrix = pointAt.calcTestMatrix().normalize()
			
			var DVector rayOrigin = matrix.getPosition()
			var Vector rayDirection = matrix.getViewVector().toVector()
			
			var DVector hpsphere = raySphere(rayOrigin, rayDirection)
			var DVector hp = hpsphere.combine(pPlanePosition, true, false, true)
			
			// apply interaction
			var Vector v = (hp - pPlanePosition).toVector()
			if v.getLength() < 0.001
				return
			end
			
			var float angle = DEMath.normalize(DEMath.atan2(pPlaneY * v, pPlaneX * v), -180.0, 180.0)
			
			matrix = pInteractMatrix * DMatrix.newTranslation(-pPlanePosition)\
				* DMatrix.newRotationY(-angle) * DMatrix.newTranslation(pPlanePosition)
			
			getElement().getParent().setGeometry(matrix.getPosition(), matrix.toQuaternion())
		end
		
		/** Stop interacting. */
		func void stopInteract()
			pInteractMatrix = null
			pPlanePosition = null
			pToggleVisibility = null
		end
		
		/** Cancel interacting. */
		func void cancelInteract()
			stopInteract()
		end
		
		/** Ray-sphere intersection. */
		protected func DVector raySphere(DVector rayOrigin, Vector rayDirection)
			var float a = rayDirection.getLengthSquared()
			var float b = rayDirection * ( rayOrigin - pPlanePosition ).toVector()
			var float c = rayOrigin.getLengthSquared() + pPlanePosition.getLengthSquared()\
				- ( rayOrigin * pPlanePosition ) * 2 - pSphereRadius * pSphereRadius
			var float disc = b * b - a * c
			if disc < 0
				return null
			end
			disc = DEMath.sqrt( disc )
			var float lambda = -b - disc
			if lambda < 0
				lambda = -b + disc
			end
			return rayOrigin + DVector.new(rayDirection) * (lambda / a)
		end
	end
	
	
	
	/** Create behavior and add it to element class. */
	func new(BehaviorElementClass eclass) super(eclass)
		eclass.addBehavior(this)
	end
	
	
	
	/** Create behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
