/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2022, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Behaviors

pin Dragengine.Scenery
pin Dragengine.Preloading
pin Dragengine.Utils


/**
 * Behavior adding support to attach object to actor while being grabbed. This behavior
 * can be used on the element to grab or on an attached element to grab the parent.
 * 
 * To grab the element itself ECBehaviorAttachable has to be present.
 * 
 * To grab the parent the parent object ID has to be set (stub.setAttachTo()) together
 * with an optional bone. While entering the game world element is attached to the parent
 * using relative attachment.
 */
class ECBGrabAttach extends DefaultECBehavior
	/** Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		protected var ECBGrabAttach pECBehavior
		protected var ECBehaviorGrabSpot.Instance pGrabSpot
		protected var ECBehaviorCollider.Instance pCollider
		protected var ECBehaviorAttachable.Instance pAttachable
		protected var String pBone
		
		
		
		/** Create behavior instance. */
		public func new(ECBGrabAttach ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pGrabSpot = ecbehavior.getGrabSpot().instance(element)
			pCollider = ecbehavior.getCollider().instance(element)
		end
		
		/** Init behavior instance. */
		public func void init(StubElement stub)
			if pECBehavior.getAttachable() != null
				pAttachable = pECBehavior.getAttachable().instance(getElement())
			end
			
			pBone = pECBehavior.getBone().getValue(stub)
		end
		
		/** Dispose of behavior instance. */
		public func void dispose()
			pGrabSpot = null
			pCollider = null
			pAttachable = null
			super.dispose()
		end
		
		
		
		public func ECBGrabAttach getECBehavior()
			return pECBehavior
		end
		
		public func ECBehaviorGrabSpot.Instance getGrabSpot()
			return pGrabSpot
		end
		
		public func ECBehaviorCollider.Instance getCollider()
			return pCollider
		end
		
		public func ECBehaviorAttachable.Instance getAttachable()
			return pAttachable
		end
		
		public func String getBone()
			return pBone
		end
		
		
		
		/** Attach element to parent object. */
		public func void attachToParent(Element parent)
			if pCollider.getCollider() == null
				return
			end
			
			if parent castable BehaviorElement
				attachToBehaviorElement(parent cast BehaviorElement)
			end
		end
		
		/** Attach to behavior element. */
		protected func void attachToBehaviorElement(BehaviorElement parent)
			var ECBehaviorCollider.Instance parentCollider = ECBehaviorCollider.getInstanceIn(parent)
			if parentCollider == null or parentCollider.getCollider() == null
				return
 			end
 			
 			attachToCollider(parentCollider.getCollider())
			getElement().setParent(parent)
			addToAttachments(parent)
		end
		
		/** Attach to collider. */
		public func void attachToCollider(Collider collider)
			var Collider thisCollider = pCollider.getCollider()
			
			if collider castable ColliderRig
				var ColliderRig colliderRig = collider cast ColliderRig
				if not pBone.empty()
					colliderRig.attachBone(thisCollider, pBone)
					return
				end
			end
			
			collider.attachStatic(thisCollider)
			//collider.attachRelativeMovement(thisCollider)
			
			// NOTE to allow moving the object has to be detached while moving then reattached
			//      attachRelativeMovement would allow to do this without needing to do this
			//      manually but bone relative attachment is not yet supported
		end
		
		/** Add as attachment to ECBehaviorAttachments if parent has this behavior. */
		public func void addToAttachments(BehaviorElement parent)
			var ECBehaviorAttachments.Instance behavior = ECBehaviorAttachments.getInstanceIn(parent)
			if behavior != null
				behavior.addAttachment(getElement())
			end
		end
	end
	
	
	
	private var ECBehaviorGrabSpot pGrabSpot
	private var ECBehaviorCollider pCollider
	private var ECBehaviorAttachable pAttachable
	private var ECPString pBone
	
	// TODO hand model to show. this though should be the job of ECBehaviorComponent present
	//      in the owner class which has for example the hand model set with a modified skin.
	//      the skin could be transparent but for aligning a solid model is better.
	
	
	
	/** Create behavior and add it to element class. */
	public func new(BehaviorElementClass eclass, ECBehaviorGrabSpot grabSpot,\
	ECBehaviorCollider collider, ECBehaviorAttachable attachable, String id) super(eclass, id)
		if grabSpot == null
			throw ENullPointer.new("grabSpot")
		end
		
		pGrabSpot = grabSpot
		pCollider = collider
		pAttachable = attachable
		
		var String prefix = "grabAttach."
		
		pBone = ECPString.new(prefix + "bone", "")
		eclass.addProperty(pBone)
		
		eclass.addBehavior(this)
	end
	
	/** Dispose of behavior. */
	public func void dispose()
		pGrabSpot = null
		pCollider = null
		pAttachable = null
		super.dispose()
	end
	
	
	
	/** Grab spot behavior. */
	public func ECBehaviorGrabSpot getGrabSpot()
		return pGrabSpot
	end
	
	/** Collider behavior. */
	public func ECBehaviorCollider getCollider()
		return pCollider
	end
	
	/** Attachable behavior. */
	public func ECBehaviorAttachable getAttachable()
		return pAttachable
	end
	
	/** Bone to attach to. */
	public func ECPString getBone()
		return pBone
	end
	
	
	public func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
