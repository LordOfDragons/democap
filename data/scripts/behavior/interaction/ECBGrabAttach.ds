/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2022, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Behaviors

pin Dragengine.LoadSave
pin Dragengine.Scenery
pin Dragengine.Preloading
pin Dragengine.Utils


/**
 * Behavior adding support to attach object to actor while being grabbed. This behavior
 * can be used on the element to grab or on an attached element to grab the parent.
 * 
 * To grab the element itself ECBehaviorAttachable has to be present.
 * 
 * To grab the parent the parent object ID has to be set (stub.setAttachTo()) together
 * with an optional bone. While entering the game world element is attached to the parent
 * using relative attachment.
 */
class ECBGrabAttach extends DefaultECBehavior
	/** Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		class TemporaryDetachListener extends ECBShowInteractHandles.DefaultListener
			protected var Instance pInstance
			
			public func new(Instance instance)
				pInstance = instance
			end
			
			public func void startInteract(ECBShowInteractHandles.Instance instance, ECBInteractHandle.Instance handle)
				pInstance.temporaryDetach()
			end
			
			public func void stopInteract(ECBShowInteractHandles.Instance instance, ECBInteractHandle.Instance handle)
				pInstance.reattachTemporaryDetach()
			end
		end
		
		
		protected var ECBGrabAttach pECBehavior
		protected var ECBehaviorGrabSpot.Instance pGrabSpot
		protected var ECBehaviorCollider.Instance pCollider
		protected var ECBehaviorAttachable.Instance pAttachable
		protected var ECBehaviorCollider.Instance pParentCollider
		protected var String pBone
		protected var bool pImmobile
		protected var bool pIKLockRotation
		protected var bool pTemporaryDetached
		
		
		
		/** Create behavior instance. */
		public func new(ECBGrabAttach ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pGrabSpot = ecbehavior.grabSpot.instance(element)
			pCollider = ecbehavior.collider.instance(element)
		end
		
		/** Init behavior instance. */
		public func void init(StubElement stub)
			var BehaviorElement element = getElement()
			
			if pECBehavior.attachable != null
				pAttachable = pECBehavior.attachable.instance(element)
			end
			
			if pECBehavior.showInteractHandles != null
				pECBehavior.showInteractHandles.instance(element).addListener(TemporaryDetachListener.new(this))
			end
			
			pBone = pECBehavior.bone.getValue(stub)
			pImmobile = pECBehavior.immobile.getValue(stub)
			pIKLockRotation = pECBehavior.ikLockRotation.getValue(stub)
		end
		
		/** Dispose of behavior instance. */
		public func void dispose()
			pGrabSpot = null
			pCollider = null
			pAttachable = null
			
			pParentCollider = null
			super.dispose()
		end
		
		
		
		public func ECBGrabAttach getECBehavior()
			return pECBehavior
		end
		
		public func ECBehaviorGrabSpot.Instance getGrabSpot()
			return pGrabSpot
		end
		
		public func ECBehaviorCollider.Instance getCollider()
			return pCollider
		end
		
		public func ECBehaviorAttachable.Instance getAttachable()
			return pAttachable
		end
		
		public func String getBone()
			return pBone
		end
		
		public func void setBone(String bone)
			pBone = bone
		end
		
		/** Object does not move while grabbed. */
		public func bool getImmobile()
			return pImmobile
		end
		
		/** Set if object does not move while grabbed. */
		public func void setImmobile(bool immobile)
			pImmobile = immobile
		end
		
		/** Lock IK rotation. */
		public func bool getIKLockRotation()
			return pIKLockRotation
		end
		
		/** Set if IK rotation is locked. */
		public func void setIKLockRotation(bool lock)
			pIKLockRotation = lock
		end
		
		
		
		public func ECBehaviorCollider.Instance getParentCollider()
			return pParentCollider
		end
		
		
		/** Remove from game world. */
		public func void removeFromGameWorld()
			removeFromAttachments()
			pParentCollider = null
		end
		
		
		
		/** Attach element to parent object. */
		public func void attachToParent(Element parent)
			if pCollider.getCollider() == null
				return
			end
			
			if parent castable BehaviorElement
				attachToBehaviorElement(parent cast BehaviorElement)
			end
		end
		
		/** Attach to behavior element. */
		protected func void attachToBehaviorElement(BehaviorElement parent)
			pParentCollider = ECBehaviorCollider.getInstanceIn(parent)
			if pParentCollider == null or pParentCollider.getCollider() == null
				return
 			end
 			
 			attachToCollider(pParentCollider.getCollider())
 			
			getElement().setParent(parent)
			addToAttachments(parent)
		end
		
		/** Attach to collider. */
		public func void attachToCollider(Collider collider)
			var Collider thisCollider = pCollider.getCollider()
			
			if collider castable ColliderRig
				var ColliderRig colliderRig = collider cast ColliderRig
				if not pBone.empty()
					colliderRig.attachBone(thisCollider, pBone)
					return
				end
			end
			
			collider.attachStatic(thisCollider)
		end
		
		/** Add as attachment to ECBehaviorAttachments if parent has this behavior. */
		public func void addToAttachments(BehaviorElement parent)
			var ECBehaviorAttachments.Instance behavior = ECBehaviorAttachments.getInstanceIn(parent)
			if behavior != null
				behavior.addAttachment(getElement())
			end
		end
		
		/** Remove attachment from ECBehaviorAttachments if parent has this behavior. */
		public func void removeFromAttachments()
			if pParentCollider == null
				return
			end
			
			var ECBehaviorAttachments.Instance behavior = ECBehaviorAttachments.getInstanceIn(pParentCollider.getElement())
			if behavior == null
				return
			end
			
			if behavior.hasAttachment(getElement())
				behavior.removeAttachment(getElement())
			end
		end
		
		
		
		/** Is temporarily detached. */
		public func bool isTemporaryDetached()
			return pTemporaryDetached
		end
		
		/** Temporarily detach from parent. */
		public func void temporaryDetach()
			if not pTemporaryDetached and pParentCollider != null
				pParentCollider.getCollider().detach(pCollider.getCollider())
				pTemporaryDetached = true
 			end
		end
		
		/** Reattach after temporary detach. */
		public func void reattachTemporaryDetach()
			if pTemporaryDetached and pParentCollider != null
				attachToCollider(pParentCollider.getCollider())
				pTemporaryDetached = false
			end
		end
		
		
		
		/** Read behavior from file. */
		public func void readFromFile(PersistencyEnvironment env, FileReader reader)
			select reader.readByte() // version
			case 0
				// nothing
				
			case 1
				var PersistencyFlags flags = PersistencyFlags.new(2, reader)
				pImmobile = flags.getAt(0)
				pIKLockRotation = flags.getAt(1)
				
				pBone = reader.readString8()
				
			else
				throw EInvalidParam.new("unsupported version")
			end
		end
		
		/** Write behavior to file. */
		public func void writeToFile(PersistencyEnvironment env, FileWriter writer)
			writer.writeByte(1) // version
			
			var PersistencyFlags flags = PersistencyFlags.new(2)
			flags.setAt(0, pImmobile)
			flags.setAt(1, pIKLockRotation)
			flags.writeToFile(writer)
			
			writer.writeString8(pBone)
		end
	end
	
	
	
	public var ECBehaviorGrabSpot grabSpot
	public var ECBehaviorCollider collider
	public var ECBehaviorAttachable attachable
	public var ECBShowInteractHandles showInteractHandles
	public var ECPString bone
	public var ECPBoolean immobile
	public var ECPBoolean ikLockRotation
	
	// TODO hand model to show. this though should be the job of ECBehaviorComponent present
	//      in the owner class which has for example the hand model set with a modified skin.
	//      the skin could be transparent but for aligning a solid model is better.
	//      
	//      "wrist.r" "attachHand.r"
	
	
	
	/** Create behavior and add it to element class. */
	public func new(BehaviorElementClass eclass, ECBehaviorGrabSpot grabSpot,\
	ECBehaviorCollider collider, ECBehaviorAttachable attachable,\
	ECBShowInteractHandles showInteractHandles, String id) super(eclass, id)
		if grabSpot == null
			throw ENullPointer.new("grabSpot")
		end
		
		this.grabSpot = grabSpot
		this.collider = collider
		this.attachable = attachable
		this.showInteractHandles = showInteractHandles
		
		var String prefix = "grabAttach."
		
		bone = ECPString.new(prefix + "bone", "")
		eclass.addProperty(bone)
		
		immobile = ECPBoolean.new(prefix + "immobile", false)
		eclass.addProperty(immobile)
		
		ikLockRotation = ECPBoolean.new(prefix + "ikLockRotation", false)
		eclass.addProperty(ikLockRotation)
		
		eclass.addBehavior(this)
	end
	
	/** Dispose of behavior. */
	public func void dispose()
		grabSpot = null
		collider = null
		attachable = null
		showInteractHandles = null
		super.dispose()
	end
	
	
	public func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
