/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2022, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Behaviors

pin Dragengine.LoadSave
pin Dragengine.Scenery
pin Dragengine.Preloading
pin Dragengine.Utils
pin Dragengine.Gui


/**
 * Behavior adding support to attach object to actor while being grabbed. This behavior
 * can be used on the element to grab or on an attached element to grab the parent.
 * 
 * To grab the element itself ECBehaviorAttachable has to be present.
 * 
 * To grab the parent the parent object ID has to be set (stub.setAttachTo()) together
 * with an optional bone. While entering the game world element is attached to the parent
 * using relative attachment.
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/democap:behavior_ecbgrabattach
 */
class ECBGrabAttach extends DefaultECBehavior
	/**
	 * Behavior factory.
	 * 
	 * Automatically assigns these behaviors if present before adding:
	 * - Required: \ref ECBehaviorGrabSpot
	 * - Required: \ref ECBehaviorCollider
	 * - Optional: \ref ECBBehaviorGuiPanels
	 * - Optional: \ref ECBehaviorAttachable
	 * - Optional: \ref ECBShowInteractHandles
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBehaviorComponent'/>
	 * <behavior type='ECBehaviorCollider'/>
	 * <behavior type='ECBehaviorAttachable'/>
	 * <behavior type='ECBBehaviorGuiPanels'/>
	 * <behavior type='ECBehaviorGrabSpot'/>
	 * <behavior type='ECBShowInteractHandles'/>
	 * 
	 * <behavior type='ECBGrabAttach'>
	 *   <string name='grabSpot'>id</string> <!-- only required if not empty string -->
	 *   <string name='.bone'>bone</string> <!-- default empty -->
	 *   <boolean name='.immobile'>false</boolean>
	 *   <boolean name='.ikLockRotation'>false</boolean>
	 *   <boolean name='.align'>true</boolean>
	 *   <vector name='.position' x='0' y='0' z='0'/>
	 *   <vector name='.rotation' x='0' y='0' z='0'/>
	 * </behavior>
	 * 
	 * <!-- for adding multiple behaviors use unique identifiers -->
	 * <behavior type='ECBGrabAttach' id='second'/>
	 * \endcode
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBGrabAttach"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			var ECBGrabAttach behavior = ECBGrabAttach.new(eclass,\
				ECBBehaviorGuiPanels.getBehaviorIn(eclass),\
				ECBehaviorGrabSpot.getBehaviorIn(eclass, parameters.getAt("grabSpot", "") cast String),\
				ECBehaviorCollider.getBehaviorIn(eclass),\
				ECBehaviorAttachable.getBehaviorIn(eclass),\
				ECBShowInteractHandles.getBehaviorIn(eclass), id)
			BehaviorElementClass.sharedFactoryHelper.setPropertiesFromParameters(eclass, parameters, "grabAttach", id)
			return behavior
		end
	end
	
	/** Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		class TemporaryDetachListener extends ECBShowInteractHandles.DefaultListener
			protected var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func void startInteract(ECBShowInteractHandles.Instance instance, ECBInteractHandle.Instance handle)
				pInstance.temporaryDetach()
			end
			
			func void stopInteract(ECBShowInteractHandles.Instance instance, ECBInteractHandle.Instance handle)
				pInstance.reattachTemporaryDetach()
			end
		end
		
		class BehaviorGuiPanel extends ECBBehaviorGuiPanels.BehaviorGuiPanel
			func new(Instance instance) super(instance, "ECBGrabAttach", instance.getECBehavior().getID())
			end
			
			func Gui.WMPPanelSceneObject createPanel(Gui.WMPanelProject panelProject)
				return Gui.WMPSOGrabAttach.new(panelProject, getId(), getBehaviorId())
			end
		end
		
		
		protected var ECBGrabAttach pECBehavior
		protected var ECBehaviorGrabSpot.Instance pGrabSpot
		protected var ECBehaviorCollider.Instance pCollider
		protected var ECBehaviorAttachable.Instance pAttachable
		protected var ECBehaviorCollider.Instance pParentCollider
		protected var String pBone
		protected var bool pImmobile, pIKLockRotation, pAlign, pTemporaryDetached
		protected var Vector pPosition, pRotation
		protected var DebugDrawer pDebugDrawer
		
		
		/** Create behavior instance. */
		func new(ECBGrabAttach ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pGrabSpot = ecbehavior.grabSpot.instance(element)
			pCollider = ecbehavior.collider.instance(element)
		end
		
		/** Init behavior instance. */
		func void init(StubElement stub)
			var BehaviorElement element = getElement()
			
			if pECBehavior.attachable != null
				pAttachable = pECBehavior.attachable.instance(element)
			end
			
			if pECBehavior.showInteractHandles != null
				pECBehavior.showInteractHandles.instance(element).addListener(TemporaryDetachListener.new(this))
			end
			
			var CodecPropertyString codec = element.getClass().getCodecPropertyString()
			
			pBone = pECBehavior.bone.getValue(stub)
			pImmobile = pECBehavior.immobile.getValue(stub)
			pIKLockRotation = pECBehavior.ikLockRotation.getValue(stub)
			pAlign = pECBehavior.align.getValue(stub)
			pPosition = pECBehavior.position.getVector(stub, codec)
			pRotation = pECBehavior.rotation.getVector(stub, codec)
			
			if pECBehavior.behaviorGuiPanels != null
				pECBehavior.behaviorGuiPanels.instance(getElement()).addBehaviorGuiPanel(BehaviorGuiPanel.new(this))
			end
			
			if GameApp.getGameApp().debugParamTree.getBoolAt("ECBGrabAttach/ShowShape", false)
				pDebugDrawer = DebugDrawer.new()
				pDebugDrawer.setXRay(true)
				pDebugDrawer.setShapeCount(1)
				
				try
					var ColliderVolume cv = pGrabSpot.getTouchCollider() cast ColliderVolume
					pDebugDrawer.shapeSetShapes(0, cv.getShape())
					pDebugDrawer.shapeSetEdgeColor(0, Color.new(Color.red, 0.9))
					pDebugDrawer.shapeSetFillColor(0, Color.new(Color.red, 0.1))
					pGrabSpot.getECBehavior().getAttachTouchCollider().attach(pCollider.getCollider(), pDebugDrawer, stub)
					
				catch Exception e
				end
			end
		end
		
		/** Dispose of behavior instance. */
		func void dispose()
			pGrabSpot = null
			pCollider = null
			pAttachable = null
			
			pParentCollider = null
			super.dispose()
		end
		
		
		
		func ECBGrabAttach getECBehavior()
			return pECBehavior
		end
		
		func ECBehaviorGrabSpot.Instance getGrabSpot()
			return pGrabSpot
		end
		
		func ECBehaviorCollider.Instance getCollider()
			return pCollider
		end
		
		func ECBehaviorAttachable.Instance getAttachable()
			return pAttachable
		end
		
		func String getBone()
			return pBone
		end
		
		func void setBone(String bone)
			if bone.equals(pBone)
				return
			end
			
			pBone = bone
			getElement().getStub().setPropertyValueFor(pECBehavior.bone.getName(), bone)
		end
		
		/** Object does not move while grabbed. */
		func bool getImmobile()
			return pImmobile
		end
		
		/** Set if object does not move while grabbed. */
		func void setImmobile(bool immobile)
			if immobile == pImmobile
				return
			end
			
			pImmobile = immobile
			getElement().getStub().setPropertyBoolFor(pECBehavior.immobile.getName(), immobile)
		end
		
		/** Lock IK rotation. */
		func bool getIKLockRotation()
			return pIKLockRotation
		end
		
		/** Set if IK rotation is locked. */
		func void setIKLockRotation(bool lock)
			if lock == pIKLockRotation
				return
			end
			
			pIKLockRotation = lock
			getElement().getStub().setPropertyBoolFor(pECBehavior.ikLockRotation.getName(), lock)
		end
		
		/** Hand aligns with grab position/rotation. */
		func bool getAlign()
			return pAlign
		end
		
		/** Set if hand aligns with grab position/rotation. */
		func void setAlign(bool align)
			if align == pAlign
				return
			end
			
			pAlign = align
			getElement().getStub().setPropertyBoolFor(pECBehavior.align.getName(), align)
		end
		
		/** Grab position. */
		func Vector getPosition()
			return pPosition
		end
		
		/** Grab rotation. */
		func Vector getRotation()
			return pRotation
		end
		
		/** Grab matrix. */
		func Matrix getMatrix()
			return Matrix.newRT(pRotation, pPosition)
		end
		
		
		
		func ECBehaviorCollider.Instance getParentCollider()
			return pParentCollider
		end
		
		
		func void addToGameWorld()
			if pDebugDrawer != null
				getElement().getGameWorld().getWorld().addDebugDrawer(pDebugDrawer)
			end
		end
		
		func void removeFromGameWorld()
			if pDebugDrawer != null
				getElement().getGameWorld().getWorld().removeDebugDrawer(pDebugDrawer)
			end
			removeFromAttachments()
			pParentCollider = null
			getElement().setParent(null)
			getElement().setRequiresAttachToParent(true)
		end
		
		
		
		/** Attach element to parent object. */
		func void attachToParent(Element parent)
			if pCollider.getCollider() == null
				return
			end
			
			if parent castable BehaviorElement
				attachToBehaviorElement(parent cast BehaviorElement)
			end
		end
		
		/** Attach to behavior element. */
		protected func void attachToBehaviorElement(BehaviorElement parent)
			pParentCollider = ECBehaviorCollider.getInstanceIn(parent)
			if pParentCollider == null or pParentCollider.getCollider() == null
				return
 			end
 			
 			attachToCollider(pParentCollider.getCollider())
 			
			getElement().setParent(parent)
			addToAttachments(parent)
		end
		
		/** Attach to collider. */
		func void attachToCollider(Collider collider)
			var Collider thisCollider = pCollider.getCollider()
			
			if collider castable ColliderRig
				var ColliderRig colliderRig = collider cast ColliderRig
				if not pBone.empty()
					colliderRig.attachBone(thisCollider, pBone)
					return
				end
			end
			
			collider.attachStatic(thisCollider)
		end
		
		/** Add as attachment to ECBehaviorAttachments if parent has this behavior. */
		func void addToAttachments(BehaviorElement parent)
			var ECBehaviorAttachments.Instance behavior = ECBehaviorAttachments.getInstanceIn(parent)
			if behavior != null
				behavior.addAttachment(getElement())
			end
		end
		
		/** Remove attachment from ECBehaviorAttachments if parent has this behavior. */
		func void removeFromAttachments()
			if pParentCollider == null
				return
			end
			
			var ECBehaviorAttachments.Instance behavior = ECBehaviorAttachments.getInstanceIn(pParentCollider.getElement())
			if behavior == null
				return
			end
			
			if behavior.hasAttachment(getElement())
				behavior.removeAttachment(getElement())
			end
		end
		
		
		
		/** Is temporarily detached. */
		func bool isTemporaryDetached()
			return pTemporaryDetached
		end
		
		/** Temporarily detach from parent. */
		func void temporaryDetach()
			if not pTemporaryDetached and pParentCollider != null
				pParentCollider.getCollider().detach(pCollider.getCollider())
				pTemporaryDetached = true
 			end
		end
		
		/** Reattach after temporary detach. */
		func void reattachTemporaryDetach()
			if pTemporaryDetached and pParentCollider != null
				attachToCollider(pParentCollider.getCollider())
				pTemporaryDetached = false
			end
		end
		
		
		
		/** Read behavior from file. */
		func void readFromFile(PersistencyEnvironment env, FileReader reader)
			select reader.readByte() // version
			case 0
			case 1
				readFromFileV1(env, reader)
				
			case 2
				readFromFileV2(env, reader)
				
			else
				throw EInvalidParam.new("unsupported version")
			end
			
			// update stub to properly support copy
			var StubElement stub = getElement().getStub()
			var CodecPropertyString codec = getElement().getClass().getCodecPropertyString()
			
			stub.setPropertyValueFor(pECBehavior.bone.getName(), pBone)
			stub.setPropertyBoolFor(pECBehavior.immobile.getName(), pImmobile)
			stub.setPropertyBoolFor(pECBehavior.ikLockRotation.getName(), pIKLockRotation)
			stub.setPropertyBoolFor(pECBehavior.align.getName(), pAlign)
			stub.setPropertyValueFor(pECBehavior.position.getName(), codec.encodeVector(pPosition))
			stub.setPropertyValueFor(pECBehavior.rotation.getName(), codec.encodeVector(pRotation))
		end
		
		private func void readFromFileV1(PersistencyEnvironment env, FileReader reader)
			var PersistencyFlags flags = PersistencyFlags.new(2, reader)
			pImmobile = flags.getAt(0)
			pIKLockRotation = flags.getAt(1)
			
			pBone = reader.readString8()
		end
		
		private func void readFromFileV2(PersistencyEnvironment env, FileReader reader)
			var PersistencyFlags flags = PersistencyFlags.new(3, reader)
			pImmobile = flags.getAt(0)
			pIKLockRotation = flags.getAt(1)
			pAlign = flags.getAt(2)
			
			pBone = reader.readString8()
		end
		
		/** Write behavior to file. */
		func void writeToFile(PersistencyEnvironment env, FileWriter writer)
			writer.writeByte(2) // version
			
			var PersistencyFlags flags = PersistencyFlags.new(3)
			flags.setAt(0, pImmobile)
			flags.setAt(1, pIKLockRotation)
			flags.setAt(2, pAlign)
			flags.writeToFile(writer)
			
			writer.writeString8(pBone)
		end
	end
	
	
	
	public var ECBBehaviorGuiPanels behaviorGuiPanels
	public var ECBehaviorGrabSpot grabSpot
	public var ECBehaviorCollider collider
	public var ECBehaviorAttachable attachable
	public var ECBShowInteractHandles showInteractHandles
	public var ECPString bone
	public var ECPBoolean immobile, ikLockRotation, align
	public var ECPVector position, rotation
	
	// TODO hand model to show. this though should be the job of ECBehaviorComponent present
	//      in the owner class which has for example the hand model set with a modified skin.
	//      the skin could be transparent but for aligning a solid model is better.
	//      
	//      "wrist.r" "attachHand.r"
	
	
	
	/** Create behavior and add it to element class. */
	func new(BehaviorElementClass eclass, ECBBehaviorGuiPanels behaviorGuiPanels,\
	ECBehaviorGrabSpot grabSpot, ECBehaviorCollider collider, ECBehaviorAttachable attachable,\
	ECBShowInteractHandles showInteractHandles, String id) super(eclass, id)
		if grabSpot == null
			throw ENullPointer.new("grabSpot")
		end
		
		this.behaviorGuiPanels = behaviorGuiPanels
		this.grabSpot = grabSpot
		this.collider = collider
		this.attachable = attachable
		this.showInteractHandles = showInteractHandles
		
		var String prefix = "grabAttach."
		
		eclass.addProperty(bone = ECPString.new(prefix + "bone", ""))
		eclass.addProperty(immobile = ECPBoolean.new(prefix + "immobile", false))
		eclass.addProperty(ikLockRotation = ECPBoolean.new(prefix + "ikLockRotation", false))
		eclass.addProperty(align = ECPBoolean.new(prefix + "align", true))
		eclass.addProperty(position = ECPVector.new(prefix + "position"))
		eclass.addProperty(rotation = ECPVector.new(prefix + "rotation"))
		eclass.addBehavior(this)
	end
	
	/** Dispose of behavior. */
	func void dispose()
		behaviorGuiPanels = null
		grabSpot = null
		collider = null
		attachable = null
		showInteractHandles = null
		super.dispose()
	end
	
	
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
