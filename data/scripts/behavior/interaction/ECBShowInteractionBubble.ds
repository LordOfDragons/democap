/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Behaviors

pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * Behavior showing interaction bubble.
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/democap:behavior_ecbshowinteractionbubble
 */
class ECBShowInteractionBubble extends DefaultECBehavior
	/**
	 * Behavior factory.
	 * 
	 * Automatically assigns these behaviors if present before adding:
	 * - Optional: \ref ECBehaviorCollider
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBShowInteractionBubble'>
	 *   <list name='.buttons'>
	 *     <!-- possible values:
	 *          - duplicate: duplicate object
	 *          - remove: remove object
	 *          - ghost: temporarily replace textures with ghost texture
	 *          - record: toggle if object can be recorded
	 *          - teleport: teleport actor to this element
	 *          - hide: hide object. do not use unless another behavior can show it again
	 *          - capture: toggle if actor can be captured. for mocap actor use only
	 *     -->
	 *     <string>button_identifier</string>
	 *   </list>
	 *   <string name='.class'>InteractionBubble</string>
	 * </behavior>
	 * \endcode
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBShowInteractionBubble"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			if not id.empty()
				throw EInvalidParam.new("id is not empty string")
			end
			
			var ECBShowInteractionBubble behavior = ECBShowInteractionBubble.new(eclass)
			BehaviorElementClass.sharedFactoryHelper.setPropertiesFromParameters(eclass, parameters, "showInteractionBubble")
			return behavior
		end
	end
	
	/** Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		var ECBShowInteractionBubble pECBehavior
		var ElementClass pBubbleClass
		var ECBInteractionBubble.Instance pBubble
		var Array pButtons
		
		
		
		/** Create behavior instance. */
		func new(ECBShowInteractionBubble ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pButtons = Array.new()
		end
		
		/** Dispose of behavior instance. */
		func void dispose()
			disposeBubble()
			pBubbleClass = null
			pButtons = null
			super.dispose()
		end
		
		/** Init behavior instance. */
		func void init(StubElement stub)
			var CodecPropertyString codec = getElement().getClass().getCodecPropertyString()
			
			pButtons = pECBehavior.buttons.getList(stub, codec)
			pBubbleClass = pECBehavior.bubbleClass.getElementClass(stub)
		end
		
		
		
		/** Behavior. */
		func ECBShowInteractionBubble getECBehavior()
			return pECBehavior
		end
		
		
		
		/** State changed for example visibility. */
		func void stateChanged()
			if pBubble != null
				pBubble.updateVisibility()
			end
		end
		
		/** Added to game world. */
		func void addToGameWorld()
			if pBubble == null
				createBubble()
			end
		end
		
		/** Remove from game world. */
		func void removeFromGameWorld()
			disposeBubble()
		end
		
		
		
		/** Create bubble adding it to game world. */
		protected func void createBubble()
			if pBubbleClass == null
				return
			end
			
			var BehaviorElement element = getElement()
			
			var StubElement stub = StubElement.new(pBubbleClass) // no generated ID on purpose
			var BehaviorElement bubble = stub.createElement() cast BehaviorElement
			
			element.getGameWorld().addElement(bubble)
			bubble.attachToParent(element)
			
			pBubble = ECBInteractionBubble.getInstanceIn(bubble)
			createButtons()
			pBubble.updateVisibility()
		end
		
		protected func void createButtons()
			var Dictionary factories = GameApp.getGameApp().getInteractionBubbleButtonFactories()
			pButtons.forEach(block String buttonType
				(factories.getAt(buttonType) cast ECBInteractionBubble.ButtonFactory).createAndAddButtons(pBubble)
			end)
		end
		
		protected func void disposeBubble()
			if pBubble == null
				return
			end
			
			if pBubble.getElement() != null // could be disposed already
				pBubble.getElement().safeDispose()
			end
			pBubble = null
		end
	end
	
	
	
	public var ECPStringList buttons
	public var ECPElementClass bubbleClass
	
	
	
	/** Create behavior and add it to element class. */
	func new(BehaviorElementClass eclass) super(eclass)
		var String prefix = "showInteractionBubble."
		
		buttons = ECPStringList.new(prefix + "buttons")
		eclass.addProperty(buttons)
		
		bubbleClass = ECPElementClass.new(prefix + "class",\
			GameApp.getGameApp().getElementClassList(), "InteractionBubble")
		eclass.addProperty(bubbleClass)
		
		eclass.addBehavior(this)
	end
	
	/** Dispose of behavior. */
	func void dispose()
		buttons = null
		bubbleClass = null
		super.dispose()
	end
	
	
	
	/** Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	/** Get behavior in element class or null if absent. */
	static func ECBShowInteractionBubble getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBShowInteractionBubble each
			return true
		end) cast ECBShowInteractionBubble
	end
	
	/** Get instance in element or null if absent. */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	
	
	/** Create behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
