/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Behaviors

pin Dragengine.Preloading
pin Dragengine.Scenery


/**
 * Behavior adding support for element to be selected. Selection tracker is present in the
 * game application. Only one element can be selected at each time or none at all.
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/democap:behavior_ecbselectable
 */
class ECBSelectable extends DefaultECBehavior
	/** Keeps track of the selected element. */
	class Tracker
		/** Listener for tracker events. */
		interface Listener
			/** Selected element changed. */
			func void selectedElementChanged(Tracker tracker)
		end
		
		/** Default implementation of tracker listener. */
		class DefaultListener implements Listener
			/** Create default listener. */
			func new()
			end
			
			/** Selected element changed. */
			func void selectedElementChanged(Tracker tracker)
			end
		end
		
		
		var Instance pElement
		var Array pListeners
		
		
		/** Create tracker. */
		func new()
			pListeners = Array.new()
		end
		
		
		/** Selected element or null if not assigned. */
		func Instance getElement()
			return pElement
		end
		
		/** Set selected element or null if not assigned. */
		func void setElement(Instance element)
			if pElement == element
				return
			end
			
			var Instance previous = pElement
			
			pElement = element
			
			if previous != null
				previous.notifyDeselected()
			end
			if element != null
				pElement.notifySelected()
			end
			
			pListeners.forEach(block Listener each
				each.selectedElementChanged(this)
			end)
		end
		
		/** Clear selection. */
		func void clear()
			setElement(null)
		end
		
		
		/** Add listener. */
		func void addListener(Listener listener)
			if listener == null
				throw ENullPointer.new("listener")
			end
			pListeners.add(listener)
		end
		
		/** Remove listener. */
		func void removeListener(Listener listener)
			pListeners.remove(listener)
		end
	end
	
	/** Listener for behavior instance events. */
	interface Listener
		/** Became selected element. */
		func void selected(Instance instance)
		
		/** Ceased being selected element. */
		func void deselected(Instance instance)
	end
	
	/** Default implementation of behavior instance listener. */
	class DefaultListener implements Listener
		/** Create default listener. */
		func new()
		end
		
		/** Became selected element. */
		func void selected(Instance instance)
		end
		
		/** Ceased being selected element. */
		func void deselected(Instance instance)
		end
	end
	
	/**
	 * Behavior factory.
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBSelectable'/>
	 * \endcode
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBSelectable"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			if not id.empty()
				throw EInvalidParam.new("id is not empty string")
			end
			return ECBSelectable.new(eclass)
		end
	end
	
	
	/** Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		var ECBSelectable pECBehavior
		var Array pListeners
		
		
		/** Create instance. */
		func new(ECBSelectable ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pListeners = Array.new()
		end
		
		/** Dispose of instance. */
		func void dispose()
			var Tracker tracker = GameApp.getGameApp().getSelectionTracker()
			if tracker != null
				if tracker.getElement() == this
					tracker.setElement(null)
				end
			end
			
			pListeners = null
			super.dispose()
		end
		
		
		/** Behavior. */
		func ECBSelectable getECBehavior()
			return pECBehavior
		end
		
		
		/** Element is the selected element. */
		func bool isSelected()
			return GameApp.getGameApp().getSelectionTracker().getElement() == this
		end
		
		/** Element is not the selected element. */
		func bool isDeselected()
			return GameApp.getGameApp().getSelectionTracker().getElement() != this
		end
		
		/** Select element. */
		func void selectElement()
			GameApp.getGameApp().getSelectionTracker().setElement(this)
		end
		
		/** Selected element. */
		func Instance getSelected()
			return GameApp.getGameApp().getSelectionTracker().getElement()
		end
		
		/** Called by Tracker to notify behavior listeners. */
		func void notifySelected()
			pListeners.forEach(block Listener each
				each.selected(this)
			end)
		end
		
		/** Called by Tracker to notify behavior listeners. */
		func void notifyDeselected()
			pListeners.forEach(block Listener each
				each.deselected(this)
			end)
		end
		
		
		/** Add listener. */
		func void addListener(Listener listener)
			if listener == null
				throw EInvalidParam.new()
			end
			pListeners.add(listener)
		end
		
		/** Remove listener. */
		func void removeListener(Listener listener)
			pListeners.remove(listener)
		end
	end
	
	
	/** Create behavior element class. */
	func new(BehaviorElementClass eclass) super(eclass)
		eclass.addBehavior(this)
	end
	
	
	/** Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	/** Get behavior in element class or null if absent. */
	static func ECBSelectable getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBSelectable each
			return true
		end) cast ECBSelectable
	end
	
	/** Get instance in element or null if absent. */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	
	/** Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
