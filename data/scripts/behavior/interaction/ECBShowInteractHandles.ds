/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Behaviors

pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Scenery


/**
 * Behavior showing interaction handles.
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/democap:behavior_ecbshowinteracthandles
 */
class ECBShowInteractHandles extends DefaultECBehavior
	/** Listener for behavior instance events. */
	interface Listener
		/** Start interacting with handle. */
		func void startInteract(Instance instance, ECBInteractHandle.Instance handle)
		
		/** Stop interacting with handle. */
		func void stopInteract(Instance instance, ECBInteractHandle.Instance handle)
	end
	
	/** Default implementation of behavior instance listener. */
	class DefaultListener implements Listener
		/** Create default listener. */
		func new()
		end
		
		/** Start interacting with handle. */
		func void startInteract(Instance instance, ECBInteractHandle.Instance handle)
		end
		
		/** Stop interacting with handle. */
		func void stopInteract(Instance instance, ECBInteractHandle.Instance handle)
		end
	end
	
	/**
	 * Behavior factory.
	 * 
	 * Automatically assigns these behaviors if present before adding:
	 * - Requred: \ref ECBSelectable
	 * - Optional: \ref ECBBehaviorGuiPanels
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBBehaviorGuiPanels'/>
	 * <behavior type='ECBSelectable'/>
	 * 
	 * <behavior type='ECBShowInteractHandles'>
	 *   <float name='.handleSize'>0.2</float>
	 *   <list name='.handles'>
	 *     <string>InteractHandleMoveX</string> <!-- only InteractHandle* classes allowed -->
	 *   </list>
	 *   
	 *   <!-- in addition to '.handles' supports also this: -->
	 *   <list name='handleSets'>
	 *     <string>move</string>
	 *     <string>rotate</string>
	 *     <string>movehmd</string>
	 *   </list>
	 * </behavior>
	 * \endcode
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBShowInteractHandles"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			var ECBShowInteractHandles behavior = ECBShowInteractHandles.new(eclass,\
				ECBBehaviorGuiPanels.getBehaviorIn(eclass), ECBSelectable.getBehaviorIn(eclass))
			
			if parameters.has("handleSets")
				var ECPElementClassList classes = behavior.getHandleClasses()
				
				(parameters.getAt("handleSets") cast Array).forEach(block String each
						if each.equals("move")
							classes.addElementClassName("InteractHandleMoveX")
							classes.addElementClassName("InteractHandleMoveY")
							classes.addElementClassName("InteractHandleMoveZ")
							classes.addElementClassName("InteractHandleMoveXNeg")
							classes.addElementClassName("InteractHandleMoveYNeg")
							classes.addElementClassName("InteractHandleMoveZNeg")
							
						elif each.equals("rotate")
							classes.addElementClassName("InteractHandleRotateX")
							classes.addElementClassName("InteractHandleRotateY")
							classes.addElementClassName("InteractHandleRotateZ")
							
						elif each.equals("movehmd")
							classes.addElementClassName("InteractHandleMoveHMDRight")
							classes.addElementClassName("InteractHandleMoveHMDLeft")
							
						else
							throw EInvalidParam.new("unknown handleSet: " + each)
						end
					end)
			end
			
			BehaviorElementClass.sharedFactoryHelper.setPropertiesFromParameters(\
				eclass, parameters, "showInteractHandles")
			
			return behavior
		end
	end
	
	/** Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/** Show handles listener. */
		class ShowHandlesListener extends ECBSelectable.DefaultListener
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func void selected(ECBSelectable.Instance instance)
				pInstance.updateVisibility()
			end
			
			func void deselected(ECBSelectable.Instance instance)
				pInstance.updateVisibility()
			end
		end
		
		/** Attach to record animation behavior. */
		class AttachRecordAnimation extends ECBehaviorPlayerControllable.Tracker.DefaultListener
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func void activeActorChanged(ECBehaviorPlayerControllable.Tracker tracker)
				if tracker.getActor() != null
					pInstance.setRecordAnimation(ECBRecordAnimation.getInstanceIn(tracker.getActor().getElement()))
					
				else
					pInstance.setRecordAnimation(null)
				end
			end
		end
		
		class RecordingStateChanged extends ECBRecordAnimation.DefaultListener
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func void prepareRecording(ECBRecordAnimation.Instance instance)
				pInstance.updateVisibility()
			end
			
			func void stopRecording(ECBRecordAnimation.Instance instance)
				pInstance.updateVisibility()
			end
		end
		
		class BehaviorGuiPanel extends ECBBehaviorGuiPanels.BehaviorGuiPanel
			func new(Instance instance) super(instance, "ECBShowInteractHandles")
			end
			
			func Gui.WMPPanelSceneObject createPanel(Gui.WMPanelProject panelProject)
				return Gui.WMPSOShowInteractHandles.new(panelProject, getId())
			end
		end
		
		
		
		var ECBShowInteractHandles pECBehavior
		var ECBSelectable.Instance pSelectable
		var ECBRecordAnimation.Instance pRecordAnimation
		var AttachRecordAnimation pAttachRecordAnimation
		var RecordingStateChanged pRecordingStateChanged
		var float pHandleSize
		var Array pHandleClasses
		var Array pHandleElements
		var bool pVisible
		var Array pListeners
		
		
		
		/** Create behavior instance. */
		func new(ECBShowInteractHandles ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pHandleClasses = Array.new()
			pHandleElements = Array.new()
			pRecordingStateChanged = RecordingStateChanged.new(this)
			pListeners = Array.new()
			
			pSelectable = ecbehavior.getSelectable().instance(element)
		end
		
		/** Dispose of behavior instance. */
		func void dispose()
			pHandleElements = null
			pHandleClasses = null
			pSelectable = null
			pRecordAnimation = null
			pAttachRecordAnimation = null
			pRecordingStateChanged = null
			pListeners = null
			super.dispose()
		end
		
		/** Init behavior instance. */
		func void init(StubElement stub)
			pHandleSize = DEMath.max(pECBehavior.getHandleSize().getValue(stub), 0.0)
			
			pHandleClasses = pECBehavior.getHandleClasses().getElementClasses(\
				stub, getElement().getClass().getCodecPropertyString())
			
			pSelectable.addListener(ShowHandlesListener.new(this))
			
			if pECBehavior.behaviorGuiPanels != null
				pECBehavior.behaviorGuiPanels.instance(getElement()).addBehaviorGuiPanel(BehaviorGuiPanel.new(this))
			end
		end
		
		
		
		/** Behavior. */
		func ECBShowInteractHandles getECBehavior()
			return pECBehavior
		end
		
		/** Selectable behavior instance. */
		func ECBSelectable.Instance getSelectable()
			return pSelectable
		end
		
		
		
		/** Handle size in meters. */
		func float getHandleSize()
			return pHandleSize
		end
		
		/** Set handle size in meters. */
		func void setHandleSize(float size)
			size = DEMath.max(size, 0.0)
			if DEMath.fabs(size - pHandleSize) < 0.001
				return
			end
			
			pHandleSize = size
			getElement().getStub().setPropertyFloatFor(pECBehavior.getHandleSize().getName(), size)
		end
		
		
		
		/** Handles are visible. */
		func bool getVisible()
			return pVisible
		end
		
		/** Show handles if hidden. */
		func void show()
			if pVisible
				return
			end
			
			var BehaviorElement element = getElement()
			var GameWorld gameWorld = element.getGameWorld()
			if gameWorld == null
				return
			end
			
			pVisible = true
			
			var BehaviorElement handleElement
			var StubElement handleStub
			
			pHandleClasses.forEach(block BehaviorElementClass handleClass
				handleStub = StubElement.new(handleClass) // no generated ID on purpose
				
				handleElement = handleStub.createElement() cast BehaviorElement
				pHandleElements.add(handleElement)
				
				gameWorld.addElement(handleElement)
				
				handleElement.attachToParent(element)
			end)
		end
		
		/** Hide handles if visible. */
		func void hide()
			if not pVisible
				return
			end
			
			pVisible = false
			
			pHandleElements.forEach(block BehaviorElement each
				each.safeDispose()
			end)
			pHandleElements.removeAll()
		end
		
		
		
		/** Record animation or null. */
		func ECBRecordAnimation.Instance getRecordAnimation()
			return pRecordAnimation
		end
		
		/** Set record animation or null. */
		func void setRecordAnimation(ECBRecordAnimation.Instance recordAnimation)
			if recordAnimation == pRecordAnimation
				return
			end
			
			if pRecordAnimation != null
				if pRecordAnimation.getElement() != null // not disposed
					pRecordAnimation.removeListener(pRecordingStateChanged)
				end
			end
			
			pRecordAnimation = recordAnimation
			
			if recordAnimation != null
				recordAnimation.addListener(pRecordingStateChanged)
			end
			
			updateVisibility()
		end
		
		
		
		/** Update visibility. */
		func void updateVisibility()
			var BehaviorElement element = getElement()
			if element == null or element.getGameWorld() == null
				return
			end
			
			if element.getVisible() \
			and pSelectable != null \
			and pSelectable.isSelected()\
			and (pRecordAnimation == null or pRecordAnimation.isNotRecording())
				show()
				
			else
				hide()
			end
		end
		
		
		
		/**
		 * Notify listeners start interacting with handle. Handle can be null if geometry
		 * parameters of object are adjusted numerically.
		 */
		func void notifyStartInteract(ECBInteractHandle.Instance handle)
			pListeners.forEach(block Listener each
				each.startInteract(this, handle)
			end)
		end
		
		/**
		 * Notify listeners stop interacting with handle. Handle can be null if geometry
		 * parameters of object are adjusted numerically.
		 */
		func void notifyStopInteract(ECBInteractHandle.Instance handle)
			if pListeners == null
				return // dispose protection
			end
			
			pListeners.forEach(block Listener each
				each.stopInteract(this, handle)
			end)
		end
		
		
		
		/** Add listener. */
		func void addListener(Listener listener)
			if listener == null
				throw EInvalidParam.new()
			end
			pListeners.add(listener)
		end
		
		/** Remove listener. */
		func void removeListener(Listener listener)
			pListeners.remove(listener)
		end
		
		
		
		/** State changed for example visibility. */
		func void stateChanged()
			updateVisibility()
		end
		
		/** Added to game world. */
		func void addToGameWorld()
			pAttachRecordAnimation = AttachRecordAnimation.new(this)
			GameApp.getGameApp().getPlayerControlledActor().addListener(pAttachRecordAnimation)
			pAttachRecordAnimation.activeActorChanged(GameApp.getGameApp().getPlayerControlledActor())
		end
		
		/** Remove from game world. */
		func void removeFromGameWorld()
			setRecordAnimation(null)
			GameApp.getGameApp().getPlayerControlledActor().removeListener(pAttachRecordAnimation)
			pAttachRecordAnimation = null
			
			// just to make sure
			hide()
		end
		
		
		
		/** Read behavior from file. */
		func void readFromFile(PersistencyEnvironment env, FileReader reader)
			select reader.readByte() // version
			case 0
				pHandleSize = reader.readFloat()
				
			else
				throw EInvalidParam.new("unsupported version")
			end
			
			// update stub to properly support copy
			var StubElement stub = getElement().getStub()
			stub.setPropertyFloatFor(pECBehavior.getHandleSize().getName(), pHandleSize)
		end
		
		/** Write behavior to file. */
		func void writeToFile(PersistencyEnvironment env, FileWriter writer)
			writer.writeByte(0) // version
			writer.writeFloat(pHandleSize)
		end
	end
	
	
	
	public var ECBBehaviorGuiPanels behaviorGuiPanels
	var ECBSelectable pSelectable
	var ECPElementClassList pHandleClasses
	var ECPFloat pHandleSize
	
	
	
	/** Create behavior and add it to element class. */
	func new(BehaviorElementClass eclass, ECBBehaviorGuiPanels behaviorGuiPanels,\
	ECBSelectable selectable) super(eclass)
		if selectable == null
			throw ENullPointer.new("selectable")
		end
		
		var String prefix = "showInteractHandles."
		
		this.behaviorGuiPanels = behaviorGuiPanels
		pSelectable = selectable
		
		pHandleClasses = ECPElementClassList.new(prefix + "handles", GameApp.getGameApp().getECListHandles())
		eclass.addProperty(pHandleClasses)
		
		pHandleSize = ECPFloat.new(prefix + "handleSize", 0.2, 0)
		eclass.addProperty(pHandleSize)
		
		eclass.addBehavior(this)
	end
	
	/** Dispose of behavior. */
	func void dispose()
		behaviorGuiPanels = null
		pHandleClasses = null
		pSelectable = null
		super.dispose()
	end
	
	
	
	/** Selectable behavior. */
	func ECBSelectable getSelectable()
		return pSelectable
	end
	
	/** Element class list. */
	func ECPElementClassList getHandleClasses()
		return pHandleClasses
	end
	
	/** Base handle size. */
	func ECPFloat getHandleSize()
		return pHandleSize
	end
	
	
	
	/** Move object as if handlers have been used. */
	public static func void directMoveObject(BehaviorElement element, DVector direction)
		var DMatrix matrix = DMatrix.newFromQuaternion(element.getOrientation())
		directMoveObjectTo(element, element.getPosition() + matrix.transformNormal(direction)\
			* SessionSettings.get().getManualMovementStep())
	end
	
	/** Move object as if handlers have been used. */
	public static func void directMoveObjectTo(BehaviorElement element, DVector position)
		var Instance einst = getInstanceIn(element)
		
		if einst != null
			einst.notifyStartInteract(null)
			element.setPosition(position)
			einst.notifyStopInteract(null)
			
		else
			element.setPosition(position)
		end
	end
	
	/** Rotate object as if handlers have been used. */
	public static func void directRotateObject(BehaviorElement element, Vector axis)
		var Matrix matrix = Matrix.newFromQuaternion(element.getOrientation())
		directRotateObjectTo(element, element.getOrientation() * Quaternion.newFromAxis(\
			matrix.transformNormal(axis), -SessionSettings.get().getManualRotationStep()))
	end
	
	/** Rotate object as if handlers have been used. */
	public static func void directRotateObjectTo(BehaviorElement element, Quaternion orientation)
		var Instance einst = getInstanceIn(element)
		
		if einst != null
			einst.notifyStartInteract(null)
			element.setOrientation(orientation)
			einst.notifyStopInteract(null)
			
		else
			element.setOrientation(orientation)
		end
	end
	
	
	
	/** Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	/** Get behavior in element class or null if absent. */
	static func ECBShowInteractHandles getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBShowInteractHandles each
			return true
		end) cast ECBShowInteractHandles
	end
	
	/** Get instance in element or null if absent. */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	
	
	/** Create behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
