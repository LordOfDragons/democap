/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Behaviors

pin Democap.Gui
pin Dragengine.Scenery


/**
 * Behavior adding support to create behavior gui panels for editing.
 */
class ECBBehaviorGuiPanels extends DefaultECBehavior
	/** Behavior gui panel. */
	abstract class BehaviorGuiPanel
		protected var DefaultECBehaviorInstance pInstance
		protected var String pId
		protected var String pBehaviorId
		
		/** Create behavior gui panel. */
		func new(DefaultECBehaviorInstance instance, String id) this(instance, id, "")
		end
		
		func new(DefaultECBehaviorInstance instance, String id, String behaviorId)
			if instance == null
				throw ENullPointer.new("instance")
			end
			if id == null
				throw ENullPointer.new("id")
			end
			if id.empty()
				throw EInvalidParam.new("id is empty string")
			end
			if behaviorId == null
				throw ENullPointer.new("behaviorId")
			end
			
			pInstance = instance
			pId = id
			pBehaviorId = behaviorId
			
			if not behaviorId.empty()
				pId = pId + ":" + behaviorId
			end
		end
		
		/** Instance to edit. */
		func DefaultECBehaviorInstance getInstance()
			return pInstance
		end
		
		/** Panel identifier. */
		func String getId()
			return pId
		end
		
		/** Behavior ID. */
		func String getBehaviorId()
			return pBehaviorId
		end
		
		/** Create behavior gui panel. */
		public abstract func WMPPanelSceneObject createPanel(WMPanelProject panelProject)
	end
	
	/** Behavior Gui Panel Manager. */
	class Manager
		protected var WMPanelProject pPanelProject
		protected var Dictionary pPanels
		
		/** Create manager. */
		func new(WMPanelProject panelProject)
			if panelProject == null
				throw ENullPointer.new("panelProject")
			end
			pPanelProject = panelProject
			pPanels = Dictionary.new()
		end
		
		/** Dispose of manager. */
		func void dispose()
			if pPanels != null
				pPanels.forEachValue(block Array panels
					panels.forEach(block WMPPanelSceneObject each
						each.dispose()
					end)
				end)
				pPanels.removeAll()
			end
			pPanelProject = null
		end
		
		/** Get panel. */
		func WMPPanelSceneObject getPanel(BehaviorGuiPanel behaviorGuiPanel)
			var Array panels = pPanels.getAt(behaviorGuiPanel.getId(), null) cast Array
			if panels == null
				panels = Array.new()
				pPanels.setAt(behaviorGuiPanel.getId(), panels)
			end
			
			if panels.getCount() == 0
				panels.add(behaviorGuiPanel.createPanel(pPanelProject))
			end
			
			var int index = panels.getCount() - 1
			var WMPPanelSceneObject panel = panels.getAt(index) cast WMPPanelSceneObject
			panels.removeFrom(index)
			return panel
		end
		
		/** Return panel. */
		func void returnPanel(WMPPanelSceneObject panel)
			if panel == null
				throw ENullPointer.new("panel")
			end
			panel.setBehavior(null)
			(pPanels.getAt(panel.getBGPTypeId()) cast Array).add(panel)
		end
	end
	
	/**
	 * Behavior factory.
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBBehaviorGuiPanels'/>
	 * \endcode
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBBehaviorGuiPanels"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			if not id.empty()
				throw EInvalidParam.new("id is not empty string")
			end
			return ECBBehaviorGuiPanels.new(eclass)
		end
	end
	
	/** Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		protected var Array pBehaviorGuiPanels
		
		
		/** Create behavior instance. */
		func new(BehaviorElement element) super(element)
			pBehaviorGuiPanels = Array.new()
		end
		
		/** Dispose of behavior instance. */
		func void dispose()
			pBehaviorGuiPanels = null
			super.dispose()
		end
		
		
		/** Count of behavior gui panels. */
		func int getBehaviorGuiPanelCount()
			return pBehaviorGuiPanels.getCount()
		end
		
		/** Add behavior gui panel. */
		func void addBehaviorGuiPanel(BehaviorGuiPanel behaviorGuiPanel)
			if behaviorGuiPanel == null
				throw ENullPointer.new("behaviorGuiPanel")
			end
			pBehaviorGuiPanels.add(behaviorGuiPanel)
		end
		
		/** Remove behavior gui panel. */
		func void removeBehaviorGuiPanel(BehaviorGuiPanel behaviorGuiPanel)
			pBehaviorGuiPanels.remove(behaviorGuiPanel)
		end
		
		/** Behavior gui panel at index. */
		func BehaviorGuiPanel getBehaviorGuiPanelAt(int index)
			return pBehaviorGuiPanels.getAt(index) cast BehaviorGuiPanel
		end
		
		/** Visit behavior gui panels with block with signature (BehaviorGuiPanel) or (int,BehaviorGuiPanel). */
		func void forEachBehaviorGuiPanel(Block ablock)
			pBehaviorGuiPanels.forEach(ablock)
		end
	end
	
	
	/** Create behavior and add it to element class. */
	func new(BehaviorElementClass eclass) super(eclass)
		eclass.addBehavior(this)
	end
	
	
	/** Get behavior in element class or null if absent. */
	static public func ECBBehaviorGuiPanels getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBBehaviorGuiPanels each
			return true
		end) cast ECBBehaviorGuiPanels
	end
	
	/** Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	/** Get instance in element or null if absent. */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	
	/** Create behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(element)
	end
end
