/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2022, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Behaviors

pin Democap.Characters

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * Behavior controlling physics parameter of controllers. Element class sets if colliders
 * should be set to dynamic physics response or kinematic physics response. User can
 * change this behavior for example when constructing own objects.
 * 
 * This behavior takes care of enabling/disabling the physics behavior on an array of
 * ECBehaviorCollider depending on the current playback/recording state. During recording
 * physics behavior is enabled. Otherwise physics is disabled. If the user enabled live
 * physics then physics will be also enabled outside recording unless playing back.
 * 
 * Furthermore this behavior copies component bones to physics bones upon switching
 * states to ensure the result is correct.
 * 
 * The weight of the entire element can be set. This is used as the total mass of all
 * colliders. The mass of each collider is scaled uniformly to match the desired value.
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/democap:behavior_ecbcolliderphysics
 */
class ECBColliderPhysics extends DefaultECBehavior
	/**
	 * Behavior factory.
	 * 
	 * Automatically assigns these behaviors if present before adding:
	 * - Optional: \ref ECBBehaviorGuiPanels
	 * - Optional: \ref ECBehaviorCollider
	 * - Optional: \ref ECBCapturedAnimations
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBBehaviorGuiPanels'/>
	 * <behavior type='ECBehaviorCollider'/>
	 * <behavior type='ECBCapturedAnimations'/>
	 * 
	 * <behavior type='ECBColliderPhysics'>
	 *   <boolean name='.usePhysics'>false</boolean>
	 *   <boolean name='.livePhysics'>false</boolean>
	 *   <boolean name='.touchActor'>true</boolean>
	 *   <boolean name='.useLocalGravity'>false</boolean>
	 *   <vector name='.gravity' x='0' y='-9.81' z='0'/>
	 *   <float name='.weight'>1</float>
	 *   <boolean name='.canGrabActor'>true</boolean>
	 * </behavior>
	 * \endcode
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBColliderPhysics"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			if not id.empty()
				throw EInvalidParam.new("id is not empty string")
			end
			var ECBColliderPhysics behavior = ECBColliderPhysics.new(eclass,\
				ECBBehaviorGuiPanels.getBehaviorIn(eclass), ECBehaviorCollider.getBehaviorIn(eclass))
			behavior.capturedAnimations = ECBCapturedAnimations.getBehaviorIn(eclass)
			
			BehaviorElementClass.sharedFactoryHelper.setPropertiesFromParameters(eclass, parameters, "colliderPhysics")
			
			return behavior
		end
	end
	
	/** Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		class RecordStateChanged extends RecordScene.DefaultListener
			protected var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func void prepareRecording(RecordScene recordScene)
				pInstance.onRecordStateChanged()
			end
			
			func void startRecording(RecordScene recordScene)
				pInstance.onRecordStateChanged()
			end
			
			func void stopRecording(RecordScene recordScene)
				pInstance.onRecordStateChanged()
			end
		end
		
		class PlaybackStateChanged extends PlaybackScene.DefaultListener
			protected var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func void pausePlayback(PlaybackScene playbackScene)
				pInstance.onPlaybackStateChanged()
			end
			
			func void startPlayback(PlaybackScene playbackScene)
				pInstance.onPlaybackStateChanged()
			end
			
			func void stopPlayback(PlaybackScene playbackScene)
				pInstance.onPlaybackStateChanged()
			end
		end
		
		class BehaviorGuiPanel extends ECBBehaviorGuiPanels.BehaviorGuiPanel
			func new(Instance instance) super(instance, "ECBColliderPhysics")
			end
			
			func Gui.WMPPanelSceneObject createPanel(Gui.WMPanelProject panelProject)
				return Gui.WMPSOColliderPhysics.new(panelProject, getId())
			end
		end
		
		
		var ECBColliderPhysics pECBehavior
		var ECBehaviorCollider.Instance pCollider
		var bool pUsePhysics
		var bool pLivePhysics
		var bool pTouchActor
		var bool pPhysicsEnabled
		var bool pUseLocalGravity
		var Vector pGravity
		var float pWeight
		var bool pCanGrabActor
		var RecordStateChanged pRecordStateChanged
		var PlaybackStateChanged pPlaybackStateChanged
		var ECBCapturedAnimations.Instance pCapturedAnimations
		
		
		
		/** Create behavior instance. */
		func new(ECBColliderPhysics ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			
			if ecbehavior.collider != null
				pCollider = ecbehavior.collider.instance(element)
			end
			
			pRecordStateChanged = RecordStateChanged.new(this)
			GameApp.getGameApp().getRecordScene().addListener(pRecordStateChanged)
			
			pPlaybackStateChanged = PlaybackStateChanged.new(this)
			GameApp.getGameApp().getPlaybackScene().addListener(pPlaybackStateChanged)
		end
		
		/** Dispose of behavior instance. */
		func void dispose()
			if pRecordStateChanged != null
				GameApp.getGameApp().getRecordScene().removeListener(pRecordStateChanged)
				pRecordStateChanged = null
			end
			if pPlaybackStateChanged != null
				GameApp.getGameApp().getPlaybackScene().removeListener(pPlaybackStateChanged)
				pPlaybackStateChanged = null
			end
			
			pCollider = null
			pCapturedAnimations = null
			super.dispose()
		end
		
		/** Init behavior instance. */
		func void init(StubElement stub)
			var CodecPropertyString codec = getElement().getClass().getCodecPropertyString()
			
			pUsePhysics = pECBehavior.usePhysics.getValue(stub)
			pLivePhysics = pECBehavior.livePhysics.getValue(stub)
			pTouchActor = pECBehavior.touchActor.getValue(stub)
			pWeight = pECBehavior.weight.getValue(stub)
			pUseLocalGravity = pECBehavior.useLocalGravity.getValue(stub)
			pGravity = pECBehavior.gravity.getVector(stub, codec)
			pCanGrabActor = pECBehavior.canGrabActor.getValue(stub)
			
			if pECBehavior.capturedAnimations != null
				pCapturedAnimations = pECBehavior.capturedAnimations.instance(getElement())
			end
			
			updateMass()
			updatePhysicsState(true)
			updateCollisionFilter()
			
			if pECBehavior.behaviorGuiPanels != null
				pECBehavior.behaviorGuiPanels.instance(getElement()).addBehaviorGuiPanel(BehaviorGuiPanel.new(this))
			end
		end
		
		
		
		/** Behavior. */
		func ECBColliderPhysics getECBehavior()
			return pECBehavior
		end
		
		/** Captured animations or null. */
		func ECBCapturedAnimations.Instance getCapturedAnimations()
			return pCapturedAnimations
		end
		
		
		
		/** Use physics. */
		func bool getUsePhysics()
			return pUsePhysics
		end
		
		/** Set use physics. */
		func void setUsePhysics(bool usePhysics)
			if usePhysics == pUsePhysics
				return
			end
			
			pUsePhysics = usePhysics
			getElement().getStub().setPropertyBoolFor(pECBehavior.usePhysics.getName(), usePhysics)
			
			updatePhysicsState(false)
		end
		
		/** Live physics. */
		func bool getLivePhysics()
			return pLivePhysics
		end
		
		/** Set live physics. */
		func void setLivePhysics(bool livePhysics)
			if livePhysics == pLivePhysics
				return
			end
			
			pLivePhysics = livePhysics
			getElement().getStub().setPropertyBoolFor(pECBehavior.livePhysics.getName(), livePhysics)
			
			updatePhysicsState(false)
		end
		
		/** Weight. */
		func float getWeight()
			return pWeight
		end
		
		/** Set weight. */
		func void setWeight(float weight)
			weight = DEMath.max(weight, 0.001)
			if DEMath.fabs(weight - pWeight) < 0.001
				return
			end
			
			pWeight = weight
			getElement().getStub().setPropertyFloatFor(pECBehavior.weight.getName(), weight)
			
			updateMass()
		end
		
		/** Touch actor. */
		func bool getTouchActor()
			return pTouchActor
		end
		
		/** Set touch actor. */
		func void setTouchActor(bool touchActor)
			if touchActor == pTouchActor
				return
			end
			
			pTouchActor = touchActor
			getElement().getStub().setPropertyBoolFor(pECBehavior.touchActor.getName(), touchActor)
			
			updateCollisionFilter()
		end
		
		/** Use gravity. */
		func bool getUseLocalGravity()
			return pUseLocalGravity
		end
		
		/** Set use gravity. */
		func void setUseLocalGravity(bool useGravity)
			if useGravity == pUseLocalGravity
				return
			end
			
			pUseLocalGravity = useGravity
			getElement().getStub().setPropertyBoolFor(pECBehavior.useLocalGravity.getName(), useGravity)
			
			updatePhysicsState(true)
		end
		
		/** Gravity. */
		func Vector getGravity()
			return pGravity
		end
		
		/** Set gravity. */
		func void setGravity(Vector gravity)
			if gravity.equals(pGravity)
				return
			end
			
			pGravity = gravity
			getElement().getStub().setPropertyValueFor(pECBehavior.gravity.getName(),\
				getElement().getClass().getCodecPropertyString().encodeVector(gravity))
			
			updatePhysicsState(true)
		end
		
		/** Can physics grab. */
		func bool getCanGrabActor()
			return pCanGrabActor
		end
		
		/** Set can physics grab. */
		func void setCanGrabActor(bool canGrabActor)
			if canGrabActor == pCanGrabActor
				return
			end
			
			pCanGrabActor = canGrabActor
			getElement().getStub().setPropertyBoolFor(pECBehavior.canGrabActor.getName(), canGrabActor)
		end
		
		
		
		/** Recording state changed. */
		func void onRecordStateChanged()
			updatePhysicsState(false)
		end
		
		/** Playback state changed. */
		func void onPlaybackStateChanged()
			updatePhysicsState(false)
		end
		
		/** Reset dynamic bone. */
		func void resetDynamicBones()
			if pCollider == null
				return
			end
			
			if pCollider.getCollider() castable ColliderRig
				var ColliderRig collider = pCollider.getCollider() cast ColliderRig
				var Rig rig = collider.getRig()
				if rig != null
					var DMatrix matrixCollider = collider.getMatrix()
					var int i, count = rig.getBoneCount()
					for i = 0 to count
						if rig.boneGetDynamic(i)
							var DMatrix matrixBone = \
								Matrix.newTranslation(rig.boneGetCentralMassPoint(i)).toDMatrix()\
								* rig.getBoneMatrix(i).toDMatrix()\
								* matrixCollider
							collider.boneSetPosition(i, matrixBone.getPosition())
							collider.boneSetOrientation(i, matrixBone.toQuaternion())
							collider.boneSetLinearVelocity(i, Vector.new())
							collider.boneSetAngularVelocity(i, Vector.new())
						end
					end
				end
				
				if pCollider.getCollider() castable ColliderComponent
					(pCollider.getCollider() cast ColliderComponent).copyStatesToComponent()
				end
			end
		end
		
		/** Reset dynamic bone velocities. */
		func void resetDynamicBoneVelocities()
			if pCollider == null
				return
			end
			
			if pCollider.getCollider() castable ColliderRig
				var ColliderRig collider = pCollider.getCollider() cast ColliderRig
				var Rig rig = collider.getRig()
				if rig != null
					var int i, count = rig.getBoneCount()
					for i = 0 to count
						if rig.boneGetDynamic(i)
							collider.boneSetLinearVelocity(i, Vector.new())
							collider.boneSetAngularVelocity(i, Vector.new())
						end
					end
				end
			end
		end
		
		
		
		/** Update mass. */
		protected func void updateMass()
			if pCollider == null
				return
			end
			
			var Collider collider = pCollider.getCollider()
			if collider == null
				return
			end
			
			collider.setMass(pWeight)
		end
		
		/** Update physics state. */
		protected func void updatePhysicsState(bool force)
			// there are 4 possible states to cover:
			// - recording
			// - prepare to record
			// - playing back (includes playback paused)
			// - neither recording nor playing back
			// 
			// live physics is only used if use physics is true.
			// 
			// if ECBCapturedAnimations is present physics will be only enabled
			// if recording is enabled.
			var ECBCapturable.Instance capturable = GameApp.getGameApp().getCapturableTracker().getElement()
			var bool isCaptured = capturable != null and capturable.getElement() == getElement()
			
			var bool canRecord = isCaptured or pCapturedAnimations == null or pCapturedAnimations.getRecord()
			var bool physicsEnabled
			
			if GameApp.getGameApp().getRecordScene().isRecording()
				physicsEnabled = pUsePhysics and canRecord
				
			elif GameApp.getGameApp().getRecordScene().isPreparing()
				physicsEnabled = pUsePhysics and canRecord and pLivePhysics
				
			elif not GameApp.getGameApp().getPlaybackScene().isStopped()
				physicsEnabled = false
				
			else // playing back or pausued
				physicsEnabled = pUsePhysics and pLivePhysics
			end
			
			if physicsEnabled != pPhysicsEnabled or force
				pPhysicsEnabled = physicsEnabled
				
				if physicsEnabled
					enablePhysics()
					
				else
					disablePhysics()
				end
			end
		end
		
		/** Update collision filter. */
		protected func void updateCollisionFilter()
			if pCollider == null
				return
			end
			
			var Collider collider = pCollider.getCollider()
			if collider == null
				return
			end
			
			var CollisionFilter cf = collider.getCollisionFilter()
			var LayerMask cffilter = LayerMask.new(cf.getFilter())
			
			if pTouchActor
				cffilter.setBit(BaseGameApp.CollisionFilterBit.actor)
				
			else
				cffilter.clearBit(BaseGameApp.CollisionFilterBit.actor)
			end
			
			collider.setCollisionFilter(CollisionFilter.new(cf.getCategory(), cffilter))
		end
		
		/** Enable physics. */
		protected func void enablePhysics()
			if pCollider != null
				enablePhysics(pCollider)
			end
		end
		
		protected func void enablePhysics(ECBehaviorCollider.Instance behavior)
			var Collider collider = behavior.getCollider()
			
			collider.setResponseType(CollisionResponse.dynamic)
			
			if pUseLocalGravity
				collider.setGravity(pGravity)
				collider.setUseLocalGravity(true)
				
			else
				collider.setUseLocalGravity(false)
			end
			
			if collider castable ColliderComponent
				(collider cast ColliderComponent).copyStatesFromComponent()
			end
		end
		
		/** Disable physics. */
		protected func void disablePhysics()
			if pCollider != null
				disablePhysics(pCollider)
			end
		end
		
		/** Disable physics. */
		protected func void disablePhysics(ECBehaviorCollider.Instance behavior)
			var Collider collider = behavior.getCollider()
			
			collider.setResponseType(CollisionResponse.kinematic)
			collider.setGravity(Vector.new())
			collider.setUseLocalGravity(true)
		end
		
		
		
		/** Read from file. */
		func void readFromFile(PersistencyEnvironment env, FileReader reader)
			select reader.readByte()
			case 0
				var PersistencyFlags flags = PersistencyFlags.new(3, reader)
				pUsePhysics = flags.getAt(0)
				pLivePhysics = flags.getAt(1)
				pPhysicsEnabled = flags.getAt(2)
				
				pWeight = reader.readFloat()
				
			case 1
				var PersistencyFlags flags = PersistencyFlags.new(6, reader)
				pUsePhysics = flags.getAt(0)
				pLivePhysics = flags.getAt(1)
				pPhysicsEnabled = flags.getAt(2)
				pTouchActor = flags.getAt(3)
				pUseLocalGravity = flags.getAt(4)
				pCanGrabActor = flags.getAt(5)
				
				pWeight = reader.readFloat()
				pGravity = Vector.readFromFile(reader)
				
			else
				throw EInvalidParam.new("unsupported version")
			end
			
			updateMass()
			updatePhysicsState(true)
			updateCollisionFilter()
			
			// update stub to properly support copy
			var StubElement stub = getElement().getStub()
			stub.setPropertyBoolFor(pECBehavior.usePhysics.getName(), pUsePhysics)
			stub.setPropertyBoolFor(pECBehavior.livePhysics.getName(), pLivePhysics)
			stub.setPropertyFloatFor(pECBehavior.weight.getName(), pWeight)
			stub.setPropertyBoolFor(pECBehavior.touchActor.getName(), pTouchActor)
			stub.setPropertyBoolFor(pECBehavior.useLocalGravity.getName(), pUseLocalGravity)
			stub.setPropertyValueFor(pECBehavior.gravity.getName(),\
				getElement().getClass().getCodecPropertyString().encodeVector(pGravity))
			stub.setPropertyBoolFor(pECBehavior.canGrabActor.getName(), pCanGrabActor)
		end
		
		/** Write to file. */
		func void writeToFile(PersistencyEnvironment env, FileWriter writer)
			writer.writeByte(1) // version
			
			var PersistencyFlags flags = PersistencyFlags.new(6)
			flags.setAt(0, pUsePhysics)
			flags.setAt(1, pLivePhysics)
			flags.setAt(2, pPhysicsEnabled)
			flags.setAt(3, pTouchActor)
			flags.setAt(4, pUseLocalGravity)
			flags.setAt(5, pCanGrabActor)
			flags.writeToFile(writer)
			
			writer.writeFloat(pWeight)
			pGravity.writeToFile(writer)
		end
	end
	
	
	
	public var ECBBehaviorGuiPanels behaviorGuiPanels
	public var ECBCapturedAnimations capturedAnimations
	
	public var ECBehaviorCollider collider
	public var ECPBoolean usePhysics
	public var ECPBoolean livePhysics
	public var ECPBoolean touchActor
	public var ECPBoolean useLocalGravity
	public var ECPBoolean canGrabActor
	public var ECPVector gravity
	public var ECPFloat weight
	
	
	
	/** Create behavior and add it to element class. */
	func new(BehaviorElementClass eclass, ECBBehaviorGuiPanels behaviorGuiPanels,\
	ECBehaviorCollider collider) super(eclass)
		var String prefix = "colliderPhysics."
		
		this.behaviorGuiPanels = behaviorGuiPanels
		this.collider = collider
		
		usePhysics = ECPBoolean.new(prefix + "usePhysics", false)
		eclass.addProperty(usePhysics)
		
		livePhysics = ECPBoolean.new(prefix + "livePhysics", false)
		eclass.addProperty(livePhysics)
		
		touchActor = ECPBoolean.new(prefix + "touchActor", true)
		eclass.addProperty(touchActor)
		
		useLocalGravity = ECPBoolean.new(prefix + "useLocalGravity", false)
		eclass.addProperty(useLocalGravity)
		
		gravity = ECPVector.new(prefix + "gravity")
		eclass.addProperty(gravity)
		
		weight = ECPFloat.new(prefix + "weight", 1, 0)
		eclass.addProperty(weight)
		
		canGrabActor = ECPBoolean.new(prefix + "canGrabActor", true)
		eclass.addProperty(canGrabActor)
		
		eclass.addBehavior(this)
	end
	
	/** Dispose of behavior. */
	func void dispose()
		behaviorGuiPanels = null
		collider = null
		capturedAnimations = null
		super.dispose()
	end
	
	
	
	/** Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(this.getInstanceIndex()) cast Instance
	end
	
	/** Get instance with slot name in element or null if absent. */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	
	
	/** Actor can grab element. */
	static func bool actorCanGrab(BehaviorElement element)
		var Instance ainst = ECBColliderPhysics.getInstanceIn(element)
		return ainst == null or ainst.getCanGrabActor()
	end
	
	
	
	/** Create behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
