/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Behaviors

pin Democap.Characters

pin Dragengine.Commands
pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * Behavior tracking state of a tracker slot. Can show attached tracker in 3D.
 */
class ECBTrackerSlot extends DefaultECBehavior
	/** Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/** Controller attach/detach listener. */
		class AttachDetachListener extends DefaultBindingManagerListener
			private var Instance pInstance
			private var String pDeviceID
			
			public func new(Instance instance)
				pInstance = instance
				pDeviceID = instance.getECBehavior().getTrackerSlot().getInputDeviceID()
			end
			
			public func void deviceAttached(BindingManager manager, InputDevice device)
				if device.getID().equals(pDeviceID)
					pInstance.setInputDevice(device)
				end
			end
			
			public func void deviceDetached(BindingManager manager, InputDevice device)
				if pInstance.getInputDevice() == device
					pInstance.setInputDevice(null)
				end
			end
			
			public func void devicesReloaded(BindingManager manager)
				// temporary
				pInstance.setInputDevice(manager.findDevice(block InputDevice each
					return each.getID().equals(pDeviceID)
				end))
			end
		end
		
		
		
		private var ECBTrackerSlot pECBehavior
		private var ECBehaviorVRPlayspace.Instance pVRPlayspace
		private var ECBehaviorActorAnimated.Instance pActorAnimated
		private var ECBehaviorComponent.Instance pComponent
		private var AnimatorController pControllerPosition
		private var AnimatorController pControllerRotation
		private var bool pShowTracker
		private var InputDevice pInputDevice
		private var Vector pPosition
		private var Quaternion pOrientation
		private var Matrix pMatrix
		private var AttachDetachListener pAttachDetachListener
		
		
		
		/** Create instance. */
		public func new(ECBTrackerSlot ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pShowTracker = true
			pPosition = Vector.new()
			pOrientation = Quaternion.new()
			pMatrix = Matrix.new()
			pAttachDetachListener = AttachDetachListener.new(this)
			
			pVRPlayspace = ecbehavior.getVRPlayspace().instance(element)
			pActorAnimated = ecbehavior.getActorAnimated().instance(element)
			pComponent = ecbehavior.getComponent().instance(element)
			
			setRequiresThink(true)
		end
		
		/** Dispose of instance. */
		public func void dispose()
			pAttachDetachListener = null
			pComponent = null
			pVRPlayspace = null
			pActorAnimated = null
			super.dispose()
		end
		
		
		
		/** Init behavior instance. */
		public func void init(StubElement stub)
			pControllerPosition = pActorAnimated.getControllerNamed(pECBehavior.getControllerNamePosition())
			pControllerRotation = pActorAnimated.getControllerNamed(pECBehavior.getControllerNameRotation())
		end
		
		
		/** Behavior. */
		public func ECBTrackerSlot getECBehavior()
			return pECBehavior
		end
		
		/** VR Playspace. */
		public func ECBehaviorVRPlayspace.Instance getVRPlayspace()
			return pVRPlayspace
		end
		
		/** Actor animated. */
		public func ECBehaviorActorAnimated.Instance getActorAnimated()
			return pActorAnimated
		end
		
		/** Component behavior instance. */
		public func ECBehaviorComponent.Instance getComponent()
			return pComponent
		end
		
		/** Animator controller position. */
		public func AnimatorController getControllerPosition()
			return pControllerPosition
		end
		
		/** Animator controller rotation. */
		public func AnimatorController getControllerRotation()
			return pControllerRotation
		end
		
		/** Show hand. */
		public func bool getShowTracker()
			return pShowTracker
		end
		
		/** Set show hand. */
		protected func void setShowTracker(bool showHand)
			if showHand == pShowTracker
				return
			end
			
			pShowTracker = showHand
			stateChanged()
		end
		
		/** Input device or null if detached. */
		public func InputDevice getInputDevice()
			return pInputDevice
		end
		
		/** Set input device or null if detached. */
		public func void setInputDevice(InputDevice device)
			if device == pInputDevice
				return
			end
			
			pInputDevice = device
			updateModelSkin()
		end
		
		/** \brief Tracker is attached. */
		public func bool isAttached()
			return this.pInputDevice != null
		end
		
		/** \brief Tracker is detached. */
		public func bool isDetached()
			return this.pInputDevice == null
		end
		
		
		
		/** World matrix. */
		public func DMatrix getMatrix()
			return pMatrix.toDMatrix() * pVRPlayspace.getMatrix()
		end
		
		/** Playspace local matrix. */
		public func Matrix getMatrixPlayspace()
			return pMatrix
		end
		
		
		
		/** Element has been added to game world. Start tracking device. */
		public func void addToGameWorld()
			var BindingManager bindingManager = GameApp.getGameApp().getBindingManager()
			bindingManager.addListener(pAttachDetachListener)
			
			// find device
			var String id = pECBehavior.getTrackerSlot().getInputDeviceID()
			setInputDevice(bindingManager.findDevice(block InputDevice each
				return each.getID().equals(id)
			end))
		end
		
		/** Element has been removed from game world. Stop tracking device. */
		public func void removeFromGameWorld()
			GameApp.getGameApp().getBindingManager().removeListener(pAttachDetachListener)
			setInputDevice(null)
		end
		
		/** Frame update. */
		public func void think(float elapsed)
			updateMatrix()
			
			var Component component = pComponent.getComponent()
			if component != null
				var DMatrix matrix = getMatrix()
				component.setPosition(matrix.getPosition())
				component.setOrientation(matrix.toQuaternion())
			end
		end
		
		/** Element state changed like visible. */
		public func void stateChanged()
			updateVisibile()
		end
		
		
		
		/** Update component model and skin. */
		protected func void updateModelSkin()
			var Component component = pComponent.getComponent()
			if component == null
				return
			end
			
			if pInputDevice != null and pInputDevice.getType() != InputDeviceType.vrHMD
				component.setModelAndSkin(pInputDevice.getVRModel(), pInputDevice.getVRSkin())
				
			else
				component.setModelAndSkin(null, null)
			end
		end
		
		/** Update component visible. */
		protected func void updateVisibile()
			var Component component = pComponent.getComponent()
			if component == null
				return
			end
			
			component.setVisible(pShowTracker and getElement().getVisible())
		end
		
		/** Update matrix. */
		public func void updateMatrix()
			var CharacterTrackerSlot slot = pECBehavior.getTrackerSlot()
			
			if pInputDevice != null
				pPosition = pInputDevice.getDevicePosePosition()
				pOrientation = pInputDevice.getDevicePoseOrientation()
				
			elif slot.getInputDeviceID().empty()
				pPosition = slot.getPosition()
				pOrientation = Quaternion.newFromEuler(slot.getRotation())
			end
			
			pControllerPosition.setVector(pPosition)
			pControllerRotation.setRotation(pOrientation.getEulerAngles())
			
			pMatrix = Matrix.newRT(slot.getOffsetRotation(), slot.getOffsetPosition()) \
				* Matrix.newWorld(pPosition, pOrientation)
		end
	end
	
	
	
	private var CharacterTrackerSlot pTrackerSlot
	private var ECBehaviorVRPlayspace pVRPlayspace
	private var ECBehaviorActorAnimated pActorAnimated
	private var ECBehaviorComponent pComponent
	private var String pControllerNamePosition
	private var String pControllerNameRotation
	
	
	
	/** Create behavior element class. */
	public func new(BaseVRActorClass eclass, CharacterTrackerSlot slot) super(eclass, slot.getName())
		if slot == null
			throw ENullPointer.new("slot")
		end
		
		var String subId = "tracker(" + slot.getName() + ")"
		var String prefix = subId + "."
		
		pTrackerSlot = slot
		pVRPlayspace = eclass.getVRPlayspace()
		pActorAnimated = eclass.getActorAnimated()
		
		pControllerNamePosition = slot.getName() + ".position"
		pControllerNameRotation = slot.getName() + ".rotation"
		
		pComponent = ECBehaviorComponent.new(eclass, null, subId, prefix + "component")
		
		eclass.addBehavior(this)
	end
	
	/** Dispose of behavior. */
	public func void dispose()
		pVRPlayspace = null
		pTrackerSlot = null
		super.dispose()
	end
	
	
	
	/** Tracker slot. */
	public func CharacterTrackerSlot getTrackerSlot()
		return pTrackerSlot
	end
	
	/** VR Playspace behavior. */
	public func ECBehaviorVRPlayspace getVRPlayspace()
		return pVRPlayspace
	end
	
	/** Actor animated behavior. */
	public func ECBehaviorActorAnimated getActorAnimated()
		return pActorAnimated
	end
	
	/** Component behavior. */
	public func ECBehaviorComponent getComponent()
		return pComponent
	end
	
	/** Animator controller name position. */
	public func String getControllerNamePosition()
		return pControllerNamePosition
	end
	
	/** Animator controller name rotation. */
	public func String getControllerNameRotation()
		return pControllerNameRotation
	end
	
	
	
	/** Get instance in element from owner element class. */
	public func Instance instance( BehaviorElement element )
		return element.getInstanceAt( this.getInstanceIndex() ) cast Instance
	end
	
	
	
	/** Get behavior with slot name in element class or null if absent. */
	static public func ECBTrackerSlot getBehaviorIn(BehaviorElementClass eclass, String slotName)
		return eclass.findBehavior(block ECBTrackerSlot each
			return each.getTrackerSlot().getName().equals(slotName)
		end) cast ECBTrackerSlot
	end
	
	/** Get list of all behaviors in element. */
	static public func Array getAllBehaviorsIn(BehaviorElementClass eclass)
		return eclass.collectBehaviors(block ECBTrackerSlot each
			return true
		end)
	end
	
	/** Get instance with slot name in element or null if absent. */
	static public func Instance getInstanceIn(BehaviorElement element, String slotName)
		return element.findInstance(block Instance each
			return each.getECBehavior().getTrackerSlot().getName().equals(slotName)
		end) cast Instance
	end
	
	/** Get list of all instances in element. */
	static public func Array getAllInstancesIn(BehaviorElement element)
		return element.collectInstances(block Instance each
			return true
		end)
	end
	
	
	
	/** Create Behavior instance. */
	public func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
