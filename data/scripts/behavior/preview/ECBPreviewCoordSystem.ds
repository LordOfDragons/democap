/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Behaviors

pin Democap.Characters

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * Behavior displaying coordinate system in character preview.
 */
class ECBPreviewCoordSystem extends DefaultECBehavior
	/** Handle. */
	enum Handle
		moveX
		moveY
		moveZ
		rotateX
		rotateY
		rotateZ
		scaleX
		scaleY
		scaleZ
	end
	
	
	
	/** Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		private var ECBPreviewCoordSystem pECBehavior
		private var ECBPreviewDataQuery.Instance pDataQuery
		private var ECBehaviorComponent.Instance pComponent
		private var Model pModel
		private var DebugDrawer pDebugDrawerMove
		private var DebugDrawer pDebugDrawerRotate
		private var ColliderVolume pColliderMoveX
		private var ColliderVolume pColliderMoveY
		private var ColliderVolume pColliderMoveZ
		private var ColliderVolume pColliderRotateX
		private var ColliderVolume pColliderRotateY
		private var ColliderVolume pColliderRotateZ
		private var String pBone
		private var String pSlot
		private var Vector pPosition
		private var Vector pRotation
		private var bool pVisibleMove
		private var bool pVisibleRotate
		private var Array pRingRotMat
		
		
		
		/** Create behavior instance. */
		public func new(ECBPreviewCoordSystem ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pBone = ""
			pSlot = ""
			pPosition = Vector.new()
			pRotation = Vector.new()
			pVisibleMove = false
			pVisibleRotate = false
			
			pRingRotMat = Array.new()
			pRingRotMat.add(Matrix.newRotationX(35))
			pRingRotMat.add(Matrix.newRotationX(55))
			pRingRotMat.add(Matrix.newRotationX(125))
			pRingRotMat.add(Matrix.newRotationX(155))
			pRingRotMat.add(Matrix.newRotationX(205))
			pRingRotMat.add(Matrix.newRotationX(245))
			pRingRotMat.add(Matrix.newRotationX(295))
			pRingRotMat.add(Matrix.newRotationX(325))
			
			pDataQuery = ecbehavior.getDataQuery().instance(element)
			pComponent = ecbehavior.getComponent().instance(element)
		end
		
		/** Dispose of behavior instance. */
		public func void dispose()
			pComponent = null
			super.dispose()
		end
		
		/** Init behavior instance. */
		public func void init(StubElement stub)
			var ElementClass eclass = getElement().getClass()
			
			pModel = pECBehavior.getModel().getModel(stub, eclass)
			
			var DVector position = stub.getPosition()
			var Quaternion orientation = Quaternion.newFromEuler(stub.getRotation())
			
			pDebugDrawerMove = DebugDrawer.new()
			pDebugDrawerMove.setPosition(position)
			pDebugDrawerMove.setOrientation(orientation)
			
			pDebugDrawerRotate = DebugDrawer.new()
			pDebugDrawerRotate.setPosition(position)
			pDebugDrawerRotate.setOrientation(orientation)
			
			createCoordSystem()
		end
		
		
		
		/** Move debug drawer. */
		public func DebugDrawer getDebugDrawerMove()
			return pDebugDrawerMove
		end
		
		/** Rotate debug drawer. */
		public func DebugDrawer getDebugDrawerRotate()
			return pDebugDrawerRotate
		end
		
		/** Model. */
		public func Model getModel()
			return pModel
		end
		
		/** Set move coordinate system visibility. */
		public func void setVisibleMove(bool visible)
			if visible == pVisibleMove
				return
			end
			pVisibleMove = visible
			updateCoordSystemVisibility()
		end
		
		/** Set rotate coordinate system visibility. */
		public func void setVisibleRotate(bool visible)
			if visible == pVisibleRotate
				return
			end
			pVisibleRotate = visible
			updateCoordSystemVisibility()
		end
		
		/** Bone name or empty string. */
		public func String getBone()
			return pBone
		end
		
		/** Set bone name or empty string. */
		public func void setBone(String bone)
			if bone.equals(pBone)
				return
			end
			pBone = bone
			updateCoordSystemGeometry()
		end
		
		/** Tracker slot or empty string. */
		public func String getSlot()
			return pSlot
		end
		
		/** Set tracker slot or empty string. */
		public func void setSlot(String slot)
			if slot.equals(pSlot)
				return
			end
			pSlot = slot
			updateCoordSystemGeometry()
		end
		
		/** Position relative to element. */
		public func Vector getPosition()
			return pPosition
		end
		
		/** Set position relative to element. */
		public func void setPosition(Vector position)
			if position.equals(pPosition)
				return
			end
			pPosition = position
			updateCoordSystemGeometry()
		end
		
		/** Rotation relative to element. */
		public func Vector getRotation()
			return pRotation
		end
		
		/** Set orientation relative to element. */
		public func void setRotation(Vector rotation)
			if rotation.equals(pRotation)
				return
			end
			pRotation = rotation
			updateCoordSystemGeometry()
		end
		
		/** Get world coordinate system matrix. */
		public func DMatrix getMatrix()
			return Matrix.newRT(pRotation, pPosition).toDMatrix() * getParentMatrix()
		end
		
		/** Get world matrix of coordinate system parent. */
		public func DMatrix getParentMatrix()
			var DMatrix matrix = getElement().getElementMatrix().normalize()
			
			if not pBone.empty()
				matrix = pComponent.getComponent().getBoneMatrix(pBone).toDMatrix() * matrix
				
			elif pSlot != null and pDataQuery.getDataQuery() != null
				matrix = pDataQuery.getDataQuery().getSlotMatrix(pSlot).toDMatrix() * matrix
			end
			
			return matrix
		end
		
		
		
		/** Element has been added to game world. */
		public func void addToGameWorld()
			var World world = getElement().getGameWorld().getWorld()
			
			updateCoordSystemShapes()
			updateCoordSystemGeometry()
			updateCoordSystemVisibility()
			
			world.addDebugDrawer(pDebugDrawerMove)
			world.addDebugDrawer(pDebugDrawerRotate)
			
			world.addCollider(pColliderMoveX)
			world.addCollider(pColliderMoveY)
			world.addCollider(pColliderMoveZ)
			
			world.addCollider(pColliderRotateX)
			world.addCollider(pColliderRotateY)
			world.addCollider(pColliderRotateZ)
		end
		
		/** Element is removed from game world. */
		public func void removeFromGameWorld()
			var World world = getElement().getGameWorld().getWorld()
			
			world.removeDebugDrawer(pDebugDrawerMove)
			world.removeDebugDrawer(pDebugDrawerRotate)
			
			world.removeCollider(pColliderMoveX)
			world.removeCollider(pColliderMoveY)
			world.removeCollider(pColliderMoveZ)
			
			world.removeCollider(pColliderRotateX)
			world.removeCollider(pColliderRotateY)
			world.removeCollider(pColliderRotateZ)
		end
		
		/** Element position, orientation or scale changed. */
		public func void geometryChanged()
			updateCoordSystemGeometry()
		end
		
		/** Element state changed. */
		public func void stateChanged()
			updateCoordSystemVisibility()
		end
		
		
		
		/** Create coordinate system. */
		protected func void createCoordSystem()
			var float transparency = 0.6
			
			// move
			pDebugDrawerMove.setXRay(true)
			pDebugDrawerMove.setShapeCount(3)
			
			pDebugDrawerMove.shapeSetEdgeColor(0, Color.transparent)
			pDebugDrawerMove.shapeSetFillColor(0, Color.new(Color.red, transparency))
			
			pDebugDrawerMove.shapeSetEdgeColor(1, Color.transparent)
			pDebugDrawerMove.shapeSetFillColor(1, Color.new(Color.green, transparency))
			
			pDebugDrawerMove.shapeSetEdgeColor(2, Color.transparent)
			pDebugDrawerMove.shapeSetFillColor(2, Color.new(Color.blue, transparency))
			
			pColliderMoveX = createCoordSystemCollider()
			pColliderMoveX.setOwner(Handle.moveX)
			
			pColliderMoveY = createCoordSystemCollider()
			pColliderMoveY.setOwner(Handle.moveY)
			
			pColliderMoveZ = createCoordSystemCollider()
			pColliderMoveZ.setOwner(Handle.moveZ)
			
			// rotate
			pDebugDrawerRotate.setXRay(true)
			pDebugDrawerRotate.setShapeCount(3)
			
			pDebugDrawerRotate.shapeSetEdgeColor(0, Color.transparent)
			pDebugDrawerRotate.shapeSetFillColor(0, Color.new(Color.red, transparency))
			
			pDebugDrawerRotate.shapeSetEdgeColor(1, Color.transparent)
			pDebugDrawerRotate.shapeSetFillColor(1, Color.new(Color.green, transparency))
			
			pDebugDrawerRotate.shapeSetEdgeColor(2, Color.transparent)
			pDebugDrawerRotate.shapeSetFillColor(2, Color.new(Color.blue, transparency))
			
			pColliderRotateX = createCoordSystemCollider()
			pColliderRotateX.setOwner(Handle.rotateX)
			
			pColliderRotateY = createCoordSystemCollider()
			pColliderRotateY.setOwner(Handle.rotateY)
			
			pColliderRotateZ = createCoordSystemCollider()
			pColliderRotateZ.setOwner(Handle.rotateZ)
		end
		
		/** Create coordinate system collider. */
		protected func ColliderVolume createCoordSystemCollider()
			var ColliderVolume collider = ColliderVolume.new()
			collider.setCollisionFilter(CollisionFilter.new(LayerMask.newWith(0)))
			collider.setResponseType(CollisionResponse.none)
			collider.setUseLocalGravity(true)
			return collider
		end
		
		/** Update coordinate system shapes. */
		protected func void updateCoordSystemShapes()
			var ShapeList shape = ShapeList.new()
			var float scale = 0.1
			
			var Matrix matrix = Matrix.newScaling(scale, scale, scale)
			
			// move
			pDebugDrawerMove.shapeSetFacesFromModel(0, pModel, "move x", matrix)
			pDebugDrawerMove.shapeSetFacesFromModel(1, pModel, "move y", matrix)
			pDebugDrawerMove.shapeSetFacesFromModel(2, pModel, "move z", matrix)
			
			shape.addBox(Vector.new(0.45 * scale, 0, 0), Vector.new(0.4, 0.1, 0.1) * scale)
			pColliderMoveX.setShape(shape)
			shape.removeAllShapes()
			
			shape.addBox(Vector.new(0, 0.45 * scale, 0), Vector.new(0.1, 0.4, 0.1) * scale)
			pColliderMoveY.setShape(shape)
			shape.removeAllShapes()
			
			shape.addBox(Vector.new(0, 0, 0.45 * scale), Vector.new(0.1, 0.1, 0.4) * scale)
			pColliderMoveZ.setShape(shape)
			shape.removeAllShapes()
			
			// rotate
			pDebugDrawerRotate.shapeSetFacesFromModel(0, pModel, "rotate x", matrix)
			pDebugDrawerRotate.shapeSetFacesFromModel(1, pModel, "rotate y", matrix)
			pDebugDrawerRotate.shapeSetFacesFromModel(2, pModel, "rotate z", matrix)
			
			buildRingCollisionShape(shape, scale, Vector.new(0, 0, 0))
			pColliderRotateX.setShape(shape)
			shape.removeAllShapes()
			
			buildRingCollisionShape(shape, scale, Vector.new(0, 0, -90))
			pColliderRotateY.setShape(shape)
			shape.removeAllShapes()
			
			buildRingCollisionShape(shape, scale, Vector.new(0, 90, 0))
			pColliderRotateZ.setShape(shape)
			shape.removeAllShapes()
		end
		
		/** Build ring collision shape. */
		protected func void buildRingCollisionShape(ShapeList shape, float scale, Vector rotation)
			var Vector boxHalfSize = Vector.new(0.05, 0.1, 0.05) * scale
			var Vector boxPosition = Vector.new(0, 0, 0.42) * scale
			var Matrix matrix = Matrix.newRotation(rotation)
			
			pRingRotMat.forEach(block Matrix each
				shape.addBox(matrix * (each * boxPosition), boxHalfSize)
			end)
		end
		
		/** Update coordinate system geometry. */
		protected func void updateCoordSystemGeometry()
			var DMatrix matrix = getMatrix()
			var DVector position = matrix.getPosition()
			var Quaternion orientation = matrix.toQuaternion()
			
			pDebugDrawerMove.setPosition(position)
			pDebugDrawerMove.setOrientation(orientation)
			
			pDebugDrawerRotate.setPosition(position)
			pDebugDrawerRotate.setOrientation(orientation)
			
			pColliderMoveX.setGeometry(position, orientation)
			pColliderMoveY.setGeometry(position, orientation)
			pColliderMoveZ.setGeometry(position, orientation)
			
			pColliderRotateX.setGeometry(position, orientation)
			pColliderRotateY.setGeometry(position, orientation)
			pColliderRotateZ.setGeometry(position, orientation)
		end
		
		/** Update coordinate system visibility. */
		protected func void updateCoordSystemVisibility()
			var bool visible = getElement().getVisible()
			
			var bool visibleMove = visible and pVisibleMove
			pDebugDrawerMove.setVisible(visibleMove)
			pColliderMoveX.setEnabled(visibleMove)
			pColliderMoveY.setEnabled(visibleMove)
			pColliderMoveZ.setEnabled(visibleMove)
			
			var bool visibleRotate = visible and pVisibleRotate
			pDebugDrawerRotate.setVisible(visibleRotate)
			pColliderRotateX.setEnabled(visibleRotate)
			pColliderRotateY.setEnabled(visibleRotate)
			pColliderRotateZ.setEnabled(visibleRotate)
		end
	end
	
	
	
	private var ECBPreviewDataQuery pDataQuery
	private var ECBehaviorComponent pComponent
	private var ECPModel pModel
	
	
	
	/** Create behavior and add it to element class. */
	public func new(BehaviorElementClass eclass, ECBPreviewDataQuery dataQuery,\
	ECBehaviorComponent component) super(eclass)
		if dataQuery == null
			throw ENullPointer.new("dataQuery")
		end
		if component == null
			throw ENullPointer.new("component")
		end
		
		var String prefix = "previewCoordSystem."
		
		pDataQuery = dataQuery
		pComponent = component
		
		pModel = ECPModel.new(prefix + "model", "/content/models/coordSystem/coordSystem.demodel")
		eclass.addProperty(pModel)
		
		eclass.addBehavior(this)
	end
	
	/** Dispose of behavior. */
	public func void dispose()
		pDataQuery = null
		pComponent = null
		super.dispose()
	end
	
	
	
	/** Data query. */
	public func ECBPreviewDataQuery getDataQuery()
		return pDataQuery
	end
	
	/** Component behavior. */
	public func ECBehaviorComponent getComponent()
		return pComponent
	end
	
	/** Model. */
	public func ECPModel getModel()
		return pModel
	end
	
	
	
	/** Get instance in element from owner element class. */
	public func Instance instance( BehaviorElement element )
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	/** Get instance for element or null. */
	static public func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	/** Get behavior in element class or null if absent. */
	static public func ECBPreviewCoordSystem getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBPreviewCoordSystem each
			return true
		end) cast ECBPreviewCoordSystem
	end
	
	/** Create behavior instance. */
	public func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
