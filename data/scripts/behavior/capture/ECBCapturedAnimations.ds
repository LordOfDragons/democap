/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Behaviors

pin Democap.Actors
pin Democap.Characters

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * Behavior adding captured animation support to owner element.
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/democap:behavior_ecbcapturedanimations
 */
class ECBCapturedAnimations extends DefaultECBehavior implements BehaviorPrepareStub
	/** Listener for behavior instance events. */
	interface Listener
		/** Record changed. */
		func void recordChanged(Instance instance)
	end
	
	/** Default implementation of behavior instance listener. */
	class DefaultListener implements Listener
		/** Create default listener. */
		func new()
		end
		
		/** Record changed. */
		func void recordChanged(Instance instance)
		end
	end
	
	/** Create scene object stub initializer to initialize from activet character. */
	class InitActiveCharacterSOStub implements ECBSceneObject.SceneObjectStubInitializer
		func new()
		end
		
		/** Init scene object stub element. */
		func bool initStub(StubElement stub, Window window)
			var BehaviorElementClass eclass = stub.getClass() cast BehaviorElementClass
			var ECBCapturedAnimations capturedAnimations = ECBCapturedAnimations.getBehaviorIn(eclass)
			
			select capturedAnimations.captureTarget.getEnumeration(stub) cast CaptureTarget
			case CaptureTarget.character
				// find actor and character profile to use
				var GameApp app = GameApp.getGameApp()
				var ActorProfile actorProfile = app.getActiveActorProfile()
				var CharacterConfiguration configuration = app.getWorldSpawnCharacter().getCharacter()
				var ECBehaviorComponent component = ECBehaviorComponent.getBehaviorIn(eclass)
				
				if actorProfile != null and configuration != null
					stub.setPropertyValueFor(capturedAnimations.actorProfile.getName(), actorProfile.getName())
					stub.setPropertyValueFor(capturedAnimations.characterProfile.getName(), configuration.getProfile().getName())
					
					// update stub with appearance information
					var CharacterAppearance appearance = configuration.getProfile().getAppearance()
					stub.setPropertyValueFor(component.getComponent().getModel().getName(), appearance.getPathModel())
					stub.setPropertyValueFor(component.getComponent().getSkin().getName(), appearance.getPathSkin())
					stub.setPropertyValueFor(component.getComponent().getRig().getName(), appearance.getPathRig())
					
					// set initial scaling to match configuration scaling
					var float scaling = configuration.componentScaling()
					stub.setScaling(Vector.new(scaling, scaling, scaling))
					
				else
					var String apName = capturedAnimations.actorProfile.getValueOrNull(stub)
					var String cpName = capturedAnimations.characterProfile.getValueOrNull(stub)
					
					if apName == null or cpName == null
						if window != null
							WindowDialog.message(window, "Scene Object", "Activate Character Configuration first", null, null, null)
						end
						return false
					end
				end
			end
			
			return true
		end
	end
	
	/** Capture target. */
	enum CaptureTarget
		character
		object
	end
	
	/**
	 * Behavior factory.
	 * 
	 * Automatically assigns these behaviors if present before adding:
	 * - Optional: \ref ECBBehaviorGuiPanels
	 * - Optional: \ref ECBehaviorComponent
	 * - Optional: \ref ECBehaviorCollider
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBCapturedAnimations'>
	 *   <boolean name='.animationName'>Object</boolean>
	 * </behavior>
	 * \endcode
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBCapturedAnimations"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			if not id.empty()
				throw EInvalidParam.new("id is not empty string")
			end
			
			var ECBCapturedAnimations behavior = ECBCapturedAnimations.new(eclass,\
				ECBBehaviorGuiPanels.getBehaviorIn(eclass),\
				eclass.sharedFactoryHelper.defaultComponent(eclass, parameters),\
				ECBehaviorCollider.getBehaviorIn(eclass))
			
			BehaviorElementClass.sharedFactoryHelper.setPropertiesFromParameters(eclass, parameters, "capturedAnimations")
			return behavior
		end
	end
	
	
	/** Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/** Playback scene listener. */
		class PlaybackSceneChanged extends PlaybackScene.DefaultListener
			protected var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func void timeChanged(PlaybackScene playbackScene, float time)
				pInstance.updateControllers()
			end
			
			func float maxPlaytime(PlaybackScene playbackScene)
				return pInstance.getPlaytime()
			end
		end
		
		/** Animations changed. */
		class AnimationsChanged extends DefaultCharacterAnimationsListener
			protected var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func void animationAdded(CharacterAnimations animations, CharacterAnimation animation)
				pInstance.rebuildAnimator()
			end
			
			func void animationRemoved(CharacterAnimations animations, CharacterAnimation animation)
				pInstance.rebuildAnimator()
			end
			
			func void animationChanged(CharacterAnimations animations, CharacterAnimation animation)
				pInstance.rebuildAnimator()
			end
			
			func void allAnimationsRemoved(CharacterAnimations animations)
				pInstance.rebuildAnimator()
			end
		end
		
		class BehaviorGuiPanel extends ECBBehaviorGuiPanels.BehaviorGuiPanel
			func new(Instance instance) super(instance, "ECBCapturedAnimations")
			end
			
			func Gui.WMPPanelSceneObject createPanel(Gui.WMPanelProject panelProject)
				return Gui.WMPSOCapturedAnimations.new(panelProject, getId())
			end
		end
		
		
		
		protected var ECBCapturedAnimations pECBehavior
		protected var ECBehaviorComponent.Instance pComponent
		protected var ECBehaviorCollider.Instance pCollider
		protected var String pActorProfile
		protected var String pCharacterProfile
		protected var CharacterAnimations pAnimations
		protected var Array pAnimatorInstances
		protected var Component pObjectAnimationComponent
		protected var Array pPlaybackControllers
		protected var float pPlaytime
		protected var bool pHasObjectAnimation
		protected var PlaybackSceneChanged pPlaybackSceneChanged
		protected var CaptureTarget pCaptureTarget
		protected var bool pRecord
		protected var bool pRecordObject
		protected var String pAnimationName
		protected var Array pListeners
		
		
		
		/** Create behavior instance. */
		func new(ECBCapturedAnimations ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pAnimatorInstances = Array.new()
			pPlaybackControllers = Array.new()
			pPlaybackSceneChanged = PlaybackSceneChanged.new(this)
			pListeners = Array.new()
			
			pComponent = ecbehavior.getComponent().instance(element)
			pCollider = ecbehavior.getCollider().instance(element)
			
			setRequiresThink(true)
			
			pAnimations = CharacterAnimations.new(GameApp.getGameApp().getScene().getFileUsage())
			
			pObjectAnimationComponent = Component.new()
			pObjectAnimationComponent.setRig(RecordAnimation.staticCreateObjectRig())
		end
		
		/** Init behavior instance. */
		func void init(StubElement stub)
			pActorProfile = pECBehavior.actorProfile.getValue(stub)
			pCharacterProfile = pECBehavior.characterProfile.getValue(stub)
			pCaptureTarget = pECBehavior.captureTarget.getEnumeration() cast CaptureTarget
			pRecord = pECBehavior.record.getValue(stub)
			pRecordObject = pECBehavior.recordObject.getValue(stub)
			pAnimationName = pECBehavior.animationName.getValue(stub)
			
			pAnimations.add(CharacterAnimation.new(pAnimationName))
			
			if pECBehavior.behaviorGuiPanels != null
				pECBehavior.behaviorGuiPanels.instance(getElement()).addBehaviorGuiPanel(BehaviorGuiPanel.new(this))
			end
		end
		
		/** Dispose of behavior instance. */
		func void dispose()
			if pAnimations != null
				pAnimations.dispose()
				pAnimations = null
			end
			
			pPlaybackSceneChanged = null
			pComponent = null
			pCollider = null
			pListeners = null
			
			super.dispose()
		end
		
		
		
		/** Behavior. */
		func ECBCapturedAnimations getECBehavior()
			return pECBehavior
		end
		
		/** Component behavior instance. */
		func ECBehaviorComponent.Instance getComponent()
			return pComponent
		end
		
		/** Actor profile name. */
		func String getActorProfile()
			return pActorProfile
		end
		
		/** Character profile name. */
		func String getCharacterProfile()
			return pCharacterProfile
		end
		
		/** Capture target. */
		func CaptureTarget getCaptureTarget()
			return pCaptureTarget
		end
		
		/** Record. */
		func bool getRecord()
			return pRecord
		end
		
		func void setRecord(bool record)
			if record == pRecord
				return
			end
			
			pRecord = record
			getElement().getStub().setPropertyBoolFor(pECBehavior.record.getName(), record)
			
			pListeners.forEach(block Listener each
				each.recordChanged(this)
			end)
		end
		
		/** Record object. */
		func bool getRecordObject()
			return pRecordObject
		end
		
		func void setRecordObject(bool record)
			if record == pRecordObject
				return
			end
			
			pRecordObject = record
			getElement().getStub().setPropertyBoolFor(pECBehavior.recordObject.getName(), record)
			
			pListeners.forEach(block Listener each
				each.recordChanged(this)
			end)
		end
		
		/** Name for new animations. */
		func String getAnimationName()
			return pAnimationName
		end
		
		
		
		/** Animations. */
		func CharacterAnimations getAnimations()
			return pAnimations
		end
		
		/** Maximum playtime in seconds of all animations. */
		func float getPlaytime()
			return pPlaytime
		end
		
		
		
		/** Rebuild animator. */
		func void rebuildAnimator()
			pPlaybackControllers.removeAll()
			pAnimatorInstances.removeAll()
			pPlaytime = 0
			pHasObjectAnimation = false
			
			pAnimations.forEach(block CharacterAnimation each
				createCharacterAnimator(each)
			end)
			
			if pAnimatorInstances.getCount() == 0
				createResetAnimator()
			end
			
			updateControllers()
		end
		
		/** Disable active character animation playback. */
		func void disableActiveAnimationPlayback()
			var CharacterAnimation canimation = pAnimations.getActive()
			if canimation == null
				return
			end
			
			var Animation animation = canimation.getAnimation()
			var Animation animationObject = canimation.getAnimationObject()
			var Animation amrAnim
			
			pAnimatorInstances.forEach(block AnimatorInstance each
				amrAnim = each.getAnimator().getAnimation()
				if amrAnim != null and (amrAnim.equals(animation) or amrAnim.equals(animationObject))
					each.setBlendFactor(0)
				end
			end)
			
			pHasObjectAnimation = false
		end
		
		/** Update controllers. */
		func void updateControllers()
			var float time = GameApp.getGameApp().getPlaybackScene().getTime()
			pPlaybackControllers.forEach(block AnimatorController each
				each.setValue(time)
			end)
		end
		
		/** Apply animators. */
		func void applyAnimators()
			pAnimatorInstances.forEach(block AnimatorInstance each
				each.apply()
			end)
			
			if pHasObjectAnimation
				pObjectAnimationComponent.updateBones()
				
				var DVector position = DVector.new(pObjectAnimationComponent.boneGetPosition(0))
				var Quaternion orientation = pObjectAnimationComponent.boneGetRotation(0)
				
				var Component component = pComponent.getComponent()
				component.setPosition(position)
				component.setOrientation(orientation)
				
				var Collider collider = pCollider.getCollider()
				collider.setPosition(position)
				collider.setOrientation(orientation)
			end
		end
		
		
		
		/** Add listener. */
		func void addListener(Listener listener)
			if listener == null
				throw ENullPointer.new("listener")
			end
			pListeners.add(listener)
		end
		
		/** Remove listener. */
		func void removeListener(Listener listener)
			pListeners.remove(listener)
		end
		
		
		
		/** Add to game world. Ensure animation instance are prepared. */
		func void addToGameWorld()
			var GameApp app = GameApp.getGameApp()
			
			var Project project = app.getProject()
			pAnimations.forEach(block CharacterAnimation each
				if each.getAnimation() == null
					each.loadAnimation(project)
				end
			end)
			
			rebuildAnimator()
			
			app.getPlaybackScene().addListener(pPlaybackSceneChanged)
			pAnimations.addListener(AnimationsChanged.new(this))
		end
		
		/** Remove from game world. */
		func void removeFromGameWorld()
			GameApp.getGameApp().getPlaybackScene().removeListener(pPlaybackSceneChanged)
		end
		
		/** Frame update. */
		func void think(float elapsed)
			applyAnimators()
		end
		
		
		
		/** Get list of non-physics bones in rig. */
		protected func Array findNonPhysicsBones(Rig rig)
			var int i, count = rig.getBoneCount()
			var Array list = Array.new()
			
			for i = 0 to count
				if not rig.boneGetDynamic(i)
					list.add(rig.boneGetName(i))
				end
			end
			
			return list
		end
		
		/** Create reset animator instance. */
		protected func void createResetAnimator()
			var Component component = pComponent.getComponent()
			var Rig rig = component.getRig()
			
			var Array nonPhysicsBones = findNonPhysicsBones(rig)
			var bool hasNonPhysicsBones = nonPhysicsBones.getCount() > 0
			if not hasNonPhysicsBones and component.getVertexPositionSetCount() == 0
				return
			end
			
			var AnimatorInstance ainst = AnimatorInstance.new()
			ainst.setComponent(component)
			
			var Animator animator = Animator.new()
			animator.setRig(rig)
			nonPhysicsBones.forEach(block String each
				animator.addBone(each)
			end)
			
			var ARStateManipulator rule = ARStateManipulator.new()
			rule.setEnableOrientation(hasNonPhysicsBones)
			rule.setEnablePosition(hasNonPhysicsBones)
			rule.setEnableSize(hasNonPhysicsBones)
			nonPhysicsBones.forEach(block String each
				rule.addBone(each)
			end)
			animator.addRule(rule)
			
			ainst.setAnimator(animator)
			pAnimatorInstances.add(ainst)
		end
		
		/** Create and add animator instance for animation. */
		protected func void createCharacterAnimator(CharacterAnimation characterAnimation)
			var Animation animation = characterAnimation.getAnimation()
			if animation != null
				var Component component = pComponent.getComponent()
				var AnimatorInstance ainst = AnimatorInstance.new()
				ainst.setComponent(component)
				
				var Animator animator = Animator.new()
				animator.setAnimation(animation)
				animator.setRig(component.getRig())
				
				var int i, boneCount = animation.getBoneCount()
				for i = 0 to boneCount
					animator.addBone(animation.getBoneName(i))
				end
				
				var String move = animation.getMoveName(0)
				var float playtime = animation.getMovePlaytime(move)
				
				animator.setControllerCount(1)
				var AnimatorController controller = animator.getControllerAt(0)
				controller.setName("playback")
				controller.setRange(0, playtime)
				controller.setClamp(true)
				
				animator.addLink(0)
				animator.setLinkCurve(0, CurveBezier.newDefaultLinear())
				
				var ARAnimation rule = ARAnimation.new()
				rule.setMoveName(move)
				rule.targetAddLink(ARAnimationTarget.moveTime, 0)
				for i = 0 to boneCount
					rule.addBone(animation.getBoneName(i))
				end
				animator.addRule(rule)
				
				ainst.setAnimator(animator)
				pAnimatorInstances.add(ainst)
				pPlaybackControllers.add(ainst.getControllerAt(0))
				
				pPlaytime = DEMath.max(pPlaytime, playtime)
			end
			
			animation = characterAnimation.getAnimationObject()
			if animation != null
				var AnimatorInstance ainst = AnimatorInstance.new()
				ainst.setComponent(pObjectAnimationComponent)
				
				var Animator animator = Animator.new()
				animator.setAnimation(animation)
				animator.setRig(pObjectAnimationComponent.getRig())
				
				var int i, boneCount = animation.getBoneCount()
				for i = 0 to boneCount
					animator.addBone(animation.getBoneName(i))
				end
				
				var String move = animation.getMoveName(0)
				var float playtime = animation.getMovePlaytime(move)
				
				animator.setControllerCount(1)
				var AnimatorController controller = animator.getControllerAt(0)
				controller.setName("playback")
				controller.setRange(0, playtime)
				controller.setClamp(true)
				
				animator.addLink(0)
				animator.setLinkCurve(0, CurveBezier.newDefaultLinear())
				
				var ARAnimation rule = ARAnimation.new()
				rule.setMoveName(move)
				rule.targetAddLink(ARAnimationTarget.moveTime, 0)
				for i = 0 to boneCount
					rule.addBone(animation.getBoneName(i))
				end
				animator.addRule(rule)
				
				ainst.setAnimator(animator)
				pAnimatorInstances.add(ainst)
				pPlaybackControllers.add(ainst.getControllerAt(0))
				
				pPlaytime = DEMath.max(pPlaytime, playtime)
				pHasObjectAnimation = true
			end
		end
		
		
		
		/** Read from file. */
		func void readFromFile(PersistencyEnvironment env, FileReader reader)
			select reader.readByte()
			case 0
				readFromFileBase(env, reader)
				
			case 1
				var PersistencyFlags flags = PersistencyFlags.new(2, reader)
				pRecord = flags.getAt(0)
				pRecordObject = flags.getAt(1)
				
				readFromFileBase(env, reader)
				
			else
				throw EInvalidParam.new("unsupported version")
			end
			
			// update stub to properly support copy
			var StubElement stub = getElement().getStub()
			stub.setPropertyBoolFor(pECBehavior.record.getName(), pRecord)
			stub.setPropertyBoolFor(pECBehavior.recordObject.getName(), pRecordObject)
		end
		
		private func void readFromFileBase(PersistencyEnvironment env, FileReader reader)
			var int i, count
			
			pActorProfile = reader.readString8()
			pCharacterProfile = reader.readString8()
			
			pAnimations.removeAll()
			count = reader.readUShort()
			for i = 0 to count
				pAnimations.add(CharacterAnimation.new(reader))
			end
		end
		
		/** Write to file. */
		func void writeToFile(PersistencyEnvironment env, FileWriter writer)
			writer.writeByte(1) // version
			
			var PersistencyFlags flags = PersistencyFlags.new(2)
			flags.setAt(0, pRecord)
			flags.setAt(1, pRecordObject)
			flags.writeToFile(writer)
			
			writer.writeString8(pActorProfile)
			writer.writeString8(pCharacterProfile)
			
			writer.writeUShort(pAnimations.getCount())
			pAnimations.forEach(block CharacterAnimation each
				each.writeToFile(writer)
			end)
		end
	end
	
	
	
	public var ECBBehaviorGuiPanels behaviorGuiPanels
	protected var ECBehaviorComponent pComponent
	protected var ECBehaviorCollider pCollider
	
	public var ECPString actorProfile
	public var ECPString characterProfile
	public var ECPEnumeration captureTarget
	public var ECPBoolean record
	public var ECPBoolean recordObject
	public var ECPString animationName
	
	
	
	/** Create behavior and add it to element class. */
	func new(BehaviorElementClass eclass, ECBBehaviorGuiPanels behaviorGuiPanels,\
	ECBehaviorComponent component, ECBehaviorCollider collider) super(eclass)
		var String prefix = "capturedAnimations."
		
		this.behaviorGuiPanels = behaviorGuiPanels
		pComponent = component
		pCollider = collider
		
		eclass.addProperty(actorProfile = ECPString.new(prefix + "actorProfile", ""))
		eclass.addProperty(characterProfile = ECPString.new(prefix + "characterProfile", ""))
		eclass.addProperty(captureTarget = ECPEnumeration.new(prefix + "captureTarget", CaptureTarget.all(), CaptureTarget.object))
		eclass.addProperty(record = ECPBoolean.new(prefix + "record", false))
		eclass.addProperty(recordObject = ECPBoolean.new(prefix + "recordObject", false))
		eclass.addProperty(animationName = ECPString.new(prefix + "animationName", "Object"))
		
		eclass.addBehavior(this)
		eclass.addPrepareStubBehavior(this)
	end
	
	/** Dispose of behavior. */
	func void dispose()
		behaviorGuiPanels = null
		pComponent = null
		pCollider = null
		super.dispose()
	end
	
	
	
	/** Component behavior. */
	func ECBehaviorComponent getComponent()
		return pComponent
	end
	
	/** Collider behavior. */
	func ECBehaviorCollider getCollider()
		return pCollider
	end
	
	
	
	/** Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt( this.getInstanceIndex() ) cast Instance
	end
	
	
	
	/** Get instance for element or null. */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	/** Get behavior in element class or null if absent. */
	static func ECBCapturedAnimations getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBCapturedAnimations each
			return true
		end) cast ECBCapturedAnimations
	end
	
	
	
	/** Create behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
	
	
	
	/**
	 * \brief Prepare stub.
	 * 
	 * Called by BehaviorElementClass.createAndAddElement() with loading set to false and
	 * BehaviorElementClass.loadAndAddElement() with loading set to true.
	 */
	func void prepareStub(StubElement stub, GameWorld gameWorld, bool loading)
		if loading
			loadingUpdatePath(stub)
		end
	end
	
	/** Update path from captured character or object. */
	func void loadingUpdatePath(StubElement stub)
		var GameApp app = GameApp.getGameApp()
		
		var String profileName = stub.getPropertyValueFor(characterProfile.getName(), null)
		if profileName != null
			var CharacterProfile profile = app.getCharacterProfiles().getNamed(profileName)
			if profile != null
				// update stub with appearance information
				var CharacterAppearance appearance = profile.getAppearance()
				stub.setPropertyValueFor(pComponent.getComponent().getModel().getName(), appearance.getPathModel())
				stub.setPropertyValueFor(pComponent.getComponent().getSkin().getName(), appearance.getPathSkin())
				stub.setPropertyValueFor(pComponent.getComponent().getRig().getName(), appearance.getPathRig())
			end
		end
		
		// verify file is still present. if not replace it. prevents problems in certain migration cases
		var String path = stub.getPropertyValueFor(pComponent.getComponent().getModel().getName(), null)
		if path != null and not FileSystem.existsFile(path)
			stub.setPropertyValueFor(pComponent.getComponent().getModel().getName(), "/content/models/unknownObject/object.demodel")
		end
		
		path = stub.getPropertyValueFor(pComponent.getComponent().getSkin().getName(), null)
		if path != null and not FileSystem.existsFile(path)
			stub.setPropertyValueFor(pComponent.getComponent().getSkin().getName(), "/content/models/unknownObject/object.deskin")
		end
		
		path = stub.getPropertyValueFor(pComponent.getComponent().getRig().getName(), null)
		if path != null and not FileSystem.existsFile(path)
			stub.setPropertyValueFor(pComponent.getComponent().getRig().getName(), "/content/models/unknownObject/object.derig")
		end
	end
end
