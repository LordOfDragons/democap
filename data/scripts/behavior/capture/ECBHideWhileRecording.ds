/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Behaviors

pin Democap.Characters

pin Dragengine.Scenery
pin Dragengine.LoadSave


/**
 * Behavior hide element while recording.
 */
class ECBHideWhileRecording extends DefaultECBehavior
	/** Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/** Attach to record animation behavior. */
		class AttachRecordAnimation extends ECBehaviorPlayerControllable.Tracker.DefaultListener
			private var Instance pInstance
			
			public func new(Instance instance)
				pInstance = instance
			end
			
			public func void activeActorChanged(ECBehaviorPlayerControllable.Tracker tracker)
				if tracker.getActor() != null
					pInstance.setRecordAnimation(ECBRecordAnimation.getInstanceIn(tracker.getActor().getElement()))
					
				else
					pInstance.setRecordAnimation(null)
				end
			end
		end
		
		class RecordingStateChanged extends ECBRecordAnimation.DefaultListener
			private var Instance pInstance
			
			public func new(Instance instance)
				pInstance = instance
			end
			
			public func void prepareRecording(ECBRecordAnimation.Instance instance)
				pInstance.hide()
			end
			
			public func void stopRecording(ECBRecordAnimation.Instance instance)
				pInstance.show()
			end
		end
		
		
		
		private var ECBHideWhileRecording pECBehavior
		private var ECBehaviorPlayerControllable.Instance pPlayer
		private var ECBRecordAnimation.Instance pRecordAnimation
		private var AttachRecordAnimation pAttachRecordAnimation
		private var RecordingStateChanged pRecordingStateChanged
		private var Boolean pRestoreVisibility
		private var bool pEnabled
		
		
		
		/** Create behavior instance. */
		public func new(ECBHideWhileRecording ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pEnabled = true
			pRecordingStateChanged = RecordingStateChanged.new(this)
		end
		
		/** Dispose of behavior. */
		public func void dispose()
			pRecordingStateChanged = null
			super.dispose()
		end
		
		
		
		/** Behavior. */
		public func ECBHideWhileRecording getECBehavior()
			return pECBehavior
		end
		
		/** Record animation or null. */
		public func ECBRecordAnimation.Instance getRecordAnimation()
			return pRecordAnimation
		end
		
		/** Set record animation or null. */
		public func void setRecordAnimation(ECBRecordAnimation.Instance recordAnimation)
			if recordAnimation == pRecordAnimation
				return
			end
			
			if pRecordAnimation != null
				show()
				
				if pRecordAnimation.getElement() != null // not disposed
					pRecordAnimation.removeListener(pRecordingStateChanged)
				end
			end
			
			pRecordAnimation = recordAnimation
			
			if recordAnimation != null
				recordAnimation.addListener(pRecordingStateChanged)
				
				if recordAnimation.isPreparingOrRecording()
					hide()
				end
			end
		end
		
		
		
		/** Enable hiding if recording. */
		public func bool getEnabled()
			return pEnabled
		end
		
		/** Set enable hiding if recording. */
		public func void setEnabled(bool enabled)
			if enabled == pEnabled
				return
			end
			
			pEnabled = enabled
			
			if enabled
				if pRecordAnimation != null and pRecordAnimation.isPreparingOrRecording()
					hide()
				end
				
			else
				show()
			end
		end
		
		
		
		/** Hide element. */
		public func void hide()
			if pRecordAnimation == null or pRestoreVisibility != null or not pEnabled
				return
			end
			
			var BehaviorElement element = getElement()
			
			pRestoreVisibility = Boolean.new(element.getVisible())
			element.setVisible(false)
			element.setTouchable(false)
		end
		
		/** Show element. */
		public func void show()
			if pRecordAnimation == null or pRestoreVisibility == null
				return
			end
			
			var bool visible = pRestoreVisibility.value()
			pRestoreVisibility = null
			
			var BehaviorElement element = getElement()
			element.setVisible(visible)
			element.setTouchable(visible)
		end
		
		
		
		/** Added to game world. */
		public func void addToGameWorld()
			pAttachRecordAnimation = AttachRecordAnimation.new(this)
			GameApp.getGameApp().getPlayerControlledActor().addListener(pAttachRecordAnimation)
			pAttachRecordAnimation.activeActorChanged(GameApp.getGameApp().getPlayerControlledActor())
		end
		
		/** Remove from game world. */
		public func void removeFromGameWorld()
			setRecordAnimation(null)
			GameApp.getGameApp().getPlayerControlledActor().removeListener(pAttachRecordAnimation)
			pAttachRecordAnimation = null
		end
		
		
		
		/** Read from file. */
		public func void readFromFile(PersistencyEnvironment env, FileReader reader)
			var int i, count
			
			select reader.readByte() // version
			case 0
				var PersistencyFlags flags = PersistencyFlags.new(1, reader)
				pEnabled = flags.getAt(0)
				
			else
				throw EInvalidParam.new("unsupported version")
			end
		end
		
		/** Write to file. */
		public func void writeToFile(PersistencyEnvironment env, FileWriter writer)
			writer.writeByte(0) // version
			
			var PersistencyFlags flags = PersistencyFlags.new(1)
			flags.setAt(0, pEnabled)
			flags.writeToFile(writer)
		end
	end
	
	
	
	/** Create behavior and add it to element class. */
	public func new(BehaviorElementClass eclass) super(eclass)
		eclass.addBehavior(this)
	end
	
	
	
	/** Get instance in element from owner element class. */
	public func Instance instance( BehaviorElement element )
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	/** Create behavior instance. */
	public func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
