/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Behaviors

pin Democap.Actors
pin Democap.Characters

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * Behavior adding captured object support to owner element.
 */
class ECBCapturedObject extends DefaultECBehavior
	/** Listener. */
	interface Listener
		/** Animation changed. */
		func void animationChanged(Instance instance)
	end
	
	/** Default listener. */
	class DefaultListener implements Listener
		/** Create default listener. */
		public func new()
		end
		
		/** Animation changed. */
		public func void animationChanged(Instance instance)
		end
	end
	
	/** Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/** Playback scene listener. */
		class PlaybackSceneChanged extends PlaybackScene.DefaultListener
			protected var Instance pInstance
			
			public func new(Instance instance)
				pInstance = instance
			end
			
			public func void timeChanged(PlaybackScene playbackScene, float time)
				pInstance.updateControllers()
			end
			
			public func float maxPlaytime(PlaybackScene playbackScene)
				return pInstance.getPlaytime()
			end
		end
		
		
		
		protected var ECBCapturedObject pECBehavior
		protected var ECBehaviorComponent.Instance pComponent
		protected var CharacterAnimation pCharacterAnimation
		protected var AnimatorInstance pAnimator
		protected var ObjectAnimation pObjectAnimation
		protected var Component pObjectAnimationComponent
		protected var AnimatorInstance pAnimatorObject
		protected var Array pPlaybackControllers
		protected var float pPlaytime
		protected var bool pRecord
		protected var PlaybackSceneChanged pPlaybackSceneChanged
		protected var Array pListeners
		
		
		
		/** Create behavior instance. */
		public func new(ECBCapturedObject ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pPlaybackControllers = Array.new()
			pPlaybackSceneChanged = PlaybackSceneChanged.new(this)
			pListeners = Array.new()
			
			pComponent = ecbehavior.getComponent().instance(element)
			
			setRequiresThink(true)
			
			pCharacterAnimation = CharacterAnimation.new("Object")
			pAnimator = AnimatorInstance.new()
			
			pObjectAnimation = ObjectAnimation.new()
			
			pAnimatorObject = AnimatorInstance.new()
			pObjectAnimationComponent = Component.new()
			pAnimatorObject.setComponent(pObjectAnimationComponent)
		end
		
		/** Init behavior instance. */
		public func void init(StubElement stub)
			pRecord = pECBehavior.getRecord().getValue(stub)
			pAnimator.setComponent(pComponent.getComponent())
		end
		
		/** Dispose of behavior instance. */
		public func void dispose()
			pListeners.removeAll()
			
			if pObjectAnimation != null
				pObjectAnimation.dispose()
				pObjectAnimation = null
			end
			
			if pCharacterAnimation != null
				pCharacterAnimation.dispose()
				pCharacterAnimation = null
			end
			
			pPlaybackSceneChanged = null
			pComponent = null
			super.dispose()
		end
		
		
		
		/** Behavior. */
		public func ECBCapturedObject getECBehavior()
			return pECBehavior
		end
		
		/** Component behavior instance. */
		public func ECBehaviorComponent.Instance getComponent()
			return pComponent
		end
		
		
		
		/** Character animation. */
		public func CharacterAnimation getCharacterAnimation()
			return pCharacterAnimation
		end
		
		/** Object animation. */
		public func ObjectAnimation getObjectAnimation()
			return pObjectAnimation
		end
		
		/** Maximum playtime in seconds of all animations. */
		public func float getPlaytime()
			return pPlaytime
		end
		
		/** Record object. */
		public func bool getRecord()
			return pRecord
		end
		
		public func void setRecord(bool record)
			pRecord = record
		end
		
		
		
		/** Add listener. */
		public func void addListener(Listener listener)
			pListeners.add(listener)
		end
		
		/** Remove listener. */
		public func void removeListener(Listener listener)
			pListeners.remove(listener)
		end
		
		/** Notify animation changed. */
		public func void notifyAnimationChanged()
			pListeners.forEach(block Listener each
				each.animationChanged(this)
			end)
		end
		
		
		
		/** Rebuild animator. */
		public func void rebuildAnimator()
			pPlaybackControllers.removeAll()
			pPlaytime = 0
			
			pAnimator.setAnimation(null)
			pAnimator.setAnimator(null)
			
			pAnimatorObject.setAnimation(null)
			pAnimatorObject.setAnimator(null)
			
			createCharacterAnimator()
			
			if pAnimator.getAnimation() == null
				createResetAnimator()
			end
			
			createObjectAnimator()
			
			pPlaybackControllers.forEach(block AnimatorController each
				each.setRange(0, pPlaytime)
				each.setValue(0)
			end)
		end
		
		/** Update controllers. */
		public func void updateControllers()
			var float time = GameApp.getGameApp().getPlaybackScene().getTime()
			pPlaybackControllers.forEach(block AnimatorController each
				each.setValue(time)
			end)
		end
		
		/** Apply animators. */
		public func void applyAnimators()
			if pAnimator.getAnimation() != null
				pAnimator.apply()
			end
			
			if pObjectAnimation.getAnimation() != null
				pAnimatorObject.applyDirect()
				pObjectAnimationComponent.updateBones()
				
				var Component component = pComponent.getComponent()
				component.setPosition(DVector.new(pObjectAnimationComponent.boneGetPosition(0)))
				component.setOrientation(pObjectAnimationComponent.boneGetRotation(0))
			end
		end
		
		
		
		/** Add to game world. Ensure animation instance are prepared. */
		public func void addToGameWorld()
			var GameApp app = GameApp.getGameApp()
			var Project project = app.getProject()
			
			if pCharacterAnimation.getAnimation() == null
				pCharacterAnimation.loadAnimation(project)
			end
			if pObjectAnimation.getAnimation() == null
				pObjectAnimation.loadAnimation(project)
			end
			notifyAnimationChanged()
			
			rebuildAnimator()
			
			app.getPlaybackScene().addListener(pPlaybackSceneChanged)
		end
		
		/** Remove from game world. */
		public func void removeFromGameWorld()
			GameApp.getGameApp().getPlaybackScene().removeListener(pPlaybackSceneChanged)
		end
		
		/** Frame update. */
		public func void think(float elapsed)
			applyAnimators()
		end
		
		
		
		/** Create reset animator instance. */
		protected func void createResetAnimator()
			var Animator animator = Animator.new()
			animator.setRig(pComponent.getComponent().getRig())
			
			var ARStateManipulator rule = ARStateManipulator.new()
			rule.setEnableOrientation(true)
			rule.setEnablePosition(true)
			rule.setEnableSize(true)
			animator.addRule(rule)
			
			pAnimator.setAnimator(animator)
		end
		
		/** Create and add animator instance for animation. */
		protected func void createCharacterAnimator()
			var Animation animation = pCharacterAnimation.getAnimation()
			if animation == null
				return
			end
			
			var Animator animator = Animator.new()
			animator.setAnimation(animation)
			animator.setRig(pComponent.getComponent().getRig())
			
			var int i, boneCount = animation.getBoneCount()
			for i = 0 to boneCount
				animator.addBone(animation.getBoneName(i))
			end
			
			animator.setControllerCount(1)
			var AnimatorController controller = animator.getControllerAt(0)
			controller.setName("playback")
			controller.setClamp(true)
			
			animator.addLink(0)
			animator.setLinkCurve(0, CurveBezier.newDefaultLinear())
			
			var ARAnimation rule = ARAnimation.new()
			var String move = animation.getMoveName(0)
			rule.setMoveName(move)
			rule.targetAddLink(ARAnimationTarget.moveTime, 0)
			for i = 0 to boneCount
				rule.addBone(animation.getBoneName(i))
			end
			animator.addRule(rule)
			
			pAnimator.setAnimator(animator)
			pPlaybackControllers.add(pAnimator.getControllerAt(0))
			
			pPlaytime = DEMath.max(pPlaytime, animation.getMovePlaytime(move))
		end
		
		/** Create object animator instance. */
		protected func void createObjectAnimator()
			var Animation animation = pObjectAnimation.getAnimation()
			var Rig rig = pObjectAnimation.getRig()
			if animation == null or rig == null
				return
			end
			
			pAnimatorObject.setComponent(null)
			pObjectAnimationComponent.setRig(rig)
			pAnimatorObject.setComponent(pObjectAnimationComponent)
			
			var Animator animator = Animator.new()
			animator.setAnimation(animation)
			animator.setRig(rig)
			
			var int i, boneCount = animation.getBoneCount()
			for i = 0 to boneCount
				animator.addBone(animation.getBoneName(i))
			end
			
			animator.setControllerCount(1)
			var AnimatorController controller = animator.getControllerAt(0)
			controller.setName("playback")
			controller.setClamp(true)
			
			animator.addLink(0)
			animator.setLinkCurve(0, CurveBezier.newDefaultLinear())
			
			var ARAnimation rule = ARAnimation.new()
			var String move = animation.getMoveName(0)
			rule.setMoveName(move)
			rule.targetAddLink(ARAnimationTarget.moveTime, 0)
			for i = 0 to boneCount
				rule.addBone(animation.getBoneName(i))
			end
			animator.addRule(rule)
			
			pAnimatorObject.setAnimator(animator)
			pPlaybackControllers.add(pAnimatorObject.getControllerAt(0))
			
			pPlaytime = DEMath.max(pPlaytime, animation.getMovePlaytime(move))
		end
		
		
		
		/** Read from file. */
		public func void readFromFile(PersistencyEnvironment env, FileReader reader)
			select reader.readByte()
			case 0
				var PersistencyFlags flags = PersistencyFlags.new(1, reader)
				pRecord = flags.getAt(0)
				
				pCharacterAnimation.dispose()
				pCharacterAnimation = CharacterAnimation.new(reader)
				
				pObjectAnimation.dispose()
				pObjectAnimation = ObjectAnimation.new(reader)
				
			else
				throw EInvalidParam.new("unsupported version")
			end
		end
		
		/** Write to file. */
		public func void writeToFile(PersistencyEnvironment env, FileWriter writer)
			writer.writeByte(0) // version
			
			var PersistencyFlags flags = PersistencyFlags.new(1)
			flags.setAt(0, pRecord)
			flags.writeToFile(writer)
			
			pCharacterAnimation.writeToFile(writer)
			pObjectAnimation.writeToFile(writer)
		end
	end
	
	
	
	protected var ECBehaviorComponent pComponent
	protected var ECPBoolean pRecord
	
	
	
	/** Create behavior and add it to element class. */
	public func new(BehaviorElementClass eclass, ECBehaviorComponent component) super(eclass)
		var String prefix = "capturedObject."
		
		pComponent = component
		
		pRecord = ECPBoolean.new(prefix + "record", false)
		eclass.addProperty(pRecord)
		
		eclass.addBehavior(this)
	end
	
	/** Dispose of behavior. */
	public func void dispose()
		pComponent = null
		super.dispose()
	end
	
	
	
	/** Component behavior. */
	public func ECBehaviorComponent getComponent()
		return pComponent
	end
	
	/** Initial record value. */
	public func ECPBoolean getRecord()
		return pRecord
	end
	
	
	
	/** Get instance in element from owner element class. */
	public func Instance instance(BehaviorElement element)
		return element.getInstanceAt( this.getInstanceIndex() ) cast Instance
	end
	
	
	
	/** Get instance for element or null. */
	static public func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	/** Get behavior in element class or null if absent. */
	static public func ECBCapturedObject getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBCapturedObject each
			return true
		end) cast ECBCapturedObject
	end
	
	
	
	/** Create behavior instance. */
	public func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
