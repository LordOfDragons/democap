/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2022, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Behaviors

pin Democap.Characters

pin Dragengine.Scenery
pin Dragengine.Preloading
pin Dragengine.LoadSave


/**
 * Behavior hide component if condition is true. User can change conditions.
 */
class ECBHideCondition extends DefaultECBehavior
	/** Listener for behavior instance events. */
	interface Listener
		/** Hide object. */
		func bool hideObject(Instance instance)
	end
	
	/** Default implementation of behavior instance listener. */
	class DefaultListener implements Listener
		/** Create default listener. */
		public func new()
		end
		
		/** Hide object. */
		public func bool hideObject(Instance instance)
			return false
		end
	end
	
	/** Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		class RecordingStateChanged extends RecordScene.DefaultListener
			private var Instance pInstance
			
			public func new(Instance instance)
				pInstance = instance
			end
			
			public func void prepareRecording(RecordScene recordScene)
				pInstance.updateVisibility()
			end
			
			public func void stopRecording(RecordScene recordScene)
				pInstance.updateVisibility()
			end
		end
		
		class PlaybackChanged extends PlaybackScene.DefaultListener
			private var Instance pInstance
			
			public func new(Instance instance)
				pInstance = instance
			end
			
			public func void startPlayback(PlaybackScene playbackScene)
				pInstance.updateVisibility()
			end
			
			public func void stopPlayback(PlaybackScene playbackScene)
				pInstance.updateVisibility()
			end
			
			public func void pausePlayback(PlaybackScene playbackScene)
				pInstance.updateVisibility()
			end
		end
		
		class BehaviorGuiPanel extends ECBBehaviorGuiPanels.BehaviorGuiPanel
			public func new(Instance instance) super(instance, "ECBHideCondition")
			end
			
			public func Gui.WMPPanelSceneObject createPanel(Gui.WMPanelProject panelProject)
				return Gui.WMPSOHideCondition.new(panelProject, getId())
			end
		end
		
		
		
		private var ECBHideCondition pECBehavior
		private var RecordingStateChanged pRecordingStateChanged
		private var PlaybackChanged pPlaybackChanged
		private var Boolean pRestoreVisible
		private var bool pLive
		private var bool pPlayback
		private var bool pRecord
		private var Array pListeners
		
		
		
		/** Create behavior instance. */
		public func new(ECBHideCondition ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pListeners = Array.new()
		end
		
		/** Dispose of behavior.  */
		public func void dispose()
			pListeners = null
			super.dispose()
		end
		
		/** Init behavior from stubu. */
		public func void init(Preloading.StubElement stub)
			pLive = pECBehavior.getLive().getValue(stub)
			pPlayback = pECBehavior.getPlayback().getValue(stub)
			pRecord = pECBehavior.getRecord().getValue(stub)
			
			if pECBehavior.behaviorGuiPanels != null
				pECBehavior.behaviorGuiPanels.instance(getElement()).addBehaviorGuiPanel(BehaviorGuiPanel.new(this))
			end
		end
		
		
		
		/** Hide during live preview. */
		public func bool getLive()
			return pLive
		end
		
		/** Set hide during live preview. */
		public func void setLive(bool hide)
			if hide == pLive
				return
			end
			
			pLive = hide
			getElement().getStub().setPropertyBoolFor(pECBehavior.getLive().getName(), hide)
			
			updateVisibility()
		end
		
		/** Hide during playback. */
		public func bool getPlayback()
			return pPlayback
		end
		
		/** Set hide during playback. */
		public func void setPlayback(bool hide)
			if hide == pPlayback
				return
			end
			
			pPlayback = hide
			getElement().getStub().setPropertyBoolFor(pECBehavior.getPlayback().getName(), hide)
			
			updateVisibility()
		end
		
		/** Hide during recording. */
		public func bool getRecord()
			return pRecord
		end
		
		/** Set hide during recording. */
		public func void setRecord(bool hide)
			if hide == pRecord
				return
			end
			
			pRecord = hide
			getElement().getStub().setPropertyBoolFor(pECBehavior.getRecord().getName(), hide)
			
			updateVisibility()
		end
		
		
		
		/** Add listener. */
		public func void addListener(Listener listener)
			if listener == null
				throw EInvalidParam.new()
			end
			pListeners.add(listener)
		end
		
		/** Remove listener. */
		public func void removeListener(Listener listener)
			pListeners.remove(listener)
		end
		
		
		
		/** Update visibility. */
		public func void updateVisibility()
			var bool doHide
			
			if GameApp.getGameApp().getRecordScene().isStopped()
				if GameApp.getGameApp().getPlaybackScene().isStopped()
					doHide = pLive
					
				else
					doHide = pPlayback
				end
				
			else
				doHide = pRecord
			end
			
			doHide |= pListeners.find(block Listener each
				return each.hideObject(this)
			end) != null
			
			if doHide
				hide()
				
			else
				show()
			end
		end
		
		
		
		/** Hide element. */
		public func void hide()
			if pRestoreVisible != null
				return
			end
			
			var BehaviorElement element = getElement()
			pRestoreVisible = Boolean.new(element.getVisible())
			element.setVisible(false)
		end
		
		/** Show element. */
		public func void show()
			if pRestoreVisible == null
				return
			end
			
			var bool visible = pRestoreVisible.value()
			pRestoreVisible = null
			
			getElement().setVisible(visible)
		end
		
		
		
		/** Added to game world. */
		public func void addToGameWorld()
			pPlaybackChanged = PlaybackChanged.new(this)
			GameApp.getGameApp().getPlaybackScene().addListener(pPlaybackChanged)
			
			pRecordingStateChanged = RecordingStateChanged.new(this)
			GameApp.getGameApp().getRecordScene().addListener(pRecordingStateChanged)
			
			updateVisibility()
		end
		
		/** Remove from game world. */
		public func void removeFromGameWorld()
			show()
			
			if pPlaybackChanged != null
				GameApp.getGameApp().getPlaybackScene().removeListener(pPlaybackChanged)
				pPlaybackChanged = null
			end
			
			if pRecordingStateChanged != null
				GameApp.getGameApp().getRecordScene().removeListener(pRecordingStateChanged)
				pRecordingStateChanged = null
			end
		end
		
		
		
		/** Read from file. */
		public func void readFromFile(PersistencyEnvironment env, FileReader reader)
			select reader.readByte()
			case 0
			case 1
				var PersistencyFlags flags = PersistencyFlags.new(3, reader)
				pLive = flags.getAt(0)
				pPlayback = flags.getAt(1)
				pRecord = flags.getAt(2)
				
			else
				throw EInvalidParam.new("unsupported version")
			end
			
			// update stub to properly support copy
			var StubElement stub = getElement().getStub()
			stub.setPropertyBoolFor(pECBehavior.getLive().getName(), pLive)
			stub.setPropertyBoolFor(pECBehavior.getPlayback().getName(), pPlayback)
			stub.setPropertyBoolFor(pECBehavior.getRecord().getName(), pRecord)
		end
		
		/** Write to file. */
		public func void writeToFile(PersistencyEnvironment env, FileWriter writer)
			writer.writeByte(1) // version
			
			var PersistencyFlags flags = PersistencyFlags.new(3)
			flags.setAt(0, pLive)
			flags.setAt(1, pPlayback)
			flags.setAt(2, pRecord)
			flags.writeToFile(writer)
		end
	end
	
	
	
	public var ECBBehaviorGuiPanels behaviorGuiPanels
	protected var ECPBoolean pLive
	protected var ECPBoolean pPlayback
	protected var ECPBoolean pRecord
	
	
	
	/** Create behavior and add it to element class. */
	public func new(BehaviorElementClass eclass, ECBBehaviorGuiPanels behaviorGuiPanels) super(eclass)
		var String prefix = "hideCondition."
		
		this.behaviorGuiPanels = behaviorGuiPanels
		
		pLive = ECPBoolean.new(prefix + "live", false)
		eclass.addProperty(pLive)
		
		pPlayback = ECPBoolean.new(prefix + "playback", true)
		eclass.addProperty(pPlayback)
		
		pRecord = ECPBoolean.new(prefix + "record", true)
		eclass.addProperty(pRecord)
		
		eclass.addBehavior(this)
	end
	
	/** Dispose of behavior. */
	public func void dispose()
		behaviorGuiPanels = null
		super.dispose()
	end
	
	
	
	public func ECPBoolean getLive()
		return pLive
	end
	
	public func ECPBoolean getPlayback()
		return pPlayback
	end
	
	public func ECPBoolean getRecord()
		return pRecord
	end
	
	
	
	/** Get instance in element from owner element class. */
	public func Instance instance( BehaviorElement element )
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	/** Create behavior instance. */
	public func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
