/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Behaviors

pin Dragengine.Gui
pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * Behavior storing a generated animator. During init assigns the animator to actor animated.
 */
class ECBMoCapAnimator extends DefaultECBehavior
	/** Listener for behavior instance events. */
	interface Listener
		/** Count of required phases. */
		func int requiredPhaseCount(Instance instance)
		
		/** Update controllers if required. */
		func void updateControllers(Instance instance, float elapsed, int phase)
		
		/** Animation has been applied. Called after last phase */
		func void animationApplied(Instance instance)
	end
	
	/** Default implementation of behavior instance listener. */
	class DefaultListener implements Listener
		/** Create default listener. */
		func new()
		end
		
		/** Count of required phases. */
		func int requiredPhaseCount(Instance instance)
			return 1
		end
		
		/** Update controllers if required. */
		func void updateControllers(Instance instance, float elapsed, int phase)
		end
		
		/** Animation has been applied. */
		func void animationApplied(Instance instance)
		end
	end
	
	/** Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/** Animator applied. */
		class MultiPhaseAnimation extends ECBehaviorActorAnimated.DefaultListener
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func void updateControllers(ECBehaviorActorAnimated.Instance instance, float elapsed)
				pInstance.updateControllers(elapsed)
			end
			
			func void animationApplied(ECBehaviorActorAnimated.Instance instance)
				pInstance.animationApplied()
			end
		end
		
		
		protected var ECBMoCapAnimator pECBehavior
		protected var ECBehaviorActorAnimated.Instance pActorAnimated
		protected var ECBehaviorCollider.Instance pCollider
		
		var AnimatorInstance pResetPhysicsAnimator
		var int pRequiredPhaseCount
		var float pElapsedControllerTime
		var Array pListeners
		var Array pTrackerSlots

		
		/** Create behavior instance. */
		func new(ECBMoCapAnimator ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			
			pRequiredPhaseCount = 1
			pListeners = Array.new()
			pActorAnimated = ecbehavior.getActorAnimated().instance(element)
			pCollider = ecbehavior.getCollider().instance(element)
		end
		
		/** Dispose of behavior instance. */
		func void dispose()
			pListeners = null
			pCollider = null
			pActorAnimated = null
			pTrackerSlots = null
			
			super.dispose()
		end
		
		/** Init behavior instance. */
		func void init(StubElement stub)
			var Component component = pActorAnimated.getComponent().getComponent()
			var Rig rig = component.getRig()
			var Animation animation = pECBehavior.getAnimation().getAnimation()
			
			var Animator animator = pECBehavior.getAnimator()
			animator.setRig(rig)
			animator.setAnimation(animation)
			pActorAnimated.setAnimator(animator)
			pActorAnimated.addListener(MultiPhaseAnimation.new(this))
			
			animator = pECBehavior.getResetPhysicsAnimator()
			animator.setRig(rig)
			animator.setAnimation(animation)
			pResetPhysicsAnimator = AnimatorInstance.new()
			pResetPhysicsAnimator.setComponent(component)
			pResetPhysicsAnimator.setAnimator(animator)
		end
		
		
		
		/** Behavior. */
		func ECBMoCapAnimator getECBehavior()
			return pECBehavior
		end
		
		/** Actor animated behavior. */
		func ECBehaviorActorAnimated.Instance getActorAnimated()
			return pActorAnimated
		end
		
		/** Required phase count. */
		func int getRequiredPhaseCount()
			return pRequiredPhaseCount
		end
		
		/**
		 * Reset physics bones to animated state.
		 * 
		 * Applies first a separate animator with the calibration move if present.
		 * Then the animated bone states are copied to the collider bone states.
		 */
		func void resetPhysicsBones()
			pResetPhysicsAnimator.applyDirect()
			
			// if physics attachments are used init collider bone states from component.
			// this is required since collider bone states are in world space and do not
			// move if the actor moves due to teleportation
			var Collider collider = pCollider.getCollider()
			if collider.getResponseType() == CollisionResponse.dynamic\
			and collider castable ColliderComponent
				(collider cast ColliderComponent).copyStatesFromComponent()
			end
		end
		
		
		
		/** Add listener. */
		func void addListener(Listener listener)
			if listener == null
				throw EInvalidParam.new()
			end
			pListeners.add(listener)
		end
		
		/** Remove listener. */
		func void removeListener(Listener listener)
			pListeners.remove(listener)
		end
		
		/** Notify listeners controllers have changed. */
		func void notifyControllersChanged(float elapsed, int phase)
			if pActorAnimated.getAnimator() == null
				return // reset calibration
			end
			
			pListeners.forEach(block Listener each
				each.updateControllers(this, elapsed, phase)
			end)
		end
		
		
		
		/** Internal use. */
		func void updateControllers(float elapsed)
			if pActorAnimated.getAnimator() == null
				return // reset calibration
			end
			
			pElapsedControllerTime = elapsed
			
			// update tracker slot controllers
			if pTrackerSlots == null
				pTrackerSlots = ECBTrackerSlot.getAllInstancesIn(getElement())
			end
			
			pTrackerSlots.forEach(block ECBTrackerSlot.Instance each
				each.updateControllers()
			end)
			
			// find count of required phases
			pRequiredPhaseCount = pListeners.inject(1, block int count, Listener listener
				return DEMath.max(count, listener.requiredPhaseCount(this))
			end) cast int
			
			// update controllers for phase 0
			this.pListeners.forEach(block Listener each
				each.updateControllers(this, pElapsedControllerTime, 0)
			end)
		end
		
		func void animationApplied()
			if pActorAnimated.getAnimator() == null
				return // reset calibration
			end
			
			// run animator for additional phases
			var int i
			for i = 1 to pRequiredPhaseCount
				// force an update so this animator finished running
				pActorAnimated.getComponent().getComponent().updateBones()
				
				// update controllers
				this.pListeners.forEach(block Listener each
					each.updateControllers(this, pElapsedControllerTime, i)
				end)
				
				// apply animator without calling listeners
				pActorAnimated.getAnimatorInstance().apply()
			end
			
			// notify listeners animator has been fully applied
			this.pListeners.forEach(block Listener each
				each.animationApplied(this)
			end)
		end
	end
	
	
	
	protected var ECBehaviorActorAnimated pActorAnimated
	protected var ECBehaviorCollider pCollider
	protected var ECPAnimation pAnimation
	protected var Animator pAnimator
	protected var Animator pResetPhysicsAnimator
	
	
	
	/** Create behavior and add it to element class. */
	func new(BaseVRActorClass eclass) super(eclass)
		pActorAnimated = eclass.getActorAnimated()
		pCollider = eclass.getCollider()
		
		pAnimation = ECPAnimation.new("mocapAnimation.animation")
		eclass.addProperty(pAnimation)
		
		eclass.addBehavior(this)
	end
	
	/** Dispose of behavior. */
	func void dispose()
		pActorAnimated = null
		super.dispose()
	end
	
	
	
	/** Actor animated behavior. */
	func ECBehaviorActorAnimated getActorAnimated()
		return pActorAnimated
	end
	
	/** Collider behavior. */
	func ECBehaviorCollider getCollider()
		return pCollider
	end
	
	/** Animation. */
	func ECPAnimation getAnimation()
		return pAnimation
	end
	
	/** Animator. */
	func Animator getAnimator()
		return pAnimator
	end
	
	/** Set animator. */
	func void setAnimator(Animator animator)
		pAnimator = animator
	end
	
	/** Reset physics animator. */
	func Animator getResetPhysicsAnimator()
		return pAnimator
	end
	
	/** Set reset physics animator animator. */
	func void setResetPhysicsAnimator(Animator animator)
		pResetPhysicsAnimator = animator
	end
	
	
	
	/** Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(this.getInstanceIndex()) cast Instance
	end
	
	/** Get behavior in element class or null if absent. */
	static func ECBMoCapAnimator getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBMoCapAnimator each
			return true
		end) cast ECBMoCapAnimator
	end
	
	/** Get instance with slot name in element or null if absent. */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	
	
	/** Create behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
