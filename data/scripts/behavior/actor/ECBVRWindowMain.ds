/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Behaviors

pin Democap.Gui

pin Dragengine.Gui
pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.Gui.Events


/**
 * Behavior adding PanelMain to renderable desktop using a borderless window.
 */
class ECBVRWindowMain extends DefaultECBehavior
	/** Window listener disabling wide mode on close. */
	class DisableWideInVROnClose extends DefaultWindowListener
		var Instance pInstance
		
		func new(Instance instance)
			pInstance = instance
		end
		
		func void onWindowClosing(WindowEvent event)
			pInstance.releaseWide()
		end
	end
	
	/** Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/** Window with link to behavior. */
		class WindowMain extends Window implements WidgetInVR
			var ECBVRWindowMain.Instance pBehavior
			public var PanelMain panelMain
			
			func new(ECBVRWindowMain.Instance behavior, Desktop desktop) super(Point.new(), desktop.getSize())
				this.pBehavior = behavior
				
				runWhileBlockingLayout(block
					setDesignerSelector("Window.VRMain")
					setCanClose(false)
					setCanMove(false)
					setCanMaximize(false)
					setCanMinimize(false)
					setCanResize(false)
					
					panelMain = PanelMain.new(desktop, true)
					addWidget(panelMain)
				end)
				
				desktop.addWindow(this)
				
				var DMCWindowConsole windowConsole = panelMain.getWindowConsole()
				windowConsole.runWhileBlockingLayout(block
					/*
					windowConsole.setCanMove(false)
					windowConsole.setCanMaximize(false)
					windowConsole.setCanMinimize(false)
					windowConsole.setCanResize(false)
					*/
					
					var BorderSize b = windowConsole.getDecorationSize()
					windowConsole.setPosition(Point.new(b.getLeft(), b.getTop()))
					windowConsole.setSize(desktop.getSize() - b.getSize())
				end)
				windowConsole.doLayoutIfBlocked()
			end
			
			func void dispose()
				super.dispose()
				panelMain = null
				pBehavior = null
			end
			
			func DefaultECBehaviorInstance getVRBehavior()
				return pBehavior
			end
		end
		
		
		var ECBVRWindowMain pECBehavior
		var ECBehaviorControlDesktop.Instance pControlDesktop
		var WindowMain pWindow
		var int pWideCounter
		var bool pWideEnabled
		var Model pModelWide, pModelNarrow
		var Rig pRigWide, pRigNarrow
		var Point pDesktopSizeWide, pDesktopSizeNarrow
		var Vector pControlLowerLeftWide, pControlLowerRightWide, pControlUpperLeftWide
		var Vector pControlLowerLeftNarrow, pControlLowerRightNarrow, pControlUpperLeftNarrow
		
		
		/** Create instance. */
		func new(ECBVRWindowMain ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
		end
		
		/** Init behavior instance. */
		func void init(StubElement stub)
			var CodecPropertyString codec = getElement().getClass().getCodecPropertyString()
			
			pControlDesktop = pECBehavior.getControlDesktop().instance(getElement())
			pControlLowerLeftNarrow = pControlDesktop.getLowerLeft()
			pControlLowerRightNarrow = pControlDesktop.getLowerRight()
			pControlUpperLeftNarrow = pControlDesktop.getUpperLeft()
			
			var Component component = pControlDesktop.getRenderableDesktop().getDynamicSkin().getComponent().getComponent()
			pModelNarrow = component.getModel()
			pRigNarrow = component.getRig()
			
			var Desktop desktop = pControlDesktop.getRenderableDesktop().getDesktop()
			pDesktopSizeNarrow = desktop.getSize()
			
			pModelWide = pECBehavior.modelWide.getModel(stub, getElement().getClass())
			pRigWide = pECBehavior.rigWide.getRig(stub, getElement().getClass())
			pDesktopSizeWide = Point.new(pECBehavior.desktopWidthWide.getValue(stub), pDesktopSizeNarrow.getY())
			pControlLowerLeftWide = pECBehavior.controlLowerLeft.getVector(stub, codec)
			pControlLowerRightWide = pECBehavior.controlLowerRight.getVector(stub, codec)
			pControlUpperLeftWide = pECBehavior.controlUpperLeft.getVector(stub, codec)
			
			if desktop.getWindowVirtualKeyboard() == null
				desktop.setWindowVirtualKeyboard(WindowVirtualKeyboard.new())
			end
			
			pWindow = WindowMain.new(this, desktop)
		end
		
		/** Dispose of behavior instance. */
		func void dispose()
			pWindow = null
			pControlDesktop = null
			super.dispose()
		end
		
		
		/** Behavior. */
		func ECBVRWindowMain getECBehavior()
			return pECBehavior
		end
		
		/** Panel. */
		func PanelMain getPanelMain()
			return pWindow.panelMain
		end
		
		
		/** Request wide mode. Enables wide mode. Each call increments wide counter. */
		func void requestWide()
			pWideCounter++
			enableWide(true)
		end
		
		/** Releases wide mode. Disables wide mode if counter reaches 0. */
		func void releaseWide()
			if pWideCounter == 0
				throw EInvalidParam.new()
			end
			pWideCounter--
			enableWide(pWideCounter > 0)
		end
		
		
		/** Enable wide mode. */
		protected func void enableWide(bool enable)
			if enable == pWideEnabled
				return
			end
			
			pWideEnabled = enable
			
			var Component component = pControlDesktop.getRenderableDesktop().getDynamicSkin().getComponent().getComponent()
			var Desktop desktop = pControlDesktop.getRenderableDesktop().getDesktop()
			
			if enable
				if pModelWide != null
					component.setModel(pModelWide)
				end
				if pRigWide != null
					component.setRig(pRigWide)
				end
				desktop.setSize(pDesktopSizeWide)
				pControlDesktop.setLowerLeft(pControlLowerLeftWide)
				pControlDesktop.setLowerRight(pControlLowerRightWide)
				pControlDesktop.setUpperLeft(pControlUpperLeftWide)
				
			else
				component.setModel(pModelNarrow)
				component.setRig(pRigNarrow)
				desktop.setSize(pDesktopSizeNarrow)
				pControlDesktop.setLowerLeft(pControlLowerLeftNarrow)
				pControlDesktop.setLowerRight(pControlLowerRightNarrow)
				pControlDesktop.setUpperLeft(pControlUpperLeftNarrow)
			end
		end
		
		
		/** Element state changed like for example visibility. */
		func void stateChanged()
			if pWindow.panelMain != null
				pWindow.panelMain.setVisible(getElement().getVisible())
			end
		end
	end
	
	
	var ECBehaviorControlDesktop pControlDesktop
	public var ECPModel modelWide
	public var ECPRig rigWide
	public var ECPInteger desktopWidthWide
	public var ECPVector controlLowerLeft, controlLowerRight, controlUpperLeft
	
	
	/** Create behavior element class. */
	func new(BehaviorElementClass eclass, ECBehaviorControlDesktop controlDesktop) super(eclass)
		if controlDesktop == null
			throw ENullPointer.new("controlDesktop")
		end
		
		var String prefix = "vrWindowMain."
		var String basePath = "/content/models/vrmenu/"
		
		pControlDesktop = controlDesktop
		
		eclass.addProperty(modelWide = ECPModel.new(prefix + "wideModel", basePath + "vrmenu_wide.demodel"))
		eclass.addProperty(rigWide = ECPRig.new(prefix + "wideRig", basePath + "vrmenu_wide.derig"))
		eclass.addProperty(desktopWidthWide = ECPInteger.new(prefix + "wideDesktopWidth", 1024, 512))
		
		eclass.addProperty(controlLowerLeft = ECPVector.new(prefix + "wideControlLowerLeft", Vector.new(0.484, -0.484, 0)))
		eclass.addProperty(controlLowerRight = ECPVector.new(prefix + "wideControlLowerRight", Vector.new(-0.484, -0.484, 0)))
		eclass.addProperty(controlUpperLeft = ECPVector.new(prefix + "wideControlUpperLeft", Vector.new(0.484, 0.484, 0)))
		
		eclass.addBehavior(this)
	end
	
	/** Dispose of behavior. */
	func void dispose()
		pControlDesktop = null
		super.dispose()
	end
	
	
	/** Control desktop. */
	func ECBehaviorControlDesktop getControlDesktop()
		return pControlDesktop
	end
	
	
	/** VR behavior of first window up the chain implementing WidgetInVR otherwise null. */
	static func Instance getVRBehaviorIn(Window window)
		var Container c = window
		while c != null
			if c castable WidgetInVR
				var DefaultECBehaviorInstance instance = (c cast WidgetInVR).getVRBehavior()
				if instance != null
					return instance castable Instance if instance cast Instance else null
				end
			end
			c = c.getParent()
		end
		
		if window castable WindowModal
			var WindowModal wm = window cast WindowModal
			if wm.getBlockWindow() != null
				return getVRBehaviorIn(wm.getBlockWindow())
			end
		end
		
		return null
	end
	
	/**
	 * If parentWindow or a parent thereof is WindowMain enable wide mode and add listener
	 * to disable wide mode on close.
	 */
	static func void prepareWindowInVR(Window window, Window parentWindow)
		var ECBVRWindowMain.Instance behavior = getVRBehaviorIn(parentWindow)
		if behavior != null
			behavior.requestWide()
			window.addWindowListener(DisableWideInVROnClose.new(behavior))
		end
	end
	
	
	/** Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	/** Get instance in element or null if absent. */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	
	/** Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
