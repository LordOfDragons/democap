/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Behaviors

pin Democap.Gui

pin Dragengine.Gui
pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * Behavior adding PanelMain to renderable desktop using a borderless window.
 */
class ECBVRWindowMain extends DefaultECBehavior
	/** Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		var ECBVRWindowMain pECBehavior
		var PanelMain pPanelMain
		var Window pWindow
		
		
		/** Create instance. */
		func new(ECBVRWindowMain ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
		end
		
		/** Init behavior instance. */
		func void init(StubElement stub)
			var Desktop desktop = pECBehavior.getRenderableDesktop().instance(getElement()).getDesktop()
			
			if desktop.getWindowVirtualKeyboard() == null
				desktop.setWindowVirtualKeyboard(WindowVirtualKeyboard.new())
			end
			
			pPanelMain = PanelMain.new(desktop, true)
			
			pWindow = Window.new(0, 0, desktop.getContainerWidth(), desktop.getContainerHeight())
			pWindow.runWhileBlockingLayout(block
				pWindow.setDesignerSelector("Window.VRMain")
				pWindow.setCanClose(false)
				pWindow.addWidget(pPanelMain)
			end)
			desktop.addWindow(pWindow)
			
			var DMCWindowConsole windowConsole = pPanelMain.getWindowConsole()
			windowConsole.setPosition(Point.new(10, desktop.getContainerHeight() - 550))
			windowConsole.setSize(Point.new(desktop.getContainerWidth() - pWindow.getWidth() - 50, 500))
		end
		
		/** Dispose of behavior instance. */
		func void dispose()
			pWindow = null
			pPanelMain = null
			super.dispose()
		end
		
		
		/** Behavior. */
		func ECBVRWindowMain getECBehavior()
			return pECBehavior
		end
		
		/** Panel. */
		func PanelMain getPanelMain()
			return pPanelMain
		end
		
		
		/** Element state changed like for example visibility. */
		func void stateChanged()
			if pPanelMain != null
				pPanelMain.setVisible(getElement().getVisible())
			end
		end
	end
	
	
	var ECBehaviorRenderableDesktop pRenderableDesktop
	
	
	/** Create behavior element class. */
	func new(BehaviorElementClass eclass, ECBehaviorRenderableDesktop renderabledesktop) super(eclass)
		if renderabledesktop == null
			throw ENullPointer.new("renderabledesktop")
		end
		
		pRenderableDesktop = renderabledesktop
		
		eclass.addBehavior(this)
	end
	
	/** Dispose of behavior. */
	func void dispose()
		pRenderableDesktop = null
		super.dispose()
	end
	
	
	/** Renderable desktop. */
	func ECBehaviorRenderableDesktop getRenderableDesktop()
		return pRenderableDesktop
	end
	
	
	/** Get instance in element from owner element class. */
	func Instance instance( BehaviorElement element )
		return element.getInstanceAt( this.getInstanceIndex() ) cast Instance
	end
	
	/** Get instance in element or null if absent. */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	
	/** Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
