/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2022, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Behaviors

pin Democap.Gui

pin Dragengine.Gui
pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * Behavior adding support to resize VR wrist panel if user is looking at it. Calculates
 * angle between looking direction and center of VR menu. If angle is less than threshold
 * changes size to full size. Otherwise shrinks menu.
 */
class ECBResizeVRWristPanel extends DefaultECBehavior
	/** Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		var ECBResizeVRWristPanel pECBehavior
		var ECBVRWristPanel.Instance pVRWristPanel
		var DVector pCenter
		var float pThresholdAngle
		var float pScaleLarge
		var float pScaleSmall
		var SmoothFloat pScale
		
		
		/** Create instance. */
		func new(ECBResizeVRWristPanel ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pThresholdAngle = 20
			pScaleLarge = 1
			pScaleSmall = 0.25
			
			pScale = SmoothFloat.new()
			pScale.setAdjustRange(1)
			pScale.setAdjustTime(0.25)
			
			pVRWristPanel = ecbehavior.getVRWristMenu().instance(element)
			pCenter = DVector.new(ecbehavior.getCenter().getVector())
			
			// disabled. for some unknown reason this is not working. the VR camera seems to
			// not line up properly causing the forward vector to slightly aim up.
			// no workaround found so far
// 			setRequiresThink(true)
		end
		
		/** Dispose of behavior instance. */
		func void dispose()
			pVRWristPanel = null
			super.dispose()
		end
		
		
		/** Behavior. */
		func ECBResizeVRWristPanel getECBehavior()
			return pECBehavior
		end
		
		
		/** Frame update. */
		func void think(float elapsed)
			var BehaviorElement element = pVRWristPanel.getElement()
			var DMatrix matrixPanel = element.getElementMatrix().normalize()
			
			var DMatrix matrixCamera = GameApp.getGameApp().getVRCamera().getMatrix()
			var DVector center = matrixCamera.getInverse() * (matrixPanel * pCenter)
			var float scale = 0
			
			if not center.isZero()
				center = center.normalize()
				
				if DEMath.acos(center.getZ()) < pThresholdAngle
					scale = 1
				end
			end
			
			pScale.setGoal(scale)
			pScale.update(elapsed)
			
			scale = DEMath.linearStep(pScale.getValue(), 0, 1, pScaleSmall, pScaleLarge)
			element.setScaling(Vector.new(scale, scale, scale))
		end
	end
	
	
	var ECBVRWristPanel pVRWristPanel
	var ECPVector pCenter
	
	
	/** Create behavior element class. */
	func new(BehaviorElementClass eclass, ECBVRWristPanel vrWristPanel) super(eclass)
		if vrWristPanel == null
			throw ENullPointer.new("vrWristPanel")
		end
		
		var String prefix = "resizeVRWristPanel."
		
		pVRWristPanel = vrWristPanel
		
		pCenter = ECPVector.new(prefix + "center", Vector.new(0, 0.1125, 0))
		eclass.addProperty(pCenter)
		
		eclass.addBehavior(this)
	end
	
	/** Dispose of behavior. */
	func void dispose()
		pVRWristPanel = null
		super.dispose()
	end
	
	
	/** VR Wrist Menu behavior. */
	func ECBVRWristPanel getVRWristMenu()
		return pVRWristPanel
	end
	
	/** Center position relative to VR wrist menu. */
	func ECPVector getCenter()
		return pCenter
	end
	
	
	/** Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	/** Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
