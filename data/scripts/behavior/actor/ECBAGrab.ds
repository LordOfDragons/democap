/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2022, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Behaviors

pin Democap.Characters
pin Democap.Elements

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * Actor behavior using grab spots.
 */
class ECBAGrab extends DefaultECBehavior
	/** Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		class GrabConstraint
			class Constraint
				private var ColliderRig pCollider
				private var int pBone, pTargetBone
				private var DVector pLinearLimitLower
				private var DVector pLinearLimitUpper
				private var DVector pAngularLimitLower
				private var DVector pAngularLimitUpper
				private var bool pApplyLimitAngularX
				private var bool pApplyLimitAngularY
				private var bool pApplyLimitLinearX
				private var bool pApplyLimitLinearY
				private var bool pApplyLimitLinearZ
				private var DVector pAnchorOffset
				private var DMatrix pMatrix
				private var DMatrix pAngularMatrix
				private var DMatrix pAngularMatrixInv
				
				public func new(ColliderRig collider, int bone, int constraintIndex, DVector anchor)
					var Rig rig = collider.getRig()
					var ColliderConstraint constraint = rig.boneGetConstraintAt(bone, constraintIndex)
					
					pCollider = collider
					pBone = bone
					pTargetBone = constraint.getBone()
					
					if pTargetBone == -1
						return
					end
					
					var DMatrix boneInvMat = collider.boneGetInverseMatrix(bone)
					
					var DVector refCmp = DVector.new(rig.boneGetCentralMassPoint(bone))
					var DVector refPos = DVector.new(constraint.getPosition1())
					var Quaternion refQuat = constraint.getOrientation1()
					var DMatrix refMat = DMatrix.newWorld(refPos - refCmp, refQuat)
					
					var DVector tarCmp = DVector.new(rig.boneGetCentralMassPoint(pTargetBone))
					var DVector tarPos = DVector.new(constraint.getPosition2())
					var Quaternion tarQuat = constraint.getOrientation2()
					var DMatrix tarMat = DMatrix.newWorld(tarPos - tarCmp, tarQuat)
					
					var DVector lanchor = boneInvMat * anchor
					
					pAnchorOffset = refMat.getInverse() * lanchor
					
					var float angleY = -DEMath.atan2(pAnchorOffset.getX(), pAnchorOffset.getZ())
					var float angleX = DEMath.atan2(pAnchorOffset.getY(),\
						Vector2.new(pAnchorOffset.getX(), pAnchorOffset.getZ()).getLength())
					
					pAngularMatrix = DMatrix.newRotation(angleX, angleY, 0)
					pAngularMatrixInv = pAngularMatrix.getInverse()
					
					pMatrix = tarMat
					var DMatrix matrixRefInv = pMatrix.getInverse()
					
					pLinearLimitLower = DVector.new(constraint.getLinearLowerLimits())
					pLinearLimitUpper = DVector.new(constraint.getLinearUpperLimits())
					pAngularLimitLower = DVector.new(constraint.getAngularLowerLimits())
					pAngularLimitUpper = DVector.new(constraint.getAngularUpperLimits())
					
					var DVector diffAngular = pAngularLimitUpper - pAngularLimitLower
					var DVector diffLinear = pLinearLimitUpper - pLinearLimitLower
					
					pApplyLimitAngularX = diffAngular.getX() > 0.01 // limited
					pApplyLimitAngularY = diffAngular.getY() > 0.01 // limited
					
					pApplyLimitLinearX = diffLinear.getX() > -0.001 // limited or locked
					pApplyLimitLinearY = diffLinear.getY() > -0.001 // limited or locked
					pApplyLimitLinearZ = diffLinear.getZ() > -0.001 // limited or locked
					
					/*
					var DVector difference = pLinearLimitUpper - pLinearLimitLower
					var bool lockedX = difference.getX() < 0.0001
					var bool lockedY = difference.getY() < 0.0001
					var bool lockedZ = difference.getZ() < 0.0001
					
					// slightly reduce the limits to avoid subtle problems with physics calculations
					var DVector safetyMargin = DVector.new(0.001, 0.001, 0.001)
					
					pLinearLimitLower = pLinearLimitLower + safetyMargin
					pLinearLimitUpper = pLinearLimitUpper - safetyMargin
					
					// fix locked limits pushed apart by the safety margin
					var DVector locked = (pLinearLimitLower + pLinearLimitUpper) / 2
					pLinearLimitLower = locked.combine(pLinearLimitLower, lockedX, lockedY, lockedZ)
					pLinearLimitUpper = locked.combine(pLinearLimitUpper, lockedX, lockedY, lockedZ)
					*/
				end
				
				public func DVector limit(DVector point)
					var DMatrix matrix = pMatrix * pCollider.boneGetMatrix(pTargetBone)
					var DVector anchorOffset = pAnchorOffset
					
					point = matrix.getInverse() * point
					
					if pApplyLimitAngularX or pApplyLimitAngularY
						point = pAngularMatrixInv * point
						
						var float length = point.getLength()
						var float angleY = -DEMath.atan2(point.getX(), point.getZ())
						var float angleX = DEMath.atan2(point.getY(), Vector2.new(point.getX(), point.getZ()).getLength())
						
						if pApplyLimitAngularY
							angleY = DEMath.clamp(angleY, pAngularLimitLower.getY(), pAngularLimitUpper.getY())
						end
						if pApplyLimitAngularX
							angleX = DEMath.clamp(angleX, pAngularLimitLower.getX(), pAngularLimitUpper.getX())
						end
						
						var float radius = DEMath.cos(angleX) * length
						point = DVector.new(DEMath.sin(-angleY) * radius, DEMath.sin(angleX) * length, DEMath.cos(angleY) * radius)
						
						point = pAngularMatrix * point
						
						anchorOffset = pAngularMatrixInv.transformNormal(anchorOffset)
						anchorOffset = DMatrix.newRotation(angleX, angleY, 0).transformNormal(anchorOffset)
						anchorOffset = pAngularMatrix.transformNormal(anchorOffset)
					end
					
					point = point - anchorOffset
					
					if pApplyLimitLinearX or pApplyLimitLinearY or pApplyLimitLinearZ
						var DVector clamped = point.largest(pLinearLimitLower).smallest(pLinearLimitUpper)
						point = clamped.combine(point, pApplyLimitLinearX, pApplyLimitLinearY, pApplyLimitLinearZ)
					end
					
					point = matrix * (point + anchorOffset)
					
					return point
				end
				
				public func bool valid()
					return pBone != -1 and pTargetBone != -1
				end
			end
			
			public var ColliderConstraint constraint
			public var String handBoneName
			public var int handBoneIndex
			public var Collider grabbedCollider
			public var ColliderRig grabbedColliderRig
			public var int grabbedBoneIndex
			public var DVector grabbedBoneCmp
			public var DMatrix refCoordSystem
			public var DMatrix targetCoordSystem
			public var Array anchorConstraints
			
			public func new()
				handBoneName = ""
				handBoneIndex = -1
				grabbedBoneIndex = -1
				grabbedBoneCmp = DVector.new()
				refCoordSystem = DMatrix.new()
				targetCoordSystem = DMatrix.new()
				anchorConstraints = Array.new()
			end
			
			public func DVector limitAnchor(DVector anchor)
				if anchorConstraints.getCount() > 0
					anchor = anchorConstraints.inject(anchor, block DVector result, Constraint each
						return each.limit(result)
					end) cast DVector
				end
				return anchor
			end
		end
		
		private var ECBAGrab pECBehavior
		private var ECBehaviorGrabber.Instance pGrabber
		private var ECBehaviorAttachSlot.Instance pAttachSlot
		private var ECBAPhysicsToucher.Instance pPhysicsToucher
		private var ECBGrabAttach.Instance pGrabAttach
		private var GrabConstraint pPhysicsGrabConstraint
		private var bool pTriggerPulled
		private var ColliderVolume pGhostCollider
		
		
		
		/** Create behavior instance. */
		public func new(ECBAGrab ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pGrabber = ecbehavior.grabber.instance(element)
			pAttachSlot = ecbehavior.attachSlot.instance(element)
			pPhysicsToucher = ecbehavior.physicsToucher.instance(element)
			
			var ShapeList shape = ShapeList.new()
			shape.addSphere(Vector.new(), 0.01)
			
			pGhostCollider = ColliderVolume.new()
			pGhostCollider.setShape(shape)
			pGhostCollider.setCollisionFilter(CollisionFilter.new())
			pGhostCollider.setResponseType(CollisionResponse.kinematic)
			pGhostCollider.setOwner(element)
			pGhostCollider.setUseLocalGravity(true)
			
			setRequiresThink(true)
		end
		
		/** Dispose of behavior instance. */
		public func void dispose()
			pGhostCollider = null
			pPhysicsGrabConstraint = null
			pGrabber = null
			pPhysicsToucher = null
			pAttachSlot = null
			pGrabAttach = null
			super.dispose()
		end
		
		
		
		public func ECBAGrab getECBehavior()
			return pECBehavior
		end
		
		public func ECBehaviorGrabber.Instance getGrabber()
			return pGrabber
		end
		
		public func ECBehaviorAttachSlot.Instance getAttachSlot()
			return pAttachSlot
		end
		
		public func ECBGrabAttach.Instance getGrabAttach()
			return pGrabAttach
		end
		
		public func GrabConstraint getPhysicsGrabConstraint()
			return pPhysicsGrabConstraint
		end
		
		
		
		/** Start grabbing. Returns true if grab succeeded. */
		public func bool grab()
			var ECBehaviorGrabSpot.Instance grabSpot = pGrabber.closestTouchingGrabSpot()
			if grabSpot != null
				var BehaviorElement element = grabSpot.getElement()
				
				pGrabAttach = element.findInstance(block ECBGrabAttach.Instance each
					return tryGrabAttach(each)
				end) cast ECBGrabAttach.Instance
				if pGrabAttach != null
					return true
				end
			end
			
			var ECBAPhysicsToucher.TouchObject touchObject = pPhysicsToucher.closestTouchingObject()
			if touchObject != null
				if tryGrabAttach(touchObject)
					return true
				end
			end
			
			return false
		end
		
		/** Update grabbing. */
		public func void updateGrab()
		end
		
		/** Stop grabbing. */
		public func void ungrab()
			if pGrabAttach != null or pPhysicsGrabConstraint != null
				ungrabGrabAttach()
			end
		end
		
		/** Pull trigger. Returns true if processed or false otherwise. */
		public func bool triggerPull()
			if pGrabAttach != null or pPhysicsGrabConstraint != null
				return true
			end
			
			return false
		end
		
		/** Release trigger. */
		public func void triggerRelease()
			if pGrabAttach != null or pPhysicsGrabConstraint != null
			end
		end
		
		/** Menu button pressed. Returns true if processed or false otherwise. */
		public func bool menuPress()
			if pGrabAttach != null or pPhysicsGrabConstraint != null
				return true
			end
			
			return false
		end
		
		/** Menu button released. */
		public func void menuRelease()
			if pGrabAttach != null or pPhysicsGrabConstraint != null
			end
		end
		
		/** Track pad touched. Returns true if processed or false otherwise. */
		public func bool trackPadTouch()
			if pGrabAttach != null or pPhysicsGrabConstraint != null
				return true
			end
			
			return false
		end
		
		/** Track pad untouched. */
		public func void trackPadUntouch()
			if pGrabAttach != null or pPhysicsGrabConstraint != null
			end
		end
		
		
		
		/** Thinking. */
		public func void think(float elapsed)
			updateGhostPosition()
		end
		
		/** Post physics think. */
		public func void postThink(float elapsed)
		end
		
		/** Added to game world. */
		public func void addToGameWorld()
			getElement().getGameWorld().getWorld().addCollider(pGhostCollider)
		end
		
		/** Remove from game world. */
		public func void removeFromGameWorld()
			getElement().getGameWorld().getWorld().removeCollider(pGhostCollider)
		end
		
		
		
		protected func bool tryGrabAttach(ECBGrabAttach.Instance grabAttach)
			var ECBehaviorAttachable.Instance attachable = grabAttach.getAttachable()
			var ECBehaviorCollider.Instance parentCollider = grabAttach.getParentCollider()
			
			if attachable != null
				// grab using predefined position
				/*
				var ECBehaviorGrabSpot.Instance grabSpot = grabAttach.getGrabSpot()
				var Matrix matrix = (grabSpot.getElement().getElementMatrix()\
					* grabSpot.getTouchCollider().getInverseMatrix()).toMatrix()
				
				attachable.reattach(pAttachSlot, matrix.getPosition(), matrix.toQuaternion())
				*/
				
				// grab using world position
				
				// TODO: use pPhysicsToucher attach bone and position
				
				// physics simulated objects have to be physically attached
				var Collider attachingCollider = attachable.getCollider().getCollider()
				if attachingCollider.getResponseType() == CollisionResponse.dynamic
					return tryGrabAttachDynamic(grabAttach)
				end
				
				pGrabber.regrab(grabAttach.getGrabSpot())
				
				attachable.reattachWorld(pAttachSlot)
				breakPlayback(attachable.getElement())
				
			elif parentCollider != null
				var Collider attachingCollider = parentCollider.getCollider()
				
				// physics simulated objects have to be physically attached
				if attachingCollider.getResponseType() == CollisionResponse.dynamic
					return tryGrabAttachDynamic(grabAttach)
				end
				
				pGrabber.regrab(grabAttach.getGrabSpot())
				
				// get matching attach bone from character configuration if present
				var MoCapActor actor = getElement() cast MoCapActor
				var ECBCharacterConfiguration.Instance characterConfig = ECBCharacterConfiguration.getInstanceIn(actor)
				
				breakPlayback(parentCollider.getElement())
				
				if characterConfig == null
					pAttachSlot.getSlotCollider().attachStatic(attachingCollider)
					return true
				end
				
				var Collider actorCollider = actor.getCollider().getCollider()
				if not (actorCollider castable ColliderComponent)
					actorCollider.attachStatic(attachingCollider)
					return true
				end
				
				var ColliderComponent actorCCollider = actorCollider cast ColliderComponent
				var String attachBone
				
				if pGrabber.getECBehavior().getID().equals(BaseVRActorClass.idNonVRRightHand)
					attachBone = characterConfig.getCharacter().getGrabBoneRight()
					
				else
					attachBone = characterConfig.getCharacter().getGrabBoneLeft()
				end
				
				if not attachBone.empty()
					actorCCollider.attachBone(attachingCollider, attachBone)
					
				else
					actorCCollider.attachStatic(attachingCollider)
				end
			end
			
			return true
		end
		
		protected func bool tryGrabAttachDynamic(ECBGrabAttach.Instance grabAttach)
			var ECBehaviorAttachable.Instance attachable = grabAttach.getAttachable()
			var ECBehaviorCollider.Instance parentCollider = grabAttach.getParentCollider()
			var BehaviorElement attachingElement
			var Collider attachingCollider
			
			if attachable != null
				attachingCollider = attachable.getCollider().getCollider()
				attachingElement = attachable.getElement()
				
			elif parentCollider != null
				attachingCollider = parentCollider.getCollider()
				attachingElement = parentCollider.getElement()
			end
			
			var int bone = -1
			if not grabAttach.getBone().empty() and attachingCollider castable ColliderRig
				bone = (attachingCollider cast ColliderRig).getRig().indexOfBoneNamed(grabAttach.getBone())
			end
			
			var DMatrix anchorMatrix = grabAttach.getElement().getElementMatrix()
			pPhysicsGrabConstraint = createGrabConstraint(ECBAPhysicsToucher.TouchObject.new(\
				attachingElement, attachingCollider, bone), anchorMatrix)
			if pPhysicsGrabConstraint == null
				return false
			end
			
			// physics constraint is set to lockAll(). modify the dof-limits
			pPhysicsGrabConstraint.constraint.setToBallJoint()
			// TODO
			
			var DVector anchor = anchorMatrix.getPosition()
			
			var ColliderRig crig = pPhysicsGrabConstraint.grabbedColliderRig
			if crig != null
				var Rig rig = crig.getRig()
				if rig != null
					var int bone = pPhysicsGrabConstraint.grabbedBoneIndex
					var int i, count = rig.boneGetConstraintCount(bone)
					var GrabConstraint.Constraint anchorConstr
					
					for i = 0 to count
						anchorConstr = GrabConstraint.Constraint.new(crig, bone, i, anchor)
						if anchorConstr.valid()
							pPhysicsGrabConstraint.anchorConstraints.add(anchorConstr)
						end
					end
				end
			end
			
			pPhysicsGrabConstraint.grabbedCollider.setLinearVelocity(Vector.new())
			pPhysicsGrabConstraint.grabbedCollider.setAngularVelocity(Vector.new())
			pPhysicsGrabConstraint.grabbedCollider.addConstraint(pPhysicsGrabConstraint.constraint)
			breakPlayback(attachingElement)
			return true
		end
		
		protected func bool tryGrabAttach(ECBAPhysicsToucher.TouchObject touchObject)
			pPhysicsGrabConstraint = createGrabConstraint(touchObject, null)
			if pPhysicsGrabConstraint == null
				return false
			end
			
			pPhysicsGrabConstraint.grabbedCollider.setLinearVelocity(Vector.new())
			pPhysicsGrabConstraint.grabbedCollider.setAngularVelocity(Vector.new())
			pPhysicsGrabConstraint.grabbedCollider.addConstraint(pPhysicsGrabConstraint.constraint)
			breakPlayback(touchObject.element)
			return true
		end
		
		protected func GrabConstraint createGrabConstraint(ECBAPhysicsToucher.TouchObject touchObject, DMatrix anchorMatrix)
			var MoCapActor actor = getElement() cast MoCapActor
			var Component component = actor.getComponent().getComponent()
			var Collider collider = actor.getCollider().getCollider()
			var String attachBone = ""
			var String constraintBone
			var ColliderRig colliderRig
			var int constraintBoneIndex
			
			// get matching attach bone from character configuration if present
			var ECBCharacterConfiguration.Instance characterConfig = ECBCharacterConfiguration.getInstanceIn(actor)
			if characterConfig != null
				if pGrabber.getECBehavior().getID().equals(BaseVRActorClass.idNonVRRightHand)
					attachBone = characterConfig.getCharacter().getGrabBoneRight()
					
				else
					attachBone = characterConfig.getCharacter().getGrabBoneLeft()
				end
				
			else
				if pGrabber.getECBehavior().getID().equals(BaseVRActorClass.idNonVRRightHand)
					attachBone = "attachHand.r"
					
				else
					attachBone = "attachHand.l"
				end
			end
			
			if not attachBone.empty() and collider != null and collider castable ColliderRig and component != null
				colliderRig = collider cast ColliderRig
				if colliderRig.getRig() != null
					var Rig rig = colliderRig.getRig()
					if rig != null
						constraintBoneIndex = rig.indexOfBoneNamed(attachBone)
						if constraintBoneIndex != -1
							constraintBone = attachBone
						end
					end
				end
			end
			
			// if we have no bone with shapes we can not attach
			// 
			// note: later on add a fallback mode which uses a world constraint. this requires
			//       updating the constraint position properly every think()
			if constraintBone == null
				return null
			end
			
			//var Collider handCollider = pPhysicsToucher.getVRHand().getCollider()
			//var DMatrix targetMatrix = handCollider.getMatrix()
			var DMatrix targetMatrix = component.boneGetMatrix(constraintBoneIndex).toDMatrix() * component.getMatrix()
			
			if anchorMatrix == null
				anchorMatrix = targetMatrix
			end
			
			var ColliderRig touchColliderRig
			var Matrix refCoordSystem
			
			var ColliderConstraint constraint = ColliderConstraint.new()
			var Vector grabbedBoneCmp = Vector.new()
			
			if touchObject.bone != -1
				constraint.setBone(touchObject.bone)
				
				touchColliderRig = touchObject.collider cast ColliderRig
				refCoordSystem = (anchorMatrix * touchColliderRig.boneGetInverseMatrix(touchObject.bone)).toMatrix()
				
				// constraints store position relative to local bone in contrary to
				// ColliderRig which stores them relative to the bone center mass point
				grabbedBoneCmp = touchColliderRig.getRig().boneGetCentralMassPoint(touchObject.bone)
				refCoordSystem = refCoordSystem * Matrix.newTranslation(grabbedBoneCmp)
				
			else
				refCoordSystem = (anchorMatrix * touchObject.collider.getInverseMatrix()).toMatrix()
			end
			
			constraint.setPosition1(refCoordSystem.getPosition())
			constraint.setOrientation1(refCoordSystem.toQuaternion())
			
// 			constraint.setTargetCollider(collider)
// 			constraint.setTargetBone(constraintBone)
			constraint.setTargetCollider(pGhostCollider)
			
			var Matrix targetCoordSys = (anchorMatrix * targetMatrix.getInverse()).toMatrix()
// 			constraint.setPosition2(targetCoordSys.getPosition())
// 			constraint.setOrientation2(targetCoordSys.toQuaternion())
			
			constraint.lockAll()
			
			var GrabConstraint grabConstraint = GrabConstraint.new()
			grabConstraint.constraint = constraint
			grabConstraint.handBoneName = attachBone
			grabConstraint.handBoneIndex = constraintBoneIndex
			grabConstraint.grabbedCollider = touchObject.collider
			grabConstraint.grabbedColliderRig = touchColliderRig
			grabConstraint.grabbedBoneIndex = touchObject.bone
			grabConstraint.grabbedBoneCmp = DVector.new(grabbedBoneCmp)
			grabConstraint.refCoordSystem = refCoordSystem.toDMatrix()
			grabConstraint.targetCoordSystem = targetCoordSys.toDMatrix()
			return grabConstraint
		end
		
		protected func void ungrabGrabAttach()
			var bool hasPhysicsConstraint
			
			if pPhysicsGrabConstraint != null
				if pPhysicsGrabConstraint.grabbedCollider.hasConstraint(pPhysicsGrabConstraint.constraint)
					pPhysicsGrabConstraint.grabbedCollider.removeConstraint(pPhysicsGrabConstraint.constraint)
				end
				
				pPhysicsGrabConstraint = null
				hasPhysicsConstraint = true
			end
			
			if pGrabAttach != null
				pGrabAttach.getGrabSpot().release()
				
				if hasPhysicsConstraint
					pGrabAttach = null
					return
				end
				
				var Collider slotCollider = pAttachSlot.getSlotCollider()
				var Collider attachedCollider
				
				var ECBehaviorCollider.Instance parentCollider = pGrabAttach.getParentCollider()
				var ECBehaviorAttachable.Instance attachable = pGrabAttach.getAttachable()
				
				if attachable != null
					attachedCollider = attachable.getCollider().getCollider()
					attachable.detach()
					
				elif parentCollider != null
					attachedCollider = parentCollider.getCollider()
					
					var MoCapActor actor = getElement() cast MoCapActor
					var ECBCharacterConfiguration.Instance characterConfig = ECBCharacterConfiguration.getInstanceIn(actor)
					
					if characterConfig != null
						actor.getCollider().getCollider().detach(attachedCollider)
						
					else
						slotCollider.detach(attachedCollider)
					end
				end
				
				attachedCollider.setLinearVelocity(slotCollider.getLinearVelocity())
				attachedCollider.setAngularVelocity(slotCollider.getAngularVelocity())
				pGrabAttach = null
			end
		end
		
		/** Break playback for element if recording. */
		protected func void breakPlayback(BehaviorElement element)
			if not GameApp.getGameApp().getRecordScene().isRecording()
				return
			end
			
			var ECBCapturedAnimations.Instance capturedAnimations = ECBCapturedAnimations.getInstanceIn(element)
			if capturedAnimations != null
				capturedAnimations.disableActiveAnimationPlayback()
			end
		end
		
		/** Update ghost position. */
		protected func void updateGhostPosition()
			if pPhysicsGrabConstraint == null
				return
			end
			
			var int bone = pPhysicsGrabConstraint.handBoneIndex
			if bone == -1
				return
			end
			
			// calculate ghost position reflecting actor hand
			var MoCapActor actor = getElement() cast MoCapActor
			var Component component = actor.getComponent().getComponent()
			var DMatrix targetMatrix = pPhysicsGrabConstraint.targetCoordSystem\
				* component.boneGetMatrix(bone).toDMatrix() * component.getMatrix()
			
			var DVector position = targetMatrix.getPosition()
			
			// limit ghost position to avoid violating rig constraints if possible
			position = pPhysicsGrabConstraint.limitAnchor(position)
			
			// update ghost position
			pGhostCollider.setPosition(position)
		end
		
		/** Limit grab position to grabbed constraint. */
		protected func void limitGrabPosition()
			/*
			var Component component = (getElement() cast MoCapActor).getComponent().getComponent()
			var DMatrix anchorMatrix = component.boneGetMatrix(\
				pPhysicsGrabConstraint.handBoneIndex).toDMatrix() * component.getMatrix()
			
			var DMatrix targetMatrix = pPhysicsGrabConstraint.grabbedCollider.getMatrix()
			var int grabbedBone = pPhysicsGrabConstraint.grabbedBoneIndex
			var Vector linearVelocity
			
			if grabbedBone != -1
				targetMatrix = pPhysicsGrabConstraint.grabbedColliderRig.boneGetMatrix(grabbedBone)
				linearVelocity = pPhysicsGrabConstraint.grabbedColliderRig.boneGetLinearVelocity(grabbedBone)
				
			else
				linearVelocity = pPhysicsGrabConstraint.grabbedCollider.getLinearVelocity()
			end
			targetMatrix = pPhysicsGrabConstraint.refCoordSystem * targetMatrix
			
			var DVector anchorPosition = anchorMatrix.getPosition()
			var DVector targetPosition = targetMatrix.getPosition()
			
			var Vector displacement = (anchorPosition - targetPosition).toVector()
			
			var Vector pullVelocity = (displacement / elapsed) - linearVelocity
			var Vector impulse = pullVelocity * pPhysicsGrabConstraint.grabbedCollider.getMass()
			
			if grabbedBone != -1
				pPhysicsGrabConstraint.grabbedColliderRig.boneApplyImpuls(grabbedBone, impulse)
				
			else
				pPhysicsGrabConstraint.grabbedCollider.applyImpuls(impulse)
			end
			*/
		end
	end
	
	
	
	public var ECBehaviorGrabber grabber
	public var ECBehaviorAttachSlot attachSlot
	public var ECBAPhysicsToucher physicsToucher
	
	
	
	/** Create behavior and add it to element class. */
	public func new(BehaviorElementClass eclass, ECBehaviorGrabber grabber,\
	ECBehaviorAttachSlot attachSlot, ECBAPhysicsToucher physicsToucher, String id) super(eclass, id)
		this.grabber = grabber
		this.attachSlot = attachSlot
		this.physicsToucher = physicsToucher
		eclass.addBehavior(this)
	end
	
	public func void dispose()
		grabber = null
		attachSlot = null
		physicsToucher = null
		super.dispose()
	end
	
	
	
	/** Get instance in element from owner element class. */
	public func Instance instance( BehaviorElement element )
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	/** Get instance in element or null if absent. */
	static public func Instance getInstanceIn(BehaviorElement element, String id)
		return element.findInstance(block Instance each
			return each.getECBehavior().getID().equals(id)
		end) cast Instance
	end
	
	/** Create behavior instance. */
	public func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
