/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2022, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Behaviors

pin Democap.Characters
pin Democap.Elements

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * Actor behavior using grab spots.
 */
class ECBAGrab extends DefaultECBehavior
	/** Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		private var ECBAGrab pECBehavior
		private var ECBehaviorGrabber.Instance pGrabber
		private var ECBehaviorAttachSlot.Instance pAttachSlot
		private var ECBAPhysicsToucher.Instance pPhysicsToucher
		private var ECBGrabAttach.Instance pGrabAttach
		private var ECBCharacterConfiguration.Instance pCharacter
		private var GrabConstraint pPhysicsGrabConstraint
		private var bool pIsRightHand
		private var bool pTriggerPulled
		private var ColliderVolume pGhostCollider
		private var Component pComponent
		private var ColliderComponent pCollider
		private var String pGrabBone
		private var int pGrabBoneIndex
		private var int pGrabIKBoneIndex
		private var AnimatorInstance pAnimatorGrabIK
		private var AnimatorController pControllerGrabIKGoalPosition
		private var AnimatorController pControllerGrabIKGoalRotation
		private var AnimatorController pControllerGrabIKLocalPosition
		private var AnimatorController pControllerGrabIKLocalRotation
		private var AnimatorController pControllerGrabIKApplyRotation
		private var SmoothFloat pSmoothGrabIKBlend
		
		
		
		/** Create behavior instance. */
		public func new(ECBAGrab ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pGrabber = ecbehavior.grabber.instance(element)
			pAttachSlot = ecbehavior.attachSlot.instance(element)
			pPhysicsToucher = ecbehavior.physicsToucher.instance(element)
			
			pIsRightHand = pGrabber.getECBehavior().getID().equals(BaseVRActorClass.idNonVRRightHand)
			pGrabBone = ""
			pGrabBoneIndex = -1
			pGrabIKBoneIndex = -1
			
			var ShapeList shape = ShapeList.new()
			shape.addSphere(Vector.new(), 0.01)
			
			pGhostCollider = ColliderVolume.new()
			pGhostCollider.setShape(shape)
			pGhostCollider.setCollisionFilter(CollisionFilter.new())
			pGhostCollider.setResponseType(CollisionResponse.kinematic)
			pGhostCollider.setOwner(element)
			pGhostCollider.setUseLocalGravity(true)
			
			pSmoothGrabIKBlend = SmoothFloat.new()
			pSmoothGrabIKBlend.setAdjustRange(1)
			pSmoothGrabIKBlend.setAdjustTime(0.4) // 0.5
		end
		
		/** Dispose of behavior instance. */
		public func void dispose()
			pGhostCollider = null
			pPhysicsGrabConstraint = null
			pGrabber = null
			pPhysicsToucher = null
			pAttachSlot = null
			pGrabAttach = null
			pComponent = null
			pCollider = null
			pCharacter = null
			super.dispose()
		end
		
		/** Init behavior. */
		public func void init(StubElement stub)
			var BehaviorElement element = getElement()
			
			pComponent = pECBehavior.component.instance(element).getComponent()
			if pComponent != null and pComponent.getRig() != null
				var Collider collider = pECBehavior.collider.instance(element).getCollider()
				if collider != null and collider castable ColliderComponent
					pCollider = collider cast ColliderComponent
				end
			end
			
			pCharacter = ECBCharacterConfiguration.getInstanceIn(getElement())
			
			findGrabBone()
			createAnimatorGrabIK()
		end
		
		/** Find grab bone. .*/
		protected func void findGrabBone()
			if pComponent == null or pCollider == null
				return
			end
			
			if pCharacter != null
				var CharacterConfiguration cc = pCharacter.getCharacter()
				pGrabBone = pIsRightHand if cc.getGrabBoneRight() else cc.getGrabBoneLeft()
				
			else
				pGrabBone = pIsRightHand if "attachHand.r" else "attachHand.l"
			end
			
			pGrabBoneIndex = pCollider.getRig().indexOfBoneNamed(pGrabBone)
		end
		
		/** Create grab ik animator instance. */
		protected func void createAnimatorGrabIK()
			if pCharacter == null or pComponent == null or pCollider == null
				return
			end
			
			var CharacterConfiguration cc = pCharacter.getCharacter()
			var String tipBone = pIsRightHand if cc.getGrabTipBoneRight() else cc.getGrabTipBoneLeft()
			var String baseBone = pIsRightHand if cc.getGrabBaseBoneRight() else cc.getGrabBaseBoneLeft()
			var Rig rig = pComponent.getRig()
			var int indexTipBone = rig.indexOfBoneNamed(tipBone)
			var int indexBaseBone = rig.indexOfBoneNamed(baseBone)
			
			if indexTipBone == -1 or indexBaseBone == -1
				return
			end
			
			var Array bones = Array.new()
			var int indexBone = indexTipBone
			while indexBone != -1
				bones.add(rig.boneGetName(indexBone))
				if indexBone == indexBaseBone
					break
				end
				indexBone = rig.boneGetParent(indexBone)
			end
			
			if indexBone != indexBaseBone or bones.getCount() < 2
				return // invalid chain
			end
			
			pGrabIKBoneIndex = indexTipBone
			
			var Animator animator = Animator.new()
			animator.setRig(rig)
			bones.forEach(block String each
				animator.addBone(each)
			end)
			
			animator.setControllerCount(5)
			animator.getControllerAt(0).setName("goal.position")
			animator.getControllerAt(1).setName("goal.rotation")
			animator.getControllerAt(2).setName("local.position")
			animator.getControllerAt(3).setName("local.rotation")
			
			animator.getControllerAt(4).setName("applyrotation")
			animator.getControllerAt(4).setRange(0, 1)
			animator.getControllerAt(4).setClamp(true)
			
			animator.addLink(0)
			animator.addLink(1)
			animator.addLink(2)
			animator.addLink(3)
			
			animator.addLink(4)
			animator.setLinkCurve(4, CurveBezier.newDefaultLinear())
			
			var ARStateSnapshot ruleCurState = ARStateSnapshot.new()
			ruleCurState.setUseLastState(true)
			animator.addRule(ruleCurState)
			
			var ARInverseKinematic ruleIK = ARInverseKinematic.new()
			ruleIK.setAdjustPosition(true)
			ruleIK.setAdjustOrientation(false)
			ruleIK.addBone(tipBone)
			ruleIK.addBone(baseBone)
			ruleIK.targetAddLink(ARInverseKinematicTarget.goalPosition, 0)
			ruleIK.targetAddLink(ARInverseKinematicTarget.goalOrientation, 1)
			ruleIK.targetAddLink(ARInverseKinematicTarget.localPosition, 2)
			ruleIK.targetAddLink(ARInverseKinematicTarget.localOrientation, 3)
			ruleIK.targetAddLink(ARInverseKinematicTarget.blendFactor, 4)
			ruleIK.setInvertBlendFactor(true)
			animator.addRule(ruleIK)
			
			ruleIK = ARInverseKinematic.new()
			ruleIK.setAdjustPosition(true)
			ruleIK.setAdjustOrientation(true)
			ruleIK.addBone(tipBone)
			ruleIK.addBone(baseBone)
			ruleIK.targetAddLink(ARInverseKinematicTarget.goalPosition, 0)
			ruleIK.targetAddLink(ARInverseKinematicTarget.goalOrientation, 1)
			ruleIK.targetAddLink(ARInverseKinematicTarget.localPosition, 2)
			ruleIK.targetAddLink(ARInverseKinematicTarget.localOrientation, 3)
			ruleIK.targetAddLink(ARInverseKinematicTarget.blendFactor, 4)
			animator.addRule(ruleIK)
			
			pAnimatorGrabIK = AnimatorInstance.new()
			pAnimatorGrabIK.setAnimator(animator)
			pAnimatorGrabIK.setComponent(pComponent)
			
			pControllerGrabIKGoalPosition = pAnimatorGrabIK.getControllerAt(0)
			pControllerGrabIKGoalRotation = pAnimatorGrabIK.getControllerAt(1)
			pControllerGrabIKLocalPosition = pAnimatorGrabIK.getControllerAt(2)
			pControllerGrabIKLocalRotation = pAnimatorGrabIK.getControllerAt(3)
			pControllerGrabIKApplyRotation = pAnimatorGrabIK.getControllerAt(4)
		end
		
		
		
		public func ECBAGrab getECBehavior()
			return pECBehavior
		end
		
		public func ECBehaviorGrabber.Instance getGrabber()
			return pGrabber
		end
		
		public func ECBehaviorAttachSlot.Instance getAttachSlot()
			return pAttachSlot
		end
		
		public func ECBGrabAttach.Instance getGrabAttach()
			return pGrabAttach
		end
		
		public func GrabConstraint getPhysicsGrabConstraint()
			return pPhysicsGrabConstraint
		end
		
		
		
		/** Start grabbing. Returns true if grab succeeded. */
		public func bool grab()
			if pCollider == null
				return false
			end
			
			var ECBehaviorGrabSpot.Instance grabSpot = pGrabber.closestTouchingGrabSpot()
			if grabSpot != null
				pGrabAttach = grabSpot.getElement().findInstance(block ECBGrabAttach.Instance each
					return tryGrabAttach(each)
				end) cast ECBGrabAttach.Instance
				if pGrabAttach != null
					return true
				end
			end
			
			var ECBAPhysicsToucher.TouchObject touchObject = pPhysicsToucher.closestTouchingObject()
			if touchObject != null
				if tryGrabAttach(touchObject)
					return true
				end
			end
			
			return false
		end
		
		/** Stop grabbing. */
		public func void ungrab()
			if pGrabAttach != null or pPhysicsGrabConstraint != null
				ungrabGrabAttach()
			end
		end
		
		/** Pull trigger. Returns true if processed or false otherwise. */
		public func bool triggerPull()
			if pGrabAttach != null or pPhysicsGrabConstraint != null
				return true
			end
			
			return false
		end
		
		/** Release trigger. */
		public func void triggerRelease()
			if pGrabAttach != null or pPhysicsGrabConstraint != null
			end
		end
		
		/** Menu button pressed. Returns true if processed or false otherwise. */
		public func bool menuPress()
			if pGrabAttach != null or pPhysicsGrabConstraint != null
				return true
			end
			
			return false
		end
		
		/** Menu button released. */
		public func void menuRelease()
			if pGrabAttach != null or pPhysicsGrabConstraint != null
			end
		end
		
		/** Track pad touched. Returns true if processed or false otherwise. */
		public func bool trackPadTouch()
			if pGrabAttach != null or pPhysicsGrabConstraint != null
				return true
			end
			
			return false
		end
		
		/** Track pad untouched. */
		public func void trackPadUntouch()
			if pGrabAttach != null or pPhysicsGrabConstraint != null
			end
		end
		
		
		
		/** Update grabbing. */
		public func void updateGrab(float elapsed)
			pSmoothGrabIKBlend.update(elapsed)
			updateGhostPosition()
		end
		
		/** Update grabbing post think. */
		public func void updateGrabPostThink()
			applyGrabIK()
		end
		
		
		
		/** Added to game world. */
		public func void addToGameWorld()
			getElement().getGameWorld().getWorld().addCollider(pGhostCollider)
		end
		
		/** Remove from game world. */
		public func void removeFromGameWorld()
			getElement().getGameWorld().getWorld().removeCollider(pGhostCollider)
		end
		
		
		
		protected func bool tryGrabAttach(ECBGrabAttach.Instance grabAttach)
			var ECBehaviorAttachable.Instance attachable = grabAttach.getAttachable()
			var ECBehaviorCollider.Instance parentCollider = grabAttach.getParentCollider()
			
			if attachable != null
				// grab using predefined position
				/*
				var ECBehaviorGrabSpot.Instance grabSpot = grabAttach.getGrabSpot()
				var Matrix matrix = (grabSpot.getElement().getElementMatrix()\
					* grabSpot.getTouchCollider().getInverseMatrix()).toMatrix()
				
				attachable.reattach(pAttachSlot, matrix.getPosition(), matrix.toQuaternion())
				*/
				
				// grab using world position
				
				// TODO: use pPhysicsToucher attach bone and position
				
				// physics simulated objects have to be physically attached
				var Collider attachingCollider = attachable.getCollider().getCollider()
				if attachingCollider.getResponseType() == CollisionResponse.dynamic
					if tryGrabAttachDynamic(grabAttach)
						pGrabber.regrab(grabAttach.getGrabSpot())
						breakPlayback(attachable.getElement())
						return true
					end
					return false
				end
				
				// attach instead of collider constraint. has to check actorCanGrab
				// to avoid accidently moving objects
				if not ECBColliderPhysics.actorCanGrab(grabAttach.getElement())
					return false
				end
				
				pGrabber.regrab(grabAttach.getGrabSpot())
				
				attachable.reattachWorld(pAttachSlot)
				breakPlayback(attachable.getElement())
				
			elif parentCollider != null
				var Collider attachingCollider = parentCollider.getCollider()
				
				// physics simulated objects have to be physically attached
				if attachingCollider.getResponseType() == CollisionResponse.dynamic
					if tryGrabAttachDynamic(grabAttach)
						pGrabber.regrab(grabAttach.getGrabSpot())
						breakPlayback(parentCollider.getElement())
						return true
					end
					return false
				end
				
				// attach instead of collider constraint. has to check actorCanGrab
				// to avoid accidently moving objects
				if not ECBColliderPhysics.actorCanGrab(grabAttach.getElement())
					return false
				end
				
				pGrabber.regrab(grabAttach.getGrabSpot())
				
				// get matching attach bone from character configuration if present
				breakPlayback(parentCollider.getElement())
				
				if pCharacter == null
					pAttachSlot.getSlotCollider().attachStatic(attachingCollider)
					return true
				end
				
				if not pGrabBone.empty()
					pCollider.attachBone(attachingCollider, pGrabBone)
					
				else
					pCollider.attachStatic(attachingCollider)
				end
			end
			
			return true
		end
		
		protected func bool tryGrabAttachDynamic(ECBGrabAttach.Instance grabAttach)
			var ECBehaviorAttachable.Instance attachable = grabAttach.getAttachable()
			var ECBehaviorCollider.Instance parentCollider = grabAttach.getParentCollider()
			var BehaviorElement attachingElement
			var Collider attachingCollider
			
			if attachable != null
				attachingCollider = attachable.getCollider().getCollider()
				attachingElement = attachable.getElement()
				
			elif parentCollider != null
				attachingCollider = parentCollider.getCollider()
				attachingElement = parentCollider.getElement()
			end
			
			var int bone = -1
			if not grabAttach.getBone().empty() and attachingCollider castable ColliderRig
				bone = (attachingCollider cast ColliderRig).getRig().indexOfBoneNamed(grabAttach.getBone())
			end
			
			var DMatrix anchorMatrix = grabAttach.getElement().getElementMatrix()
			pPhysicsGrabConstraint = createGrabConstraint(ECBAPhysicsToucher.TouchObject.new(\
				attachingElement, attachingCollider, bone), anchorMatrix)
			if pPhysicsGrabConstraint == null
				return false
			end
			
			// physics constraint is set to lockAll(). modify the dof-limits
			pPhysicsGrabConstraint.constraint.setToBallJoint()
			
			pPhysicsGrabConstraint.immobile = grabAttach.getImmobile()
			pPhysicsGrabConstraint.lockGrabRotation = grabAttach.getIKLockRotation()
			
			var DVector anchor = anchorMatrix.getPosition()
			
			var ColliderRig crig = pPhysicsGrabConstraint.grabbedColliderRig
			var int grabbedBone = pPhysicsGrabConstraint.grabbedBoneIndex
			if crig != null
				var Rig rig = crig.getRig()
				if rig != null
					var int i, count = rig.boneGetConstraintCount(bone)
					var GrabConstraint.Constraint anchorConstr
					
					for i = 0 to count
						anchorConstr = GrabConstraint.Constraint.new(crig, grabbedBone, i, anchor)
						if anchorConstr.valid()
							pPhysicsGrabConstraint.anchorConstraints.add(anchorConstr)
						end
					end
				end
			end
			
			if not pPhysicsGrabConstraint.immobile
				if grabbedBone != -1
					pPhysicsGrabConstraint.grabbedColliderRig.boneSetLinearVelocity(grabbedBone, Vector.new())
					pPhysicsGrabConstraint.grabbedColliderRig.boneSetAngularVelocity(grabbedBone, Vector.new())
					
				else
					pPhysicsGrabConstraint.grabbedCollider.setLinearVelocity(Vector.new())
					pPhysicsGrabConstraint.grabbedCollider.setAngularVelocity(Vector.new())
				end
				
				pPhysicsGrabConstraint.grabbedCollider.addConstraint(pPhysicsGrabConstraint.constraint)
				breakPlayback(attachingElement)
			end
			
			initGrabIK()
			return true
		end
		
		protected func bool tryGrabAttach(ECBAPhysicsToucher.TouchObject touchObject)
			pPhysicsGrabConstraint = createGrabConstraint(touchObject, null)
			if pPhysicsGrabConstraint == null
				return false
			end
			
			var int grabbedBone = pPhysicsGrabConstraint.grabbedBoneIndex
			if grabbedBone != -1
				pPhysicsGrabConstraint.grabbedColliderRig.boneSetLinearVelocity(grabbedBone, Vector.new())
				pPhysicsGrabConstraint.grabbedColliderRig.boneSetAngularVelocity(grabbedBone, Vector.new())
				
			else
				pPhysicsGrabConstraint.grabbedCollider.setLinearVelocity(Vector.new())
				pPhysicsGrabConstraint.grabbedCollider.setAngularVelocity(Vector.new())
			end
			
			pPhysicsGrabConstraint.grabbedCollider.addConstraint(pPhysicsGrabConstraint.constraint)
			breakPlayback(touchObject.element)
			initGrabIK()
			return true
		end
		
		protected func GrabConstraint createGrabConstraint(ECBAPhysicsToucher.TouchObject touchObject, DMatrix anchorMatrix)
			// if we have no bone with shapes we can not attach
			// 
			// note: later on add a fallback mode which uses a world constraint. this requires
			//       updating the constraint position properly every think()
			if pGrabBoneIndex == -1
				return null
			end
			
			//var Collider handCollider = pPhysicsToucher.getVRHand().getCollider()
			//var DMatrix targetMatrix = handCollider.getMatrix()
			var DMatrix targetMatrix = pComponent.boneGetMatrix(pGrabBoneIndex).toDMatrix() * pComponent.getMatrix()
			
			if anchorMatrix == null
				anchorMatrix = targetMatrix
			end
			
			pGhostCollider.setPosition(anchorMatrix.getPosition()) // avoid wrong initial position
			
			var ColliderRig touchColliderRig
			var Matrix refCoordSystem
			
			var ColliderConstraint constraint = ColliderConstraint.new()
			var Vector grabbedBoneCmp = Vector.new()
			
			if touchObject.bone != -1
				constraint.setBone(touchObject.bone)
				
				touchColliderRig = touchObject.collider cast ColliderRig
				refCoordSystem = (anchorMatrix * touchColliderRig.boneGetInverseMatrix(touchObject.bone)).toMatrix()
				
				// constraints store position relative to local bone in contrary to
				// ColliderRig which stores them relative to the bone center mass point
				grabbedBoneCmp = touchColliderRig.getRig().boneGetCentralMassPoint(touchObject.bone)
				refCoordSystem = refCoordSystem * Matrix.newTranslation(grabbedBoneCmp)
				
			else
				refCoordSystem = (anchorMatrix * touchObject.collider.getInverseMatrix()).toMatrix()
			end
			
			constraint.setPosition1(refCoordSystem.getPosition())
			constraint.setOrientation1(refCoordSystem.toQuaternion())
			
			constraint.setTargetCollider(pGhostCollider)
			
			constraint.lockAll()
			
			var GrabConstraint grabConstraint = GrabConstraint.new()
			grabConstraint.constraint = constraint
			grabConstraint.handBoneName = pGrabBone
			grabConstraint.handBoneIndex = pGrabBoneIndex
			grabConstraint.grabbedCollider = touchObject.collider
			grabConstraint.grabbedColliderRig = touchColliderRig
			grabConstraint.grabbedBoneIndex = touchObject.bone
			grabConstraint.grabbedBoneCmp = DVector.new(grabbedBoneCmp)
			grabConstraint.refCoordSystem = refCoordSystem.toDMatrix()
			grabConstraint.targetCoordSystem = anchorMatrix * targetMatrix.getInverse()
			return grabConstraint
		end
		
		protected func void initGrabIK()
			if pPhysicsGrabConstraint == null or pGrabIKBoneIndex == -1 or pPhysicsGrabConstraint.handBoneIndex == -1
				return
			end
			
			var Matrix matrix = pPhysicsGrabConstraint.targetCoordSystem.toMatrix()\
				* pComponent.boneGetMatrix(pPhysicsGrabConstraint.handBoneIndex)\
				* pComponent.boneGetInverseMatrix(pGrabIKBoneIndex)
			
			pControllerGrabIKLocalPosition.setVector(matrix.getPosition())
			pControllerGrabIKLocalRotation.setRotation(-matrix.normalize().getEulerAngles())
			
			pControllerGrabIKApplyRotation.setValue(pPhysicsGrabConstraint.lockGrabRotation if 1 else 0)
			
			pSmoothGrabIKBlend.setGoal(1)
			pSmoothGrabIKBlend.setValue(1)
		end
		
		protected func void ungrabGrabAttach()
			var bool hasPhysicsConstraint
			
			if pPhysicsGrabConstraint != null
				if pPhysicsGrabConstraint.grabbedCollider.hasConstraint(pPhysicsGrabConstraint.constraint)
					pPhysicsGrabConstraint.grabbedCollider.removeConstraint(pPhysicsGrabConstraint.constraint)
				end
				
				pPhysicsGrabConstraint = null
				hasPhysicsConstraint = true
				pSmoothGrabIKBlend.setGoal(0)
			end
			
			if pGrabAttach != null
				pGrabAttach.getGrabSpot().release()
				
				if hasPhysicsConstraint
					pGrabAttach = null
					return
				end
				
				var Collider slotCollider = pAttachSlot.getSlotCollider()
				var Collider attachedCollider
				
				var ECBehaviorCollider.Instance parentCollider = pGrabAttach.getParentCollider()
				var ECBehaviorAttachable.Instance attachable = pGrabAttach.getAttachable()
				
				if attachable != null
					attachedCollider = attachable.getCollider().getCollider()
					attachable.detach()
					
				elif parentCollider != null
					attachedCollider = parentCollider.getCollider()
					
					if attachedCollider != null
						if pCharacter != null
							pCollider.detach(attachedCollider)
							
						else
							slotCollider.detach(attachedCollider)
						end
					end
				end
				
				if attachedCollider != null
					attachedCollider.setLinearVelocity(slotCollider.getLinearVelocity())
					attachedCollider.setAngularVelocity(slotCollider.getAngularVelocity())
				end
				pGrabAttach = null
				pSmoothGrabIKBlend.setGoal(0)
			end
		end
		
		/** Break playback for element if recording. */
		protected func void breakPlayback(BehaviorElement element)
			if not GameApp.getGameApp().getRecordScene().isRecording()
				return
			end
			
			var ECBCapturedAnimations.Instance capturedAnimations = ECBCapturedAnimations.getInstanceIn(element)
			if capturedAnimations != null
				capturedAnimations.disableActiveAnimationPlayback()
			end
		end
		
		/** Update ghost position. */
		protected func void updateGhostPosition()
			if pPhysicsGrabConstraint == null
				return
			end
			
			var int bone = pPhysicsGrabConstraint.handBoneIndex
			if bone == -1
				return
			end
			
			// calculate ghost position reflecting actor hand
			var DMatrix targetMatrix = pPhysicsGrabConstraint.targetCoordSystem\
				* pComponent.boneGetMatrix(bone).toDMatrix() * pComponent.getMatrix()
			
			var DVector position = targetMatrix.getPosition()
			
			// limit ghost position to avoid violating rig constraints if possible
			position = pPhysicsGrabConstraint.limitAnchor(position)
			
			// update ghost position
			pGhostCollider.setPosition(position)
		end
		
		/** Apply ik animator. */
		protected func void applyGrabIK()
			if pAnimatorGrabIK == null
				return
			end
			
			var float blend = pSmoothGrabIKBlend.getValue()
			if blend < 0.01
				return
			end
			
			if pPhysicsGrabConstraint != null
				/*
				var int bone = pPhysicsGrabConstraint.handBoneIndex
				if bone != -1
					var DMatrix targetMatrix = pPhysicsGrabConstraint.targetCoordSystem\
						* pComponent.boneGetMatrix(bone).toDMatrix() * pComponent.getMatrix()
					var DVector position = pPhysicsGrabConstraint.limitAnchor(targetMatrix.getPosition())
					
					targetMatrix = DMatrix.newWorld(position, targetMatrix.normalize().toQuaternion())
					
					var Matrix goalMatrix = (targetMatrix * pComponent.getInverseMatrix()).toMatrix()
					
					pControllerGrabIKGoalPosition.setVector(goalMatrix.getPosition())
					pControllerGrabIKGoalRotation.setRotation(goalMatrix.normalize().getEulerAngles())
				end
				*/
				var DMatrix anchorMatrix
				
				if pPhysicsGrabConstraint.grabbedBoneIndex != -1
					anchorMatrix = pPhysicsGrabConstraint.refCoordSystem\
						* DMatrix.newTranslation(-DVector.new(pPhysicsGrabConstraint.grabbedBoneCmp))\
						* pPhysicsGrabConstraint.grabbedColliderRig.boneGetMatrix(pPhysicsGrabConstraint.grabbedBoneIndex)
					
				else
					anchorMatrix = pPhysicsGrabConstraint.refCoordSystem\
						* pPhysicsGrabConstraint.grabbedCollider.getMatrix()
				end
				
				var Matrix goalMatrix = (anchorMatrix * pComponent.getInverseMatrix()).toMatrix()
				
				pControllerGrabIKGoalPosition.setVector(goalMatrix.getPosition())
				pControllerGrabIKGoalRotation.setRotation(goalMatrix.normalize().getEulerAngles())
			end
			
			pAnimatorGrabIK.setBlendFactor(blend)
			pAnimatorGrabIK.apply()
		end
	end
	
	
	
	public var ECBehaviorComponent component
	public var ECBehaviorCollider collider
	public var ECBehaviorGrabber grabber
	public var ECBehaviorAttachSlot attachSlot
	public var ECBAPhysicsToucher physicsToucher
	
	
	
	/** Create behavior and add it to element class. */
	public func new(BehaviorElementClass eclass, ECBehaviorComponent component,\
	ECBehaviorCollider collider, ECBehaviorGrabber grabber, ECBehaviorAttachSlot attachSlot,\
	ECBAPhysicsToucher physicsToucher, String id) super(eclass, id)
		this.component = component
		this.collider = collider
		this.grabber = grabber
		this.attachSlot = attachSlot
		this.physicsToucher = physicsToucher
		eclass.addBehavior(this)
	end
	
	public func void dispose()
		grabber = null
		attachSlot = null
		physicsToucher = null
		super.dispose()
	end
	
	
	
	/** Get instance in element from owner element class. */
	public func Instance instance( BehaviorElement element )
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	/** Get instance in element or null if absent. */
	static public func Instance getInstanceIn(BehaviorElement element, String id)
		return element.findInstance(block Instance each
			return each.getECBehavior().getID().equals(id)
		end) cast Instance
	end
	
	/** Create behavior instance. */
	public func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
