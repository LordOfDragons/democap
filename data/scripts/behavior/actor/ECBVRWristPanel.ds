/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2022, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Behaviors

pin Democap.Gui

pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events
pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * Behavior adding wrist panel matching list model selection to renderable desktop.
 * Also shows/hides owner element if a panel is selected or not.
 */
class ECBVRWristPanel extends DefaultECBehavior
	/** Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/** Window. */
		class WindowPanel extends Window implements WidgetInVR
			class ShowPanelListener extends DefaultListModelListener
				var WindowPanel pWindow
				
				func new(WindowPanel window)
					pWindow = window
				end
				
				func void selectionChanged(ListModel listModel)
					var SessionSettings.WristMenuPanel panel = SessionSettings.WristMenuPanel.none
					if listModel.getSelected() != -1
						panel = listModel.getAt(listModel.getSelected()) cast SessionSettings.WristMenuPanel
					end
					
					// delay this by a frame since this call can potentially add listeners to the
					// model which send this event. modifying listeners while listeners are
					// iterated is not allowed
					TimerBlock.new(0, false, block
						if pWindow.getParent() != null // dispose protection
							pWindow.setPanel(panel)
						end
					end)
				end
			end
			
			class ModelPanelButton extends DefaultToggleModel implements ActionListener
				var DefaultListModel pModelPanel
				var SessionSettings.WristMenuPanel pPanel
				
				func new(DefaultListModel modelPanel, SessionSettings.WristMenuPanel panel)
					pModelPanel = modelPanel
					pPanel = panel
				end
				
				func void updateState()
					setToggled(pPanel == pModelPanel.getSelectedElement())
				end
				
				func void onAction(ActionEvent event)
					pModelPanel.setSelectedElement(pPanel)
				end
			end
			
			var ECBVRWristPanel.Instance pBehavior
			public var Panel pPanelContainer
			var Array pModelPanelButtons
			var ShowPanelListener pShowPanelListener
			var SessionSettings.WristMenuPanel pPanel
			
			func new(ECBVRWristPanel.Instance behavior, Desktop desktop) super(Point.new(), desktop.getSize())
				this.pBehavior = behavior
				pModelPanelButtons = Array.new()
				
				runWhileBlockingLayout(block
					setDesignerSelector("Window.WristPanel")
					setCanClose(false)
					setCanMaximize(true)
					setCanMinimize(false)
					setCanMove(false)
					setCanResize(false)
					setCanReorder(false)
					setWindowState(Window.WindowState.maximized)
					
					setLayout(BorderLayout.new(5))
					
					createPanelButtons()
					
					pPanelContainer = Panel.new(FlowLayout.new(LayoutAxis.y, 5))
					
					addWidget(ScrollPanel.new(Viewport.new(pPanelContainer, 0, 20, true),\
						ScrollPanel.Policy.hidden, ScrollPanel.Policy.needed), BorderLayout.Area.content)
				end)
				
				desktop.addWindow(this)
				
				pShowPanelListener = ShowPanelListener.new(this)
				pShowPanelListener.selectionChanged(getModelPanel())
				getModelPanel().addListener(pShowPanelListener)
			end
			
			func void dispose()
				if pShowPanelListener != null
					getModelPanel().removeListener(pShowPanelListener)
					pShowPanelListener = null
				end
				
				super.dispose()
				
				pPanelContainer = null
				pBehavior = null
				pPanel = null
				pPanelContainer = null
				pModelPanelButtons = null
			end
			
			protected func DefaultListModel getModelPanel()
				if pBehavior.getECBehavior().getRightHand()
					return SessionSettings.get().getModelRightWristMenuPanel()
					
				else
					return SessionSettings.get().getModelLeftWristMenuPanel()
				end
			end
			
			func SessionSettings.WristMenuPanel getPanel()
				return pPanel
			end
			
			protected func String getPrefixUIOptions()
				return pBehavior.getECBehavior().getRightHand() if "UI/WristMenu/Right" else "UI/WristMenu/Left"
			end
			
			func void setPanel(SessionSettings.WristMenuPanel panel)
				if panel == pPanel
					return
				end
				
				pPanelContainer.removeAllWidgets()
				
				pPanel = panel
				
				// create panel widget
				select panel
				case SessionSettings.WristMenuPanel.settings
					pPanelContainer.addWidget(WMPanelSettings.new(true, getPrefixUIOptions()))
					
				case SessionSettings.WristMenuPanel.character
					pPanelContainer.addWidget(WMPanelCharacter.new(true, getPrefixUIOptions()))
					
				case SessionSettings.WristMenuPanel.project
					pPanelContainer.addWidget(WMPanelProject.new(true, getPrefixUIOptions()))
					
				case SessionSettings.WristMenuPanel.actorControl
					pPanelContainer.addWidget(WMPanelActorControl.new(true, getPrefixUIOptions()))
					
				case SessionSettings.WristMenuPanel.session
					pPanelContainer.addWidget(WMPanelSession.new(true, getPrefixUIOptions()))
				end
				
				// assign panel widget and show or hide window
				if pPanelContainer.getWidgetCount() > 0
					pModelPanelButtons.forEach(block ModelPanelButton each
						each.updateState()
					end)
					
					pBehavior.getElement().setVisible(true)
					pBehavior.getElement().setTouchable(true)
					
				else
					pBehavior.getElement().setVisible(false)
					pBehavior.getElement().setTouchable(false)
				end
			end
			
			func DefaultECBehaviorInstance getVRBehavior()
				return pBehavior
			end
			
			protected func void createPanelButtons()
				addWidget(Panel.new(BoxLayout.new(LayoutAxis.y), block Panel p
					var DefaultListModel modelPanel = getModelPanel()
					var ModelPanelButton modelButton
					var ToggleButton button
					
					modelButton = ModelPanelButton.new(modelPanel, SessionSettings.WristMenuPanel.settings)
					button = ToggleButton.new(modelButton, " ")
					button.setDesignerSelector("Button.Category.Settings")
					button.setToolTip("Settings and VR Control")
					button.addActionListener(modelButton)
					p.addWidget(button)
					pModelPanelButtons.add(modelButton)
					
					modelButton = ModelPanelButton.new(modelPanel, SessionSettings.WristMenuPanel.character)
					button = ToggleButton.new(modelButton, " ")
					button.setDesignerSelector("Button.Category.Character")
					button.setToolTip("Character Configuration")
					button.addActionListener(modelButton)
					p.addWidget(button)
					pModelPanelButtons.add(modelButton)
					
					modelButton = ModelPanelButton.new(modelPanel, SessionSettings.WristMenuPanel.project)
					button = ToggleButton.new(modelButton, " ")
					button.setDesignerSelector("Button.Category.Project")
					button.setToolTip("Project, Scenes and Objects")
					button.addActionListener(modelButton)
					p.addWidget(button)
					pModelPanelButtons.add(modelButton)
					
					modelButton = ModelPanelButton.new(modelPanel, SessionSettings.WristMenuPanel.actorControl)
					button = ToggleButton.new(modelButton, " ")
					button.setDesignerSelector("Button.Category.ActorControl")
					button.setToolTip("Actor Controls")
					button.addActionListener(modelButton)
					p.addWidget(button)
					pModelPanelButtons.add(modelButton)
					
					modelButton = ModelPanelButton.new(modelPanel, SessionSettings.WristMenuPanel.session)
					button = ToggleButton.new(modelButton, " ")
					button.setDesignerSelector("Button.Category.Capture")
					button.setToolTip("Session, Recording and Playback")
					button.addActionListener(modelButton)
					p.addWidget(button)
					pModelPanelButtons.add(modelButton)
				end), pBehavior.getECBehavior().getRightHand() if BorderLayout.Area.right else BorderLayout.Area.left)
			end
		end
		
		
		var ECBVRWristPanel pECBehavior
		var WindowPanel pWindow
		
		
		/** Create instance. */
		func new(ECBVRWristPanel ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
		end
		
		/** Init behavior instance. */
		func void init(StubElement stub)
			var Desktop desktop = pECBehavior.getRenderableDesktop().instance(getElement()).getDesktop()
			
			if desktop.getWindowVirtualKeyboard() == null
				desktop.setWindowVirtualKeyboard(WindowVirtualKeyboard.new())
			end
			
			pWindow = WindowPanel.new(this, desktop)
		end
		
		/** Dispose of behavior instance. */
		func void dispose()
			pWindow = null
			super.dispose()
		end
		
		
		/** Behavior. */
		func ECBVRWristPanel getECBehavior()
			return pECBehavior
		end
		
		/** Window. */
		func WindowPanel getWindow()
			return pWindow
		end
	end
	
	
	var ECBehaviorRenderableDesktop pRenderableDesktop
	var bool pRightHand
	
	
	/** Create behavior element class. */
	func new(BehaviorElementClass eclass, ECBehaviorRenderableDesktop renderabledesktop,\
	bool rightHand) super(eclass)
		if renderabledesktop == null
			throw ENullPointer.new("renderabledesktop")
		end
		
		pRenderableDesktop = renderabledesktop
		pRightHand = rightHand
		
		eclass.addBehavior(this)
	end
	
	/** Dispose of behavior. */
	func void dispose()
		pRenderableDesktop = null
		super.dispose()
	end
	
	
	/** Renderable desktop. */
	func ECBehaviorRenderableDesktop getRenderableDesktop()
		return pRenderableDesktop
	end
	
	/** Right hand. */
	func bool getRightHand()
		return pRightHand
	end
	
	
	/** Get instance in element from owner element class. */
	func Instance instance( BehaviorElement element )
		return element.getInstanceAt( this.getInstanceIndex() ) cast Instance
	end
	
	/** Get instance in element or null if absent. */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	
	/** Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
