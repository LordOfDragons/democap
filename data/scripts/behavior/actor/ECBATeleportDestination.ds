/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Behaviors

pin Democap.Characters

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils
pin Democap.Actions


/**
 * Motion capture actor teleport destination.
 */
class ECBATeleportDestination extends DefaultECBehavior
	/** Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		var ECBATeleportDestination pECBehavior
		var ECBehaviorComponent.Instance pComponent
		var Component pComponentMarker, pComponentTeleport, pComponentActor
		
		
		/** Create behavior instance. */
		func new(ECBATeleportDestination ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pComponent = ecbehavior.getComponent().instance(element)
		end
		
		/** Dispose of behavior instance. */
		func void dispose()
			pComponent = null
			super.dispose()
		end
		
		/** Init behavior. */
		func void init(StubElement stub)
			var BehaviorElement element = getElement()
			var ElementClass eclass = element.getClass()
			
			var Skin skin = pECBehavior.getSkin().getSkin(stub, eclass)
			
			var LayerMask layerMask = LayerMask.new()
			// layerMask.setBit(GameApp.WorldLayerBit.remoteView) // set bit to hide in remote view
			
			var Model model = pECBehavior.getModelMarker().getModel(stub, eclass)
			if model != null
				pComponentMarker = Component.new(model, null)
				pComponentMarker.setLayerMask(layerMask)
				pComponentMarker.setVisible(false)
				
				replaceAllTextures(pComponentMarker, skin)
			end
			
			model = pECBehavior.getModelTeleport().getModel(stub, eclass)
			if model != null
				pComponentTeleport = Component.new(model, null)
				pComponentTeleport.setLayerMask(layerMask)
				pComponentTeleport.setVisible(false)
				
				replaceAllTextures(pComponentTeleport, skin)
			end
			
			model = pComponent.getComponent().getModel()
			if model != null
				pComponentActor = Component.new(model, null)
				pComponentActor.setRig(pComponent.getComponent().getRig())
				pComponentActor.setLayerMask(layerMask)
				pComponentActor.setVisible(false)
				
				replaceAllTextures(pComponentActor, skin)
			end
		end
		
		/** Replace all textures with skin. */
		protected func void replaceAllTextures(Component component, Skin skin)
			var int i, count = component.getTextureCount()
			for i = 0 to count
				component.setTextureSkinAt(i, skin, 0)
				component.setTextureDynamicSkinAt(i, null)
			end
		end
		
		
		/** Set visibility. */
		func void setVisible(bool visible)
			var bool hasChar = GameApp.getGameApp().getWorldSpawnCharacter().getCharacter() != null
			
			if pComponentMarker != null
				pComponentMarker.setVisible(visible and hasChar)
			end
			
			if pComponentTeleport != null
				pComponentTeleport.setVisible(visible and not hasChar)
			end
			
			if pComponentActor != null
				pComponentActor.setVisible(visible)
				setRequiresThink(visible)
			end
		end
		
		/** Set teleport destination position. */
		func void setGeometry(DVector position, Quaternion orientation)
			if pComponentMarker != null
				pComponentMarker.setPosition(position)
				pComponentMarker.setOrientation(orientation)
			end
			
			if pComponentTeleport != null
				pComponentTeleport.setPosition(position)
				pComponentTeleport.setOrientation(orientation)
			end
			
			if pComponentActor != null
				pComponentActor.setPosition(position)
				pComponentActor.setOrientation(orientation)
			end
		end
		
		
		/** Frame update. */
		func void think(float elapsed)
			if pComponentActor != null
				pComponent.getComponent().copyBonesToComponent(pComponentActor)
			end
		end
		
		/** Add to game world. */
		func void addToGameWorld()
			var World world = getElement().getGameWorld().getWorld()
			
			if pComponentMarker != null
				pComponentMarker.setScaling(pComponent.getComponent().getScaling())
				world.addComponent(pComponentMarker)
			end
			
			if pComponentTeleport != null
				pComponentTeleport.setScaling(pComponent.getComponent().getScaling())
				world.addComponent(pComponentTeleport)
			end
			
			if pComponentActor != null
				pComponentActor.setScaling(pComponent.getComponent().getScaling())
				world.addComponent(pComponentActor)
			end
		end
		
		/** Remove from fame world. */
		func void removeFromGameWorld()
			var World world = getElement().getGameWorld().getWorld()
			
			if pComponentMarker != null
				world.removeComponent(pComponentMarker)
			end
			
			if pComponentTeleport != null
				world.removeComponent(pComponentTeleport)
			end
			
			if pComponentActor != null
				world.removeComponent(pComponentActor)
			end
		end
	end
	
	
	protected var ECBehaviorComponent pComponent
	protected var ECPModel pModelMarker, pModelTeleport
	protected var ECPSkin pSkin
	
	
	/** Create behavior and add it to element class. */
	func new(BehaviorElementClass eclass, ECBehaviorComponent component) super(eclass)
		var String prefix = "teleportDestination."
		
		pComponent = component
		
		eclass.addProperty(pModelMarker = ECPModel.new(prefix + "modelMarker",\
			"/content/models/actorMarker/actorMarker.demodel"))
		
		eclass.addProperty(pModelTeleport = ECPModel.new(prefix + "modelMarkerTeleport",\
			"/content/models/teleport/teleport.demodel"))
		
		eclass.addProperty(pSkin = ECPSkin.new(prefix + "skin",\
			"/content/materials/ghost/ghostStrong.deskin"))
		
		eclass.addBehavior(this)
	end
	
	/** Dispose of behavior. */
	func void dispose()
		pComponent = null
		super.dispose()
	end
	
	
	
	/** Component behavior. */
	func ECBehaviorComponent getComponent()
		return pComponent
	end
	
	/** Marker model. */
	func ECPModel getModelMarker()
		return pModelMarker
	end
	
	/** Skin. */
	func ECPSkin getSkin()
		return pSkin
	end
	
	/** Teleport model. */
	func ECPModel getModelTeleport()
		return pModelTeleport
	end
	
	
	/** Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	/** Get instance in element or null if absent. */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	/** Create behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
