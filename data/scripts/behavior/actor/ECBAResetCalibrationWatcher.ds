/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2022, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Behaviors

pin Democap.Actions
pin Democap.Characters
pin Democap.Elements

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * Actor behavior watching for reset calibration button press.
 */
class ECBAResetCalibrationWatcher extends DefaultECBehavior
	/** Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		var ECBAResetCalibrationWatcher pECBehavior
		var ECBehaviorVRHandPointAt.Instance pVRHandPointAtRight, pVRHandPointAtLeft
		var bool pRightTriggerPulled, pLeftTriggerPulled
		var bool pRightMenuPressed, pLeftMenuPressed
		var bool pRightSecondaryPressed, pLeftSecondaryPressed
		
		
		
		/** Create behavior instance. */
		func new(ECBAResetCalibrationWatcher ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pVRHandPointAtRight = ecbehavior.vrHandPointAtRight.instance(element)
			pVRHandPointAtLeft = ecbehavior.vrHandPointAtLeft.instance(element)
		end
		
		func void dispose()
			pVRHandPointAtRight = null
			pVRHandPointAtLeft = null
			super.dispose()
		end
		
		
		
		func ECBAResetCalibrationWatcher getECBehavior()
			return pECBehavior
		end
		
		
		
		func bool menuPress(bool rightHand)
			if usingHandInteraction(rightHand)
				return false
			end
			
			if not pRightTriggerPulled or not pLeftTriggerPulled
				return false
			end
			
			if rightHand
				pRightMenuPressed = true
				
			else
				pLeftMenuPressed = true
			end
			
			if pRightMenuPressed and pLeftMenuPressed
				reset()
				resetCalibration()
			end
			
			return true
		end
		
		func void menuRelease(bool rightHand)
			if rightHand
				pRightMenuPressed = false
				
			else
				pLeftMenuPressed = false
			end
		end
		
		func void triggerPulled(bool rightHand)
			if rightHand
				pRightTriggerPulled = true
				
			else
				pLeftTriggerPulled = true
			end
		end
		
		func void triggerRelease(bool rightHand)
			if rightHand
				pRightTriggerPulled = false
				
			else
				pLeftTriggerPulled = false
			end
		end
		
		func void secondaryPress(bool rightHand)
			if not usingHandInteraction(rightHand)
				return
			end
			
			if rightHand
				pRightSecondaryPressed = true
				
			else
				pLeftSecondaryPressed = true
			end
			
			if pRightSecondaryPressed and pLeftSecondaryPressed
				reset()
				resetCalibration()
			end
		end
		
		func void secondaryRelease(bool rightHand)
			if rightHand
				pRightSecondaryPressed = false
				
			else
				pLeftSecondaryPressed = false
			end
		end
		
		
		
		/** Reset. */
		func void reset()
			pRightTriggerPulled = false
			pLeftTriggerPulled = false
			pRightMenuPressed = false
			pLeftMenuPressed = false
			pRightSecondaryPressed = false
			pLeftSecondaryPressed = false
		end
		
		func bool usingHandInteraction(bool rightHand)
			var ECBehaviorVRHandPointAt.Instance pointAt = rightHand if pVRHandPointAtRight else pVRHandPointAtLeft
			var InputDevice device = pointAt.getVRHand().getInputDevice()
			return device != null and device.getUsingHandInteraction()
		end
		
		
		protected func void resetCalibration()
			var MoCapActor actor = GameApp.getGameApp().getWorldSpawnCharacter().getActor()
			if actor == null
				return
			end
			
			var AAControlCommands aacc = actor.getAIAction().getAction() cast AAControlCommands
			if aacc != null
				aacc.startCalibrate()
			end
		end
	end
	
	
	public var ECBehaviorVRHandPointAt vrHandPointAtRight, vrHandPointAtLeft
	
	
	/** Create behavior and add it to element class. */
	func new(BehaviorElementClass eclass, ECBehaviorVRHandPointAt vrHandPointAtRight,\
	ECBehaviorVRHandPointAt vrHandPointAtLeft) super(eclass)
		this.vrHandPointAtRight = vrHandPointAtRight
		this.vrHandPointAtLeft = vrHandPointAtLeft
		eclass.addBehavior(this)
	end
	
	func void dispose()
		vrHandPointAtRight = vrHandPointAtLeft = null
		super.dispose()
	end
	
	
	/** Get instance in element from owner element class. */
	func Instance instance( BehaviorElement element )
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	/** Get instance in element or null if absent. */
	static func Instance getInstanceIn(BehaviorElement element, String id)
		return element.findInstance(block Instance each
			return each.getECBehavior().getID().equals(id)
		end) cast Instance
	end
	
	/** Create behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
