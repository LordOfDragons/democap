/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Behaviors

pin Democap.Characters

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * Actor behavior controlling desktop.
 */
class ECBAControlDesktop extends DefaultECBehavior
	/** Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/** State. */
		class State
			public var ECBehaviorControlDesktop.Instance controlDesktop
			public var ECBehaviorVRHandPointAt.Instance pointAt
			public var bool triggerPulled
			
			func new()
			end
			
			func void checkDisposed()
				if controlDesktop != null and controlDesktop.getElement() == null
					// disposed while in use
					controlDesktop = null
					pointAt = null
					triggerPulled = false
				end
			end
		end
		
		
		var ECBAControlDesktop pECBehavior
		var State pStateRight, pStateLeft, pStatePrimary
		
		
		/** Create behavior instance. */
		func new(ECBAControlDesktop ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pStateRight = State.new()
			pStateLeft = State.new()
		end
		
		/** Dispose of behavior instance. */
		func void dispose()
			pStateRight = pStateLeft = pStatePrimary = null
			super.dispose()
		end
		
		
		/** Right hand behavior instance control desktop or null. */
		func ECBehaviorControlDesktop.Instance getControlDesktopRight()
			return pStateRight.controlDesktop
		end
		
		/** Left hand behavior instance control desktop or null. */
		func ECBehaviorControlDesktop.Instance getControlDesktopLeft()
			return pStateLeft.controlDesktop
		end
		
		/** Right hand behavior instance point-at or null. */
		func ECBehaviorVRHandPointAt.Instance getPointAtRight()
			return pStateRight.pointAt
		end
		
		/** Left hand behavior instance point-at or null. */
		func ECBehaviorVRHandPointAt.Instance getPointAtLeft()
			return pStateLeft.pointAt
		end
		
		/** Right hand trigger is pulled. */
		func bool getTriggerPulledRight()
			return pStateRight.triggerPulled
		end
		
		/** Left hand trigger is pulled. */
		func bool getTriggerPulledLeft()
			return pStateLeft.triggerPulled
		end
		
		
		/** Process pointing at element. Returns true if processed. */
		func bool pointAt(ECBehaviorVRHandPointAt.Instance behavior, bool rightHand)
			// note: element is not null if hitPoint is not null
			var BehaviorElement element = behavior.getPointAtBehaviorElement()
			var DVector hitPoint = behavior.getPointAtHitPoint()
			var State s = rightHand if pStateRight else pStateLeft
			var bool canMove = pStatePrimary == null or s == pStatePrimary
			var Point point
			
			if element != null and element.isDisposed()
				element = null
				hitPoint = null
			end
			
			pStateRight.checkDisposed()
			pStateLeft.checkDisposed()
			
			if s.controlDesktop != null
				if s.triggerPulled
					s.controlDesktop.moveMouseRay(behavior.getPointAtOrigin(), behavior.getPointAtDirection())
					return true
					
				elif hitPoint != null and element == s.controlDesktop.getElement()\
				and (point = s.controlDesktop.desktopPoint(hitPoint)) != null
					if canMove
						s.controlDesktop.moveMouse(point)
					end
					return true
					
				else
					if canMove
						s.controlDesktop.moveMouseRay(behavior.getPointAtOrigin(), behavior.getPointAtDirection())
					end
					hitPoint = null
				end
			end
			
			if hitPoint != null
				var State so = rightHand if pStateLeft else pStateRight
				
				s.controlDesktop = behavior.getPointAtBehaviorElement().findInstance(\
					block ECBehaviorControlDesktop.Instance each
						point = each.desktopPoint(hitPoint)
						if point != null
							if each != so.controlDesktop
								each.moveMouse(point)
							end
							return true
						end
						return false
					end) cast ECBehaviorControlDesktop.Instance
				
			else
				s.controlDesktop = null
			end
			
			if s.controlDesktop != null
				s.pointAt = behavior
				if pStateLeft.controlDesktop == pStateRight.controlDesktop
					pStatePrimary = rightHand if pStateLeft else pStateRight
					
				else
					pStatePrimary = null
				end
				return true
				
			else
				s.pointAt = null
				pStatePrimary = null
				return false
			end
		end
		
		/** Pull trigger on pointed at element. Returns true if processed. */
		func bool pointAtPull(ECBehaviorVRHandPointAt.Instance behavior, bool rightHand)
			if not pointAt(behavior, rightHand)
				return false
			end
			
			var State s = rightHand if pStateRight else pStateLeft
			if pStatePrimary != null
				if s != pStatePrimary and pStatePrimary.triggerPulled
					return true
				end
				
				var DVector hitPoint = behavior.getPointAtHitPoint()
				if hitPoint == null or not s.controlDesktop.moveMouse(hitPoint)
					return true
				end
				
				pStatePrimary = s
			end
			
			s.controlDesktop.leftMousePress()
			s.triggerPulled = true
			return true
		end
		
		/** Release trigger on pointed at element. Returns true if processed. */
		func bool pointAtRelease(ECBehaviorVRHandPointAt.Instance behavior, bool rightHand)
			var State s = rightHand if pStateRight else pStateLeft
			
			if s.controlDesktop == null or not s.triggerPulled
				return false
			end
			
			if s.controlDesktop.getElement() != null // dispose protection
				if pStatePrimary == null or s == pStatePrimary
					s.controlDesktop.leftMouseRelease()
				end
			end
			
			s.triggerPulled = false
			return true
		end
		
		/** Cancel triggering pointAtRelease if point at is present. */
		func void cancel(bool rightHand)
			var State s = rightHand if pStateRight else pStateLeft
			if s.pointAt != null and s.triggerPulled
				pointAtRelease(s.pointAt, rightHand)
			end
		end
	end
	
	
	/** Create behavior and add it to element class. */
	func new(BehaviorElementClass eclass) super(eclass)
		eclass.addBehavior(this)
	end
	
	
	/** Get instance in element from owner element class. */
	func Instance instance( BehaviorElement element )
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	/** Create behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
