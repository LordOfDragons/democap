/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Behaviors

pin Democap.Gui

pin Dragengine.Gui
pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * Behavior adding support to show information in VR like a HUD overlay. Has to be done using
 * a simple square model since VR cameras can not use 2D overlays. VRCameraDirector calls
 * update() on the behavior once the camera is updated. This can not be done during think()
 * or postThink() since the camera director is updated right before finishing the frame update.
 * The update call moves the component into the right position in front of the camera with the
 * right size. The skin to show is changed at runtime. The component is shown only if a skin
 * is assigned otherwise it is hidden.
 */
class ECBVRHudInfo extends DefaultECBehavior
	/** Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		var ECBVRHudInfo pECBehavior
		var ECBehaviorComponent.Instance pComponent
		var ECBehaviorDynamicSkin.Instance pDynamicSkin
		var ECBehaviorRenderablePanel.Instance pRenderablePanel
		var float pDistance
		var float pSize
		
		
		
		/** Create instance. */
		func new(ECBVRHudInfo ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pComponent = ecbehavior.getComponent().instance(element)
			pDynamicSkin = ecbehavior.getDynamicSkin().instance(element)
			pRenderablePanel = ecbehavior.getRenderablePanel().instance(element)
		end
		
		/** Init behavior instance. */
		func void init(StubElement stub)
			pComponent.getComponent().setVisible(false)
			pDistance = DEMath.max(pECBehavior.getDistance().getValue(stub), 0.01)
			pSize = DEMath.clamp(pECBehavior.getSize().getValue(stub), 10.0, 70.0)
			
			// scale the component. this depends on the FOV. we do not know what FOV the
			// HMD has and it can potentially change. often though it is around 100 degrees.
			// for this reason the size is define as multiplier ontop of the distance
			// 
			// the model has a size of 1m
			var float size = pDistance * DEMath.tan(pSize) * 2
			pComponent.getComponent().setScaling(Vector.new(size, size, size))
		end
		
		/** Dispose of behavior instance. */
		func void dispose()
			pComponent = null
			pDynamicSkin = null
			pRenderablePanel = null
			super.dispose()
		end
		
		
		/** Behavior. */
		func ECBVRHudInfo getECBehavior()
			return pECBehavior
		end
		
		/** Component. */
		func ECBehaviorComponent.Instance getComponent()
			return pComponent
		end
		
		/** Dynamic skin. */
		func ECBehaviorDynamicSkin.Instance getDynamicSkin()
			return pDynamicSkin
		end
		
		/** Renderable panel. */
		func ECBehaviorRenderablePanel.Instance getRenderablePanel()
			return pRenderablePanel
		end
		
		/** Distance in meters. */
		func float getDistance()
			return pDistance
		end
		
		/** Size as angle from center. */
		func float getSize()
			return pSize
		end
		
		
		
		/** Add panel. Shows component. */
		func void addPanel(Panel panel)
			pRenderablePanel.getPanel().addWidget(panel)
			pComponent.getComponent().setVisible(true)
		end
		
		/** Remove panel without disposing of it. Hides component if content is empty. */
		func void removePanel(Panel panel)
			if pRenderablePanel == null
				return // disposed. can happen due to behavior ordering
			end
			
			pRenderablePanel.getPanel().removeWidget(panel)
			pComponent.getComponent().setVisible(pRenderablePanel.getPanel().getWidgetCount() > 0)
		end
		
		/** Remove all content and hide component. */
		func void clear()
			if pRenderablePanel == null
				return // disposed. can happen due to behavior ordering
			end
			
			pRenderablePanel.getPanel().removeAllWidgets()
			pComponent.getComponent().setVisible(false)
		end
		
		
		
		/** Place component in front of VR camera with correct size. */
		func void update()
			if pComponent == null
				return // not yet inited
			end
			
			var Component component = pComponent.getComponent()
			if not component.getVisible()
				return
			end
			
			var Camera camera = GameApp.getGameApp().getVRCamera()
			
			var DMatrix matrix = DMatrix.newRT(DVector.new(0, 180, 0), DVector.new(0, 0, pDistance))\
				* DMatrix.newWorld(camera.getPosition(), camera.getOrientation())
			
			component.setPosition(matrix.getPosition())
			component.setOrientation(matrix.toQuaternion())
		end
	end
	
	
	
	var ECBehaviorComponent pComponent
	var ECBehaviorDynamicSkin pDynamicSkin
	var ECBehaviorRenderablePanel pRenderablePanel
	var ECPFloat pDistance
	var ECPFloat pSize
	
	
	
	/** Create behavior element class. */
	func new(BehaviorElementClass eclass) super(eclass)
		var String subId = "vrHudInfo"
		var String prefix = subId + "."
		
		pComponent = ECBehaviorComponent.new(eclass, null, subId, prefix + "component")
		pComponent.getComponent().getModel().setPath("/content/models/hudinfo/hudinfo.demodel")
		pComponent.getComponent().getSkin().setPath("/content/models/hudinfo/hudinfo.deskin")
		pComponent.getComponent().setLayerMask(LayerMask.newWith(GameApp.WorldLayerBit.remoteView))
		
		pDynamicSkin = ECBehaviorDynamicSkin.new(eclass, pComponent, subId)
		
		pRenderablePanel = ECBehaviorRenderablePanel.new(eclass, pDynamicSkin, subId)
		pRenderablePanel.getGuiTheme().setPath("/content/gui/vrmain.degt")
		pRenderablePanel.getDesignerSelector().setValue("Panel.VRHudInfo")
		pRenderablePanel.getRenderable().setValue("content")
		pRenderablePanel.getRenderableSolidity().setValue("solidity")
		pRenderablePanel.getSize().setPoint(Point.new(1024, 1024))
		
		pDistance = ECPFloat.new(prefix + "distance", 0.5, 0.01)
		eclass.addProperty(pDistance)
		
		pSize = ECPFloat.new(prefix + "size", 45, 10, 70)
		eclass.addProperty(pSize)
		
		eclass.addBehavior(this)
	end
	
	/** Dispose of behavior. */
	func void dispose()
		pComponent = null
		pDynamicSkin = null
		pRenderablePanel = null
		super.dispose()
	end
	
	
	
	/** Component. */
	func ECBehaviorComponent getComponent()
		return pComponent
	end
	
	/** Dynamic skin. */
	func ECBehaviorDynamicSkin getDynamicSkin()
		return pDynamicSkin
	end
	
	/** Renderable panel. */
	func ECBehaviorRenderablePanel getRenderablePanel()
		return pRenderablePanel
	end
	
	/** Distance in meters. */
	func ECPFloat getDistance()
		return pDistance
	end
	
	/** Size as angle from center. */
	func ECPFloat getSize()
		return pSize
	end
	
	
	
	/** Get instance in element from owner element class. */
	func Instance instance( BehaviorElement element )
		return element.getInstanceAt( this.getInstanceIndex() ) cast Instance
	end
	
	/** Get instance in element or null if absent. */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	
	
	/** Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
