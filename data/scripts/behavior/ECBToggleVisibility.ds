/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Behaviors

pin Democap.Characters

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * Behavior adding support to toggle visibility of element and to reposition it. Positions
 * element in front of HMD, hand point-at or custom origin matrix at fixed distance facing
 * the actor. Optionally the up axis can be locked.
 * 
 * \see https://developer.dragondreams.ch/wiki/doku.php/democap:behavior_ecbtogglevisibility
 */
class ECBToggleVisibility extends DefaultECBehavior
	/**
	 * Behavior factory.
	 * 
	 * Example XML element class:
	 * \code{.xml}
	 * <behavior type='ECBToggleVisibility'>
	 *   <vector name='.lockUpAxis' x='0' y='1' z='0'/> <!-- default null -->
	 *   <vector name='.pivot' x='0' y='0' z='0'/> <!-- default null -->
	 *   <vector name='.rotation' x='0' y='0' z='0'/>
	 *   <float name='.distance'>0.5</float> <!-- min=0 -->
	 *   <boolean name='.lockZRotation'>false</boolean>
	 *   <boolean name='.scaleWithActor'>false</boolean>
	 * </behavior>
	 * \endcode
	 */
	class Factory implements BehaviorFactory
		func new()
		end
		
		func String factoryId()
			return "ECBToggleVisibility"
		end
		
		func ECBehavior addBehavior(BehaviorElementClass eclass, String id, Dictionary parameters)
			if not id.empty()
				throw EInvalidParam.new("id is not empty string")
			end
			var ECBToggleVisibility behavior = ECBToggleVisibility.new(eclass)
			BehaviorElementClass.sharedFactoryHelper.setPropertiesFromParameters(eclass, parameters, "toggleVisibility")
			return behavior
		end
	end
	
	/** Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		var ECBToggleVisibility pECBehavior
		var Vector pLockUpAxis
		var Vector pPivot
		var Vector pRotation
		var float pDistance
		var bool pLockZRotation
		var bool pScaleWithActor
		
		
		
		/** Create behavior instance. */
		func new(ECBToggleVisibility ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
		end
		
		/** Init behavior instance. */
		func void init(StubElement stub)
			var CodecPropertyString codec = getElement().getClass().getCodecPropertyString()
			pLockUpAxis = pECBehavior.getLockUpAxis().getVector(stub, codec)
			pPivot = pECBehavior.getPivot().getVector(stub, codec)
			pRotation = pECBehavior.getRotation().getVector(stub, codec)
			pDistance = pECBehavior.getDistance().getValue(stub)
			pLockZRotation = pECBehavior.getLockZRotation().getValue(stub)
			pScaleWithActor = pECBehavior.getScaleWithActor().getValue(stub)
		end
		
		
		
		/** Lock up axis or null value. */
		func Vector getLockUpAxis()
			return pLockUpAxis
		end
		
		/** Pivot offset or null value. */
		func Vector getPivot()
			return pPivot
		end
		
		/** Rotation to add. */
		func Vector getRotation()
			return pRotation
		end
		
		/** Distance in front of camera to position element. */
		func float getDistance()
			return pDistance
		end
		
		/** Lock Z rotation. */
		func bool getLockZRotation()
			return pLockZRotation
		end
		
		/** Scale with actor. */
		func bool getScaleWithActor()
			return pScaleWithActor
		end
		
		
		
		/** Element is visible. */
		func bool getVisible()
			return getElement().getVisible()
		end
		
		/** Show/hide element. */
		func void setVisible(bool visible)
			var BehaviorElement element = getElement()
			element.setVisible(visible)
			element.setTouchable(visible)
		end
		
		/** Reposition element in front of VR camera. */
		func void repositionHmd(BaseVRActor actor)
			repositionHmd(actor, Vector.new())
		end
		
		/** Reposition element relative to VR camera. */
		func void repositionHmd(BaseVRActor actor, Vector position)
			var Camera camera = GameApp.getGameApp().getVRCamera()
			var DMatrix matrix = DMatrix.newTranslation(DVector.new(position))
			var Quaternion corient = camera.getOrientation()
			var DVector cpos = camera.getPosition()
			var float scale = getUseScaling(actor)
			
			if pPivot != null
				matrix = matrix * DMatrix.newWorld(actor.getPosition().\
					combine(cpos, false, true, false) + DVector.new(pPivot) * scale, corient)
				
			else
				matrix = matrix * DMatrix.newWorld(cpos, corient)
			end
			
			// make object face HMD. keep in mind reposition() expects the matrix to point
			// away from the camera so "mpos - cpos" is used not "cpos - mpos".
			var DVector mpos = matrix.getPosition()
			var DVector view = (mpos - cpos).normalize()
			var DVector up = DMatrix.newFromQuaternion(corient).getUpVector()
			
			if pLockUpAxis != null
				var DVector lockUp = DVector.new(pLockUpAxis)
				
				view = mpos - (cpos + lockUp * (lockUp * (mpos - cpos)))
				
				if view.isZero()
					if DEMath.fabs(lockUp.getY()) > DEMath.fabs(lockUp.getX())\
					and DEMath.fabs(lockUp.getY()) > DEMath.fabs(lockUp.getZ())
						view = DVector.new(0, 0, 1)
						
					else
						view = DVector.new(0, 1, 0)
					end 
					
				else
					view = view.normalize()
				end
				
				up = lockUp
			end
			
			matrix = DMatrix.newWorld(mpos, view, up)
			
			reposition(actor, matrix, Vector.new())
		end
		
		/** Reposition element along point-at direction. */
		func void reposition(ECBehaviorVRHandPointAt.Instance pointAt)
			var DMatrix matrix = pointAt.calcTestMatrix()
			var Vector rotation = Vector.new()
			
			if pointAt.getVRHand().isUsingHandInteraction()
				// for hand interaction tilt the menu to make it easier to position
				rotation = Vector.new(-20, 0, 0)
			end
			
			reposition(pointAt.getElement() cast BaseVRActor, matrix, rotation)
		end
		
		/**
		 * Reposition element. Rotation is applied to final position for fine tuning.
		 */
		func void reposition(BaseVRActor actor, DMatrix matrix, Vector rotation)
			var float scale = getUseScaling(actor)
			
			matrix = matrix.normalize()

			if pLockZRotation
				matrix = DMatrix.newRT(\
					matrix.getEulerAngles().compSelect(true, true, false),\
					matrix.getPosition())
			end
			
			matrix = DMatrix.newRotationY(180) * matrix
			
			if pLockUpAxis != null
				var DVector lockUp = DVector.new(pLockUpAxis)
				var DVector view = matrix.getViewVector().normalize()
				
				if DEMath.fabs(view * lockUp) > 0.707 // 45 degrees
					view = matrix.getRightVector().normalize() % lockUp
				end
				
				matrix = DMatrix.newWorld(matrix.getPosition(), view, lockUp)
			end
			
			matrix = DMatrix.newRotation(DVector.new(rotation))\
				* DMatrix.newRotation(DVector.new(pRotation))\
				* DMatrix.newTranslation(0, 0, -pDistance * scale) * matrix
			
			getElement().setGeometry(matrix.getPosition(),\
				matrix.normalize().toQuaternion(), Vector.new(scale, scale, scale))
		end
		
		/** Resize element. */
		func void resize(BaseVRActor actor)
			var float scale = getUseScaling(actor)
			getElement().setScaling(Vector.new(scale, scale, scale))
		end
		
		/** Scaling to use. */
		func float getUseScaling(BaseVRActor actor)
			var float scale = 1
			
			if pScaleWithActor
				var ECBCharacterConfiguration.Instance character = ECBCharacterConfiguration.getInstanceIn(actor)
				if character != null
					scale = character.getCharacter().worldScaling()
				end
			end
			
			if pECBehavior.blockSettingsScale != null
				scale *= pECBehavior.blockSettingsScale.run() cast float
			end
			
			return DEMath.max(scale, 0.01)
		end
	end
	
	
	
	var ECPVector pLockUpAxis
	var ECPVector pPivot
	var ECPVector pRotation
	var ECPFloat pDistance
	var ECPBoolean pLockZRotation
	var ECPBoolean pScaleWithActor
	
	public var Block blockSettingsScale
	
	
	
	/** Create behavior and add it to element class. */
	func new(BehaviorElementClass eclass) super(eclass)
		var String prefix = "toggleVisibility."
		
		eclass.addProperty(pLockUpAxis = ECPVector.new(prefix + "lockUpAxis", null))
		eclass.addProperty(pPivot = ECPVector.new(prefix + "pivot", null))
		eclass.addProperty(pRotation = ECPVector.new(prefix + "rotation", Vector.new()))
		eclass.addProperty(pDistance = ECPFloat.new(prefix + "distance", 0.5, 0))
		eclass.addProperty(pLockZRotation = ECPBoolean.new(prefix + "lockZRotation", false))
		eclass.addProperty(pScaleWithActor = ECPBoolean.new(prefix + "scaleWithActor", false))
		
		eclass.addBehavior(this)
	end
	
	func void dispose()
		blockSettingsScale = null
		super.dispose()
	end
	
	
	/** Lock up axis or null value. */
	func ECPVector getLockUpAxis()
		return pLockUpAxis
	end
	
	/** Pivot offset or null value. */
	func ECPVector getPivot()
		return pPivot
	end
	
	/** Rotation to add. */
	func ECPVector getRotation()
		return pRotation
	end
	
	/** Distance in front of camera to position element. */
	func ECPFloat getDistance()
		return pDistance
	end
	
	/** Lock Z rotation. */
	func ECPBoolean getLockZRotation()
		return pLockZRotation
	end
	
	/** Scale with actor. */
	func ECPBoolean getScaleWithActor()
		return pScaleWithActor
	end
	
	
	
	/** Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(this.getInstanceIndex()) cast Instance
	end
	
	/** Get instance with slot name in element or null if absent. */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	
	
	/** Create behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
