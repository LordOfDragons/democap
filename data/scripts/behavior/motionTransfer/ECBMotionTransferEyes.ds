/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2023, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Behaviors

pin Democap.MotionTransferSystem

pin Dragengine.Commands
pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * Behavior for MotionTransferEyes.
 */
class ECBMotionTransferEyes extends DefaultECBehavior
	/** Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/** Update controllers. */
		class UpdateControllers extends ECBMoCapAnimator.DefaultListener
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func int requiredPhaseCount(ECBMoCapAnimator.Instance instance)
				return 2
			end
			
			func void updateControllers(ECBMoCapAnimator.Instance instance, float elapsed, int phase)
				if phase == 1
					pInstance.updateControllers()
				end
			end
		end
		
		
		
		var ECBMotionTransferEyes pECBehavior
		var ECBehaviorVRPlayspace.Instance pVRPlayspace
		var ECBMoCapAnimator.Instance pMoCapAnimator
		var ECBTrackerSlot.Instance pSlotTracker
		var float pLimitEyeRightScaleH
		var float pLimitEyeRightScaleV
		var float pLimitEyeRightOffsetH
		var float pLimitEyeRightOffsetV
		var float pLimitEyeLeftScaleH
		var float pLimitEyeLeftScaleV
		var float pLimitEyeLeftOffsetH
		var float pLimitEyeLeftOffsetV
		var float pCenterHorizontal
		var float pCenterVertical
		var float pAdjustRotationHorizontal
		var float pAdjustRotationVertical
		var float pLookAtDistance
		var AnimatorController pControllerRightHorizontal
		var AnimatorController pControllerRightVertical
		var AnimatorController pControllerLeftHorizontal
		var AnimatorController pControllerLeftVertical
		var AnimatorController pControllerViewHorizontal
		var AnimatorController pControllerViewVertical
		var AnimatorController pControllerLookAtPosition
		var AnimatorController pControllerLookAtRotation
		var Component pComponent
		
		
		
		/** Create instance. */
		func new(ECBMotionTransferEyes ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			
			pVRPlayspace = ecbehavior.getVRPlayspace().instance(element)
			pMoCapAnimator = ecbehavior.getMoCapAnimator().instance(element)
			if ecbehavior.getSlotTracker() != null
				pSlotTracker = ecbehavior.getSlotTracker().instance(element)
			end
		end
		
		/** Dispose of instance. */
		func void dispose()
			pSlotTracker = null
			pVRPlayspace = null
			pMoCapAnimator = null
			super.dispose()
		end
		
		
		
		/** Init behavior instance. */
		func void init(StubElement stub)
			var MotionTransferEyes transfer = pECBehavior.getTransfer()
			
			var ECBehaviorActorAnimated.Instance actorAnimated = pMoCapAnimator.getActorAnimated()
			pControllerRightHorizontal = actorAnimated.getControllerNamed(pECBehavior.getControllerNameRightHorizontal())
			pControllerRightVertical = actorAnimated.getControllerNamed(pECBehavior.getControllerNameRightVertical())
			pControllerLeftHorizontal = actorAnimated.getControllerNamed(pECBehavior.getControllerNameLeftHorizontal())
			pControllerLeftVertical = actorAnimated.getControllerNamed(pECBehavior.getControllerNameLeftVertical())
			pControllerViewHorizontal = actorAnimated.getControllerNamed(pECBehavior.getControllerNameViewHorizontal())
			pControllerViewVertical = actorAnimated.getControllerNamed(pECBehavior.getControllerNameViewVertical())
			
			if not transfer.getLookAtBone().empty()
				pControllerLookAtPosition = actorAnimated.getControllerNamed(pECBehavior.getControllerNameLookAtPosition())
				pControllerLookAtRotation = actorAnimated.getControllerNamed(pECBehavior.getControllerNameLookAtRotation())
			end
			
			pComponent = actorAnimated.getComponent().getComponent()
			
			// right eye limit factors
			if pControllerRightHorizontal != null
				var float lower = pControllerRightHorizontal.getLower()
				var float upper = pControllerRightHorizontal.getUpper()
				pLimitEyeRightScaleH = DEMath.max((upper - lower) / 2, 0.01)
				pLimitEyeRightOffsetH = (lower + upper) / 2
				
				lower = pControllerRightVertical.getLower()
				upper = pControllerRightVertical.getUpper()
				pLimitEyeRightScaleV = DEMath.max((upper - lower) / 2, 0.01)
				pLimitEyeRightOffsetV = (lower + upper) / 2
			end
			
			// left eye limit factors
			if pControllerLeftHorizontal != null
				var float lower = pControllerLeftHorizontal.getLower()
				var float upper = pControllerLeftHorizontal.getUpper()
				pLimitEyeLeftScaleH = DEMath.max((upper - lower) / 2, 0.01)
				pLimitEyeLeftOffsetH = (lower + upper) / 2
				
				lower = pControllerLeftVertical.getLower()
				upper = pControllerLeftVertical.getUpper()
				pLimitEyeLeftScaleV = DEMath.max((upper - lower) / 2, 0.01)
				pLimitEyeLeftOffsetV = (lower + upper) / 2
			end
			
			// center position
			pCenterHorizontal = transfer.getCalibrateRotation().getY()
			pCenterVertical = transfer.getCalibrateRotation().getX()
			
			// adjustments
			pAdjustRotationHorizontal = transfer.getAdjustRotationHorizontal()
			pAdjustRotationVertical = transfer.getAdjustRotationVertical()
			
			// look-at
			pLookAtDistance = transfer.getLookAtDistance()
			
			// add listener
			pMoCapAnimator.addListener(UpdateControllers.new(this))
		end
		
		
		/** Behavior. */
		func ECBMotionTransferEyes getECBehavior()
			return pECBehavior
		end
		
		/** VR Playspace. */
		func ECBehaviorVRPlayspace.Instance getVRPlayspace()
			return pVRPlayspace
		end
		
		/** Motion capture animator. */
		func ECBMoCapAnimator.Instance getMoCapAnimator()
			return pMoCapAnimator
		end
		
		/** Tracker slot behavior instance or null. */
		func ECBTrackerSlot.Instance getSlotTracker()
			return pSlotTracker
		end
		
		/** Animator controller right horizontal. */
		func AnimatorController getControllerRightHorizontal()
			return pControllerRightHorizontal
		end
		
		/** Animator controller right vertical. */
		func AnimatorController getControllerRightVertical()
			return pControllerRightVertical
		end
		
		/** Animator controller left horizontal. */
		func AnimatorController getControllerLeftHorizontal()
			return pControllerLeftHorizontal
		end
		
		/** Animator controller left vertical. */
		func AnimatorController getControllerLeftVertical()
			return pControllerLeftVertical
		end
		
		/** Animator controller view horizontal. */
		func AnimatorController getControllerViewHorizontal()
			return pControllerViewHorizontal
		end
		
		/** Animator controller view vertical. */
		func AnimatorController getControllerViewVertical()
			return pControllerViewVertical
		end
		
		/** Animator controller look-at position. */
		func AnimatorController getControllerLookAtPosition()
			return pControllerLookAtPosition
		end
		
		/** Animator controller look-at rotation. */
		func AnimatorController getControllerLookAtRotation()
			return pControllerLookAtRotation
		end
		
		
		
		/** Update controllers. */
		func void updateControllers()
			if pSlotTracker == null
				return
			end
			
			// tweakable
			var MotionTransferEyes transfer = pECBehavior.getTransfer()
			pAdjustRotationHorizontal = transfer.getAdjustRotationHorizontal()
			pAdjustRotationVertical = transfer.getAdjustRotationVertical()
			pLookAtDistance = transfer.getLookAtDistance()
			
			// eye tracker device returns as position a virtual position near the users eyes and
			// acts as origin of the gaze. the orientation represents the direction of the gaze.
			// hence the gaze ray starts at the origin and travels into the Z direction of the
			// matrix formed by the orientation.
			//
			// for the purpose of motion capturing we use only the orientation
			var Matrix matrixEyes = pSlotTracker.getMatrixComponent()
			var Vector rotation = matrixEyes.getEulerAngles()
			var float eyeHorizontal = rotation.getY() - pCenterHorizontal + pAdjustRotationHorizontal
			var float eyeVertical = rotation.getX() - pCenterVertical + pAdjustRotationVertical
			
			// limit right eye rotation
			if pControllerRightHorizontal != null
				var float horizontal = (eyeHorizontal - pLimitEyeRightOffsetH) / pLimitEyeRightScaleH
				var float vertical = (eyeVertical - pLimitEyeRightOffsetV) / pLimitEyeRightScaleV
				
				var Vector2 direction = Vector2.new(horizontal, vertical)
				if direction.getLength() > 1
					direction = direction.normalize()
					horizontal = direction.getX()
					vertical = direction.getY()
				end
				
				pControllerRightHorizontal.setValue(horizontal * pLimitEyeRightScaleH + pLimitEyeRightOffsetH)
				pControllerRightVertical.setValue(vertical * pLimitEyeRightScaleV + pLimitEyeRightOffsetV)
			end
			
			// limit left eye rotation
			if pControllerLeftHorizontal != null
				var float horizontal = (eyeHorizontal - pLimitEyeLeftOffsetH) / pLimitEyeLeftScaleH
				var float vertical = (eyeVertical - pLimitEyeLeftOffsetV) / pLimitEyeLeftScaleV
				
				var Vector2 direction = Vector2.new(horizontal, vertical)
				if direction.getLength() > 1
					direction = direction.normalize()
					horizontal = direction.getX()
					vertical = direction.getY()
				end
				
				pControllerLeftHorizontal.setValue(horizontal * pLimitEyeLeftScaleH + pLimitEyeLeftOffsetH)
				pControllerLeftVertical.setValue(vertical * pLimitEyeLeftScaleV + pLimitEyeLeftOffsetV)
			end
			
			// view rotation
			if pControllerViewHorizontal != null
				pControllerViewHorizontal.setValue(eyeHorizontal)
				pControllerViewVertical.setValue(eyeVertical)
			end
			
			// look-at
			if pControllerLookAtPosition != null
				pControllerLookAtPosition.setVector(matrixEyes * Vector.new(0, 0, pLookAtDistance))
			end
			
			if pControllerLookAtRotation != null
				pControllerLookAtRotation.setRotation(rotation)
			end
		end
	end
	
	
	
	var MotionTransferEyes pTransfer
	var ECBehaviorVRPlayspace pVRPlayspace
	var ECBMoCapAnimator pMoCapAnimator
	var ECBTrackerSlot pSlotTracker
	var String pControllerNameRightHorizontal
	var String pControllerNameRightVertical
	var String pControllerNameLeftHorizontal
	var String pControllerNameLeftVertical
	var String pControllerNameViewHorizontal
	var String pControllerNameViewVertical
	var String pControllerNameLookAtPosition
	var String pControllerNameLookAtRotation
	
	
	
	/** Create behavior element class. */
	func new(BaseVRActorClass eclass, MotionTransferEyes transfer) super(eclass, transfer.getName())
		if transfer == null
			throw ENullPointer.new("transfer")
		end
		
		var String subId = "motionTransferEyes(" + transfer.getName() + ")"
		var String prefix = subId + "."
		
		pTransfer = transfer
		pVRPlayspace = eclass.getVRPlayspace()
		pMoCapAnimator = ECBMoCapAnimator.getBehaviorIn(eclass)
		if transfer.getTrackerSlot() != null
			pSlotTracker = ECBTrackerSlot.getBehaviorIn(eclass, transfer.getTracker())
		end
		
		pControllerNameRightHorizontal = transfer.getName() + ".rightHorizontal"
		pControllerNameRightVertical = transfer.getName() + ".rightVertical"
		pControllerNameLeftHorizontal = transfer.getName() + ".leftHorizontal"
		pControllerNameLeftVertical = transfer.getName() + ".leftVertical"
		pControllerNameViewHorizontal = transfer.getName() + ".viewHorizontal"
		pControllerNameViewVertical = transfer.getName() + ".viewVertical"
		pControllerNameLookAtPosition = transfer.getName() + ".lookAtPosition"
		pControllerNameLookAtRotation = transfer.getName() + ".lookAtRotation"
		
		eclass.addBehavior(this)
	end
	
	/** Dispose of behavior. */
	func void dispose()
		pVRPlayspace = null
		pTransfer = null
		pSlotTracker = null
		super.dispose()
	end
	
	
	
	/** Motion transfer. */
	func MotionTransferEyes getTransfer()
		return pTransfer
	end
	
	/** VR Playspace behavior. */
	func ECBehaviorVRPlayspace getVRPlayspace()
		return pVRPlayspace
	end
	
	/** Motion capture animator behavior. */
	func ECBMoCapAnimator getMoCapAnimator()
		return pMoCapAnimator
	end
	
	/** Tracker slot behavior or null. */
	func ECBTrackerSlot getSlotTracker()
		return pSlotTracker
	end
	
	/** Animator controller name right horizontal. */
	func String getControllerNameRightHorizontal()
		return pControllerNameRightHorizontal
	end
	
	/** Animator controller name right vertical. */
	func String getControllerNameRightVertical()
		return pControllerNameRightVertical
	end
	
	/** Animator controller name left horizontal. */
	func String getControllerNameLeftHorizontal()
		return pControllerNameLeftHorizontal
	end
	
	/** Animator controller name left vertical. */
	func String getControllerNameLeftVertical()
		return pControllerNameLeftVertical
	end
	
	/** Animator controller name view horizontal. */
	func String getControllerNameViewHorizontal()
		return pControllerNameViewHorizontal
	end
	
	/** Animator controller name view vertical. */
	func String getControllerNameViewVertical()
		return pControllerNameViewVertical
	end
	
	/** Animator controller name look-at position. */
	func String getControllerNameLookAtPosition()
		return pControllerNameLookAtPosition
	end
	
	/** Animator controller name look-at rotation. */
	func String getControllerNameLookAtRotation()
		return pControllerNameLookAtRotation
	end
	
	
	
	/** Get instance in element from owner element class. */
	func Instance instance( BehaviorElement element )
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/** Get behavior with slot name in element class or null if absent. */
	static func ECBMotionTransferEyes getBehaviorIn(BehaviorElementClass eclass, String slotName)
		return eclass.findBehavior(block ECBMotionTransferEyes each
			return each.getTransfer().getName().equals(slotName)
		end) cast ECBMotionTransferEyes
	end
	
	/** Get list of all behaviors in element. */
	static func Array getAllBehaviorsIn(BehaviorElementClass eclass)
		return eclass.collectBehaviors(block ECBMotionTransferEyes each
			return true
		end)
	end
	
	/** Get instance with slot name in element or null if absent. */
	static func Instance getInstanceIn(BehaviorElement element, String slotName)
		return element.findInstance(block Instance each
			return each.getECBehavior().getTransfer().getName().equals(slotName)
		end) cast Instance
	end
	
	/** Get list of all instances in element. */
	static func Array getAllInstancesIn(BehaviorElement element)
		return element.collectInstances(block Instance each
			return true
		end)
	end
	
	
	
	/** Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
