/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Behaviors

pin Democap.Characters
pin Democap.MotionTransferSystem

pin Dragengine.Commands
pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * Behavior for MotionTransferIK.
 */
class ECBMotionTransferIK extends DefaultECBehavior
	/** Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/** Update controllers. */
		class UpdateControllers extends ECBMoCapAnimator.DefaultListener
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func int requiredPhaseCount(ECBMoCapAnimator.Instance instance)
				return 4
			end
			
			func void updateControllers(ECBMoCapAnimator.Instance instance, float elapsed, int phase)
				select phase
				case 0
					pInstance.updateControllersPhase1()
					
				case 1
					pInstance.updateControllersPhase2()
					
				case 2
					pInstance.updateControllersPhase3()
					
				case 3
					pInstance.updateControllersPhase4()
				end
			end
		end
		
		
		
		var ECBMotionTransferIK pECBehavior
		var ECBehaviorVRPlayspace.Instance pVRPlayspace
		var ECBMoCapAnimator.Instance pMoCapAnimator
		var ECBTrackerSlot.Instance pSlotTip
		var ECBTrackerSlot.Instance pSlotGuide
		var ECBTrackerSlot.Instance pSlotRelocate
		var AnimatorController pControllerTipPosition
		var AnimatorController pControllerTipOrientation
		var AnimatorController pControllerGuideRotation
		var AnimatorController pControllerGuideBend
		var AnimatorController pControllerTwist
		var AnimatorController pControllerGuideTwistAxis
		var AnimatorController pControllerRetracted
		var AnimatorController pControllerBlend
		var AnimatorController pControllerPreRotate
		var AnimatorController pControllerBaseRotateX
		var AnimatorController pControllerBaseRotateY
		var Matrix pTransformTip
		var Quaternion pTransformTipQuat
		var Matrix pTransformGuide
		var Matrix pTransformRelocate
		var Matrix pMatrixRelocateTip
		var int pBaseBone
		var int pGuideBone
		var int pTipBone
		var int pPreRotateBone
		var int pBaseRotateBone
		var AnimatorInstance pAnimatorInstance
		var Component pComponent
		var int pTwistBone
		var Vector pScaleReach
		var Vector pScaleReachBack
		var Matrix pReachMatrix
		var Quaternion pTwistQuat, pTwistQuatInv
		var bool pEnableScaleReach
		var bool pEnableRelocateTip
		var bool pEnableTwist
		var Matrix pMatrixAdjustSlotComponent
		var Vector2 pBaseRotateRangeCenter
		var Vector2 pBaseRotateRangeMinimum
		var Vector2 pBaseRotateRangeMaximum
		var Vector pBaseRotateReach
		
		var Matrix pTargetMatrix, pGuideMatrix
		var Vector pReachTargetPosition, pReachRelativeTarget, pReachTargetRotation
		var Vector pReachRelativeGuide, pReachGuideRotation
		var float pRetractedLength
		var bool pReachScaleX, pReachScaleY, pReachScaleZ
		var bool pReachGuideScaleX, pReachGuideScaleY, pReachGuideScaleZ
		var Vector pGuideBaseTarget
		
		
		
		/** Create instance. */
		func new(ECBMotionTransferIK ecbehavior, BehaviorElement element) super(element)
			var MotionTransferIK transfer = ecbehavior.getTransfer()
			pECBehavior = ecbehavior
			
			pVRPlayspace = ecbehavior.getVRPlayspace().instance(element)
			pMoCapAnimator = ecbehavior.getMoCapAnimator().instance(element)
			
			pMatrixRelocateTip = transfer.getCalibrateMatrixRelocateTip()
			pScaleReach = transfer.getCalibrateReachScaleDirection() * transfer.getCalibrateReachScale()
			pScaleReachBack = transfer.getCalibrateReachScaleDirectionBack() * transfer.getCalibrateReachScale()
			pReachMatrix = Matrix.newRotation(transfer.getCalibrateReachRotation())
			
			pTwistQuat = Quaternion.newFromEuler(transfer.getCalibrateTwistBoneAxisRotation())
			pTwistQuatInv = pTwistQuat.conjugate()
			
			if ecbehavior.getSlotTip() != null
				pSlotTip = ecbehavior.getSlotTip().instance(element)
				pTransformTip = transfer.getTipTracker().getTransformMatrix()
				pTransformTipQuat = pTransformTip.toQuaternion()
			end
			
			if ecbehavior.getSlotGuide() != null
				pSlotGuide = ecbehavior.getSlotGuide().instance(element)
				pTransformGuide = transfer.getGuideTracker().getTransformMatrix()
				pGuideBaseTarget = transfer.getCalibrateGuideBaseTarget()
			end
			
			if ecbehavior.getSlotRelocate() != null
				pSlotRelocate = ecbehavior.getSlotRelocate().instance(element)
				pTransformRelocate = transfer.getRelocateTracker().getTransformMatrix()
			end
			
			pEnableRelocateTip = transfer.getRelocateTip() and pSlotRelocate != null
			
			pBaseRotateRangeCenter = transfer.getBaseRotateRangeCenter()
			pBaseRotateRangeMinimum = transfer.getBaseRotateRangeMinimum()
			pBaseRotateRangeMaximum = transfer.getBaseRotateRangeMaximum()
		end
		
		/** Dispose of instance. */
		func void dispose()
			pSlotGuide = null
			pSlotTip = null
			pVRPlayspace = null
			pMoCapAnimator = null
			super.dispose()
		end
		
		
		
		/** Init behavior instance. */
		func void init(StubElement stub)
			var ECBehaviorActorAnimated.Instance actorAnimated = pMoCapAnimator.getActorAnimated()
			var MotionTransferIK transfer = pECBehavior.getTransfer()
			
			pComponent = actorAnimated.getComponent().getComponent()
			
			pControllerTipPosition = actorAnimated.getControllerNamed(pECBehavior.getControllerNameTipPosition())
			pControllerTipOrientation = actorAnimated.getControllerNamed(pECBehavior.getControllerNameTipOrientation())
			pControllerGuideRotation = actorAnimated.getControllerNamed(pECBehavior.getControllerNameGuideRotation())
			pControllerGuideBend = actorAnimated.getControllerNamed(pECBehavior.getControllerNameGuideBend())
			pControllerRetracted = actorAnimated.getControllerNamed(pECBehavior.getControllerNameRetracted())
			pControllerTwist = actorAnimated.getControllerNamed(pECBehavior.getControllerNameTwist())
			pControllerGuideTwistAxis = actorAnimated.getControllerNamed(pECBehavior.getControllerNameGuideTwistAxis())
			pControllerBlend = actorAnimated.getControllerNamed(pECBehavior.getControllerNameBlend())
			pControllerPreRotate = actorAnimated.getControllerNamed(pECBehavior.getControllerNamePreRotate())
			pControllerBaseRotateX = actorAnimated.getControllerNamed(pECBehavior.getControllerNameBaseRotateX())
			pControllerBaseRotateY = actorAnimated.getControllerNamed(pECBehavior.getControllerNameBaseRotateY())
			
			pTwistBone = -1
			if not transfer.getTipBone().empty()
				pTwistBone = pComponent.indexOfBoneNamed(transfer.getTipBone())
			end
			
			pEnableTwist = pSlotTip != null and pControllerTwist != null and pTwistBone != -1
			
			pBaseBone = pComponent.indexOfBoneNamed(transfer.getBaseBone())
			pGuideBone = pComponent.indexOfBoneNamed(transfer.getGuideBone())
			pTipBone = pComponent.indexOfBoneNamed(transfer.getTipBone())
			
			if transfer.getCalibratePreRotateBone().empty()
				pPreRotateBone = -1
				
			else
				pPreRotateBone = pComponent.indexOfBoneNamed(transfer.getCalibratePreRotateBone())
			end
			
			if transfer.getCalibrateBaseRotateBone().empty()
				pBaseRotateBone = -1
				pEnableRelocateTip = false
				
			else
				pBaseRotateBone = pComponent.indexOfBoneNamed(transfer.getCalibrateBaseRotateBone())
			end
			
			pEnableScaleReach = pSlotTip != null and pBaseBone != -1 \
				and pControllerTipPosition != null and pControllerBlend != null
			
			pMoCapAnimator.addListener(UpdateControllers.new(this))
		end
		
		
		/** Behavior. */
		func ECBMotionTransferIK getECBehavior()
			return pECBehavior
		end
		
		/** VR Playspace. */
		func ECBehaviorVRPlayspace.Instance getVRPlayspace()
			return pVRPlayspace
		end
		
		/** Motion capture animator behavior. */
		func ECBMoCapAnimator.Instance getMoCapAnimator()
			return pMoCapAnimator
		end
		
		/** Tip slot behavior instance or null. */
		func ECBTrackerSlot.Instance getSlotTip()
			return pSlotTip
		end
		
		/** Guide slot behavior instance or null. */
		func ECBTrackerSlot.Instance getSlotGuide()
			return pSlotGuide
		end
		
		
		
		/** Update controllers. */
		func void updateControllersPhase1()
			// support tweaking
			var MotionTransferIK transfer = pECBehavior.getTransfer()
			pScaleReach = transfer.getCalibrateReachScaleDirection() * transfer.getCalibrateReachScale()
			pScaleReachBack = transfer.getCalibrateReachScaleDirectionBack() * transfer.getCalibrateReachScale()
			
			if pControllerBaseRotateX != null
				pBaseRotateReach = transfer.getCalibrateReachScaleDirection().largest(\
					transfer.getCalibrateReachScaleDirectionBack()) * transfer.getCalibrateReach()\
						* transfer.getCalibrateBaseRotateReachFactor()
			end
			
			// target matrix
			pTargetMatrix = pSlotTip.getTrackerSlot().getConfiguration().\
				characterToComponent(pTransformTip * pSlotTip.getMatrixCharacter())
			
			// guide matrix
			if pSlotGuide != null
				pGuideMatrix = pSlotGuide.getTrackerSlot().getConfiguration().\
					characterToComponent(pTransformGuide * pSlotGuide.getMatrixCharacter())
			end
			
			// reset controllers and disable IK to get base pose for next phase
			if pControllerBlend != null
				pControllerBlend.setValue(0)
			end
			if pControllerTwist != null
				pControllerTwist.setValue(0)
			end
			if pControllerPreRotate != null
				pControllerPreRotate.setValue(0)
				pControllerPreRotate.setVector(Vector.new())
			end
			if pControllerGuideRotation != null
				pControllerGuideRotation.setValue(0)
				pControllerGuideRotation.setRotation(Vector.new())
			end
			if pControllerGuideBend != null
				pControllerGuideBend.setValue(0)
			end
			if pControllerBaseRotateX != null
				pControllerBaseRotateX.setValue(0)
			end
			if pControllerBaseRotateY != null
				pControllerBaseRotateY.setValue(0)
			end
		end
		
		func void updateControllersPhase2()
			prepareReach()
			updateControllerBaseRotate()
			updateControllerGuide()
			
			if pControllerGuideBend != null
				pControllerGuideBend.setValue(1)
			end
		end
		
		func void updateControllersPhase3()
			if pControllerBlend != null
				pControllerBlend.setValue(1)
			end
			
			if pControllerGuideRotation != null
				updateControllerPreRotateGuide()
				
			else
				updateControllerPreRotate()
			end

			updateControllerIK()
		end
		
		func void updateControllersPhase4()
			updateControllersTwist()
		end
		
		
		protected func void prepareReach()
			var Matrix matrix = pTargetMatrix
			var Matrix matrixGuide = pGuideMatrix
			
			if pEnableRelocateTip and pBaseRotateBone != -1
				var Matrix matrixRelocate = pSlotRelocate.getTrackerSlot().getConfiguration().\
					characterToComponent(pTransformRelocate * pSlotRelocate.getMatrixCharacter())
				var Matrix matrixBone = pMatrixRelocateTip * pComponent.boneGetMatrix(pBaseRotateBone)
				
				matrix = matrix * matrixRelocate.getInverse() * matrixBone
				
				if matrixGuide != null
					matrixGuide = matrixGuide * matrixRelocate.getInverse() * matrixBone
				end
// 					if pECBehavior.getTransfer().getName().findString("ArmRight") != -1
// 						GameApp.getGameApp().getConsole().addMessage(\
// 							"IK tp=" + (pTargetMatrix * matrixRelocate.getInverse()).getPosition()\
// 							+ " btp=" + matrix.getPosition()\
// 							+ " b=" + pComponent.boneGetMatrix(pBaseRotateBone).getPosition()\
// 							+ " wa=" + matrixBone.getViewVector())
// 					end
			end
			
			pReachTargetRotation = matrix.getEulerAngles()
			pReachTargetPosition = matrix.getPosition()
			pRetractedLength = 1
			
			var Matrix reachMatrix = pReachMatrix * pComponent.boneGetMatrix(pBaseBone)
			
			pReachRelativeTarget = reachMatrix.getInverse() * pReachTargetPosition
			
			if matrixGuide != null
				pReachGuideRotation = matrixGuide.getEulerAngles()
				matrixGuide = matrixGuide * reachMatrix.getInverse()
				pReachRelativeGuide = matrixGuide.getPosition()
			end
// 			if pECBehavior.getTransfer().getName().findString("ArmRight") != -1
// 				GameApp.getGameApp().getConsole().addMessage("IK tp=" + pReachTargetPosition + " tir=" + pReachRelativeTarget)
// 			end
			
			if pEnableScaleReach
				pReachScaleX = pReachRelativeTarget.getX() > 0
				pReachScaleY = pReachRelativeTarget.getY() > 0
				pReachScaleZ = pReachRelativeTarget.getZ() > 0
				
				pReachRelativeTarget = pReachRelativeTarget.compMultiply(pScaleReach).combine(\
					pReachRelativeTarget.compMultiply(pScaleReachBack),\
					pReachScaleX, pReachScaleY, pReachScaleZ)
				
// 				if pECBehavior.getTransfer().getName().findString("ArmRight") != -1
// 					GameApp.getGameApp().getConsole().addMessage("IK2 tir=" + pReachRelativeTarget\
// 						+ " pos=" + pReachRelativeTarget.compMultiply(pScaleReach)\
// 						+ " neg=" + pReachRelativeTarget.compMultiply(pScaleReachBack))
// 				end
				
				pReachTargetPosition = reachMatrix * pReachRelativeTarget
// 				if pECBehavior.getTransfer().getName().findString("ArmRight") != -1
// 					GameApp.getGameApp().getConsole().addMessage("IK3 tp=" + pReachTargetPosition)
// 				end
				
				pRetractedLength = pReachRelativeTarget.getLength()
				
				if matrixGuide != null
					pReachGuideScaleX = pReachRelativeGuide.getX() > 0
					pReachGuideScaleY = pReachRelativeGuide.getY() > 0
					pReachGuideScaleZ = pReachRelativeGuide.getZ() > 0
					
					var Vector orgTarget = pReachRelativeGuide

					pReachRelativeGuide = pReachRelativeGuide.compMultiply(pScaleReach).combine(\
						pReachRelativeGuide.compMultiply(pScaleReachBack),\
						pReachGuideScaleX, pReachGuideScaleY, pReachGuideScaleZ)
					
					if not orgTarget.isZero() and not pReachRelativeGuide.isZero()
						orgTarget = orgTarget.normalize()
						var Vector newTarget = pReachRelativeGuide.normalize()

						var Vector rotationAxis = orgTarget % newTarget
						if rotationAxis.getLength() > 0.001 // too low explodes the calculation
								/*
								GameApp.getGameApp().getConsole().addMessage(pECBehavior.getTransfer().getName() + " org=" + orgTarget + " sca=" + newTarget\
									+ " axis=" + rotationAxis.normalize() + " ang=" + (-DEMath.acos(orgTarget * newTarget)))
								*/
							matrixGuide = matrixGuide * Matrix.newRotationAxis(\
								rotationAxis.normalize(), -DEMath.acos(orgTarget * newTarget))
							
							matrixGuide = matrixGuide * reachMatrix
							pReachGuideRotation = matrixGuide.normalize().getEulerAngles()
						end
					end
				end
			end
		end
		
		protected func void updateControllerBaseRotate()
			if pControllerBaseRotateX == null or pControllerBaseRotateY == null or pBaseBone == -1
				return
			end
			
			var Vector target
			
			if pReachRelativeGuide != null and pControllerGuideRotation != null
				target = pReachRelativeGuide
				
			else
				target = pReachRelativeTarget
			end
			
			if target.getLength() < 0.01
				return
			end
			
			var float angleX = DEMath.atan2(target.getY(), Vector2.new(target.getX(), target.getZ()).getLength())
			var float angleY = -DEMath.atan2(target.getX(), target.getZ())
			
			var Vector targetAbs = target.absolute()
			
			var float factorX = DEMath.smoothStep(targetAbs.getX(), 0.0, pBaseRotateReach.getX(), 1.0, 0.0)
// 			var float factorX = DEMath.linearStep(targetAbs.getX(), 0.0, pBaseRotateReach.getX())
// 			factorX = 1.0 - (factorX * factorX)
			
			var float factorY = DEMath.smoothStep(targetAbs.getY(), 0.0, pBaseRotateReach.getY(), 1.0, 0.0)
// 			var float factorY = DEMath.linearStep(targetAbs.getY(), 0.0, pBaseRotateReach.getY())
// 			factorY = 1.0 - (factorY * factorY)
			
			/*
			GameApp.getGameApp().getConsole().addMessage(pECBehavior.getTransfer().getName() + ": t=" + target\
				+ " ax=" + angleX + " ay=" + angleY + " fx=" + factorX + " fy=" + factorY\
				+ " P=" + pGuideMatrix.getPosition() + " brr=" + pBaseRotateReach + " ta=" + targetAbs)
			*/

			pControllerBaseRotateX.setValue(angleX * factorX)
			pControllerBaseRotateY.setValue(angleY * factorY)
		end
		
		protected func void updateControllerPreRotate()
			if pControllerPreRotate == null or pPreRotateBone == -1 or pTipBone == -1 or pBaseBone == -1 or pSlotTip == null
				return
			end
			
			var Vector basePos = pComponent.boneGetMatrix(pPreRotateBone).getPosition()
			var Vector tipPos = pComponent.boneGetMatrix(pTipBone).getPosition()
			
			var Vector tipVector = tipPos - basePos
			var Vector targetVector = pReachTargetPosition - basePos
			
			if tipVector.isZero() or targetVector.isZero()
				return
			end
			
			tipVector = tipVector.normalize()
			targetVector = targetVector.normalize()
			
			var Vector rotationAxis = tipVector % targetVector
			if rotationAxis.getLength() < 0.001 // too low explodes the calculation
				return
			end
			
			pControllerPreRotate.setRotation(Matrix.newVU(rotationAxis, tipVector).getEulerAngles())
			pControllerPreRotate.setValue(-DEMath.acos(tipVector * targetVector))
		end
		
		protected func void updateControllerPreRotateGuide()
			// if no tracker device is used to drive the guide bone the pre-rotation takes care to rotate
			// the base bone to line up the tip with the tip tracking device. if the base ik move is
			// properly created this creates a slightly bend bone chain which the IK can work with well.
			// in the case of having a guide bone the base bone is in the final position but the following
			// bone towards the tip is bend according to the base ik move. if the actor stretches his arm
			// or leg fully this causes the IK calculation potentially lines up the following bone with
			// the guide bone ending up in a singularity case. this depends on the IK algorithm. as a
			// counter measure for this the guide bone is rotated back by using the following bone position
			// as target and the chain tip position. this way a similar bend bone situation is produced
			// as without tracker device while still respecting the orientation obtained from the tracker
			if pControllerPreRotate == null or pPreRotateBone == -1 or pGuideBone == -1 or pTipBone == -1
				return
			end
			
			//var Vector targetPos = pComponent.boneGetMatrix(pPreRotateBone).getPosition()
			var Vector basePos = pComponent.boneGetMatrix(pGuideBone).getPosition()
			var Vector tipPos = pComponent.boneGetMatrix(pTipBone).getPosition()
			
			var Vector tipVector = tipPos - basePos
			//var Vector targetVector = targetPos - basePos
			var Vector targetVector = pReachTargetPosition - basePos
			
			if tipVector.isZero() or targetVector.isZero()
				return
			end
			
			tipVector = tipVector.normalize()
			targetVector = targetVector.normalize()
			
			var Vector rotationAxis = tipVector % targetVector
			if rotationAxis.getLength() < 0.001 // too low explodes the calculation
				return
			end
			
			pControllerPreRotate.setRotation(Matrix.newVU(rotationAxis, tipVector).getEulerAngles())
			
			var float angle = -DEMath.acos(tipVector * targetVector)
			//pControllerPreRotate.setValue(angle > 0 if 20 else -20)
			pControllerPreRotate.setValue(angle)
		end

		protected func void updateControllerIK()
			if pControllerTipPosition == null or pControllerTipOrientation == null or pSlotTip == null or pBaseBone == -1
				return
			end
			
			// update controllers
			if pControllerTipPosition != null
				pControllerTipPosition.setVector(pReachTargetPosition)
			end
			if pControllerTipOrientation != null
				pControllerTipOrientation.setRotation(pReachTargetRotation)
			end
			if pControllerRetracted != null
				pControllerRetracted.setValue(pRetractedLength)
			end
			
			// adjust slot component if required
			adjustSlotComponentPosition(pReachTargetPosition, pReachTargetRotation)
		end
		
		protected func void updateControllerGuide()
			if pSlotGuide == null
				return
			end
			
			if pControllerGuideRotation != null
				pControllerGuideRotation.setRotation(pReachGuideRotation)
				pControllerGuideRotation.setValue(1)
			end
		end
		
		protected func void updateControllersTwist()
			if not pEnableTwist
				return
			end
			
			//pControllerTwist.setValue(pComponent.boneGetRotation(pTwistBone).getEulerAngles().getZ())
			
			var Quaternion orientation = pTwistQuat * pComponent.boneGetRotation(pTwistBone) * pTwistQuatInv
//			pControllerTwist.setValue(orientation.getEulerAngles().getZ())
			
			var float factor = 0.5
			var float rotation = (orientation.slerp(Quaternion.new(), factor)).getEulerAngles().getZ() / factor
			
			pControllerTwist.setValue(rotation)
			
			if pControllerGuideTwistAxis != null and pTipBone != -1 and pGuideBone != -1
				var Vector axis = pComponent.boneGetMatrix(pTipBone).getPosition()\
					- pComponent.boneGetMatrix(pGuideBone).getPosition()
				if not axis.isZero()
					var Vector view = axis.normalize()
					var Vector up
					if DEMath.fabs(view.getY()) > DEMath.max(DEMath.fabs(view.getX()), DEMath.fabs(view.getZ()))
						up = Vector.new(0, 0, 1)
					else
						up = Vector.new(0, 1, 0)
					end
					pControllerGuideTwistAxis.setRotation(Matrix.newVU(view, up).getEulerAngles())
				end
			end
		end
		
		protected func void adjustSlotComponentPosition(Vector position, Vector rotation)
			if pMatrixAdjustSlotComponent == null or pSlotTip == null
				return
			end
			
			var CharacterConfiguration config = pSlotTip.getTrackerSlot().getConfiguration()
			pSlotTip.setComponentFromMatrixCharacter(pMatrixAdjustSlotComponent\
				* config.componentToCharacter(Matrix.newRT(rotation, position)))
		end
		
		
		
		/** Element added to game world. */
		func void addToGameWorld()
			// slot input device is valid only once the tracker slot processed addToGameWorld
			if pSlotTip != null\
			and pSlotTip.getInputDevice() != null\
			and pSlotTip.getComponent() != null\
			and (pSlotTip.getInputDevice().getType() == InputDeviceType.vrRightHand\
			or pSlotTip.getInputDevice().getType() == InputDeviceType.vrLeftHand)
				pMatrixAdjustSlotComponent = pECBehavior.getTransfer().getTipTracker().getReverseTransformMatrix()
			end
		end
	end
	
	
	
	var MotionTransferIK pTransfer
	var ECBehaviorVRPlayspace pVRPlayspace
	var ECBMoCapAnimator pMoCapAnimator
	var ECBTrackerSlot pSlotTip
	var ECBTrackerSlot pSlotGuide
	var ECBTrackerSlot pSlotRelocate
	var String pControllerNameTipPosition
	var String pControllerNameTipOrientation
	var String pControllerNameGuideRotation
	var String pControllerNameGuideBend
	var String pControllerNameTwist
	var String pControllerNameGuideTwistAxis
	var String pControllerNameRetracted
	var String pControllerNameBlend
	var String pControllerNamePreRotate
	var String pControllerNameBaseRotateX
	var String pControllerNameBaseRotateY
	
	
	
	/** Create behavior element class. */
	func new(BaseVRActorClass eclass, MotionTransferIK transfer) \
	super(eclass, transfer.getName())
		if transfer == null
			throw ENullPointer.new("transfer")
		end
		
		pTransfer = transfer
		pVRPlayspace = eclass.getVRPlayspace()
		pMoCapAnimator = ECBMoCapAnimator.getBehaviorIn(eclass)
		if transfer.getTipTracker() != null
			pSlotTip = ECBTrackerSlot.getBehaviorIn(eclass, transfer.getTipTracker().getSlot())
		end
		if transfer.getGuideTracker() != null
			pSlotGuide = ECBTrackerSlot.getBehaviorIn(eclass, transfer.getGuideTracker().getSlot())
		end
		if transfer.getRelocateTracker() != null
			pSlotRelocate = ECBTrackerSlot.getBehaviorIn(eclass, transfer.getRelocateTracker().getSlot())
		end
		
		pControllerNameTipPosition = transfer.getName() + ".targetPosition"
		pControllerNameTipOrientation = transfer.getName() + ".targetOrientation"
		pControllerNameGuideRotation = transfer.getName() + ".guideRotation"
		pControllerNameGuideBend = transfer.getName() + ".guideBend"
		pControllerNameTwist = transfer.getName() + ".twist"
		pControllerNameGuideTwistAxis = transfer.getName() + ".guideTwistAxis"
		pControllerNameRetracted = transfer.getName() + ".retracted"
		pControllerNameBlend = transfer.getName() + ".blend"
		pControllerNamePreRotate = transfer.getName() + ".preRotate"
		pControllerNameBaseRotateX = transfer.getName() + ".baseRotateX"
		pControllerNameBaseRotateY = transfer.getName() + ".baseRotateY"
		
		eclass.addBehavior(this)
	end
	
	/** Dispose of behavior. */
	func void dispose()
		pVRPlayspace = null
		pMoCapAnimator = null
		pTransfer = null
		pSlotRelocate = null
		pSlotGuide = null
		pSlotTip = null
		super.dispose()
	end
	
	
	
	/** Motion transfer. */
	func MotionTransferIK getTransfer()
		return pTransfer
	end
	
	/** VR Playspace behavior. */
	func ECBehaviorVRPlayspace getVRPlayspace()
		return pVRPlayspace
	end
	
	/** Motion capture animator behavior. */
	func ECBMoCapAnimator getMoCapAnimator()
		return pMoCapAnimator
	end
	
	/** Tip slot behavior or null. */
	func ECBTrackerSlot getSlotTip()
		return pSlotTip
	end
	
	/** Guide slot behavior or null. */
	func ECBTrackerSlot getSlotGuide()
		return pSlotGuide
	end
	
	/** Relocate slot behavior or null. */
	func ECBTrackerSlot getSlotRelocate()
		return pSlotRelocate
	end
	
	/** Animator controller name. */
	func String getControllerNameTipPosition()
		return pControllerNameTipPosition
	end
	
	func String getControllerNameTipOrientation()
		return pControllerNameTipOrientation
	end
	
	func String getControllerNameGuideRotation()
		return pControllerNameGuideRotation
	end
	
	func String getControllerNameGuideBend()
		return pControllerNameGuideBend
	end
	
	func String getControllerNameTwist()
		return pControllerNameTwist
	end
	
	func String getControllerNameGuideTwistAxis()
		return pControllerNameGuideTwistAxis
	end
	
	func String getControllerNameRetracted()
		return pControllerNameRetracted
	end
	
	func String getControllerNameBlend()
		return pControllerNameBlend
	end
	
	func String getControllerNamePreRotate()
		return pControllerNamePreRotate
	end
	
	func String getControllerNameBaseRotateX()
		return pControllerNameBaseRotateX
	end
	
	func String getControllerNameBaseRotateY()
		return pControllerNameBaseRotateY
	end
	
	
	
	/** Get instance in element from owner element class. */
	func Instance instance( BehaviorElement element )
		return element.getInstanceAt( this.getInstanceIndex() ) cast Instance
	end
	
	
	
	/** Get behavior with slot name in element class or null if absent. */
	static func ECBMotionTransferIK getBehaviorIn(BehaviorElementClass eclass, String slotName)
		return eclass.findBehavior(block ECBMotionTransferIK each
			return each.getTransfer().getName().equals(slotName)
		end) cast ECBMotionTransferIK
	end
	
	/** Get list of all behaviors in element. */
	static func Array getAllBehaviorsIn(BehaviorElementClass eclass)
		return eclass.collectBehaviors(block ECBMotionTransferIK each
			return true
		end)
	end
	
	/** Get instance with slot name in element or null if absent. */
	static func Instance getInstanceIn(BehaviorElement element, String slotName)
		return element.findInstance(block Instance each
			return each.getECBehavior().getTransfer().getName().equals(slotName)
		end) cast Instance
	end
	
	/** Get list of all instances in element. */
	static func Array getAllInstancesIn(BehaviorElement element)
		return element.collectInstances(block Instance each
			return true
		end)
	end
	
	
	
	/** Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
