/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Behaviors

pin Democap.MotionTransferSystem

pin Dragengine.Commands
pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * Behavior for MotionTransferIK.
 */
class ECBMotionTransferIK extends DefaultECBehavior
	/** Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/** Update controllers. */
		class UpdateControllers extends ECBMoCapAnimator.DefaultListener
			private var Instance pInstance
			
			public func new(Instance instance)
				pInstance = instance
			end
			
			public func int requiredPhaseCount(ECBMoCapAnimator.Instance instance)
				return pInstance.requiredPhaseCount()
			end
			
			public func void updateControllers(ECBMoCapAnimator.Instance instance, float elapsed, int phase)
				select phase
				case 0
					pInstance.updateControllersPhase1()
					
				case 1
					pInstance.updateControllersPhase2()
				end
			end
		end
		
		
		
		private var ECBMotionTransferIK pECBehavior
		private var ECBehaviorVRPlayspace.Instance pVRPlayspace
		private var ECBMoCapAnimator.Instance pMoCapAnimator
		private var ECBTrackerSlot.Instance pSlotTip
		private var ECBTrackerSlot.Instance pSlotGuide
		private var ECBTrackerSlot.Instance pSlotBase
		private var AnimatorController pControllerTipPosition
		private var AnimatorController pControllerTipOrientation
		private var AnimatorController pControllerGuidePosition
		private var AnimatorController pControllerGuideUp
		private var AnimatorController pControllerTwist
		private var AnimatorController pControllerRetracted
		private var Matrix pTransformTip
		private var Quaternion pTransformTipQuat
		private var Matrix pTransformGuide
		private var Matrix pTransformBase
		private var Vector pGuideUp
		private var Vector pTipOffset
		private var AnimatorInstance pAnimatorInstance
		private var Component pComponent
		private var int pTwistBone
		private var float pScaleReach
		private var Matrix pTwistMat
		private var Matrix pTwistMatInv
		private var Quaternion pTwistQuat, pTwistQuatInv
		
		
		
		/** Create instance. */
		public func new(ECBMotionTransferIK ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			
			pVRPlayspace = ecbehavior.getVRPlayspace().instance(element)
			pMoCapAnimator = ecbehavior.getMoCapAnimator().instance(element)
			
			pTipOffset = ecbehavior.getTransfer().getCalibrateTipOffset()
			pScaleReach = ecbehavior.getTransfer().getCalibrateReachScale()
			
			pTwistQuat = Quaternion.newFromEuler(ecbehavior.getTransfer().getCalibrateTwistBoneAxisRotation())
			pTwistQuatInv = pTwistQuat.conjugate()
			
			if ecbehavior.getSlotTip() != null
				pSlotTip = ecbehavior.getSlotTip().instance(element)
				pTransformTip = ecbehavior.getTransfer().getTipTracker().getTransformMatrix()
				pTransformTipQuat = pTransformTip.normalize().toQuaternion()
			end
			
			if ecbehavior.getSlotGuide() != null
				pSlotGuide = ecbehavior.getSlotGuide().instance(element)
				pTransformGuide = ecbehavior.getTransfer().getGuideTracker().getTransformMatrix()
				pGuideUp = MotionTransferIK.trackToVectorFromAxis(ecbehavior.getTransfer().getCalibrateGuideUpAxis())
			end
			
			if ecbehavior.getSlotBase() != null
				pSlotBase = ecbehavior.getSlotBase().instance(element)
				pTransformBase = ecbehavior.getTransfer().getBaseTracker().getTransformMatrix()
				
				pTwistMat = Matrix.newRotation(ecbehavior.getTransfer().getTwistAxisRotation()) \
					* pSlotBase.getTrackerSlot().getCalibrateMatrixInverse().normalize().getRotation()
				
			else
				pTwistMat = Matrix.newRotation(ecbehavior.getTransfer().getTwistAxisRotation())
			end
			
			pTwistMatInv = pTwistMat.getInverse()
		end
		
		/** Dispose of instance. */
		public func void dispose()
			pSlotGuide = null
			pSlotTip = null
			pSlotBase = null
			pVRPlayspace = null
			pMoCapAnimator = null
			super.dispose()
		end
		
		
		
		/** Init behavior instance. */
		public func void init(StubElement stub)
			var ECBehaviorActorAnimated.Instance actorAnimated = pMoCapAnimator.getActorAnimated()
			pComponent = actorAnimated.getComponent().getComponent()
			
			pTwistBone = -1
			if not pECBehavior.getTransfer().getTipBone().empty()
				pTwistBone = pComponent.indexOfBoneNamed(pECBehavior.getTransfer().getTipBone())
			end
			
			pControllerTipPosition = actorAnimated.getControllerNamed(pECBehavior.getControllerNameTipPosition())
			pControllerTipOrientation = actorAnimated.getControllerNamed(pECBehavior.getControllerNameTipOrientation())
			pControllerGuidePosition = actorAnimated.getControllerNamed(pECBehavior.getControllerNameGuidePosition())
			pControllerGuideUp = actorAnimated.getControllerNamed(pECBehavior.getControllerNameGuideUp())
			pControllerRetracted = actorAnimated.getControllerNamed(pECBehavior.getControllerNameRetracted())
			pControllerTwist = actorAnimated.getControllerNamed(pECBehavior.getControllerNameTwist())
			
			pMoCapAnimator.addListener(UpdateControllers.new(this))
		end
		
		
		/** Behavior. */
		public func ECBMotionTransferIK getECBehavior()
			return pECBehavior
		end
		
		/** VR Playspace. */
		public func ECBehaviorVRPlayspace.Instance getVRPlayspace()
			return pVRPlayspace
		end
		
		/** Motion capture animator behavior. */
		public func ECBMoCapAnimator.Instance getMoCapAnimator()
			return pMoCapAnimator
		end
		
		/** Tip slot behavior instance or null. */
		public func ECBTrackerSlot.Instance getSlotTip()
			return pSlotTip
		end
		
		/** Guide slot behavior instance or null. */
		public func ECBTrackerSlot.Instance getSlotGuide()
			return pSlotGuide
		end
		
		/** Base slot behavior instance or null. */
		public func ECBTrackerSlot.Instance getSlotBase()
			return pSlotBase
		end
		
		/** Animator controller target position. */
		public func AnimatorController getControllerTipPosition()
			return pControllerTipPosition
		end
		
		/** Animator controller target orientation. */
		public func AnimatorController getControllerTipOrientation()
			return pControllerTipOrientation
		end
		
		/** Animator controller guide position. */
		public func AnimatorController getControllerGuidePosition()
			return pControllerGuidePosition
		end
		
		/** Animator controller guide up. */
		public func AnimatorController getControllerGuideUp()
			return pControllerGuideUp
		end
		
		
		
		/** Internal use. */
		public func int requiredPhaseCount()
			if pSlotTip != null and pControllerTwist != null and pTwistBone != -1
				return 2
				
			else
				return 1
			end
		end
		
		/** Update controllers. */
		public func void updateControllersPhase1()
			if pSlotTip != null
				var Matrix matrix = pTransformTip * pSlotTip.getMatrixCharacter()
				
				if pControllerTipPosition != null
					var Vector targetPosition = matrix.getPosition() + pTipOffset
					
					var Matrix baseMatrix
					var Vector basePosition
					if pSlotBase != null
						baseMatrix = pTransformBase * pSlotBase.getMatrixCharacter()
						basePosition = baseMatrix.getPosition() + pTipOffset
						
						targetPosition = basePosition + (targetPosition - basePosition) * pScaleReach
						
						if pControllerRetracted != null
							pControllerRetracted.setValue((targetPosition - basePosition).getLength())
						end
					end
					
					pControllerTipPosition.setVector(targetPosition)
				end
				
				if pControllerTipOrientation != null
					pControllerTipOrientation.setRotation(matrix.normalize().getEulerAngles())
				end
				
				if pControllerTwist != null
					pControllerTwist.setValue(0)
				end
			end
			
			if pSlotGuide != null
				var Matrix matrix = pTransformGuide * pSlotGuide.getMatrixCharacter()
				
				if pControllerGuidePosition != null
					pControllerGuidePosition.setVector(matrix.getPosition() + pTipOffset)
				end
				if pControllerGuideUp != null
					pControllerGuideUp.setVector(matrix.normalize().transformNormal(pGuideUp))
				end
			end
		end
		
		public func void updateControllersPhase2()
			if pSlotTip != null and pControllerTwist != null and pTwistBone != -1
				//pControllerTwist.setValue(pComponent.boneGetRotation(pTwistBone).getEulerAngles().getZ())
				
				var Quaternion orientation = pTwistQuat * pComponent.boneGetRotation(pTwistBone) * pTwistQuatInv
// 				pControllerTwist.setValue(orientation.getEulerAngles().getZ())
				
				var float factor = 0.5
				var float rotation = (orientation.slerp(Quaternion.new(), factor)).getEulerAngles().getZ() / factor
				
				pControllerTwist.setValue(rotation)
				
// 				GameApp.getGameApp().getConsole().addMessage("Phase2 " + pECBehavior.getTransfer().getName() \
// 					+ " " + pControllerTwist.getValue() + " " + pComponent.boneGetName(pTwistBone))
			end
		end
	end
	
	
	
	private var MotionTransferIK pTransfer
	private var ECBehaviorVRPlayspace pVRPlayspace
	private var ECBMoCapAnimator pMoCapAnimator
	private var ECBTrackerSlot pSlotTip
	private var ECBTrackerSlot pSlotGuide
	private var ECBTrackerSlot pSlotBase
	private var String pControllerNameTipPosition
	private var String pControllerNameTipOrientation
	private var String pControllerNameGuidePosition
	private var String pControllerNameGuideUp
	private var String pControllerNameTwist
	private var String pControllerNameRetracted
	
	
	
	/** Create behavior element class. */
	public func new(BaseVRActorClass eclass, MotionTransferIK transfer) \
	super(eclass, transfer.getName())
		if transfer == null
			throw ENullPointer.new("transfer")
		end
		
		var String subId = "motionTransferIK(" + transfer.getName() + ")"
		var String prefix = subId + "."
		
		pTransfer = transfer
		pVRPlayspace = eclass.getVRPlayspace()
		pMoCapAnimator = ECBMoCapAnimator.getBehaviorIn(eclass)
		if transfer.getTipTracker() != null
			pSlotTip = ECBTrackerSlot.getBehaviorIn(eclass, transfer.getTipTracker().getSlot())
		end
		if transfer.getGuideTracker() != null
			pSlotGuide = ECBTrackerSlot.getBehaviorIn(eclass, transfer.getGuideTracker().getSlot())
		end
		if transfer.getBaseTracker() != null
			pSlotBase = ECBTrackerSlot.getBehaviorIn(eclass, transfer.getBaseTracker().getSlot())
		end
		
		pControllerNameTipPosition = transfer.getName() + ".targetPosition"
		pControllerNameTipOrientation = transfer.getName() + ".targetOrientation"
		pControllerNameGuidePosition = transfer.getName() + ".guideTrack"
		pControllerNameGuideUp = transfer.getName() + ".guideUp"
		pControllerNameTwist = transfer.getName() + ".twist"
		pControllerNameRetracted = transfer.getName() + ".retracted"
		
		eclass.addBehavior(this)
	end
	
	/** Dispose of behavior. */
	public func void dispose()
		pVRPlayspace = null
		pMoCapAnimator = null
		pTransfer = null
		pSlotGuide = null
		pSlotTip = null
		pSlotBase = null
		super.dispose()
	end
	
	
	
	/** Motion transfer. */
	public func MotionTransferIK getTransfer()
		return pTransfer
	end
	
	/** VR Playspace behavior. */
	public func ECBehaviorVRPlayspace getVRPlayspace()
		return pVRPlayspace
	end
	
	/** Motion capture animator behavior. */
	public func ECBMoCapAnimator getMoCapAnimator()
		return pMoCapAnimator
	end
	
	/** Tip slot behavior or null. */
	public func ECBTrackerSlot getSlotTip()
		return pSlotTip
	end
	
	/** Guide slot behavior or null. */
	public func ECBTrackerSlot getSlotGuide()
		return pSlotGuide
	end
	
	/** Base slot behavior or null. */
	public func ECBTrackerSlot getSlotBase()
		return pSlotBase
	end
	
	/** Animator controller name target position. */
	public func String getControllerNameTipPosition()
		return pControllerNameTipPosition
	end
	
	/** Animator controller name target orientation. */
	public func String getControllerNameTipOrientation()
		return pControllerNameTipOrientation
	end
	
	/** Animator controller name guide position. */
	public func String getControllerNameGuidePosition()
		return pControllerNameGuidePosition
	end
	
	/** Animator controller name guide up. */
	public func String getControllerNameGuideUp()
		return pControllerNameGuideUp
	end
	
	/** Animator controller name twist. */
	public func String getControllerNameTwist()
		return pControllerNameTwist
	end
	
	/** Animator controller name retracted. */
	public func String getControllerNameRetracted()
		return pControllerNameRetracted
	end
	
	
	
	/** Get instance in element from owner element class. */
	public func Instance instance( BehaviorElement element )
		return element.getInstanceAt( this.getInstanceIndex() ) cast Instance
	end
	
	
	
	/** Get behavior with slot name in element class or null if absent. */
	static public func ECBMotionTransferIK getBehaviorIn(BehaviorElementClass eclass, String slotName)
		return eclass.findBehavior(block ECBMotionTransferIK each
			return each.getTransfer().getName().equals(slotName)
		end) cast ECBMotionTransferIK
	end
	
	/** Get list of all behaviors in element. */
	static public func Array getAllBehaviorsIn(BehaviorElementClass eclass)
		return eclass.collectBehaviors(block ECBMotionTransferIK each
			return true
		end)
	end
	
	/** Get instance with slot name in element or null if absent. */
	static public func Instance getInstanceIn(BehaviorElement element, String slotName)
		return element.findInstance(block Instance each
			return each.getECBehavior().getTransfer().getName().equals(slotName)
		end) cast Instance
	end
	
	/** Get list of all instances in element. */
	static public func Array getAllInstancesIn(BehaviorElement element)
		return element.collectInstances(block Instance each
			return true
		end)
	end
	
	
	
	/** Create Behavior instance. */
	public func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
