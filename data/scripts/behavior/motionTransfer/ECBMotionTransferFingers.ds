/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Behaviors

pin Democap.MotionTransferSystem

pin Dragengine.Commands
pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * Behavior for MotionTransferFingers.
 */
class ECBMotionTransferFingers extends DefaultECBehavior
	/** Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/** Update controllers. */
		class UpdateControllers extends ECBMoCapAnimator.DefaultListener
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func void updateControllers(ECBMoCapAnimator.Instance instance, float elapsed, int phase)
				if phase == 0
					pInstance.updateControllers()
				end
			end
		end
		
		
		
		var ECBMotionTransferFingers pECBehavior
		var ECBehaviorVRPlayspace.Instance pVRPlayspace
		var ECBMoCapAnimator.Instance pMoCapAnimator
		var ECBTrackerSlot.Instance pSlotTracker
		var AnimatorController pControllerThumb, pControllerThumb2, pControllerThumb3
		var AnimatorController pControllerIndex, pControllerIndex2, pControllerIndex3
		var AnimatorController pControllerMiddle, pControllerMiddle2, pControllerMiddle3
		var AnimatorController pControllerRing, pControllerRing2, pControllerRing3
		var AnimatorController pControllerPinky, pControllerPinky2, pControllerPinky3
		var InputDevice pInputDevice
		var InputDeviceAxis pInputAxisThumb, pInputAxisIndex, pInputAxisMiddle, pInputAxisRing, pInputAxisPinky
		var bool pComplexMode
		
		
		
		/** Create instance. */
		func new(ECBMotionTransferFingers ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			
			pVRPlayspace = ecbehavior.getVRPlayspace().instance(element)
			pMoCapAnimator = ecbehavior.getMoCapAnimator().instance(element)
			if ecbehavior.getSlotTracker() != null
				pSlotTracker = ecbehavior.getSlotTracker().instance(element)
			end
		end
		
		/** Dispose of instance. */
		func void dispose()
			pSlotTracker = null
			pVRPlayspace = null
			pMoCapAnimator = null
			super.dispose()
		end
		
		
		
		/** Init behavior instance. */
		func void init(StubElement stub)
			var ECBehaviorActorAnimated.Instance actorAnimated = pMoCapAnimator.getActorAnimated()
			
			pControllerThumb = actorAnimated.getControllerNamed(pECBehavior.getControllerNameThumb())
			pControllerThumb2 = actorAnimated.getControllerNamed(pECBehavior.getControllerNameThumb2())
			pControllerThumb3 = actorAnimated.getControllerNamed(pECBehavior.getControllerNameThumb3())
			
			pControllerIndex = actorAnimated.getControllerNamed(pECBehavior.getControllerNameIndex())
			pControllerIndex2 = actorAnimated.getControllerNamed(pECBehavior.getControllerNameIndex2())
			pControllerIndex3 = actorAnimated.getControllerNamed(pECBehavior.getControllerNameIndex3())
			
			pControllerMiddle = actorAnimated.getControllerNamed(pECBehavior.getControllerNameMiddle())
			pControllerMiddle2 = actorAnimated.getControllerNamed(pECBehavior.getControllerNameMiddle2())
			pControllerMiddle3 = actorAnimated.getControllerNamed(pECBehavior.getControllerNameMiddle3())
			
			pControllerRing = actorAnimated.getControllerNamed(pECBehavior.getControllerNameRing())
			pControllerRing2 = actorAnimated.getControllerNamed(pECBehavior.getControllerNameRing2())
			pControllerRing3 = actorAnimated.getControllerNamed(pECBehavior.getControllerNameRing3())
			
			pControllerPinky = actorAnimated.getControllerNamed(pECBehavior.getControllerNamePinky())
			pControllerPinky2 = actorAnimated.getControllerNamed(pECBehavior.getControllerNamePinky2())
			pControllerPinky3 = actorAnimated.getControllerNamed(pECBehavior.getControllerNamePinky3())
			
			pComplexMode = pECBehavior.getTransfer().getMoveHandsClosed().empty()
			
			pMoCapAnimator.addListener(UpdateControllers.new(this))
		end
		
		
		/** Behavior. */
		func ECBMotionTransferFingers getECBehavior()
			return pECBehavior
		end
		
		/** VR Playspace. */
		func ECBehaviorVRPlayspace.Instance getVRPlayspace()
			return pVRPlayspace
		end
		
		/** Motion capture animator. */
		func ECBMoCapAnimator.Instance getMoCapAnimator()
			return pMoCapAnimator
		end
		
		/** Tracker slot behavior instance or null. */
		func ECBTrackerSlot.Instance getSlotTracker()
			return pSlotTracker
		end
		
		func AnimatorController getControllerThumb()
			return pControllerThumb
		end
		
		func AnimatorController getControllerThumb2()
			return pControllerThumb2
		end
		
		func AnimatorController getControllerThumb3()
			return pControllerThumb3
		end
		
		func AnimatorController getControllerIndex()
			return pControllerIndex
		end
		
		func AnimatorController getControllerIndex2()
			return pControllerIndex2
		end
		
		func AnimatorController getControllerIndex3()
			return pControllerIndex3
		end
		
		func AnimatorController getControllerMiddle()
			return pControllerMiddle
		end
		
		func AnimatorController getControllerMiddle2()
			return pControllerMiddle2
		end
		
		func AnimatorController getControllerMiddle3()
			return pControllerMiddle3
		end
		
		func AnimatorController getControllerRing()
			return pControllerRing
		end
		
		func AnimatorController getControllerRing2()
			return pControllerRing2
		end
		
		func AnimatorController getControllerRing3()
			return pControllerRing3
		end
		
		func AnimatorController getControllerPinky()
			return pControllerPinky
		end
		
		func AnimatorController getControllerPinky2()
			return pControllerPinky2
		end
		
		func AnimatorController getControllerPinky3()
			return pControllerPinky3
		end
		
		
		
		/** Update controllers. */
		func void updateControllers()
			if pSlotTracker == null
				return
			end
			
			var InputDevice inputDevice = pSlotTracker.getInputDevice()
			if inputDevice == null
				return
			end
			
			if inputDevice != pInputDevice
				initInputDeviceMapping(inputDevice)
			end
			
			if pComplexMode
				var MotionTransferFingers transfer = pECBehavior.getTransfer()
				var Quaternion handRot = inputDevice.getDevicePoseOrientation()
				var Quaternion quat1, quat2, quat3
				var float scale
				
				// thumb
				quat1 = inputDevice.getDeviceBonePoseOrientation(InputDeviceHandBone.thumb0, false) * handRot
				quat2 = inputDevice.getDeviceBonePoseOrientation(InputDeviceHandBone.thumb1, false) * handRot
				quat3 = inputDevice.getDeviceBonePoseOrientation(InputDeviceHandBone.thumb2, false) * handRot
				scale = transfer.getThumbBendStrength()
				
				if pControllerThumb != null
					pControllerThumb.setRotation(quat1.getEulerAngles())
				end
				
				if pControllerThumb2 != null
					pControllerThumb2.setValue((quat2 * quat1.conjugate()).getEulerAngles().getX() * scale)
				end
				
				if pControllerThumb3 != null
					pControllerThumb3.setValue((quat3 * quat2.conjugate()).getEulerAngles().getX() * scale)
				end
				
				// index
				quat1 = inputDevice.getDeviceBonePoseOrientation(InputDeviceHandBone.index1, false) * handRot
				quat2 = inputDevice.getDeviceBonePoseOrientation(InputDeviceHandBone.index2, false) * handRot
				quat3 = inputDevice.getDeviceBonePoseOrientation(InputDeviceHandBone.index3, false) * handRot
				scale = transfer.getIndexBendStrength()
				
				if pControllerIndex != null
					pControllerIndex.setRotation(quat1.getEulerAngles())
				end
				
				if pControllerIndex2 != null
					pControllerIndex2.setValue((quat2 * quat1.conjugate()).getEulerAngles().getX() * scale)
				end
				
				if pControllerIndex3 != null
					pControllerIndex3.setValue((quat3 * quat2.conjugate()).getEulerAngles().getX() * scale)
				end
				
				// middle
				quat1 = inputDevice.getDeviceBonePoseOrientation(InputDeviceHandBone.middle1, false) * handRot
				quat2 = inputDevice.getDeviceBonePoseOrientation(InputDeviceHandBone.middle2, false) * handRot
				quat3 = inputDevice.getDeviceBonePoseOrientation(InputDeviceHandBone.middle3, false) * handRot
				scale = transfer.getMiddleBendStrength()
				
				if pControllerMiddle != null
					pControllerMiddle.setRotation(quat1.getEulerAngles())
				end
				
				if pControllerMiddle2 != null
					pControllerMiddle2.setValue((quat2 * quat1.conjugate()).getEulerAngles().getX() * scale)
				end
				
				if pControllerMiddle3 != null
					pControllerMiddle3.setValue((quat3 * quat2.conjugate()).getEulerAngles().getX() * scale)
				end
				
				// ring
				quat1 = inputDevice.getDeviceBonePoseOrientation(InputDeviceHandBone.ring1, false) * handRot
				quat2 = inputDevice.getDeviceBonePoseOrientation(InputDeviceHandBone.ring2, false) * handRot
				quat3 = inputDevice.getDeviceBonePoseOrientation(InputDeviceHandBone.ring3, false) * handRot
				scale = transfer.getRingBendStrength()
				
				if pControllerRing != null
					pControllerRing.setRotation(quat1.getEulerAngles())
				end
				
				if pControllerRing2 != null
					pControllerRing2.setValue((quat2 * quat1.conjugate()).getEulerAngles().getX() * scale)
				end
				
				if pControllerRing3 != null
					pControllerRing3.setValue((quat3 * quat2.conjugate()).getEulerAngles().getX() * scale)
				end
				
				// pinky
				quat1 = inputDevice.getDeviceBonePoseOrientation(InputDeviceHandBone.pinky1, false) * handRot
				quat2 = inputDevice.getDeviceBonePoseOrientation(InputDeviceHandBone.pinky2, false) * handRot
				quat3 = inputDevice.getDeviceBonePoseOrientation(InputDeviceHandBone.pinky3, false) * handRot
				scale = transfer.getPinkyBendStrength()
				
				if pControllerPinky != null
					pControllerPinky.setRotation(quat1.getEulerAngles())
				end
				
				if pControllerPinky2 != null
					pControllerPinky2.setValue((quat2 * quat1.conjugate()).getEulerAngles().getX() * scale)
				end
				
				if pControllerPinky3 != null
					pControllerPinky3.setValue((quat3 * quat2.conjugate()).getEulerAngles().getX() * scale)
				end
				
			else
				if pInputAxisThumb != null and pControllerThumb != null
					pControllerThumb.setValue(pInputAxisThumb.getValue())
				end
				if pInputAxisIndex != null and pControllerIndex != null
					pControllerIndex.setValue(pInputAxisIndex.getValue())
				end
				if pInputAxisMiddle != null and pControllerMiddle != null
					pControllerMiddle.setValue(pInputAxisMiddle.getValue())
				end
				if pInputAxisRing != null and pControllerRing != null
					pControllerRing.setValue(pInputAxisRing.getValue())
				end
				if pInputAxisPinky != null and pControllerPinky != null
					pControllerPinky.setValue(pInputAxisPinky.getValue())
				end
			end
		end
		
		/** Init input device mapping. */
		protected func void initInputDeviceMapping(InputDevice inputDevice)
			pInputDevice = inputDevice
			pInputAxisThumb = null
			pInputAxisIndex = null
			pInputAxisMiddle = null
			pInputAxisRing = null
			pInputAxisPinky = null
			
			var int i, count = inputDevice.getAxisCount()
			var Array axes = Array.new()
			var InputDeviceAxis axis
			
			for i = 0 to count
				axis = inputDevice.getAxisAt(i)
				if axis.getType() == InputDeviceAxisType.fingerBend
					axes.add(axis)
				end
			end
			
			if axes.getCount() < 5
				return
			end
			
			if pControllerThumb != null
				pInputAxisThumb = axes.getAt(0) cast InputDeviceAxis
			end
			if pControllerIndex != null
				pInputAxisIndex = axes.getAt(1) cast InputDeviceAxis
			end
			if pControllerMiddle != null
				pInputAxisMiddle = axes.getAt(2) cast InputDeviceAxis
			end
			if pControllerRing != null
				pInputAxisRing = axes.getAt(3) cast InputDeviceAxis
			end
			if pControllerPinky != null
				pInputAxisPinky = axes.getAt(4) cast InputDeviceAxis
			end
		end
	end
	
	
	
	var MotionTransferFingers pTransfer
	var ECBehaviorVRPlayspace pVRPlayspace
	var ECBMoCapAnimator pMoCapAnimator
	var ECBTrackerSlot pSlotTracker
	var String pControllerNameThumb, pControllerNameThumb2, pControllerNameThumb3
	var String pControllerNameIndex, pControllerNameIndex2, pControllerNameIndex3
	var String pControllerNameMiddle, pControllerNameMiddle2, pControllerNameMiddle3
	var String pControllerNameRing, pControllerNameRing2, pControllerNameRing3
	var String pControllerNamePinky, pControllerNamePinky2, pControllerNamePinky3
	
	
	
	/** Create behavior element class. */
	func new(BaseVRActorClass eclass, MotionTransferFingers transfer) super(eclass, transfer.getName())
		if transfer == null
			throw ENullPointer.new("transfer")
		end
		
		pTransfer = transfer
		pVRPlayspace = eclass.getVRPlayspace()
		pMoCapAnimator = ECBMoCapAnimator.getBehaviorIn(eclass)
		if transfer.getTrackerSlot() != null
			pSlotTracker = ECBTrackerSlot.getBehaviorIn(eclass, transfer.getTracker())
		end
		
		pControllerNameThumb = transfer.getName() + ".thumb"
		pControllerNameThumb2 = transfer.getName() + ".thumb2"
		pControllerNameThumb3 = transfer.getName() + ".thumb3"
		
		pControllerNameIndex = transfer.getName() + ".index"
		pControllerNameIndex2 = transfer.getName() + ".index2"
		pControllerNameIndex3 = transfer.getName() + ".index3"
		
		pControllerNameMiddle = transfer.getName() + ".middle"
		pControllerNameMiddle2 = transfer.getName() + ".middle2"
		pControllerNameMiddle3 = transfer.getName() + ".middle3"
		
		pControllerNameRing = transfer.getName() + ".ring"
		pControllerNameRing2 = transfer.getName() + ".ring2"
		pControllerNameRing3 = transfer.getName() + ".ring3"
		
		pControllerNamePinky = transfer.getName() + ".pinky"
		pControllerNamePinky2 = transfer.getName() + ".pinky2"
		pControllerNamePinky3 = transfer.getName() + ".pinky3"
		
		eclass.addBehavior(this)
	end
	
	/** Dispose of behavior. */
	func void dispose()
		pVRPlayspace = null
		pTransfer = null
		pSlotTracker = null
		super.dispose()
	end
	
	
	
	/** Motion transfer. */
	func MotionTransferFingers getTransfer()
		return pTransfer
	end
	
	/** VR Playspace behavior. */
	func ECBehaviorVRPlayspace getVRPlayspace()
		return pVRPlayspace
	end
	
	/** Motion capture animator behavior. */
	func ECBMoCapAnimator getMoCapAnimator()
		return pMoCapAnimator
	end
	
	/** Tracker slot behavior or null. */
	func ECBTrackerSlot getSlotTracker()
		return pSlotTracker
	end
	
	func String getControllerNameThumb()
		return pControllerNameThumb
	end
	
	func String getControllerNameThumb2()
		return pControllerNameThumb2
	end
	
	func String getControllerNameThumb3()
		return pControllerNameThumb3
	end
	
	func String getControllerNameIndex()
		return pControllerNameIndex
	end
	
	func String getControllerNameIndex2()
		return pControllerNameIndex2
	end
	
	func String getControllerNameIndex3()
		return pControllerNameIndex3
	end
	
	func String getControllerNameMiddle()
		return pControllerNameMiddle
	end
	
	func String getControllerNameMiddle2()
		return pControllerNameMiddle2
	end
	
	func String getControllerNameMiddle3()
		return pControllerNameMiddle3
	end
	
	func String getControllerNameRing()
		return pControllerNameRing
	end
	
	func String getControllerNameRing2()
		return pControllerNameRing2
	end
	
	func String getControllerNameRing3()
		return pControllerNameRing3
	end
	
	func String getControllerNamePinky()
		return pControllerNamePinky
	end
	
	func String getControllerNamePinky2()
		return pControllerNamePinky2
	end
	
	func String getControllerNamePinky3()
		return pControllerNamePinky3
	end
	
	
	
	/** Get instance in element from owner element class. */
	func Instance instance( BehaviorElement element )
		return element.getInstanceAt( this.getInstanceIndex() ) cast Instance
	end
	
	
	
	/** Get behavior with slot name in element class or null if absent. */
	static func ECBMotionTransferFingers getBehaviorIn(BehaviorElementClass eclass, String slotName)
		return eclass.findBehavior(block ECBMotionTransferFingers each
			return each.getTransfer().getName().equals(slotName)
		end) cast ECBMotionTransferFingers
	end
	
	/** Get list of all behaviors in element. */
	static func Array getAllBehaviorsIn(BehaviorElementClass eclass)
		return eclass.collectBehaviors(block ECBMotionTransferFingers each
			return true
		end)
	end
	
	/** Get instance with slot name in element or null if absent. */
	static func Instance getInstanceIn(BehaviorElement element, String slotName)
		return element.findInstance(block Instance each
			return each.getECBehavior().getTransfer().getName().equals(slotName)
		end) cast Instance
	end
	
	/** Get list of all instances in element. */
	static func Array getAllInstancesIn(BehaviorElement element)
		return element.collectInstances(block Instance each
			return true
		end)
	end
	
	
	
	/** Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
