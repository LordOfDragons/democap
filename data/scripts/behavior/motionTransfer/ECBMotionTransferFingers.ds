/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Behaviors

pin Democap.MotionTransferSystem

pin Dragengine.Commands
pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * Behavior for MotionTransferFingers.
 */
class ECBMotionTransferFingers extends DefaultECBehavior
	/** Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/** Update controllers. */
		class UpdateControllers extends ECBMoCapAnimator.DefaultListener
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func void updateControllers(ECBMoCapAnimator.Instance instance, float elapsed, int phase)
				if phase == 0
					pInstance.updateControllers()
				end
			end
		end
		
		
		
		var ECBMotionTransferFingers pECBehavior
		var ECBehaviorVRPlayspace.Instance pVRPlayspace
		var ECBMoCapAnimator.Instance pMoCapAnimator
		var ECBTrackerSlot.Instance pSlotTracker
		var AnimatorController pControllerThumb
		var AnimatorController pControllerIndex
		var AnimatorController pControllerMiddle
		var AnimatorController pControllerRing
		var AnimatorController pControllerPinky
		var InputDevice pInputDevice
		var InputDeviceAxis pInputAxisThumb
		var InputDeviceAxis pInputAxisIndex
		var InputDeviceAxis pInputAxisMiddle
		var InputDeviceAxis pInputAxisRing
		var InputDeviceAxis pInputAxisPinky
		
		
		
		/** Create instance. */
		func new(ECBMotionTransferFingers ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			
			pVRPlayspace = ecbehavior.getVRPlayspace().instance(element)
			pMoCapAnimator = ecbehavior.getMoCapAnimator().instance(element)
			if ecbehavior.getSlotTracker() != null
				pSlotTracker = ecbehavior.getSlotTracker().instance(element)
			end
		end
		
		/** Dispose of instance. */
		func void dispose()
			pSlotTracker = null
			pVRPlayspace = null
			pMoCapAnimator = null
			super.dispose()
		end
		
		
		
		/** Init behavior instance. */
		func void init(StubElement stub)
			var ECBehaviorActorAnimated.Instance actorAnimated = pMoCapAnimator.getActorAnimated()
			
			pControllerThumb = actorAnimated.getControllerNamed(pECBehavior.getControllerNameThumb())
			pControllerIndex = actorAnimated.getControllerNamed(pECBehavior.getControllerNameIndex())
			pControllerMiddle = actorAnimated.getControllerNamed(pECBehavior.getControllerNameMiddle())
			pControllerRing = actorAnimated.getControllerNamed(pECBehavior.getControllerNameRing())
			pControllerPinky = actorAnimated.getControllerNamed(pECBehavior.getControllerNamePinky())
			
			pMoCapAnimator.addListener(UpdateControllers.new(this))
		end
		
		
		/** Behavior. */
		func ECBMotionTransferFingers getECBehavior()
			return pECBehavior
		end
		
		/** VR Playspace. */
		func ECBehaviorVRPlayspace.Instance getVRPlayspace()
			return pVRPlayspace
		end
		
		/** Motion capture animator. */
		func ECBMoCapAnimator.Instance getMoCapAnimator()
			return pMoCapAnimator
		end
		
		/** Tracker slot behavior instance or null. */
		func ECBTrackerSlot.Instance getSlotTracker()
			return pSlotTracker
		end
		
		/** Animator controller thumb. */
		func AnimatorController getControllerThumb()
			return pControllerThumb
		end
		
		/** Animator controller index. */
		func AnimatorController getControllerIndex()
			return pControllerIndex
		end
		
		/** Animator controller middle. */
		func AnimatorController getControllerMiddle()
			return pControllerMiddle
		end
		
		/** Animator controller ring. */
		func AnimatorController getControllerRing()
			return pControllerRing
		end
		
		/** Animator controller pinky. */
		func AnimatorController getControllerPinky()
			return pControllerPinky
		end
		
		
		
		/** Update controllers. */
		func void updateControllers()
			if pSlotTracker == null
				return
			end
			
			var InputDevice inputDevice = pSlotTracker.getInputDevice()
			if inputDevice == null
				return
			end
			
			if inputDevice != pInputDevice
				initInputDeviceMapping(inputDevice)
			end
			
			if pInputAxisThumb != null
				pControllerThumb.setValue(pInputAxisThumb.getValue())
			end
			if pInputAxisIndex != null
				pControllerIndex.setValue(pInputAxisIndex.getValue())
			end
			if pInputAxisMiddle != null
				pControllerMiddle.setValue(pInputAxisMiddle.getValue())
			end
			if pInputAxisRing != null
				pControllerRing.setValue(pInputAxisRing.getValue())
			end
			if pInputAxisPinky != null
				pControllerPinky.setValue(pInputAxisPinky.getValue())
			end
		end
		
		/** Init input device mapping. */
		protected func void initInputDeviceMapping(InputDevice inputDevice)
			pInputDevice = inputDevice
			pInputAxisThumb = null
			pInputAxisIndex = null
			pInputAxisMiddle = null
			pInputAxisRing = null
			pInputAxisPinky = null
			
			var int i, count = inputDevice.getAxisCount()
			var Array axes = Array.new()
			var InputDeviceAxis axis
			
			for i = 0 to count
				axis = inputDevice.getAxisAt(i)
				if axis.getType() == InputDeviceAxisType.fingerBend
					axes.add(axis)
				end
			end
			
			if axes.getCount() < 5
				return
			end
			
			if pControllerThumb != null
				pInputAxisThumb = axes.getAt(0) cast InputDeviceAxis
			end
			if pControllerIndex != null
				pInputAxisIndex = axes.getAt(1) cast InputDeviceAxis
			end
			if pControllerMiddle != null
				pInputAxisMiddle = axes.getAt(2) cast InputDeviceAxis
			end
			if pControllerRing != null
				pInputAxisRing = axes.getAt(3) cast InputDeviceAxis
			end
			if pControllerPinky != null
				pInputAxisPinky = axes.getAt(4) cast InputDeviceAxis
			end
		end
	end
	
	
	
	var MotionTransferFingers pTransfer
	var ECBehaviorVRPlayspace pVRPlayspace
	var ECBMoCapAnimator pMoCapAnimator
	var ECBTrackerSlot pSlotTracker
	var String pControllerNameThumb
	var String pControllerNameIndex
	var String pControllerNameMiddle
	var String pControllerNameRing
	var String pControllerNamePinky
	
	
	
	/** Create behavior element class. */
	func new(BaseVRActorClass eclass, MotionTransferFingers transfer) super(eclass, transfer.getName())
		if transfer == null
			throw ENullPointer.new("transfer")
		end
		
		pTransfer = transfer
		pVRPlayspace = eclass.getVRPlayspace()
		pMoCapAnimator = ECBMoCapAnimator.getBehaviorIn(eclass)
		if transfer.getTrackerSlot() != null
			pSlotTracker = ECBTrackerSlot.getBehaviorIn(eclass, transfer.getTracker())
		end
		
		pControllerNameThumb = transfer.getName() + ".thumb"
		pControllerNameIndex = transfer.getName() + ".index"
		pControllerNameMiddle = transfer.getName() + ".middle"
		pControllerNameRing = transfer.getName() + ".ring"
		pControllerNamePinky = transfer.getName() + ".pinky"
		
		eclass.addBehavior(this)
	end
	
	/** Dispose of behavior. */
	func void dispose()
		pVRPlayspace = null
		pTransfer = null
		pSlotTracker = null
		super.dispose()
	end
	
	
	
	/** Motion transfer. */
	func MotionTransferFingers getTransfer()
		return pTransfer
	end
	
	/** VR Playspace behavior. */
	func ECBehaviorVRPlayspace getVRPlayspace()
		return pVRPlayspace
	end
	
	/** Motion capture animator behavior. */
	func ECBMoCapAnimator getMoCapAnimator()
		return pMoCapAnimator
	end
	
	/** Tracker slot behavior or null. */
	func ECBTrackerSlot getSlotTracker()
		return pSlotTracker
	end
	
	/** Animator controller name thumb. */
	func String getControllerNameThumb()
		return pControllerNameThumb
	end
	
	/** Animator controller name index. */
	func String getControllerNameIndex()
		return pControllerNameIndex
	end
	
	/** Animator controller name middle. */
	func String getControllerNameMiddle()
		return pControllerNameMiddle
	end
	
	/** Animator controller name ring. */
	func String getControllerNameRing()
		return pControllerNameRing
	end
	
	/** Animator controller name pinky. */
	func String getControllerNamePinky()
		return pControllerNamePinky
	end
	
	
	
	/** Get instance in element from owner element class. */
	func Instance instance( BehaviorElement element )
		return element.getInstanceAt( this.getInstanceIndex() ) cast Instance
	end
	
	
	
	/** Get behavior with slot name in element class or null if absent. */
	static func ECBMotionTransferFingers getBehaviorIn(BehaviorElementClass eclass, String slotName)
		return eclass.findBehavior(block ECBMotionTransferFingers each
			return each.getTransfer().getName().equals(slotName)
		end) cast ECBMotionTransferFingers
	end
	
	/** Get list of all behaviors in element. */
	static func Array getAllBehaviorsIn(BehaviorElementClass eclass)
		return eclass.collectBehaviors(block ECBMotionTransferFingers each
			return true
		end)
	end
	
	/** Get instance with slot name in element or null if absent. */
	static func Instance getInstanceIn(BehaviorElement element, String slotName)
		return element.findInstance(block Instance each
			return each.getECBehavior().getTransfer().getName().equals(slotName)
		end) cast Instance
	end
	
	/** Get list of all instances in element. */
	static func Array getAllInstancesIn(BehaviorElement element)
		return element.collectInstances(block Instance each
			return true
		end)
	end
	
	
	
	/** Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
