/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Behaviors

pin Democap.MotionTransferSystem

pin Dragengine.Commands
pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * Behavior for MotionTransferBend.
 */
class ECBMotionTransferBend extends DefaultECBehavior
	/** Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/** Update controllers. */
		class UpdateControllers extends ECBMoCapAnimator.DefaultListener
			private var Instance pInstance
			
			public func new(Instance instance)
				pInstance = instance
			end
			
			public func int requiredPhaseCount(ECBMoCapAnimator.Instance instance)
				return pInstance.requiredPhaseCount()
			end
			
			public func void updateControllers(ECBMoCapAnimator.Instance instance, float elapsed, int phase)
				select phase
				case 0
					pInstance.updateControllersPhase1()
					
				case 1
					pInstance.updateControllersPhase2()
				end
			end
		end
		
		
		
		private var ECBMotionTransferBend pECBehavior
		private var ECBehaviorVRPlayspace.Instance pVRPlayspace
		private var ECBMoCapAnimator.Instance pMoCapAnimator
		private var ECBTrackerSlot.Instance pSlotTarget
		private var ECBTrackerSlot.Instance pSlotBase
		private var AnimatorController pControllerBendX
		private var AnimatorController pControllerBendY
		private var AnimatorController pControllerTwist
		private var Matrix pTransformTarget
		private var Matrix pTransformBase
		private var float pZeroRotationX
		private var float pZeroRotationY
		private var float pScaleRotationX
		private var float pScaleRotationY
		private var Component pComponent
		private var int pTwistBone
		private var Matrix pTwistMat
		private var Matrix pTwistMatInv
		private var Quaternion pTwistQuat, pTwistQuatInv
		
		
		
		/** Create instance. */
		public func new(ECBMotionTransferBend ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			
			pVRPlayspace = ecbehavior.getVRPlayspace().instance(element)
			pMoCapAnimator = ecbehavior.getMoCapAnimator().instance(element)
			
			pZeroRotationX = ecbehavior.getTransfer().getCalibrateZeroRotation().getX()
			pZeroRotationY = ecbehavior.getTransfer().getCalibrateZeroRotation().getY()
			pScaleRotationX = ecbehavior.getTransfer().getScaleRotation().getX()
			pScaleRotationY = ecbehavior.getTransfer().getScaleRotation().getY()
			
			pTwistQuat = Quaternion.newFromEuler(ecbehavior.getTransfer().getCalibrateTwistBoneAxisRotation())
			pTwistQuatInv = pTwistQuat.conjugate()
			
			if ecbehavior.getSlotTarget() != null
				pSlotTarget = ecbehavior.getSlotTarget().instance(element)
				pTransformTarget = ecbehavior.getTransfer().getTargetTracker().getTransformMatrix()
			end
			
			if ecbehavior.getSlotBase() != null
				pSlotBase = ecbehavior.getSlotBase().instance(element)
				pTransformBase = ecbehavior.getTransfer().getBaseTracker().getTransformMatrix()
				
				pTwistMat = Matrix.newRotation(ecbehavior.getTransfer().getTwistAxisRotation()) \
					* pSlotBase.getTrackerSlot().getCalibrateMatrixInverse().normalize().getRotation()
				
			else
				pTwistMat = Matrix.newRotation(ecbehavior.getTransfer().getTwistAxisRotation())
			end
			
			pTwistMatInv = pTwistMat.getInverse()
		end
		
		/** Dispose of instance. */
		public func void dispose()
			pSlotTarget = null
			pSlotBase = null
			pVRPlayspace = null
			pMoCapAnimator = null
			super.dispose()
		end
		
		
		
		/** Init behavior instance. */
		public func void init(StubElement stub)
			var ECBehaviorActorAnimated.Instance actorAnimated = pMoCapAnimator.getActorAnimated()
			pComponent = actorAnimated.getComponent().getComponent()
			
			pControllerBendX = actorAnimated.getControllerNamed(pECBehavior.getControllerNameBendX())
			pControllerBendY = actorAnimated.getControllerNamed(pECBehavior.getControllerNameBendY())
			pControllerTwist = actorAnimated.getControllerNamed(pECBehavior.getControllerNameTwist())
			
			pTwistBone = -1
			if not pECBehavior.getTransfer().getTargetBone().empty()
				pTwistBone = pComponent.indexOfBoneNamed(pECBehavior.getTransfer().getTargetBone())
			end
			
			pMoCapAnimator.addListener(UpdateControllers.new(this))
		end
		
		
		
		/** Behavior. */
		public func ECBMotionTransferBend getECBehavior()
			return pECBehavior
		end
		
		/** VR Playspace. */
		public func ECBehaviorVRPlayspace.Instance getVRPlayspace()
			return pVRPlayspace
		end
		
		/** Actor animated. */
		public func ECBMoCapAnimator.Instance getMoCapAnimator()
			return pMoCapAnimator
		end
		
		/** Target slot behavior instance or null. */
		public func ECBTrackerSlot.Instance getSlotTarget()
			return pSlotTarget
		end
		
		/** Base slot behavior instance or null. */
		public func ECBTrackerSlot.Instance getSlotBase()
			return pSlotBase
		end
		
		/** Animator controller rotate. */
		public func AnimatorController getControllerBendX()
			return pControllerBendX
		end
		
		public func AnimatorController getControllerBendY()
			return pControllerBendY
		end
		
		public func AnimatorController getControllerTwist()
			return pControllerTwist
		end
		
		
		
		/** Internal use. */
		public func int requiredPhaseCount()
			if pSlotTarget != null and pControllerTwist != null and pTwistBone != -1
				return 2
				
			else
				return 1
			end
		end
		
		/** Update controllers. */
		public func void updateControllersPhase1()
			if pSlotTarget == null or pSlotBase == null
				return
			end
			
			var Matrix baseMatrix = pTransformBase * pSlotBase.getMatrixCharacter()
			var Matrix targetMatrix = pTransformTarget * pSlotTarget.getMatrixCharacter()
			
			var Vector position = (targetMatrix * baseMatrix.getInverse()).getPosition()
			
			if pControllerBendX != null
				var float bend = DEMath.atan2(position.getY(), position.getZ()) - pZeroRotationX
				pControllerBendX.setValue(bend * pScaleRotationX)
			end
			if pControllerBendY != null
				var float bend = -DEMath.atan2(position.getX(), position.getZ()) - pZeroRotationY
				pControllerBendY.setValue(bend * pScaleRotationY)
			end
			if pControllerTwist != null
				pControllerTwist.setValue(0)
			end
			
// 			updateControllersPhase2()
		end
		
		public func void updateControllersPhase2()
			if pSlotTarget != null and pControllerTwist != null and pTwistBone != -1
				var Quaternion orientation = pTwistQuat * pComponent.boneGetRotation(pTwistBone) * pTwistQuatInv
				
				// this calculation is instable beyond ~88 degrees elevation
				//pControllerTwist.setValue(orientation.getEulerAngles().getZ())
				
				// pfft... this brutal hack actually works
				var float factor = 0.5
				var float rotation = (orientation.slerp(Quaternion.new(), factor)).getEulerAngles().getZ() / factor
				
				pControllerTwist.setValue(rotation)
				
				/*
				var Matrix matrix = Matrix.newFromQuaternion(orientation)
				var Vector view = matrix.getViewVector()
				
				if view.getY() > 0.99939 // roughly 88 degrees
					if view.getZ() > 0
						matrix = Matrix.newFromQuaternion(orientation * Quaternion.newFromEulerX(-2))
						
					else
						matrix = Matrix.newFromQuaternion(orientation * Quaternion.newFromEulerX(2))
					end
					view = matrix.getViewVector()
					
				elif view.getY() < -0.99939 // roughly 88 degrees
					if view.getZ() > 0
						matrix = Matrix.newFromQuaternion(orientation * Quaternion.newFromEulerX(2))
						
					else
						matrix = Matrix.newFromQuaternion(orientation * Quaternion.newFromEulerX(-2))
					end
					view = matrix.getViewVector()
				end
				
				var float azimuth = DEMath.atan2(-view.getX(), view.getZ())
				matrix = matrix * Matrix.newRotationY(-azimuth)
				view = matrix.getViewVector()
				
				var float elevation = DEMath.atan2(view.getY(), view.getZ())
				matrix = matrix * Matrix.newRotationX(-elevation)
				var Vector up = matrix.getUpVector()
				
				var float rotation = DEMath.atan2(up.getX(), up.getY())
				pControllerTwist.setValue(rotation)
				
				
				matrix = Matrix.newFromQuaternion(orientation)
				GameApp.getGameApp().getConsole().addMessage("bend2: M view=" + matrix.getViewVector() \
					+ " up=" + matrix.getUpVector() + " old=" + orientation.getEulerAngles().getZ() \
					+ " az=" + azimuth + " el=" + elevation + " rot=" + rotation)
				*/
			end
		end
	end
	
	
	
	private var MotionTransferBend pTransfer
	private var ECBehaviorVRPlayspace pVRPlayspace
	private var ECBMoCapAnimator pMoCapAnimator
	private var ECBTrackerSlot pSlotTarget
	private var ECBTrackerSlot pSlotBase
	private var String pControllerNameBendX
	private var String pControllerNameBendY
	private var String pControllerNameBendZ
	private var String pControllerNameTwist
	
	
	
	/** Create behavior element class. */
	public func new(BaseVRActorClass eclass, MotionTransferBend transfer) super(eclass, transfer.getName())
		if transfer == null
			throw ENullPointer.new("transfer")
		end
		
		var String subId = "motionTransferBend(" + transfer.getName() + ")"
		var String prefix = subId + "."
		
		pTransfer = transfer
		pVRPlayspace = eclass.getVRPlayspace()
		pMoCapAnimator = ECBMoCapAnimator.getBehaviorIn(eclass)
		if transfer.getTargetTracker() != null
			pSlotTarget = ECBTrackerSlot.getBehaviorIn(eclass, transfer.getTargetTracker().getSlot())
		end
		if transfer.getBaseTracker() != null
			pSlotBase = ECBTrackerSlot.getBehaviorIn(eclass, transfer.getBaseTracker().getSlot())
		end
		
		pControllerNameBendX = transfer.getName() + ".rotateX"
		pControllerNameBendY = transfer.getName() + ".rotateY"
		pControllerNameBendZ = transfer.getName() + ".rotateZ"
		pControllerNameTwist = transfer.getName() + ".twist"
		
		eclass.addBehavior(this)
	end
	
	/** Dispose of behavior. */
	public func void dispose()
		pVRPlayspace = null
		pMoCapAnimator = null
		pTransfer = null
		pSlotTarget = null
		pSlotBase = null
		super.dispose()
	end
	
	
	
	/** Motion transfer. */
	public func MotionTransferBend getTransfer()
		return pTransfer
	end
	
	/** VR Playspace behavior. */
	public func ECBehaviorVRPlayspace getVRPlayspace()
		return pVRPlayspace
	end
	
	/** Motion capture animated behavior. */
	public func ECBMoCapAnimator getMoCapAnimator()
		return pMoCapAnimator
	end
	
	/** Target slot behavior or null. */
	public func ECBTrackerSlot getSlotTarget()
		return pSlotTarget
	end
	
	/** Base slot behavior or null. */
	public func ECBTrackerSlot getSlotBase()
		return pSlotBase
	end
	
	/** Animator controller name rotate. */
	public func String getControllerNameBendX()
		return pControllerNameBendX
	end
	
	public func String getControllerNameBendY()
		return pControllerNameBendY
	end
	
	public func String getControllerNameBendZ()
		return pControllerNameBendZ
	end
	
	/** Animator controller name twist. */
	public func String getControllerNameTwist()
		return pControllerNameTwist
	end
	
	
	
	/** Get instance in element from owner element class. */
	public func Instance instance( BehaviorElement element )
		return element.getInstanceAt( this.getInstanceIndex() ) cast Instance
	end
	
	
	
	/** Get behavior with slot name in element class or null if absent. */
	static public func ECBMotionTransferBend getBehaviorIn(BehaviorElementClass eclass, String slotName)
		return eclass.findBehavior(block ECBMotionTransferBend each
			return each.getTransfer().getName().equals(slotName)
		end) cast ECBMotionTransferBend
	end
	
	/** Get list of all behaviors in element. */
	static public func Array getAllBehaviorsIn(BehaviorElementClass eclass)
		return eclass.collectBehaviors(block ECBMotionTransferBend each
			return true
		end)
	end
	
	/** Get instance with slot name in element or null if absent. */
	static public func Instance getInstanceIn(BehaviorElement element, String slotName)
		return element.findInstance(block Instance each
			return each.getECBehavior().getTransfer().getName().equals(slotName)
		end) cast Instance
	end
	
	/** Get list of all instances in element. */
	static public func Array getAllInstancesIn(BehaviorElement element)
		return element.collectInstances(block Instance each
			return true
		end)
	end
	
	
	
	/** Create Behavior instance. */
	public func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
