/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Behaviors

pin Democap.MotionTransferSystem

pin Dragengine.Commands
pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * Behavior for MotionTransferBend.
 */
class ECBMotionTransferBend extends DefaultECBehavior
	/** Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/** Update controllers. */
		class UpdateControllers extends ECBMoCapAnimator.DefaultListener
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func int requiredPhaseCount(ECBMoCapAnimator.Instance instance)
				return pInstance.requiredPhaseCount()
			end
			
			func void updateControllers(ECBMoCapAnimator.Instance instance, float elapsed, int phase)
				select phase
				case 0
					pInstance.updateControllersPhase1()
					
				case 1
					pInstance.updateControllersPhase2()
				end
			end
		end
		
		
		
		var ECBMotionTransferBend pECBehavior
		var ECBehaviorVRPlayspace.Instance pVRPlayspace
		var ECBMoCapAnimator.Instance pMoCapAnimator
		var ECBTrackerSlot.Instance pSlotTarget, pSlotBase
		var AnimatorController pControllerBendX, pControllerBendY, pControllerTwist
		var Matrix pTransformTarget, pTransformBase, pTransformTwist
// 		var Matrix pZeroRotationX, pZeroRotationY
		var Matrix pTipAxisMatrix
		var Matrix pBendAxisMatrix
		var Matrix pZeroMatrix
		var float pScaleRotationX, pScaleRotationY
		var Component pComponent
		var int pTargetBone
		var bool pUseTwistSlot, pUseRotation, pLockZDistance
		var float pLockedZDistance
		
		var ECBTrackerSlot.Instance pSlotStabilize
		var Matrix pTransformStabilize
		var Vector pStabilizeAxis
		var Matrix pBendAxisMatrixStabilize, pBendAxisMatrixStabilizeInv, pZeroMatrixStabilize
		//var Matrix pStabilizeBaseOffset
		var bool pUseStabilize
		
		var float pTwistScale
		var Quaternion pTwistQuat, pTwistQuatInv
		var CurveBezier pBendCurveX, pBendCurveY
		
		
		/** Create instance. */
		func new(ECBMotionTransferBend ecbehavior, BehaviorElement element) super(element)
			var MotionTransferBend transfer = ecbehavior.getTransfer()
			
			pECBehavior = ecbehavior
			
			pVRPlayspace = ecbehavior.getVRPlayspace().instance(element)
			pMoCapAnimator = ecbehavior.getMoCapAnimator().instance(element)
			
			pBendAxisMatrix = transfer.getCalibrateBendAxisMatrix()
			pTipAxisMatrix = Matrix.newRotation(transfer.getCalibrateZeroRotation())
			pZeroMatrix = pBendAxisMatrix * pTipAxisMatrix
			
			pStabilizeAxis = transfer.getCalibrateStabilizeAxis()
			pBendAxisMatrixStabilize = transfer.getCalibrateBendAxisMatrixStabilize()
			pBendAxisMatrixStabilizeInv = pBendAxisMatrixStabilize.getInverse()
			pZeroMatrixStabilize = pBendAxisMatrixStabilize\
				* Matrix.newRotation(transfer.getCalibrateZeroRotationStabilize())
			//pStabilizeBaseOffset = Matrix.newTranslation(transfer.getCalibrateStableBaseOffset())
			
// 			pZeroRotationX = pBendAxisMatrix * Matrix.newRotationX(-transfer.getCalibrateZeroRotation().getX())
// 			pZeroRotationY = pBendAxisMatrix * Matrix.newRotationY(-transfer.getCalibrateZeroRotation().getY())
			
			pScaleRotationX = transfer.getScaleRotation().getX()
			pScaleRotationY = transfer.getScaleRotation().getY()
			
			pBendCurveX = transfer.getCalibrateBendCurveX()
			pBendCurveY = transfer.getCalibrateBendCurveY()
			
			pTwistQuat = Quaternion.newFromEuler(transfer.getCalibrateTwistBoneAxisRotation())
			pTwistQuatInv = pTwistQuat.conjugate()
			pTwistScale = transfer.getTwistScale()
			
			pUseRotation = transfer.getUseRotation()
			pLockZDistance = transfer.getLockZDistance()
			pLockedZDistance = transfer.getCalibrateLockedZDistance()
			
			if ecbehavior.getSlotTarget() != null
				pSlotTarget = ecbehavior.getSlotTarget().instance(element)
				pTransformTarget = transfer.getTargetTracker().getTransformMatrix()
			end
			
			if ecbehavior.getSlotBase() != null
				pSlotBase = ecbehavior.getSlotBase().instance(element)
				pTransformBase = transfer.getBaseTracker().getTransformMatrix()
			end
			
			if ecbehavior.getSlotStabilize() != null
				pSlotStabilize = ecbehavior.getSlotStabilize().instance(element)
				pTransformStabilize = transfer.getStabilizeTracker().getTransformMatrix()
			end
			
			//pUseStabilize = pSlotStabilize != null and pSlotTarget != null\
			//	and pSlotBase != null and not pStabilizeAxis.isZero()
			pUseStabilize = false
			
			if ecbehavior.getSlotTarget() != null and ecbehavior.getSlotBase() != null
				pTransformTwist = transfer.getCalibrateTwistTransform()
			end
		end
		
		/** Dispose of instance. */
		func void dispose()
			pSlotTarget = null
			pSlotBase = null
			pVRPlayspace = null
			pMoCapAnimator = null
			super.dispose()
		end
		
		
		
		/** Init behavior instance. */
		func void init(StubElement stub)
			var ECBehaviorActorAnimated.Instance actorAnimated = pMoCapAnimator.getActorAnimated()
			pComponent = actorAnimated.getComponent().getComponent()
			
			pControllerBendX = actorAnimated.getControllerNamed(pECBehavior.getControllerNameBendX())
			pControllerBendY = actorAnimated.getControllerNamed(pECBehavior.getControllerNameBendY())
			pControllerTwist = actorAnimated.getControllerNamed(pECBehavior.getControllerNameTwist())
			
			pUseTwistSlot = pECBehavior.getTransfer().getTargetTracker().getRealSlot() != null
			
			pTargetBone = -1
			if not pECBehavior.getTransfer().getTargetBone().empty()
				pTargetBone = pComponent.indexOfBoneNamed(pECBehavior.getTransfer().getTargetBone())
			end
			
			pMoCapAnimator.addListener(UpdateControllers.new(this))
		end
		
		
		
		/** Behavior. */
		func ECBMotionTransferBend getECBehavior()
			return pECBehavior
		end
		
		/** VR Playspace. */
		func ECBehaviorVRPlayspace.Instance getVRPlayspace()
			return pVRPlayspace
		end
		
		/** Actor animated. */
		func ECBMoCapAnimator.Instance getMoCapAnimator()
			return pMoCapAnimator
		end
		
		/** Target slot behavior instance or null. */
		func ECBTrackerSlot.Instance getSlotTarget()
			return pSlotTarget
		end
		
		/** Base slot behavior instance or null. */
		func ECBTrackerSlot.Instance getSlotBase()
			return pSlotBase
		end
		
		/** Animator controller rotate. */
		func AnimatorController getControllerBendX()
			return pControllerBendX
		end
		
		func AnimatorController getControllerBendY()
			return pControllerBendY
		end
		
		func AnimatorController getControllerTwist()
			return pControllerTwist
		end
		
		
		
		/** Internal use. */
		func int requiredPhaseCount()
			if pSlotTarget != null and pControllerTwist != null and (pTargetBone != -1 or pUseTwistSlot)
				return 2
				
			else
				return 1
			end
		end
		
		/** Update controllers. */
		func void updateControllersPhase1()
			if pSlotTarget == null or pSlotBase == null
				return
			end
			
			var Matrix baseMatrix = pTransformBase * calcBaseMatrix()
			var Matrix targetMatrix = pTransformTarget * pSlotTarget.getMatrixCharacter()
			var Matrix bendMatrix = targetMatrix * baseMatrix.getInverse()
			var Vector rotation, position
			var float bend, rotX, rotY
			
			if pUseRotation
				bendMatrix = pTipAxisMatrix * bendMatrix * pBendAxisMatrix
// 				var float factor = 0.5
// 				var Quaternion orientation = bendMatrix.toQuaternion()
// 				rotation = (orientation.slerp(Quaternion.new(), factor)).getEulerAngles() / factor
				rotation = bendMatrix.getEulerAngles()
				
			else
				bendMatrix = bendMatrix * pZeroMatrix
				position = bendMatrix.getPosition()
				
				var float z = pLockZDistance if pLockedZDistance else position.getZ()
				
				var float radius = Vector2.new(position.getX(), z).getLength()
				rotY = DEMath.atan2(-position.getX(), z)
				
				if DEMath.fabs(rotY) <= 90
					rotX = DEMath.atan2(position.getY(), radius)
					
				else
					rotX = DEMath.atan2(position.getY(), -radius)
					rotY = DEMath.normalize(rotY + 180, -90, 90)
				end
				/*if pECBehavior.getTransfer().getName().equals("AutoHuman: Neck Shift")
					GameApp.getApp().getConsole().addMessage("DEBUG: " + Array.newWith(rotX, rotY, position,\
						baseMatrix.getPosition(), targetMatrix.getPosition(),\
						targetMatrix.getPosition() - baseMatrix.getPosition()))
				end*/
			end
			
			if pControllerBendX != null
				if pUseRotation
					bend = pBendCurveX.evaluateAt(rotation.getX())
					
				else
					bend = pBendCurveX.evaluateAt(rotX)
// 					var Vector position = (bendMatrix * pZeroRotationX).getPosition()
// 					bend = pBendCurveX.evaluateAt(DEMath.atan2(position.getY(), position.getZ()))
				end
				
				pControllerBendX.setValue(bend * pScaleRotationX)
			end
			
			if pControllerBendY != null
				if pUseRotation
					bend = pBendCurveY.evaluateAt(rotation.getY())
					
				else
					bend = pBendCurveY.evaluateAt(rotY)
// 					var Vector position = (bendMatrix * pZeroRotationY).getPosition()
// 					bend = pBendCurveY.evaluateAt(-DEMath.atan2(position.getX(), position.getZ()))
				end
				
				pControllerBendY.setValue(bend * pScaleRotationY)
			end
			
			if pControllerTwist != null
				pControllerTwist.setValue(0)
			end
		end
		
		func void updateControllersPhase2()
			if pSlotTarget == null or pSlotBase == null
				return
			end
			
			if pControllerTwist != null and (pTargetBone != -1 or pUseTwistSlot)
				var Matrix matrix = Matrix.newFromQuaternion(pTwistQuat)
				
				if pUseTwistSlot
					var Matrix baseMatrix = pTransformBase * calcBaseMatrix()
					var Matrix targetMatrix = pTransformTarget * pSlotTarget.getMatrixCharacter()
					
					matrix = matrix * (targetMatrix * baseMatrix.getInverse() * pTransformTwist).getRotation()
					
				elif pTargetBone != -1
					matrix = matrix * pComponent.boneGetMatrix(pTargetBone).normalize().getRotation()
				end
				
				//orientation = orientation * pTwistQuatInv
				var Quaternion orientation = matrix.toQuaternion() * pTwistQuatInv
				
				// this calculation is instable beyond ~88 degrees elevation
				//pControllerTwist.setValue(orientation.getEulerAngles().getZ())
				
				// pfft... this brutal hack actually works
				var float factor = 0.5
				var float rotation = (orientation.slerp(Quaternion.new(), factor)).getEulerAngles().getZ() / factor
				
				pControllerTwist.setValue(rotation * pTwistScale)
			end
		end
		
		func Matrix calcBaseMatrix()
			var Matrix baseMatrix = pSlotBase.getMatrixCharacter()
			
			if not pUseStabilize
				return baseMatrix
			end
			
			// calculate rotated bend axis
			var Matrix stabilizeMatrix = pTransformStabilize * pSlotStabilize.getMatrixCharacter()
			var Matrix stabilizeMatrixInv = stabilizeMatrix.getInverse()
			var Vector basePos = baseMatrix.getPosition()
			
			var Vector position = (stabilizeMatrixInv * pZeroMatrixStabilize) * basePos
			var float rotX, rotY
			
			var float radius = Vector2.new(position.getX(), position.getZ()).getLength()
			rotY = DEMath.atan2(-position.getX(), position.getZ())
			
			if DEMath.fabs(rotY) <= 90
				rotX = DEMath.atan2(position.getY(), radius)
				
			else
				rotX = DEMath.atan2(position.getY(), -radius)
				rotY = DEMath.normalize(rotY + 180, -90, 90)
			end
			
			//rotX *= 2
			//rotY *= 2
			
			var Vector axis = (Matrix.newRotation(rotX, rotY, 0)\
				* pBendAxisMatrixStabilizeInv * stabilizeMatrix).getViewVector()
			/*if pECBehavior.getTransfer().getName().equals("AutoHuman: Neck Shift")
				GameApp.getApp().getConsole().addMessage("DEBUG(S): " + Array.newWith(rotX, rotY, axis))
			end*/
			
			// lock base matrix bend axis direction to rotated bend axis
			//var Vector stabilizePos = stabilizeMatrix.getPosition()
			//var Vector basePos = baseMatrix.getPosition()
			//var Vector axis = basePos - stabilizePos
			if axis.isZero()
				return baseMatrix
			end
			axis = baseMatrix.getInverse().transformNormal(axis.normalize())
			
			var float dot = pStabilizeAxis * axis
			if DEMath.fabs(dot) > 0.9999
				return baseMatrix
			end
			
			//var Vector cross = axis % stabilizeAxis
			//var Quaternion quat = Quaternion.new(cross.getX(), cross.getY(), cross.getZ(), dot + 1).normalize()
			//return baseMatrix * Matrix.newFromQuaternion(quat)
			
			/*if pECBehavior.getTransfer().getName().equals("AutoHuman: Neck Shift")
				GameApp.getApp().getConsole().addMessage("STABILIZE: " + Array.newWith(\
					axis, pStabilizeAxis, DEMath.acos(dot)))
			end*/
			
			return Matrix.newRotationAxis(axis % pStabilizeAxis, DEMath.acos(dot)) * baseMatrix
		end
	end
	
	
	
	var MotionTransferBend pTransfer
	var ECBehaviorVRPlayspace pVRPlayspace
	var ECBMoCapAnimator pMoCapAnimator
	var ECBTrackerSlot pSlotTarget, pSlotBase, pSlotStabilize
	var String pControllerNameBendX, pControllerNameBendY, pControllerNameBendZ
	var String pControllerNameTwist
	
	
	
	/** Create behavior element class. */
	func new(BaseVRActorClass eclass, MotionTransferBend transfer) super(eclass, transfer.getName())
		if transfer == null
			throw ENullPointer.new("transfer")
		end
		
		pTransfer = transfer
		pVRPlayspace = eclass.getVRPlayspace()
		pMoCapAnimator = ECBMoCapAnimator.getBehaviorIn(eclass)
		if transfer.getTargetTracker() != null
			pSlotTarget = ECBTrackerSlot.getBehaviorIn(eclass, transfer.getTargetTracker().getSlot())
		end
		if transfer.getBaseTracker() != null
			pSlotBase = ECBTrackerSlot.getBehaviorIn(eclass, transfer.getBaseTracker().getSlot())
		end
		if transfer.getStabilizeTracker() != null
			pSlotStabilize = ECBTrackerSlot.getBehaviorIn(eclass, transfer.getStabilizeTracker().getSlot())
		end
		
		pControllerNameBendX = transfer.getName() + ".rotateX"
		pControllerNameBendY = transfer.getName() + ".rotateY"
		pControllerNameBendZ = transfer.getName() + ".rotateZ"
		pControllerNameTwist = transfer.getName() + ".twist"
		
		eclass.addBehavior(this)
	end
	
	/** Dispose of behavior. */
	func void dispose()
		pVRPlayspace = null
		pMoCapAnimator = null
		pTransfer = null
		pSlotTarget = null
		pSlotBase = null
		//pSlotStabilize = null
		super.dispose()
	end
	
	
	
	/** Motion transfer. */
	func MotionTransferBend getTransfer()
		return pTransfer
	end
	
	/** VR Playspace behavior. */
	func ECBehaviorVRPlayspace getVRPlayspace()
		return pVRPlayspace
	end
	
	/** Motion capture animated behavior. */
	func ECBMoCapAnimator getMoCapAnimator()
		return pMoCapAnimator
	end
	
	/** Target slot behavior or null. */
	func ECBTrackerSlot getSlotTarget()
		return pSlotTarget
	end
	
	/** Base slot behavior or null. */
	func ECBTrackerSlot getSlotBase()
		return pSlotBase
	end
	
	/** Stabilize slot behavior or null. */
	func ECBTrackerSlot getSlotStabilize()
		return pSlotStabilize
	end
	
	/** Animator controller name rotate. */
	func String getControllerNameBendX()
		return pControllerNameBendX
	end
	
	func String getControllerNameBendY()
		return pControllerNameBendY
	end
	
	func String getControllerNameBendZ()
		return pControllerNameBendZ
	end
	
	/** Animator controller name twist. */
	func String getControllerNameTwist()
		return pControllerNameTwist
	end
	
	
	
	/** Get instance in element from owner element class. */
	func Instance instance( BehaviorElement element )
		return element.getInstanceAt( this.getInstanceIndex() ) cast Instance
	end
	
	
	
	/** Get behavior with slot name in element class or null if absent. */
	static func ECBMotionTransferBend getBehaviorIn(BehaviorElementClass eclass, String slotName)
		return eclass.findBehavior(block ECBMotionTransferBend each
			return each.getTransfer().getName().equals(slotName)
		end) cast ECBMotionTransferBend
	end
	
	/** Get list of all behaviors in element. */
	static func Array getAllBehaviorsIn(BehaviorElementClass eclass)
		return eclass.collectBehaviors(block ECBMotionTransferBend each
			return true
		end)
	end
	
	/** Get instance with slot name in element or null if absent. */
	static func Instance getInstanceIn(BehaviorElement element, String slotName)
		return element.findInstance(block Instance each
			return each.getECBehavior().getTransfer().getName().equals(slotName)
		end) cast Instance
	end
	
	/** Get list of all instances in element. */
	static func Array getAllInstancesIn(BehaviorElement element)
		return element.collectInstances(block Instance each
			return true
		end)
	end
	
	
	
	/** Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
