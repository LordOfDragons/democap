/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2023, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Behaviors

pin Democap.MotionTransferSystem

pin Dragengine.Commands
pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * Behavior for MotionTransferFace.
 */
class ECBMotionTransferFace extends DefaultECBehavior
	/** Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/** Controller attach/detach listener. */
		class AttachDetachListener extends DefaultBindingManagerListener
			private var Instance pInstance
			
			public func new(Instance instance)
				pInstance = instance
			end
			
			public func void deviceAttached(BindingManager manager, InputDevice device)
				if pInstance.getInputDevice() == null and device.getType() == InputDeviceType.vrHMD
					pInstance.setInputDevice(device)
				end
			end
			
			public func void deviceDetached(BindingManager manager, InputDevice device)
				if pInstance.getInputDevice() == device
					pInstance.setInputDevice(null)
				end
			end
			
			public func void devicesReloaded(BindingManager manager)
				pInstance.findInputDevice()
			end
		end
		
		/** Update controllers. */
		class UpdateControllers extends ECBMoCapAnimator.DefaultListener
			private var Instance pInstance
			
			public func new(Instance instance)
				pInstance = instance
			end
			
			public func void updateControllers(ECBMoCapAnimator.Instance instance, float elapsed, int phase)
				pInstance.updateControllers()
			end
		end
		
		/** Tracked expression. */
		class TrackExpression
			private var int pExpression
			private var AnimatorController pController
			
			public func new(int expression, AnimatorController controller)
				pExpression = expression
				pController = controller
			end
			
			public func void update(InputDevice device)
				pController.setValue(device.getDeviceFaceExpressionAt(pExpression))
			end
		end
		
		
		
		private var ECBMotionTransferFace pECBehavior
		private var ECBehaviorVRPlayspace.Instance pVRPlayspace
		private var ECBMoCapAnimator.Instance pMoCapAnimator
		private var Array pTrackedExpressions
		private var InputDevice pInputDevice
		private var AttachDetachListener pAttachDetachListener
		
		
		
		/** Create instance. */
		public func new(ECBMotionTransferFace ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			
			pAttachDetachListener = AttachDetachListener.new(this)
			
			pVRPlayspace = ecbehavior.getVRPlayspace().instance(element)
			pMoCapAnimator = ecbehavior.getMoCapAnimator().instance(element)
		end
		
		/** Dispose of instance. */
		public func void dispose()
			pAttachDetachListener = null
			pVRPlayspace = null
			pMoCapAnimator = null
			super.dispose()
		end
		
		
		
		/** Init behavior instance. */
		public func void init(StubElement stub)
			var ECBehaviorActorAnimated.Instance actorAnimated = pMoCapAnimator.getActorAnimated()
			var String baseControllerName = pECBehavior.getBaseControllerName()
			var MotionTransferFace transfer = pECBehavior.getTransfer()
			
			MotionTransferFace.expressionInfos.forEach(block MotionTransferFace.ExpressionInfo each
				if not transfer.getExpressionVPSAt(each.getExpression()).empty()
					pTrackedExpressions.add(TrackExpression.new(each.getExpression(),\
						actorAnimated.getControllerNamed(baseControllerName + each.getId())))
				end
			end)
			
			// add listener
			pMoCapAnimator.addListener(UpdateControllers.new(this))
		end
		
		
		/** Behavior. */
		public func ECBMotionTransferFace getECBehavior()
			return pECBehavior
		end
		
		/** VR Playspace. */
		public func ECBehaviorVRPlayspace.Instance getVRPlayspace()
			return pVRPlayspace
		end
		
		/** Motion capture animator. */
		public func ECBMoCapAnimator.Instance getMoCapAnimator()
			return pMoCapAnimator
		end
		
		/** Input device or null if detached. */
		public func InputDevice getInputDevice()
			return pInputDevice
		end
		
		/** Set input device or null if detached. */
		public func void setInputDevice(InputDevice device)
			pInputDevice = device
		end
		
		
		
		/** Element has been added to game world. Start tracking device. */
		public func void addToGameWorld()
			GameApp.getGameApp().getBindingManager().addListener(pAttachDetachListener)
			findInputDevice()
		end
		
		/** Element has been removed from game world. Stop tracking device. */
		public func void removeFromGameWorld()
			GameApp.getGameApp().getBindingManager().removeListener(pAttachDetachListener)
			setInputDevice(null)
		end
		
		
		
		/** Update controllers. */
		public func void updateControllers()
			if pInputDevice == null
				return
			end
			
			pTrackedExpressions.forEach(block TrackExpression each
				each.update(pInputDevice)
			end)
		end
		
		/** Find input device. */
		public func void findInputDevice()
			setInputDevice(GameApp.getApp().getBindingManager().findDevice(block InputDevice each
				return each.getType() == InputDeviceType.vrHMD
			end))
		end
	end
	
	
	
	private var MotionTransferFace pTransfer
	private var ECBehaviorVRPlayspace pVRPlayspace
	private var ECBMoCapAnimator pMoCapAnimator
	private var String pBaseControllerName
	
	
	
	/** Create behavior element class. */
	public func new(BaseVRActorClass eclass, MotionTransferFace transfer) super(eclass, transfer.getName())
		if transfer == null
			throw ENullPointer.new("transfer")
		end
		
		var String subId = "motionTransferFace(" + transfer.getName() + ")"
		var String prefix = subId + "."
		
		pTransfer = transfer
		pVRPlayspace = eclass.getVRPlayspace()
		pMoCapAnimator = ECBMoCapAnimator.getBehaviorIn(eclass)
		
		pBaseControllerName = transfer.getName() + ".expr."
		
		eclass.addBehavior(this)
	end
	
	/** Dispose of behavior. */
	public func void dispose()
		pVRPlayspace = null
		pTransfer = null
		super.dispose()
	end
	
	
	
	/** Motion transfer. */
	public func MotionTransferFace getTransfer()
		return pTransfer
	end
	
	/** VR Playspace behavior. */
	public func ECBehaviorVRPlayspace getVRPlayspace()
		return pVRPlayspace
	end
	
	/** Motion capture animator behavior. */
	public func ECBMoCapAnimator getMoCapAnimator()
		return pMoCapAnimator
	end
	
	/** Base animator controller name. */
	public func String getBaseControllerName()
		return pBaseControllerName
	end
	
	
	
	/** Get instance in element from owner element class. */
	public func Instance instance( BehaviorElement element )
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	
	
	/** Get behavior with slot name in element class or null if absent. */
	static public func ECBMotionTransferFace getBehaviorIn(BehaviorElementClass eclass, String slotName)
		return eclass.findBehavior(block ECBMotionTransferFace each
			return each.getTransfer().getName().equals(slotName)
		end) cast ECBMotionTransferFace
	end
	
	/** Get list of all behaviors in element. */
	static public func Array getAllBehaviorsIn(BehaviorElementClass eclass)
		return eclass.collectBehaviors(block ECBMotionTransferFace each
			return true
		end)
	end
	
	/** Get instance with slot name in element or null if absent. */
	static public func Instance getInstanceIn(BehaviorElement element, String slotName)
		return element.findInstance(block Instance each
			return each.getECBehavior().getTransfer().getName().equals(slotName)
		end) cast Instance
	end
	
	/** Get list of all instances in element. */
	static public func Array getAllInstancesIn(BehaviorElement element)
		return element.collectInstances(block Instance each
			return true
		end)
	end
	
	
	
	/** Create Behavior instance. */
	public func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
