/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Behaviors

pin Democap.MotionTransferSystem

pin Dragengine.Commands
pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * Behavior for MotionTransferAnimation.
 */
class ECBMotionTransferAnimation extends DefaultECBehavior
	/** Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/** Update controllers. */
		class UpdateControllers extends ECBMoCapAnimator.DefaultListener
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func void updateControllers(ECBMoCapAnimator.Instance instance, float elapsed, int phase)
				pInstance.updateControllers(elapsed)
			end
		end
		
		
		
		var ECBMotionTransferAnimation pECBehavior
		var ECBMoCapAnimator.Instance pMoCapAnimator
		var AnimatorController pControllerPlayback
		
		
		
		/** Create instance. */
		func new(ECBMotionTransferAnimation ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pMoCapAnimator = ecbehavior.getMoCapAnimator().instance(element)
		end
		
		/** Dispose of instance. */
		func void dispose()
			pMoCapAnimator = null
			super.dispose()
		end
		
		
		
		/** Init behavior instance. */
		func void init(StubElement stub)
			var ECBehaviorActorAnimated.Instance actorAnimated = pMoCapAnimator.getActorAnimated()
			pControllerPlayback = actorAnimated.getControllerNamed(pECBehavior.getControllerNamePlayback())
			pMoCapAnimator.addListener(UpdateControllers.new(this))
		end
		
		
		
		/** Behavior. */
		func ECBMotionTransferAnimation getECBehavior()
			return pECBehavior
		end
		
		/** Actor animated. */
		func ECBMoCapAnimator.Instance getMoCapAnimator()
			return pMoCapAnimator
		end
		
		/** Animator controller. */
		func AnimatorController getControllerPlayback()
			return pControllerPlayback
		end
		
		
		
		/** Update controllers. */
		func void updateControllers(float elapsed)
			if pControllerPlayback != null
				pControllerPlayback.increment(elapsed)
			end
		end
	end
	
	
	
	var MotionTransferAnimation pTransfer
	var ECBMoCapAnimator pMoCapAnimator
	var String pControllerNamePlayback
	
	
	
	/** Create behavior element class. */
	func new(BaseVRActorClass eclass, MotionTransferAnimation transfer) super(eclass, transfer.getName())
		if transfer == null
			throw ENullPointer.new("transfer")
		end
		
		pTransfer = transfer
		pMoCapAnimator = ECBMoCapAnimator.getBehaviorIn(eclass)
		
		pControllerNamePlayback = transfer.getName() + ".playback"
		
		eclass.addBehavior(this)
	end
	
	/** Dispose of behavior. */
	func void dispose()
		pMoCapAnimator = null
		pTransfer = null
		super.dispose()
	end
	
	
	
	/** Motion transfer. */
	func MotionTransferAnimation getTransfer()
		return pTransfer
	end
	
	/** Motion capture animated behavior. */
	func ECBMoCapAnimator getMoCapAnimator()
		return pMoCapAnimator
	end
	
	/** Animator controller name playback. */
	func String getControllerNamePlayback()
		return pControllerNamePlayback
	end
	
	
	
	/** Get instance in element from owner element class. */
	func Instance instance( BehaviorElement element )
		return element.getInstanceAt( this.getInstanceIndex() ) cast Instance
	end
	
	/** Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
