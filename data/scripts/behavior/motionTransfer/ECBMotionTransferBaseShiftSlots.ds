/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2025, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Behaviors

pin Democap.MotionTransferSystem

pin Dragengine.Commands
pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * Behavior for MotionTransferBaseShiftSlots.
 */
class ECBMotionTransferBaseShiftSlots extends DefaultECBehavior
	/** Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/** Shift slots. */
		class ShiftSlots extends ECBMoCapAnimator.DefaultListener
			var Instance pInstance
			
			func new(Instance instance)
				pInstance = instance
			end
			
			func void updateControllers(ECBMoCapAnimator.Instance instance, float elapsed, int phase)
				if phase == 0
					pInstance.shiftSlots()
				end
			end
		end
		
		
		var ECBMotionTransferBaseShiftSlots pECBehavior
		var ECBMoCapAnimator.Instance pMoCapAnimator
		var ECBTrackerSlot.Instance pSlotReference, pSlotBase1, pSlotBase2
		var Array pShiftSlots
		var Matrix pTransformReference, pTransformBase1, pTransformBase2
		//var float pShiftDistance, pTargetDistance
		var Vector pCalibOffsetBase1, pCalibOffsetTip1
		var Vector pCalibOffsetBase2, pCalibOffsetTip2
		var float pCalibDistance1, pCalibDistance2, pCalibBaseShift
		
		
		/** Create instance. */
		func new(ECBMotionTransferBaseShiftSlots ecbehavior, BehaviorElement element) super(element)
			var MotionTransferBaseShiftSlots transfer = ecbehavior.getTransfer()
			pECBehavior = ecbehavior
			
			pMoCapAnimator = ecbehavior.getMoCapAnimator().instance(element)
			
			if ecbehavior.getSlotReference() != null
				pSlotReference = ecbehavior.getSlotReference().instance(element)
				pTransformReference = transfer.getReference().getTransformMatrix()
			end
			
			if ecbehavior.getSlotBase1() != null
				pSlotBase1 = ecbehavior.getSlotBase1().instance(element)
				pTransformBase1 = transfer.getBase1().getTransformMatrix()
			end
			
			if ecbehavior.getSlotBase2() != null
				pSlotBase2 = ecbehavior.getSlotBase2().instance(element)
				pTransformBase2 = transfer.getBase2().getTransformMatrix()
			end
			
			//pShiftDistance = transfer.getCalibrateShiftDistance()
			//pTargetDistance = transfer.getCalibrateTargetDistance()
			pCalibOffsetBase1 = transfer.getCalibrateOffsetBase1()
			pCalibOffsetTip1 = transfer.getCalibrateOffsetTip1()
			pCalibOffsetBase2 = transfer.getCalibrateOffsetBase2()
			pCalibOffsetTip2 = transfer.getCalibrateOffsetTip2()
			pCalibDistance1 = transfer.getCalibrateDistance1()
			pCalibDistance2 = transfer.getCalibrateDistance2()
			pCalibBaseShift = transfer.getCalibrateBaseShift()
			
			pShiftSlots = ecbehavior.getShiftSlots().map(block ECBTrackerSlot each
				return each.instance(element)
			end)
		end
		
		/** Dispose of instance. */
		func void dispose()
			pSlotReference = pSlotBase1 = pSlotBase2 = null
			pShiftSlots = null
			pMoCapAnimator = null
			super.dispose()
		end
		
		
		/** Init behavior instance. */
		func void init(StubElement stub)
			pMoCapAnimator.addListener(ShiftSlots.new(this))
		end
		
		
		/** Behavior. */
		func ECBMotionTransferBaseShiftSlots getECBehavior()
			return pECBehavior
		end
		
		/** Motion capture animator. */
		func ECBMoCapAnimator.Instance getMoCapAnimator()
			return pMoCapAnimator
		end
		
		/** Reference slot behavior instance or null. */
		func ECBTrackerSlot.Instance getSlotReference()
			return pSlotReference
		end
		
		/** Base 1 slot behavior instance or null. */
		func ECBTrackerSlot.Instance getSlotBase1()
			return pSlotBase1
		end
		
		/** Base 2 slot behavior instance or null. */
		func ECBTrackerSlot.Instance getSlotBase2()
			return pSlotBase2
		end
		
		/** Shift slot behavior instances as Array of \ref ECBTrackerSlot#Instance. */
		func Array getShiftSlots()
			return pShiftSlots
		end
		
		
		/** Shift slots. */
		func void shiftSlots()
			if pSlotReference == null or pSlotReference.isDetached()
				return
			end
			
			var Matrix matRef = pTransformReference * pSlotReference.getMatrixCharacter()
			var Vector posBase1, posTip1, posBase2, posTip2
			var Vector centerBase = Vector.new(), centerTip = Vector.new()
			var float length, pullDistance1, pullDistance2
			var Vector direction
			var int slotCount
			
			// calculate base and tip positions
			if pSlotBase1 != null
				posBase1 = matRef * pCalibOffsetBase1
				posTip1 = (pTransformBase1 * pSlotBase1.getMatrixCharacter()) * pCalibOffsetTip1
				centerBase = centerBase + posBase1
				centerTip = centerTip + posTip1
				slotCount++
			end
			
			if pSlotBase2 != null
				posBase2 = matRef * pCalibOffsetBase2
				posTip2 = (pTransformBase2 * pSlotBase2.getMatrixCharacter()) * pCalibOffsetTip2
				centerBase = centerBase + posBase2
				centerTip = centerTip + posTip2
				slotCount++
			end
			
			// calculate center base and tip
			if slotCount > 1
				centerBase = centerBase / slotCount
				centerTip = centerTip / slotCount
				
			elif slotCount == 0
				return
			end
			
			// shift direction is normalized direction from center base to center tip
			direction = centerTip - centerBase
			var float centerDistance = direction.getLength()
			if centerDistance < 0.01
				return
			end
			
			var Vector normDir = direction / centerDistance
			
			// base-shift base positions and calculate pull distance. base-shift contains
			// the shift required to move from the actor reference slot to the character
			// reference slot. the pull distance pulls the reference slot towards the base
			// slots to avoid bone chains over stretching
			var Vector shift = normDir * pCalibBaseShift
			
			centerBase = centerBase + shift
			
			if pSlotBase1 != null and pCalibDistance1 != 0
				direction = posTip1 - (posBase1 + shift)
				length = direction.getLength()
				if length > 0.01
					pullDistance1 = normDir * ((direction / length) * DEMath.max(length - pCalibDistance1, 0.0))
				end
			end
			
			if pSlotBase2 != null and pCalibDistance2 != 0
				direction = posTip2 - (posBase2 + shift)
				length = direction.getLength()
				if length > 0.01
					pullDistance2 = normDir * ((direction / length) * DEMath.max(length - pCalibDistance2, 0.0))
				end
			end
			
			var float pullDistance = DEMath.max(pullDistance1, pullDistance2)
			
			// final shift is base-shift plus pull-shift
			shift = shift + normDir * pullDistance
			var Matrix transform = Matrix.newTranslation(shift)
			
			/*
			if pShiftDistance == 0 or pSlotReference == null or pSlotReference.isDetached()
				return
			end
			
			var Vector posBase, shift, normDir
			var Matrix transform
			
			if pSlotBase1 != null or pSlotBase2 != null
				var Vector posRef = (pTransformReference * pSlotReference.getMatrixCharacter()).getPosition()
				
				if pSlotBase1 != null and pSlotBase2 != null
					posBase = ((pTransformBase1 * pSlotBase1.getMatrixCharacter()).getPosition()\
						+ (pTransformBase2 * pSlotBase2.getMatrixCharacter()).getPosition()) / 2
					
				elif pSlotBase1 != null
					posBase = (pTransformBase1 * pSlotBase1.getMatrixCharacter()).getPosition()
					
				else
					posBase = (pTransformBase2 * pSlotBase2.getMatrixCharacter()).getPosition()
				end
				
				var Vector direction = posRef - posBase
				var float distance = direction.getLength()
				if distance < 0.01
					return
				end
				normDir = direction / distance
				
				shift = normDir * pShiftDistance
				transform = Matrix.newTranslation(shift)
				
			else
				// TODO
				return
			end
			*/
			
			var float scaleShift = pECBehavior.getTransfer().getScaleShift()
			if scaleShift > 0
				var float scale, fullScale
				var Matrix matrix
				
				pShiftSlots.forEach(block ECBTrackerSlot.Instance each
					matrix = each.getMatrixCharacter()
					length = normDir * (matrix.getPosition() - centerTip)
					fullScale = DEMath.min(DEMath.fabs(length / centerDistance), 1.0)
					scale = DEMath.mix(1, fullScale, scaleShift)
					transform = Matrix.newTranslation(shift * scale)
					each.setMatrixCharacter(matrix * transform)
				end)
				
			else
				pShiftSlots.forEach(block ECBTrackerSlot.Instance each
					each.setMatrixCharacter(each.getMatrixCharacter() * transform)
				end)
			end
		end
	end
	
	
	var MotionTransferBaseShiftSlots pTransfer
	var ECBMoCapAnimator pMoCapAnimator
	var ECBTrackerSlot pSlotReference, pSlotBase1, pSlotBase2
	var Array pShiftSlots
	
	
	/** Create behavior element class. */
	func new(BaseVRActorClass eclass, MotionTransferBaseShiftSlots transfer) super(eclass, transfer.getName())
		pTransfer = transfer
		pMoCapAnimator = ECBMoCapAnimator.getBehaviorIn(eclass)
		if transfer.getReference() != null
			pSlotReference = ECBTrackerSlot.getBehaviorIn(eclass, transfer.getReference().getSlot())
		end
		if transfer.getBase1() != null
			pSlotBase1 = ECBTrackerSlot.getBehaviorIn(eclass, transfer.getBase1().getSlot())
		end
		if transfer.getBase2() != null
			pSlotBase2 = ECBTrackerSlot.getBehaviorIn(eclass, transfer.getBase2().getSlot())
		end
		pShiftSlots = Array.new()
		transfer.getShiftSlots().forEach(block String each
			var ECBTrackerSlot slot = ECBTrackerSlot.getBehaviorIn(eclass, each)
			if slot != null
				pShiftSlots.add(slot)
			end
		end)
		
		eclass.addBehavior(this)
	end
	
	/** Dispose of behavior. */
	func void dispose()
		pTransfer = null
		pMoCapAnimator = null
		pSlotReference = pSlotBase1 = pSlotBase2 = null
		pShiftSlots = null
		super.dispose()
	end
	
	
	/** Motion transfer. */
	func MotionTransferBaseShiftSlots getTransfer()
		return pTransfer
	end
	
	/** Motion capture animator behavior. */
	func ECBMoCapAnimator getMoCapAnimator()
		return pMoCapAnimator
	end
	
	/** Reference slot behavior or null. */
	func ECBTrackerSlot getSlotReference()
		return pSlotReference
	end
	
	/** Base 1 slot behavior or null. */
	func ECBTrackerSlot getSlotBase1()
		return pSlotBase1
	end
	
	/** Base 2 slot behavior or null. */
	func ECBTrackerSlot getSlotBase2()
		return pSlotBase2
	end
	
	/** Shift slot behaviors as Array of \ref ECBTrackerSlot. */
	func Array getShiftSlots()
		return pShiftSlots
	end
	
	
	/** Get instance in element from owner element class. */
	func Instance instance( BehaviorElement element )
		return element.getInstanceAt( this.getInstanceIndex() ) cast Instance
	end
	
	
	/** Get behavior with slot name in element class or null if absent. */
	static func ECBMotionTransferBaseShiftSlots getBehaviorIn(BehaviorElementClass eclass, String slotName)
		return eclass.findBehavior(block ECBMotionTransferBaseShiftSlots each
			return each.getTransfer().getName().equals(slotName)
		end) cast ECBMotionTransferBaseShiftSlots
	end
	
	/** Get list of all behaviors in element. */
	static func Array getAllBehaviorsIn(BehaviorElementClass eclass)
		return eclass.collectBehaviors(block ECBMotionTransferBaseShiftSlots each
			return true
		end)
	end
	
	/** Get instance with slot name in element or null if absent. */
	static func Instance getInstanceIn(BehaviorElement element, String slotName)
		return element.findInstance(block Instance each
			return each.getECBehavior().getTransfer().getName().equals(slotName)
		end) cast Instance
	end
	
	/** Get list of all instances in element. */
	static func Array getAllInstancesIn(BehaviorElement element)
		return element.collectInstances(block Instance each
			return true
		end)
	end
	
	
	/** Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
