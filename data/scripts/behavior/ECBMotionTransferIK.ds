/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Behaviors

pin Democap.MotionTransferSystem

pin Dragengine.Commands
pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * Behavior for MotionTransferIK.
 */
class ECBMotionTransferIK extends DefaultECBehavior
	/** Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		/** Update controllers. */
		class UpdateControllers extends ECBehaviorActorAnimated.DefaultListener
			private var Instance pInstance
			
			public func new(Instance instance)
				pInstance = instance
			end
			
			public func void updateControllers(ECBehaviorActorAnimated.Instance instance, float elapsed)
				pInstance.updateControllers()
			end
		end
		
		
		
		private var ECBMotionTransferIK pECBehavior
		private var ECBehaviorVRPlayspace.Instance pVRPlayspace
		private var ECBehaviorActorAnimated.Instance pActorAnimated
		private var ECBTrackerSlot.Instance pSlotTarget
		private var ECBTrackerSlot.Instance pSlotGuide
		private var ECBTrackerSlot.Instance pSlotBase
		private var AnimatorController pControllerTargetPosition
		private var AnimatorController pControllerTargetOrientation
		private var AnimatorController pControllerGuidePosition
		private var AnimatorController pControllerGuideUp
		private var AnimatorController pControllerTwist
		private var AnimatorController pControllerRetracted
		private var Matrix pTransformTarget
		private var Matrix pTransformGuide
		private var Matrix pTransformBase
		private var Vector pGuideUp
		private var Vector pTargetOffset
		private var AnimatorInstance pAnimatorInstance
		private var Component pComponent
		private var int pTargetBone
		private var float pScaleReach
		private var Quaternion pTwistQuat, pTwistQuatInv
		
		
		
		/** Create instance. */
		public func new(ECBMotionTransferIK ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			
			pVRPlayspace = ecbehavior.getVRPlayspace().instance(element)
			pActorAnimated = ecbehavior.getActorAnimated().instance(element)
			
			pTargetOffset = ecbehavior.getTransfer().getCalibrateTargetOffset()
			pScaleReach = ecbehavior.getTransfer().getCalibrateReachScale()
			pTwistQuat = Quaternion.newFromEuler(ecbehavior.getTransfer().getTwistAxisRotation())
			pTwistQuatInv = pTwistQuat.conjugate()
			
			if ecbehavior.getSlotTarget() != null
				pSlotTarget = ecbehavior.getSlotTarget().instance(element)
				pTransformTarget = ecbehavior.getTransfer().getTargetTracker().getTransformMatrix()
			end
			
			if ecbehavior.getSlotGuide() != null
				pSlotGuide = ecbehavior.getSlotGuide().instance(element)
				pTransformGuide = ecbehavior.getTransfer().getGuideTracker().getTransformMatrix()
				pGuideUp = MotionTransferIK.trackToVectorFromAxis(ecbehavior.getTransfer().getCalibrateGuideUpAxis())
			end
			
			if ecbehavior.getSlotBase() != null
				pSlotBase = ecbehavior.getSlotBase().instance(element)
				pTransformBase = ecbehavior.getTransfer().getBaseTracker().getTransformMatrix()
			end
		end
		
		/** Dispose of instance. */
		public func void dispose()
			pSlotGuide = null
			pSlotTarget = null
			pSlotBase = null
			pVRPlayspace = null
			pActorAnimated = null
			super.dispose()
		end
		
		
		
		/** Init behavior instance. */
		public func void init(StubElement stub)
			pComponent = pActorAnimated.getComponent().getComponent()
			
			pControllerTargetPosition = pActorAnimated.getControllerNamed(pECBehavior.getControllerNameTargetPosition())
			pControllerTargetOrientation = pActorAnimated.getControllerNamed(pECBehavior.getControllerNameTargetOrientation())
			pControllerGuidePosition = pActorAnimated.getControllerNamed(pECBehavior.getControllerNameGuidePosition())
			pControllerGuideUp = pActorAnimated.getControllerNamed(pECBehavior.getControllerNameGuideUp())
			pControllerRetracted = pActorAnimated.getControllerNamed(pECBehavior.getControllerNameRetracted())
			
			pActorAnimated.addListener(UpdateControllers.new(this))
			
			// post animator if used
			var Animator animator = pECBehavior.getAnimatorPost()
			if animator != null
				animator.setRig(pComponent.getRig())
				
				pAnimatorInstance = AnimatorInstance.new()
				pAnimatorInstance.setAnimator(animator)
				pAnimatorInstance.setComponent(pComponent)
				
				pControllerTwist = pAnimatorInstance.getControllerNamed(pECBehavior.getControllerNameTwist())
				
				pTargetBone = pComponent.indexOfBoneNamed(pECBehavior.getTransfer().getTargetBone())
				
				setRequiresThink(true)
			end
		end
		
		
		/** Behavior. */
		public func ECBMotionTransferIK getECBehavior()
			return pECBehavior
		end
		
		/** VR Playspace. */
		public func ECBehaviorVRPlayspace.Instance getVRPlayspace()
			return pVRPlayspace
		end
		
		/** Actor animated. */
		public func ECBehaviorActorAnimated.Instance getActorAnimated()
			return pActorAnimated
		end
		
		/** Target slot behavior instance or null. */
		public func ECBTrackerSlot.Instance getSlotTarget()
			return pSlotTarget
		end
		
		/** Guide slot behavior instance or null. */
		public func ECBTrackerSlot.Instance getSlotGuide()
			return pSlotGuide
		end
		
		/** Base slot behavior instance or null. */
		public func ECBTrackerSlot.Instance getSlotBase()
			return pSlotBase
		end
		
		/** Animator controller target position. */
		public func AnimatorController getControllerTargetPosition()
			return pControllerTargetPosition
		end
		
		/** Animator controller target orientation. */
		public func AnimatorController getControllerTargetOrientation()
			return pControllerTargetOrientation
		end
		
		/** Animator controller guide position. */
		public func AnimatorController getControllerGuidePosition()
			return pControllerGuidePosition
		end
		
		/** Animator controller guide up. */
		public func AnimatorController getControllerGuideUp()
			return pControllerGuideUp
		end
		
		
		
		/** Frame update. */
		public func void think(float elapsed)
			if pAnimatorInstance == null
				return
			end
			
			// update bones. this causes the actor animator to be processed now instead of
			// in parallel. this is not optimal for performance but required to run post
			// animator since it needs to know certain states
			pComponent.updateBones()
			
			if pControllerTwist != null
				if pTargetBone != -1
					if true // using bone local twist
						//pControllerTwist.setValue(pComponent.boneGetRotation(pTargetBone).getEulerAngles().getZ())
						
						var Quaternion orientation = pTwistQuat * pComponent.boneGetRotation(pTargetBone) * pTwistQuatInv
						pControllerTwist.setValue(orientation.getEulerAngles().getZ())
						
					else
						var Quaternion orientation = pTwistQuat * pComponent.boneGetRotation(pTargetBone) * pTwistQuatInv
						var float angle = orientation.getEulerAngles().getZ()
						
// 						if pECBehavior.getTransfer().getName().equals("Head Spine")
// 							getElement().log("Twist: " + angle)
// 						end
						
						pControllerTwist.setValue(angle)
					end
					
				else
					pControllerTwist.setValue(0)
				end
			end
			
			pAnimatorInstance.apply()
		end
		
		
		/** Update controllers. */
		public func void updateControllers()
			if pSlotTarget != null
				var Matrix matrix = pTransformTarget * pSlotTarget.getMatrixPlayspace()
				
				if pControllerTargetPosition != null
					var Vector targetPosition = matrix.getPosition() + pTargetOffset
					
					var Matrix baseMatrix
					var Vector basePosition
					if pSlotBase != null
						baseMatrix = pTransformBase * pSlotBase.getMatrixPlayspace()
						basePosition = baseMatrix.getPosition() + pTargetOffset
						
						targetPosition = basePosition + (targetPosition - basePosition) * pScaleReach
						
						if pControllerRetracted != null
							pControllerRetracted.setValue((targetPosition - basePosition).getLength())
						end
					end
					
					pControllerTargetPosition.setVector(targetPosition)
				end
				
				if pControllerTargetOrientation != null
					pControllerTargetOrientation.setRotation(matrix.normalize().getEulerAngles())
				end
			end
			
			if pSlotGuide != null
				var Matrix matrix = pTransformGuide * pSlotGuide.getMatrixPlayspace()
				
				if pControllerGuidePosition != null
					pControllerGuidePosition.setVector(matrix.getPosition() + pTargetOffset)
				end
				if pControllerGuideUp != null
					pControllerGuideUp.setVector(matrix.normalize().transformNormal(pGuideUp))
				end
			end
		end
	end
	
	
	
	private var MotionTransferIK pTransfer
	private var ECBehaviorVRPlayspace pVRPlayspace
	private var ECBehaviorActorAnimated pActorAnimated
	private var ECBTrackerSlot pSlotTarget
	private var ECBTrackerSlot pSlotGuide
	private var ECBTrackerSlot pSlotBase
	private var String pControllerNameTargetPosition
	private var String pControllerNameTargetOrientation
	private var String pControllerNameGuidePosition
	private var String pControllerNameGuideUp
	private var String pControllerNameTwist
	private var String pControllerNameRetracted
	private var Animator pAnimatorPost
	
	
	
	/** Create behavior element class. */
	public func new(BaseVRActorClass eclass, MotionTransferIK transfer) super(eclass, transfer.getName())
		if transfer == null
			throw ENullPointer.new("transfer")
		end
		
		var String subId = "motionTransferIK(" + transfer.getName() + ")"
		var String prefix = subId + "."
		
		pTransfer = transfer
		pVRPlayspace = eclass.getVRPlayspace()
		pActorAnimated = eclass.getActorAnimated()
		if transfer.getTargetTracker() != null
			pSlotTarget = ECBTrackerSlot.getBehaviorIn(eclass, transfer.getTargetTracker().getSlot())
		end
		if transfer.getGuideTracker() != null
			pSlotGuide = ECBTrackerSlot.getBehaviorIn(eclass, transfer.getGuideTracker().getSlot())
		end
		if transfer.getBaseTracker() != null
			pSlotBase = ECBTrackerSlot.getBehaviorIn(eclass, transfer.getBaseTracker().getSlot())
		end
		
		pControllerNameTargetPosition = transfer.getName() + ".targetPosition"
		pControllerNameTargetOrientation = transfer.getName() + ".targetOrientation"
		pControllerNameGuidePosition = transfer.getName() + ".guideTrack"
		pControllerNameGuideUp = transfer.getName() + ".guideUp"
		pControllerNameTwist = transfer.getName() + ".twist"
		pControllerNameRetracted = transfer.getName() + ".retracted"
		
		eclass.addBehavior(this)
	end
	
	/** Dispose of behavior. */
	public func void dispose()
		pVRPlayspace = null
		pActorAnimated = null
		pTransfer = null
		pSlotGuide = null
		pSlotTarget = null
		pSlotBase = null
		super.dispose()
	end
	
	
	
	/** Motion transfer. */
	public func MotionTransferIK getTransfer()
		return pTransfer
	end
	
	/** VR Playspace behavior. */
	public func ECBehaviorVRPlayspace getVRPlayspace()
		return pVRPlayspace
	end
	
	/** Actor animated behavior. */
	public func ECBehaviorActorAnimated getActorAnimated()
		return pActorAnimated
	end
	
	/** Target slot behavior or null. */
	public func ECBTrackerSlot getSlotTarget()
		return pSlotTarget
	end
	
	/** Guide slot behavior or null. */
	public func ECBTrackerSlot getSlotGuide()
		return pSlotGuide
	end
	
	/** Base slot behavior or null. */
	public func ECBTrackerSlot getSlotBase()
		return pSlotBase
	end
	
	/** Animator controller name target position. */
	public func String getControllerNameTargetPosition()
		return pControllerNameTargetPosition
	end
	
	/** Animator controller name target orientation. */
	public func String getControllerNameTargetOrientation()
		return pControllerNameTargetOrientation
	end
	
	/** Animator controller name guide position. */
	public func String getControllerNameGuidePosition()
		return pControllerNameGuidePosition
	end
	
	/** Animator controller name guide up. */
	public func String getControllerNameGuideUp()
		return pControllerNameGuideUp
	end
	
	/** Animator controller name twist. */
	public func String getControllerNameTwist()
		return pControllerNameTwist
	end
	
	/** Animator controller name retracted. */
	public func String getControllerNameRetracted()
		return pControllerNameRetracted
	end
	
	/** Post animator. */
	public func Animator getAnimatorPost()
		return pAnimatorPost
	end
	
	/** Set post animator. */
	public func void setAnimatorPost(Animator animator)
		pAnimatorPost = animator
	end
	
	
	
	/** Get instance in element from owner element class. */
	public func Instance instance( BehaviorElement element )
		return element.getInstanceAt( this.getInstanceIndex() ) cast Instance
	end
	
	
	
	/** Get behavior with slot name in element class or null if absent. */
	static public func ECBMotionTransferIK getBehaviorIn(BehaviorElementClass eclass, String slotName)
		return eclass.findBehavior(block ECBMotionTransferIK each
			return each.getTransfer().getName().equals(slotName)
		end) cast ECBMotionTransferIK
	end
	
	/** Get list of all behaviors in element. */
	static public func Array getAllBehaviorsIn(BehaviorElementClass eclass)
		return eclass.collectBehaviors(block ECBMotionTransferIK each
			return true
		end)
	end
	
	/** Get instance with slot name in element or null if absent. */
	static public func Instance getInstanceIn(BehaviorElement element, String slotName)
		return element.findInstance(block Instance each
			return each.getECBehavior().getTransfer().getName().equals(slotName)
		end) cast Instance
	end
	
	/** Get list of all instances in element. */
	static public func Array getAllInstancesIn(BehaviorElement element)
		return element.collectInstances(block Instance each
			return true
		end)
	end
	
	
	
	/** Create Behavior instance. */
	public func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
