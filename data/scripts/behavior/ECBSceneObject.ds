/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Behaviors

pin Dragengine.Gui
pin Dragengine.LoadSave
pin Dragengine.Preloading
pin Dragengine.Scenery


/**
 * Behavior for scene object elements. Scene objects have an optional name and are shown
 * to the user in the project panel. Scene objects are persistable except the active
 * motion capture actor which is not saved.
 */
class ECBSceneObject extends DefaultECBehavior
	/** Listener for behavior instance events. */
	interface Listener
		/** Name changed. */
		func void nameChanged(Instance instance)
	end
	
	/** Default implementation of behavior instance listener. */
	class DefaultListener implements Listener
		/** Create default listener. */
		func new()
		end
		
		/** Name changed. */
		func void nameChanged(Instance instance)
		end
	end
	
	/** Create scene object stub initializer interace. */
	interface SceneObjectStubInitializer
		/** Init stub. Returns true if sucessful or false otherwise. */
		func bool initStub(StubElement stub, Window window)
	end
	
	/** Behavior instance. */
	class Instance extends DefaultECBehaviorInstance
		var ECBSceneObject pECBehavior
		var String pName
		var String pDisplayName
		protected var Array pListeners
		
		
		
		/** Create instance. */
		func new(ECBSceneObject ecbehavior, BehaviorElement element) super(element)
			pECBehavior = ecbehavior
			pName = ""
			pListeners = Array.new()
		end
		
		/** Dispose of instance. */
		func void dispose()
			super.dispose()
			pListeners = null
		end
		
		/** Init behavior. */
		func void init(StubElement stub)
			pName = pECBehavior.name.getValue(stub)
		end
		
		
		/** Behavior. */
		func ECBSceneObject getECBehavior()
			return pECBehavior
		end
		
		/** Set name or empty string. */
		func String getName()
			return pName
		end
		
		/** Set name or empty string. */
		func void setName(String name)
			if name.equals(pName)
				return
			end
			
			pName = name
			pDisplayName = null
			
			pListeners.forEach(block Listener each
				each.nameChanged(this)
			end)
			
			var Scene scene = getScene()
			if scene != null
				scene.notifyObjectNameChanged(this)
			end
		end
		
		/** Display name for list boxes. */
		func String getDisplayName()
			if pDisplayName == null
				if pName.empty()
					var Element e = getElement()
					pDisplayName = "{}: {}".format(Array.newWith(e.getClass().getClassname(), e.getID()))
					
				else
					pDisplayName = pName
				end
			end
			
			return pDisplayName
		end
		
		
		
		/** Scene if object belongs to active game world otherwise null. */
		protected func Scene getScene()
			var GameWorld world = getElement().getGameWorld()
			if world == GameApp.getGameApp().getWindowGameWorld().getGameWorld()
				return GameApp.getGameApp().getScene()
			end
			return null
		end
		
		
		
		/** Add listener. */
		func void addListener(Listener listener)
			if listener == null
				throw ENullPointer.new("listener")
			end
			pListeners.add(listener)
		end
		
		/** Remove listener. */
		func void removeListener(Listener listener)
			pListeners.remove(listener)
		end
		
		
		
		/** Added to game world. */
		func void addToGameWorld()
			var Scene scene = getScene()
			if scene != null
				scene.notifyObjectAdded(this)
			end
		end
		
		/** Removed from game world. */
		func void removeFromGameWorld()
			var Scene scene = getScene()
			if scene != null
				scene.notifyObjectRemoved(this)
			end
		end
		
		/** Element geometry changed. */
		func void geometryChanged()
			var Scene scene = getScene()
			if scene != null
				scene.notifyObjectGeometryChanged(this)
			end
		end
		
		
		/** String representation. */
		func String toString()
			return getDisplayName()
		end
		
		
		
		/** Read from file. */
		func void readFromFile(PersistencyEnvironment env, FileReader reader)
			select reader.readByte() // version
			case 0
				pName = reader.readString8()
				
			else
				throw EInvalidParam.new("unsupported version")
			end
		end
		
		/** Write to file. */
		func void writeToFile(PersistencyEnvironment env, FileWriter writer)
			writer.writeByte(0) // version
			writer.writeString8(pName)
		end
	end
	
	
	public var ECPString name
	public var ECPVector addActorOffset
	public var ECPBoolean canRemove
	public var ECPBoolean canHide
	public var ECPBoolean editPanelNoBehaviors
	public var ECPBoolean editPanelNoPhysics
	public var Array pSceneObjectStubInitializers
	
	
	/** Create behavior element class. */
	func new(BehaviorElementClass eclass) super(eclass)
		var String prefix = "sceneObject."
		
		pSceneObjectStubInitializers = Array.new()
		
		name = ECPString.new(prefix + "name", "")
		eclass.addProperty(name)
		
		addActorOffset = ECPVector.new(prefix + "addActorOffset", null)
		eclass.addProperty(addActorOffset)
		
		canRemove = ECPBoolean.new(prefix + "canRemove", false)
		eclass.addProperty(canRemove)
		
		canHide = ECPBoolean.new(prefix + "canHide", false)
		eclass.addProperty(canHide)
		
		editPanelNoBehaviors = ECPBoolean.new(prefix + "editPanelNoBehaviors", false)
		eclass.addProperty(editPanelNoBehaviors)
		
		editPanelNoPhysics = ECPBoolean.new(prefix + "editPanelNoPhysics", false)
		eclass.addProperty(editPanelNoPhysics)
		
		eclass.addBehavior(this)
	end
	
	/** Dispose of behavior. */
	func void dispose()
		pSceneObjectStubInitializers = null
		super.dispose()
	end
	
	
	/** Add create scene object stub initializer or null. */
	func void addSceneObjectStubInitializer(SceneObjectStubInitializer initializer)
		pSceneObjectStubInitializers.add(initializer)
	end
	
	/**
	 * Run scene object stub initializers. Returns true if all initializers succeeded.
	 */
	func bool runSceneObjectStubInitializers(StubElement stub, Window window)
		return pSceneObjectStubInitializers.find(block SceneObjectStubInitializer each
			return not each.initStub(stub, window)
		end) == null
	end
	
	
	/** Get instance in element from owner element class. */
	func Instance instance(BehaviorElement element)
		return element.getInstanceAt(getInstanceIndex()) cast Instance
	end
	
	/** Get behavior in element class or null if absent. */
	static func ECBSceneObject getBehaviorIn(BehaviorElementClass eclass)
		return eclass.findBehavior(block ECBSceneObject each
			return true
		end) cast ECBSceneObject
	end
	
	/** Get instance in element or null if absent. */
	static func Instance getInstanceIn(BehaviorElement element)
		return element.findInstance(block Instance each
			return true
		end) cast Instance
	end
	
	
	/** Create Behavior instance. */
	func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
