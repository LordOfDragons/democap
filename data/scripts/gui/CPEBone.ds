/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Gui

pin Democap.Behaviors

pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts
pin Dragengine.Scenery
pin Dragengine.Utils.StyledText.Definition
pin Dragengine.Utils.StyledText.Definition.Nodes


/**
 * Character preview editor to select a single bone.
 */
class CPEBone extends CharacterPreviewEditor
	/**
	 * List element renderer to ask for bone to select. Modified version of
	 * DefaultListElementRenderer supporting ECBPreviewBones.Instance.Bone
	 */
	class SelectBoneRenderer extends DefaultListElementRenderer
		public func new()
		end
		
		public func void updateRenderer(ListBox listBox, Widget renderer, Object element, bool selected, bool focused)
			var ECBPreviewBones.Instance.Bone bone = element cast ECBPreviewBones.Instance.Bone
			if bone == null
				// null element typically is the one asking for the default size
				super.updateRenderer(listBox, renderer, String.new('X', 15), selected, focused)
				return
			end
			
			var String text = bone.name
			
			if bone.color.equals(CharacterPreviewEditor.previewBoneColorSelected)
				text = text + " [Selected]"
				
			elif bone.color.equals(CharacterPreviewEditor.previewBoneColorChain)
				text = text + " [Chain]"
			end
			
			super.updateRenderer(listBox, renderer, text, selected, focused)
		end
	end
	
	/** Element clicked listener. */
	class ElementClicked extends ClickedActionListener
		private var CPEBone pEditor
		
		public func new(CPEBone editor)
			pEditor = editor
		end
		
		public func void onAction()
			pEditor.onElementClicked()
		end
	end
	
	
	
	protected var Label pLabelBone
	protected var ComboBox pCBBone
	protected var ElementClicked pElementClicked
	
	
	
	/** Create character preview editor. */
	public func new(WidgetCharacterPreview preview, Label labelBone, ComboBox cbBone)\
	this(preview, labelBone, cbBone, true)
	end
	
	protected func new(WidgetCharacterPreview preview, Label labelBone, ComboBox cbBone,\
	bool addListeners) super(preview)
		if cbBone == null
			throw ENullPointer.new("cbBone")
		end
		pCBBone = cbBone
		pLabelBone = labelBone
		
		if addListeners
			if labelBone != null
				labelBone.addMouseListener(ClickedActivateEditor.new(this, cbBone))
			end
			
			if cbBone.getEditor() != null
				cbBone.getEditor().getWidget().addFocusListener(ReceiveFocusActivateEditor.new(this))
				cbBone.getEditor().addActionListener(UpdateOnAction.new(this))
				
			else
				cbBone.addFocusListener(ReceiveFocusActivateEditor.new(this))
			end
			cbBone.getModel().addListener(UpdateOnListChanged.new(this))
		end
	end
	
	
	
	/** Combo box bone. */
	public func ComboBox getComboBoxBone()
		return pCBBone
	end
	
	
	
	/** Editor has been activated. */
	public func void onActivate()
		updateBoneColors()
		
		pElementClicked = ElementClicked.new(this)
		getPreview().getInteractionPanel().addMouseListener(pElementClicked)
		
		if pLabelBone != null
			pLabelBone.setDesignerSelector("Label.FormCaption.Hilight")
		end
	end
	
	/** Editor has been deactivated. */
	public func void onDeactivate()
		if pElementClicked != null
			getPreview().getInteractionPanel().removeMouseListener(pElementClicked)
			pElementClicked = null
		end
		
		var ECBPreviewBones.Instance bones = getPreviewBones()
		if bones != null
			bones.setAllBoneColor(previewBoneColorDefault)
		end
		
		if pLabelBone != null
			pLabelBone.setDesignerSelector("Label.FormCaption")
		end
	end
	
	/** Model value changed. */
	public func void onModelValueChanged()
		if isActive()
			updateBoneColors()
		end
	end
	
	/** Frame update. */
	public func void onFrameUpdate(float elapsed)
		updateToolTip()
	end
	
	/** Element clicked. */
	public func void onElementClicked()
		var Array hits = Array.new()
		getPreview().viewRayCollisions(hits)
		
		if hits.getCount() > 0
			selectElement(hits)
		end
	end
	
	
	
	/** Update preview bone colors. */
	protected func void updateBoneColors()
		var ECBPreviewBones.Instance bones = getPreviewBones()
		if bones == null
			return
		end
		
		bones.setAllBoneColor(previewBoneColorDefault)
		
		if pCBBone.getEditor() != null
			var String selected = pCBBone.getEditor().getEditorValue() cast String
			if selected != null
				bones.setBoneColor(selected, previewBoneColorSelected)
			end
		end
	end
	
	/** Update tool tip. */
	protected func void updateToolTip()
		var WidgetCharacterPreview preview = getPreview()
		var Array hits = Array.new()
		preview.viewRayCollisions(hits)
		
		var StyledTextDefinition std = preview.createToolTipStyledTextDefinition()
		var ECBPreviewBones.Instance.Bone bone
		var STDNText nodeText
		
		hits.forEach(block WidgetCharacterPreview.HitResult each
			if each.getObject() castable ECBPreviewBones.Instance.Bone
				bone = each.getObject() cast ECBPreviewBones.Instance.Bone
				
				nodeText = STDNText.new()
				
				if bone.color.equals(CharacterPreviewEditor.previewBoneColorSelected)
					nodeText.setStyle("selected")
					
				elif bone.color.equals(CharacterPreviewEditor.previewBoneColorChain)
					nodeText.setStyle("chain")
					
				else
					nodeText.setStyle("default")
				end
				
				nodeText.addSpan(STDNTextSpan.new("- " + bone.name))
				std.addNode(nodeText)
			end
		end)
		
		if std.getNodeCount() > 0
			preview.setToolTip(std)
			
		else
			preview.setToolTip(null)
		end
	end
	
	/** Select element. */
	protected func void selectElement(Array hits)
		// filter preview bones
		hits = hits.collectCastable(block WidgetCharacterPreview.HitResult each
			return each.getObject() castable ECBPreviewBones.Instance.Bone
		end)
		
		// if more than one bone is hit ask which one to select
		if hits.getCount() > 1
			// model has to contain bones so map the array
			var Array bones = hits.map(block WidgetCharacterPreview.HitResult each
				return each.getObject() cast ECBPreviewBones.Instance.Bone
			end)
			
			var DefaultListModel model = DefaultListModel.new(bones)
			
			// select selected bone if possible
			var String selectedName
			
			if getEditComboBox().getEditor() != null
				selectedName = getEditComboBox().getEditor().getEditorValue() cast String
				
			elif getEditComboBox().getSelectedElement() != -1
				selectedName = getEditComboBox().getModel().getAt(getEditComboBox().getSelectedElement()) cast String
			end
			
			if selectedName != null
				var ECBPreviewBones.Instance.Bone bone = bones.find(block ECBPreviewBones.Instance.Bone each
					return each.name.equals(selectedName)
				end) cast ECBPreviewBones.Instance.Bone
				
				if bone != null
					model.setSelected(bones.indexOf(bone))
				end
			end
			
			// show dialog to make user choose bone
			WindowDialog.chooseList(getPreview().getWindow(), "Select Bone", "Choose bone to select",\
				null, model, SelectBoneRenderer.new(), null, null, \
				WindowDialog.BlockResultListener.new(block int result
					if result != -1
						selectElement(Array.newWith(hits.getAt(result)))
					end
				end))
			
			// result listener will call this method again with modified hits array
			return
		end
		
		// if only one bone is hit select it
		if hits.getCount() == 1
			var WidgetCharacterPreview.HitResult hit = hits.getAt(0) cast WidgetCharacterPreview.HitResult
			var ECBPreviewBones.Instance.Bone bone = hit.getObject() cast ECBPreviewBones.Instance.Bone
			
			getEditComboBox().getEditor().setEditorValue(bone.name)
		end
	end
	
	/** Edit combo box. */
	protected func ComboBox getEditComboBox()
		return pCBBone
	end
end
