/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Gui

pin Democap.Behaviors

pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts
pin Dragengine.Scenery
pin Dragengine.Utils.StyledText.Definition
pin Dragengine.Utils.StyledText.Definition.Nodes


/**
 * Character preview editor to edit position.
 */
class CPECoordinateSystem extends CharacterPreviewEditor
	/** Interact handle listener. */
	class InteractHandleListener extends DefaultMouseListener
		private var CPECoordinateSystem pEditor
		private var ECBPreviewCoordSystem.Handle pHandle
		private var Matrix pViewMatrix
		private var Matrix pCSMatrix
		private var Matrix pInvCSParentMatrix
		private var Vector pPlanePosition
		private var Vector pPlaneNormal
		private var Vector pPlaneX
		private var Vector pPlaneY
		private var Vector pInteractOrigin
		private var Vector pInteractAxis
		private var Vector pOriginPosition
		private var bool pIsMove
		private var bool pIsRotate
		
		
		
		public func new(CPECoordinateSystem editor)
			pEditor = editor
		end
		
		public func void onButtonPress(MouseEvent event)
			if pHandle != null or event.getButton() != InputEventMouseButton.left
				return
			end
			
			var Array hits = Array.new()
			pEditor.getPreview().viewRayCollisions(hits, event.getPosition())
			
			var WidgetCharacterPreview.HitResult hit = hits.findCastable(block WidgetCharacterPreview.HitResult each
				return each.getObject() castable ECBPreviewCoordSystem.Handle
			end) cast WidgetCharacterPreview.HitResult
			
			if hit == null
				return
			end
			
			var ECBPreviewCoordSystem.Instance previewCoordSystem = pEditor.getPreviewCoordSystem()
			
			pHandle = hit.getObject() cast ECBPreviewCoordSystem.Handle
			pCSMatrix = previewCoordSystem.getMatrix().toMatrix()
			pInvCSParentMatrix = previewCoordSystem.getParentMatrix().getInverse().toMatrix()
			
			pInteractOrigin = hit.getHitPoint().toVector()
			
			pOriginPosition = previewCoordSystem.getPosition()
			
			select pHandle
			case ECBPreviewCoordSystem.Handle.moveX
				pInteractAxis = pCSMatrix.getRightVector().normalize()
				pIsMove = true
				
			case ECBPreviewCoordSystem.Handle.moveY
				pInteractAxis = pCSMatrix.getUpVector().normalize()
				pIsMove = true
				
			case ECBPreviewCoordSystem.Handle.moveZ
				pInteractAxis = pCSMatrix.getViewVector().normalize()
				pIsMove = true
				
			case ECBPreviewCoordSystem.Handle.rotateX
				pInteractAxis = pCSMatrix.getRightVector().normalize()
				pIsRotate = true
				
			case ECBPreviewCoordSystem.Handle.rotateY
				pInteractAxis = pCSMatrix.getUpVector().normalize()
				pIsRotate = true
				
			case ECBPreviewCoordSystem.Handle.rotateZ
				pInteractAxis = pCSMatrix.getViewVector().normalize()
				pIsRotate = true
			end
			
			if pInteractAxis == null
				return
			end
			
			pViewMatrix = pEditor.getPreview().getCameraDirector().getCameraMatrix().toMatrix().normalize()
			
			if pIsMove
				var Vector up = pViewMatrix.getUpVector()
				var Vector right = pViewMatrix.getRightVector()
				
				pPlanePosition = pInteractOrigin
				
				if DEMath.fabs(up * pInteractAxis) < 0.707 // roughly 45 degrees
					pPlaneNormal = (up % pInteractAxis).normalize()
					
				else
					pPlaneNormal = (pInteractAxis % right).normalize()
				end
				
			elif pIsRotate
				pPlanePosition = pCSMatrix.getPosition()
				pPlaneNormal = pInteractAxis
				
				// the direction towards the interaction point is used as X axis. the Y axis is
				// then the X axis crossed with the plane normal. this allows to use the plane
				// normal as rotation axis and DEMath.atan2() to calculate the rotation angle
				
				// ensure the interaction point is on the plane. this prevents the rotation
				// jumping after the first mouse move due to the hit point being slightly
				// outside the plane
				var Vector rayOrigin = pViewMatrix.getPosition()
				var Vector rayDirection = pEditor.getPreview().viewRayDirection(event.getPosition())
				
				var float denom = rayDirection * pPlaneNormal
				if denom != 0
					var float lambda = ((pPlanePosition - rayOrigin) * pPlaneNormal) / denom
					var Vector hitPoint = rayOrigin + rayDirection * lambda
					pPlaneX = (hitPoint - pPlanePosition).normalize()
					
				else
					pPlaneX = (pInteractOrigin - pPlanePosition).normalize()
				end
				
				pPlaneY = (pPlaneX % pPlaneNormal).normalize()
			end
			
			pEditor.getPreview().getInteractionPanel().captureMouse()
		end
		
		public func void onMouseMove(MouseEvent event)
			if pHandle == null or pInteractAxis == null
				return
			end
			
			// calculate intersecton of view ray with interaction plane
			var ECBPreviewCoordSystem.Instance previewCoordSystem = pEditor.getPreviewCoordSystem()
			var Matrix matrix = previewCoordSystem.getMatrix().toMatrix()
			
			var Vector rayOrigin = pViewMatrix.getPosition()
			var Vector rayDirection = pEditor.getPreview().viewRayDirection(event.getPosition())
			
			var float denom = rayDirection * pPlaneNormal
			if denom == 0
				return
			end
			
			var float lambda = ((pPlanePosition - rayOrigin) * pPlaneNormal) / denom
			var Vector hitPoint = rayOrigin + rayDirection * lambda
			
			// apply interaction
			if pIsMove
				var float distance = pInteractAxis * (hitPoint - pInteractOrigin)
				
				select pHandle
				case ECBPreviewCoordSystem.Handle.moveX
					pEditor.getEditPosition().setVector(pOriginPosition + \
						pInvCSParentMatrix.transformNormal(pCSMatrix.getRightVector() * distance))
					
				case ECBPreviewCoordSystem.Handle.moveY
					pEditor.getEditPosition().setVector(pOriginPosition + \
						pInvCSParentMatrix.transformNormal(pCSMatrix.getUpVector() * distance))
					
				case ECBPreviewCoordSystem.Handle.moveZ
					pEditor.getEditPosition().setVector(pOriginPosition + \
						pInvCSParentMatrix.transformNormal(pCSMatrix.getViewVector() * distance))
				end
				
			elif pIsRotate
				var Vector v = hitPoint - pPlanePosition
				if v.getLength() < 0.001
					return
				end
				
				var float angle = DEMath.atan2(pPlaneY * v, pPlaneX * v)
				
				if lambda < 0
					// lambda is negative if the ray points away from the plane. in this case the
					// hit point is at the opposite direction causing angle to be 180 degrees off.
					// it does not matter in what direction the 180 degrees are corrected since
					// the angle is normalized anyway
					angle -= 180
				end
				
				angle = DEMath.normalize(angle, -180.0, 180.0)
				
				var Matrix matrix = pCSMatrix * Matrix.newRotationAxis(pPlaneNormal, angle) * pInvCSParentMatrix
				pEditor.getEditRotation().setVector(matrix.getEulerAngles())
			end
		end
		
		public func void onButtonRelease(MouseEvent event)
			if pHandle == null or event.getButton() != InputEventMouseButton.left
				return
			end
			
			pHandle = null
			pPlanePosition = null
			pPlaneNormal = null
			pPlaneX = null
			pPlaneY = null
			pInteractOrigin = null
			pInteractAxis = null
			pOriginPosition = null
			pIsMove = false
			pIsRotate = false
			
			pEditor.getPreview().getInteractionPanel().releaseMouse()
		end
	end
	
	
	
	private var Label pLabelPosition
	private var Label pLabelRotation
	private var EditVector pEditPosition
	private var EditVector pEditRotation
	private var ComboBox pCBBone
	private var ComboBox pCBSlot
	private var InteractHandleListener pInteractHandleListener
	
	
	
	/** Create character preview editor. */
	public func new(WidgetCharacterPreview preview, Label labelPosition, EditVector editPosition,\
	Label labelRotation, EditVector editRotation, ComboBox cbBone, ComboBox cbSlot) super(preview)
		pLabelPosition = labelPosition
		pLabelRotation = labelRotation
		pEditPosition = editPosition
		pEditRotation = editRotation
		pCBBone = cbBone
		pCBSlot = cbSlot
		
		if labelPosition != null
			labelPosition.addMouseListener(ClickedActivateEditor.new(this, editPosition.getEditX()))
		end
		if labelRotation != null
			labelRotation.addMouseListener(ClickedActivateEditor.new(this, editRotation.getEditX()))
		end
		
		if editPosition != null
			editPosition.addFocusListener(ReceiveFocusActivateEditor.new(this))
			editPosition.addActionListener(UpdateOnAction.new(this))
		end
		if editRotation != null
			editRotation.addFocusListener(ReceiveFocusActivateEditor.new(this))
			editRotation.addActionListener(UpdateOnAction.new(this))
		end
		
		if cbBone != null
			if cbBone.getEditor() != null
				cbBone.getEditor().addActionListener(UpdateOnAction.new(this))
			end
			cbBone.getModel().addListener(UpdateOnListChanged.new(this))
		end
		
		if cbSlot != null
			if cbSlot.getEditor() != null
				cbSlot.getEditor().addActionListener(UpdateOnAction.new(this))
			end
			cbSlot.getModel().addListener(UpdateOnListChanged.new(this))
		end
	end
	
	
	
	/** Edit position widget. */
	public func EditVector getEditPosition()
		return pEditPosition
	end
	
	/** Edit rotation widget or null. */
	public func EditVector getEditRotation()
		return pEditRotation
	end
	
	/** Bone combo box or null. */
	public func ComboBox getComboBoxBone()
		return pCBBone
	end
	
	/** Tracker slot combo box or null. */
	public func ComboBox getComboBoxSlot()
		return pCBSlot
	end
	
	
	
	/** Editor has been activated. */
	public func void onActivate()
		showCoordSystem()
		updateCoordSystem()
		
		pInteractHandleListener = InteractHandleListener.new(this)
		getPreview().getInteractionPanel().addMouseListener(pInteractHandleListener)
		
		if pLabelPosition != null
			pLabelPosition.setDesignerSelector("Label.FormCaption.Hilight")
		end
		if pLabelRotation != null
			pLabelRotation.setDesignerSelector("Label.FormCaption.Hilight")
		end
	end
	
	/** Editor has been deactivated. */
	public func void onDeactivate()
		if pInteractHandleListener != null
			getPreview().getInteractionPanel().removeMouseListener(pInteractHandleListener)
			pInteractHandleListener = null
		end
		
		hideCoordSystem()
		
		if pLabelPosition != null
			pLabelPosition.setDesignerSelector("Label.FormCaption")
		end
		if pLabelRotation != null
			pLabelRotation.setDesignerSelector("Label.FormCaption")
		end
	end
	
	/** Model value changed. */
	public func void onModelValueChanged()
		if isActive()
			updateCoordSystem()
		end
	end
	
	
	
	/** Show coordinate system. */
	protected func void showCoordSystem()
		var ECBPreviewCoordSystem.Instance coordSystem = getPreviewCoordSystem()
		if coordSystem == null
			return
		end
		
		coordSystem.setVisibleMove(true)
		coordSystem.setVisibleRotate(true)
	end
	
	/** Hide coordinate system. */
	protected func void hideCoordSystem()
		var ECBPreviewCoordSystem.Instance coordSystem = getPreviewCoordSystem()
		if coordSystem == null
			return
		end
		
		coordSystem.setVisibleMove(false)
		coordSystem.setVisibleRotate(false)
	end
	
	/** Update coordinate system. */
	protected func void updateCoordSystem()
		var ECBPreviewCoordSystem.Instance coordSystem = getPreviewCoordSystem()
		if coordSystem == null
			return
		end
		
		if pEditPosition != null
			coordSystem.setPosition(pEditPosition.getVector())
			
		else
			coordSystem.setPosition(Vector.new())
		end
		
		if pEditRotation != null
			coordSystem.setRotation(pEditRotation.getVector())
			
		else
			coordSystem.setRotation(Vector.new())
		end
		
		if pCBBone != null
			if pCBBone.getEditor() != null
				coordSystem.setBone(pCBBone.getEditor().getEditorValue() cast String)
				
			elif pCBBone.getSelectedElement() != -1
				coordSystem.setBone(pCBBone.getModel().getAt(pCBBone.getSelectedElement()) cast String)
				
			else
				coordSystem.setBone("")
			end
			
		else
			coordSystem.setBone("")
		end
		
		var String slot = ""
		if pCBSlot != null
			if pCBSlot.getEditor() != null
				coordSystem.setSlot(pCBSlot.getEditor().getEditorValue() cast String)
				
			elif pCBSlot.getSelectedElement() != -1
				coordSystem.setSlot(pCBSlot.getModel().getAt(pCBSlot.getSelectedElement()) cast String)
				
			else
				coordSystem.setSlot("")
			end
			
		else
			coordSystem.setSlot("")
		end
	end
end
