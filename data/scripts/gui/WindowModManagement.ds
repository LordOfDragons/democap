/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Gui
pin Dragengine.Gui
pin Dragengine.Gui.Layouts
pin Dragengine.Services.Mods
pin Dragengine.Gui.Events
pin Dragengine.Gui.Designers
pin Dragengine.Utils
pin Dragengine.Gui.ModManagement


/**
 * \brief Window managing modifications.
 * \version 1.23
 */
class MMWindowModManagement extends WindowDialog
	var MMPanelModManagement pPanelModManagement
	var Panel pPanelBottomLine
	
	
	/**
	 * \brief Create mod management window.
	 */
	func new(Window window, ServiceMods serviceMods)
		runWhileBlockingLayout(block
			setGuiTheme(window.getGuiTheme())
			setTitle("@UI.Modifications")
			setDesignerSelector("Window.Dialog.MMWindowModManagement")
			setSize(window.getDesktop().getContainerSize() - Point.new(100, 100))
			createContent(serviceMods)
		end)
		doLayout()
	end
	
	/** \brief Dispose of widget. */
	func void dispose()
		pPanelModManagement = null
		pPanelBottomLine = null
		super.dispose()
	end
	
	
	
	/**
	 * \brief Close button clicked.
	 * 
	 * Calls \ref MMPanelModManagement#activateMods() then closes the window.
	 */
	func void onCloseModManagement()
		if pPanelModManagement.activateMods()
			GameApp.getGameApp().reloadAfterModsChanged()
		end
		close()
	end
	
	
	
	/** \brief Create content. */
	protected func void createContent(ServiceMods serviceMods)
		setLayout(BorderLayout.new(10))
		
		pPanelModManagement = createPanelModManagement(serviceMods)
		addWidget(pPanelModManagement, BorderLayout.Area.content)
		
		pPanelBottomLine = Panel.new(CentrizedBoxLayout.new(LayoutAxis.x, 20), block Panel p
			p.addWidget(createButton("@UI.Close", "@UI.ModManagement.Close.ToolTip",\
				".Close", BlockActionListener.new(block ActionEvent e
					onCloseModManagement()
				end)))
		end )
		addWidget(pPanelBottomLine, BorderLayout.Area.bottom)
	end
	
	/**
	 * \brief Create mod management panel.
	 * 
	 * Default implementation creates instance of \ref MMPanelModManagement.
	 */
	protected func MMPanelModManagement createPanelModManagement(ServiceMods serviceMods)
		return MMPanelModManagement.new(serviceMods)
	end
	
	/** \brief Create button. */
	protected func Button createButton(String text, String toolTip, String designerSelectorSuffix, ActionListener action)
		var Button button = Button.new(text, action)
		button.setDesignerSelector("Button.MMWindowModManagement" + designerSelectorSuffix)
		button.setToolTip(toolTip)
		return button
	end
end
