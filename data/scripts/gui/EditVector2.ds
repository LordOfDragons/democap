/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Gui

pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events
pin Dragengine.Scenery


/**
 * Edit Vector2 widget.
 */
class EditVector2 extends Panel
	protected class ComponentValueChanged extends DefaultTextModelListener
		private var EditVector2 pEditVector2
		private var int pComponent
		
		public func new(EditVector2 editVector2, int component)
			pEditVector2 = editVector2
			pComponent = component
		end
		
		public func void textChanged(TextModel textModel)
			pEditVector2.onComponentValueChanged(pComponent)
		end
	end
	
	
	
	private var TextField pEditX
	private var TextField pEditY
	private var Vector2 pVector2
	private var bool pPreventUpdate
	private var Array pActionListeners
	
	
	
	/** Create widget. */
	public func new()
		pActionListeners = Array.new()
		pPreventUpdate = true
		
		runWhileBlockingLayout(block
			createContent()
		end)
		
		pVector2 = Vector2.new()
		pPreventUpdate = false
	end
	
	/** Create widget. */
	public func new(Vector2 vector) this()
		setVector2(vector)
	end
	
	/** Dispose of window. */
	public func void dispose()
		pPreventUpdate = true
		pActionListeners = null
		pEditX = null
		pEditY = null
		super.dispose()
	end
	
	
	
	/** Get vector. */
	public func Vector2 getVector2()
		return pVector2
	end
	
	/** Set vector. */
	public func void setVector2(Vector2 vector)
		if vector.equals(pVector2)
			return
		end
		
		pVector2 = vector
		
		pPreventUpdate = true
		pEditX.setText(vector.getX().toString())
		pEditY.setText(vector.getY().toString())
		pPreventUpdate = false
		
		notifyListeners()
	end
	
	
	
	/** X component text field. */
	public func TextField getEditX()
		return pEditX
	end
	
	/** Y component text field. */
	public func TextField getEditY()
		return pEditY
	end
	
	
	
	/** Add focus listener. */
	public func void addFocusListener(FocusListener listener)
		pEditX.addFocusListener(listener)
		pEditY.addFocusListener(listener)
	end
	
	/** Remove focus listener. */
	public func void removeFocusListener(FocusListener listener)
		pEditX.removeFocusListener(listener)
		pEditY.removeFocusListener(listener)
	end
	
	
	
	/** Add action listener. */
	public func void addActionListener(ActionListener listener)
		if listener == null
			throw ENullPointer.new("listener")
		end
		pActionListeners.add(listener)
	end
	
	/** Remove action listener. */
	public func void removeActionListener(ActionListener listener)
		pActionListeners.remove(listener)
	end
	
	
	
	/** Create window content. */
	protected func void createContent()
		setLayout(BoxLayout.new(LayoutAxis.x, 5))
		
		addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 0, FlowLayout.Stretch.last), block Panel p
			p.addWidget(Label.new("X"))
			pEditX = TextField.new(DefaultTextModel.new((0).toString()), 5)
			pEditX.setValidator(SimpleTextValidator.new(10, SimpleTextValidator.CharacterClass.number))
			pEditX.getModel().addListener(ComponentValueChanged.new(this, 0))
			p.addWidget(pEditX)
		end))
		
		addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 0, FlowLayout.Stretch.last), block Panel p
			p.addWidget(Label.new("Y"))
			pEditY = TextField.new(DefaultTextModel.new((0).toString()), 5)
			pEditY.setValidator(SimpleTextValidator.new(10, SimpleTextValidator.CharacterClass.number))
			pEditY.getModel().addListener(ComponentValueChanged.new(this, 1))
			p.addWidget(pEditY)
		end))
	end
	
	/** Component value changed. */
	public func void onComponentValueChanged(int component)
		if pPreventUpdate
			return
		end
		
		var float x = pVector2.getX()
		var float y = pVector2.getY()
		
		try
			select component
			case 0
				x = pEditX.getText().toFloat()
				
			case 1
				y = pEditY.getText().toFloat()
			end
			
		catch Exception e
			return
		end
		
		pVector2 = Vector2.new(x, y)
		
		notifyListeners()
	end
	
	/** Notify listeners. */
	protected func void notifyListeners()
		if pActionListeners == null
			return // disposed
		end
		
		var ActionEvent event = ActionEvent.new(this, ActionEvent.idAction, 0)
		pActionListeners.forEach(block ActionListener each
			each.onAction(event)
		end)
	end
end
