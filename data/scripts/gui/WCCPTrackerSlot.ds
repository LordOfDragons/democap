/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Gui

pin Democap.Actors
pin Democap.Characters

pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events
pin Dragengine.Scenery


/**
 * Edit character config window tracker slot panel.
 */
class WCCPTrackerSlot extends Panel
	class NameChangedListener extends DefaultFocusListener
		private var WCCPTrackerSlot pPanel
		private var TextModel pModel
		
		public func new(WCCPTrackerSlot panel, TextModel model)
			pPanel = panel
			pModel = model
		end
		
		public func void onFocusLost(FocusEvent event)
			var CharacterTrackerSlot slot = pPanel.getTrackerSlot()
			if slot == null
				return
			end
			
			var String name = pModel.getText()
			if slot.getName().equals(name)
				return
			end
			
			if slot.getName().compareNoCase(name) != 0
				name = pPanel.getWindowCharacterConfiguration().uniqueTrackerSlotName(name)
			end
			
			slot.setName(name)
			pModel.setText(name)  // in case it changed
			
			pPanel.getWindowCharacterConfiguration().onTrackerSlotNameChanged()
		end
	end
	
	class SlotTypeChangedListener extends DefaultListModelListener
		private var WCCPTrackerSlot pPanel
		
		public func new(WCCPTrackerSlot panel)
			pPanel = panel
		end
		
		public func void selectionChanged(ListModel listModel)
			var CharacterTrackerSlot slot = pPanel.getTrackerSlot()
			if slot != null
				slot.initFromType(GameApp.getGameApp().getActiveActorProfile())
			end
			
			pPanel.updateCustomEnabled()
		end
	end
	
	class OffsetTemplatesAction extends DefaultActionListener
		private var WCCPTrackerSlot pPanel
		private var EditVector pEditOffsetPosition
		
		public func new(WCCPTrackerSlot panel, EditVector editOffsetPosition)
			pPanel = panel
			pEditOffsetPosition = editOffsetPosition
		end
		
		public func void onAction(ActionEvent event)
			var Widget widget = event.getSource() cast Widget
			var WindowPopup popup = WindowPopup.new()
			var Button button
			
			button = Button.new("Index Controller", BlockActionListener.new(block ActionEvent event
				popup.popdown()
				pEditOffsetPosition.setVector(Vector.new(0, 0, -0.11))
			end))
			popup.addWidget(button)
			
			pPanel.getDesktop().addWindow(popup)
			popup.popup(widget.getDesktopPosition() + Point.new(0, widget.getHeight()))
		end
	end
	
	
	
	private var WindowCharacterConfiguration pWindowCharacterConfiguration
	private var CharacterTrackerSlot pTrackerSlot
	
	private var DefaultTextModel pModelName
	private var DefaultListModel pModelType
	private var EditVector pEditPosition
	private var EditVector pEditRotation
	private var DefaultListModel pModelInputDeviceType
	private var EditVector pEditOffsetPosition
	private var EditVector pEditOffsetRotation
	private var Array pNonCustomWidgets
	
	
	
	/** Create window. */
	public func new(WindowCharacterConfiguration windowCharacterConfiguration)
		pWindowCharacterConfiguration = windowCharacterConfiguration
		
		pModelName = DefaultTextModel.new()
		pModelType = DefaultListModel.new(CharacterTrackerSlot.Type.all().toArray().sorted())
		pModelInputDeviceType = DefaultListModel.new(InputDeviceType.all().toArray().sorted())
		pNonCustomWidgets = Array.new()
		
		runWhileBlockingLayout(block
			createContent()
			
			setEnabled(false)
			updateCustomEnabled()
			
			pModelType.addListener(SlotTypeChangedListener.new(this))
		end)
	end
	
	/** Dispose of window. */
	public func void dispose()
		setTrackerSlot(null)
		
		pNonCustomWidgets = null
		pModelName = null
		pModelType = null
		pEditPosition = null
		pEditRotation = null
		pModelInputDeviceType = null
		pEditOffsetPosition = null
		pEditOffsetRotation = null
		
		pWindowCharacterConfiguration = null
		
		super.dispose()
	end
	
	
	
	/** Window character configuration. */
	public func WindowCharacterConfiguration getWindowCharacterConfiguration()
		return pWindowCharacterConfiguration
	end
	
	/** Character tracker slot or null. */
	public func CharacterTrackerSlot getTrackerSlot()
		return pTrackerSlot
	end
	
	/** Set character tracker slot or null. */
	public func void setTrackerSlot(CharacterTrackerSlot trackerSlot)
		if trackerSlot == pTrackerSlot
			return
		end
		
		pTrackerSlot = trackerSlot
		
		loadValues()
	end
	
	
	
	/** Load values from tracker slot object if present into edit widgets. */
	public func void loadValues()
		if pTrackerSlot != null
			pTrackerSlot.initFromType(GameApp.getGameApp().getActiveActorProfile())
			
			pModelName.setText(pTrackerSlot.getName())
			pModelType.setSelected(pModelType.indexOf(pTrackerSlot.getType()))
			pEditPosition.setVector(pTrackerSlot.getPosition())
			pEditRotation.setVector(pTrackerSlot.getRotation())
			pModelInputDeviceType.setSelected(pModelInputDeviceType.indexOf(pTrackerSlot.getInputDeviceType()))
			pEditOffsetPosition.setVector(pTrackerSlot.getOffsetPosition())
			pEditOffsetRotation.setVector(pTrackerSlot.getOffsetRotation())
			
		else
			pModelName.setText("")
			pModelType.setSelected(pModelType.indexOf(CharacterTrackerSlot.Type.custom))
			pEditPosition.setVector(Vector.new())
			pEditRotation.setVector(Vector.new())
			pModelInputDeviceType.setSelected(pModelInputDeviceType.indexOf(InputDeviceType.vrTracker))
			pEditOffsetPosition.setVector(Vector.new())
			pEditOffsetRotation.setVector(Vector.new())
		end
	end
	
	/** Save value from edit widgets to tracker slot object if present. */
	public func void saveValues()
		if pTrackerSlot == null
			return
		end
		
		var String slotName = pModelName.getText()
		if not pTrackerSlot.getName().equals(slotName)
			if pTrackerSlot.getName().compareNoCase(slotName) != 0
				slotName = pWindowCharacterConfiguration.uniqueTrackerSlotName(slotName)
			end
		end
		
		pTrackerSlot.setName(slotName)
		pTrackerSlot.setType(pModelType.getAt(pModelType.getSelected()) cast CharacterTrackerSlot.Type)
		pTrackerSlot.setPosition(pEditPosition.getVector())
		pTrackerSlot.setRotation(pEditRotation.getVector())
		pTrackerSlot.setInputDeviceType(pModelInputDeviceType.getAt(pModelInputDeviceType.getSelected()) cast InputDeviceType)
		pTrackerSlot.setOffsetPosition(pEditOffsetPosition.getVector())
		pTrackerSlot.setOffsetRotation(pEditOffsetRotation.getVector())
	end
	
	/** Update non custom enabled states. */
	public func void updateCustomEnabled()
		runWhileBlockingLayout(block
			var bool enabled = pModelType.getAt(pModelType.getSelected()) == CharacterTrackerSlot.Type.custom
			pNonCustomWidgets.forEach(block Widget each
				each.setEnabled(enabled)
			end)
		end)
		doLayoutIfBlocked()
	end
	
	
	
	/** Create window content. */
	protected func void createContent()
		var WidgetCharacterPreview preview = pWindowCharacterConfiguration.getCharacterPreview()
		var TextField textField
		var ComboBox comboBox
		var Button button
		var Label label
		
		setLayout(FormLayout.new(true, 10, 2))
		
		// name
		addWidget(Label.new("Name:", "Label.FormCaption"))
		
		textField = TextField.new(pModelName, 15)
		textField.setDesignerSelector("TextField.WindowCharacterConfiguration")
		textField.setToolTip("Unique slot name")
		textField.addFocusListener(NameChangedListener.new(this, pModelName))
		addWidget(textField)
		
		// type
		addWidget(Label.new("Type:", "Label.FormCaption"))
		
		comboBox = ComboBox.new(pModelType)
		comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBox.setToolTip("Type of slot. If not custom uses appropriate values derived from active actor profile.")
		addWidget(comboBox)
		
		// position
		var Label labelPosition = Label.new("Position:", "Label.FormCaption")
		addWidget(labelPosition)
		pNonCustomWidgets.add(labelPosition)
		
		pEditPosition = EditVector.new()
		pEditPosition.setToolTip("Position to use if no input device is attached.")
		addWidget(pEditPosition)
		pNonCustomWidgets.add(pEditPosition)
		
		// rotation
		var Label labelRotation = Label.new("Rotation:", "Label.FormCaption")
		addWidget(labelRotation)
		pNonCustomWidgets.add(labelRotation)
		
		pEditRotation = EditVector.new()
		pEditRotation.setToolTip("Rotation in degrees to use if no input device is attached.")
		addWidget(pEditRotation)
		pNonCustomWidgets.add(pEditRotation)
		
		CPECoordinateSystem.new(preview, labelPosition, pEditPosition, labelRotation, pEditRotation, null, null)
		
		// input device type
		label = Label.new("Device Type:", "Label.FormCaption")
		addWidget(label)
		pNonCustomWidgets.add(label)
		
		comboBox = ComboBox.new(pModelInputDeviceType)
		comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBox.setToolTip("Type of input device valid for this slot.")
		addWidget(comboBox)
		pNonCustomWidgets.add(comboBox)
		
		// offset position
		label = Label.new("Track Position:", "Label.FormCaption")
		addWidget(label)
		
		addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 1, FlowLayout.Stretch.first), block Panel p
			pEditOffsetPosition = EditVector.new()
			pEditOffsetPosition.setToolTip("Controller track position offset. Required for hand controllers "\
				+ " since they typically have their position at the controller tip" )
			p.addWidget(pEditOffsetPosition)
			
			button = Button.new("...", OffsetTemplatesAction.new(this, pEditOffsetPosition))
			p.addWidget(button)
		end))
		
		// offset rotation
		label = Label.new("Track Rotation:", "Label.FormCaption")
		addWidget(label)
		
		pEditOffsetRotation = EditVector.new()
		pEditOffsetRotation.setToolTip("Controller track rotation offset in degrees.")
		addWidget(pEditOffsetRotation)
	end
end
