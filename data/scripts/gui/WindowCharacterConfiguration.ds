/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Gui

pin Democap.Behaviors
pin Democap.Characters
pin Democap.Elements
pin Democap.MotionTransferSystem

pin Dragengine.CameraDirectors
pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events
pin Dragengine.Preloading
pin Dragengine.Scenery


/**
 * Edit character config window.
 */
class WindowCharacterConfiguration extends WindowDialog
	class UpdateListsListener implements WidgetCharacterPreview.Listener
		private var WindowCharacterConfiguration pWindow
		
		public func new(WindowCharacterConfiguration window)
			pWindow = window
		end
		
		public func void characterReloaded(WidgetCharacterPreview widget)
			pWindow.updateBoneLists()
			pWindow.updateMoveLists()
			pWindow.updateMoveCalibrate()
		end
	end
	
	class MoveCalibrateChanged implements ActionListener
		private var WindowCharacterConfiguration pWindow
		
		public func new(WindowCharacterConfiguration window)
			pWindow = window
		end
		
		public func void onAction(ActionEvent event)
			pWindow.updateMoveCalibrate()
		end
	end
	
	class MotionTransferRenderer extends DefaultListElementRenderer
		public func new()
		end
		
		public func void updateRenderer(ListBox listBox, Widget renderer, Object element, bool selected, bool focused)
			var String text = String.new('X', 20)
			if element != null
				text = (element cast MotionTransfer).getName()
			end
			super.updateRenderer(listBox, renderer, text, selected, focused)
		end
	end
	
	class MotionTransferFactoryRenderer extends DefaultListElementRenderer
		public func new()
		end
		
		public func void updateRenderer(ListBox listBox, Widget renderer, Object element, bool selected, bool focused)
			var String text = String.new('X', 20)
			if element != null
				text = (element cast MotionTransferFactory).displayName()
			end
			super.updateRenderer(listBox, renderer, text, selected, focused)
		end
	end
	
	class TrackerSlotSelected extends DefaultListModelListener
		private var WindowCharacterConfiguration pWindow
		
		public func new(WindowCharacterConfiguration window)
			pWindow = window
		end
		
		public func void selectionChanged(ListModel listModel)
			pWindow.selectTrackerSlot()
		end
	end
	
	class TrackerSlotPopupAction extends DefaultActionListener
		private var WindowCharacterConfiguration pWindow
		
		public func new(WindowCharacterConfiguration window)
			pWindow = window
		end
		
		public func void onAction(ActionEvent event)
			var Widget widget = event.getSource() cast Widget
			var WindowPopup popup = WindowPopup.new()
			var Button button
			
			button = Button.new("Add Slot...", BlockActionListener.new(block ActionEvent event
				popup.popdown()
				pWindow.addTrackerSlot()
			end))
			popup.addWidget(button)
			
			button = Button.new("Duplicate Slot...", BlockActionListener.new(block ActionEvent event
				popup.popdown()
				pWindow.duplicateTrackerSlot()
			end))
			popup.addWidget(button)
			
			button = Button.new("Remove Slot", BlockActionListener.new(block ActionEvent event
				popup.popdown()
				pWindow.removeTrackerSlot()
			end))
			button.setEnabled(pWindow.getTrackerSlot() != null)
			popup.addWidget(button)
			
			pWindow.getDesktop().addWindow(popup)
			popup.popup(widget.getDesktopPosition() + Point.new(0, widget.getHeight()))
		end
	end
	
	class MotionTransferSelected extends DefaultListModelListener
		private var WindowCharacterConfiguration pWindow
		
		public func new(WindowCharacterConfiguration window)
			pWindow = window
		end
		
		public func void selectionChanged(ListModel listModel)
			pWindow.selectMotionTransfer()
		end
	end
	
	class MotionTransferPopupAction extends DefaultActionListener
		private var WindowCharacterConfiguration pWindow
		
		public func new(WindowCharacterConfiguration window)
			pWindow = window
		end
		
		public func void onAction(ActionEvent event)
			var Widget widget = event.getSource() cast Widget
			var WindowPopup popup = WindowPopup.new()
			var Button button
			
			button = Button.new("Add Transfer...", BlockActionListener.new(block ActionEvent event
				popup.popdown()
				pWindow.addMotionTransfer()
			end))
			popup.addWidget(button)
			
			button = Button.new("Duplicate Transfer...", BlockActionListener.new(block ActionEvent event
				popup.popdown()
				pWindow.duplicateMotionTransfer()
			end))
			popup.addWidget(button)
			
			button = Button.new("Remove Transfer", BlockActionListener.new(block ActionEvent event
				popup.popdown()
				pWindow.removeMotionTransfer()
			end))
			button.setEnabled(pWindow.getMotionTransfer() != null)
			popup.addWidget(button)
			
			pWindow.getDesktop().addWindow(popup)
			popup.popup(widget.getDesktopPosition() + Point.new(0, widget.getHeight()))
		end
	end
	
	
	
	private var CharacterConfiguration pCharacterConfiguration
	private var DefaultTextModel pModelConfigName
	private var DefaultListModel pModelScaleMode
	private var DefaultTextModel pModelShoulderLevel
	private var DefaultListModel pModelListMoveCalibrate
	private var DefaultTextModel pModelTextMoveCalibrate
	private var DefaultListModel pModelListCameraBone
	private var DefaultTextModel pModelTextCameraBone
	private var EditVector pEditCameraPosition
	private var EditVector pEditCameraRotation
	private var DefaultListModel pModelTrackerSlots
	private var DefaultListModel pModelMotionTransfers
	private var DefaultRangeModel pModelMotionTransferPanel
	private var WidgetCharacterPreview pCharacterPreview
	private var WCCPTrackerSlot pPanelTrackerSlot
	private var Array pPanelsMotionTransfer
	
	
	
	/** Create window. */
	public func new(Window window, CharacterConfiguration config, ResultListener listener)
		pCharacterConfiguration = config
		
		pModelConfigName = DefaultTextModel.new(config.getName())
		pModelScaleMode = DefaultListModel.new(CharacterConfiguration.ScaleMode.all().toArray().sorted())
		pModelShoulderLevel = DefaultTextModel.new(config.getShoulderLevel().toString())
		pModelListMoveCalibrate = DefaultListModel.new()
		pModelListMoveCalibrate.setAutoSelect(false)
		pModelTextMoveCalibrate = DefaultTextModel.new(config.getMoveCalibrate())
		pModelListCameraBone = DefaultListModel.new()
		pModelListCameraBone.setAutoSelect(false)
		pModelTextCameraBone = DefaultTextModel.new(config.getCameraBone())
		
		pModelTrackerSlots = DefaultListModel.new(config.getTrackerSlots().toArray().map(\
			block CharacterTrackerSlot each
				return CharacterTrackerSlot.new(config, each)
			end).sorted())
		
		pModelMotionTransfers = DefaultListModel.new(config.getMotionTransfers().toArray().map(\
			block MotionTransfer each
				return each.createCopy()
			end))
		
		pModelMotionTransferPanel = DefaultRangeModel.new()
		
		pPanelsMotionTransfer = Array.new()
		
		runWhileBlockingLayout(block
			setGuiTheme(window.getGuiTheme())
			setTitle("Character Configuration")
			setDesignerSelector("Window.Dialog.CharacterConfiguration")
			setSize(window.getDesktop().getContainerSize() - Point.new(100, 100))
			
			createContent()
			
			pEditCameraPosition.setVector(config.getCameraPosition())
			pEditCameraRotation.setVector(config.getCameraRotation())
		end)
		
		pModelTrackerSlots.addListener(TrackerSlotSelected.new(this))
		selectTrackerSlot()
		
		pModelMotionTransfers.addListener(MotionTransferSelected.new(this))
		selectMotionTransfer()
		
		var CharacterAppearance appearance = config.getProfile().getAppearance()
		pCharacterPreview.setPathModel(appearance.getPathModel())
		pCharacterPreview.setPathSkin(appearance.getPathSkin())
		pCharacterPreview.setPathRig(appearance.getPathRig())
		pCharacterPreview.setPathAnimation(appearance.getPathAnimation())
		pCharacterPreview.reloadCharacterPreview()
		
		setResultListener(listener)
		show(window, false, WindowModal.Placement.desktop)
		
		pCharacterPreview.setEditor(null)
	end
	
	/** Dispose of window. */
	public func void dispose()
		pPanelsMotionTransfer = null
		pPanelTrackerSlot = null
		pModelConfigName = null
		pModelScaleMode = null
		pModelShoulderLevel = null
		pModelListMoveCalibrate = null
		pModelTextMoveCalibrate = null
		pModelListCameraBone = null
		pModelTextCameraBone = null
		pEditCameraPosition = null
		pEditCameraRotation = null
		pModelTrackerSlots = null
		pModelMotionTransfers = null
		pModelMotionTransferPanel = null
		
		super.dispose()
	end
	
	
	
	/** Character configuration. */
	public func CharacterConfiguration getCharacterConfiguration()
		return pCharacterConfiguration
	end
	
	/** Character preview widget. */
	public func WidgetCharacterPreview getCharacterPreview()
		return pCharacterPreview
	end
	
	/** Tracker slot panel. */
	public func WCCPTrackerSlot getPanelTrackerSlot()
		return pPanelTrackerSlot
	end
	
	
	
	/** Save dialog and close if no problems are found. */
	public func void saveAndClose()
		// verify input
		var String configName = pModelConfigName.getText()
		var float shoulderLevel
		
		if not configName.toLower().equals(pCharacterConfiguration.getName().toLower())
			if configName.empty()
				WindowDialog.message(this, "Save Configuration", "Configuration name can not be empty", null, null, null)
				return
			end
			if pCharacterConfiguration.getProfile().getConfigurations().hasNamed(configName)
				WindowDialog.message(this, "Save Configuration", "Configuration with same name exists", null, null, null)
				return
			end
			try
				shoulderLevel = pModelShoulderLevel.getText().toFloat()
			catch Exception e
				WindowDialog.message(this, "Save Configuration", "Invalid value", null, null, null)
				return
			end
		end
		
		pPanelTrackerSlot.saveValues()
		
		var int selection = pModelMotionTransferPanel.getValue() - 1
		if selection >= 0
			(pPanelsMotionTransfer.getAt(selection) cast WCCPanelMotionTransfer).saveValues()
		end
		
		// save changes
		pCharacterConfiguration.setName(configName)
		pCharacterConfiguration.setScaleMode(pModelScaleMode.getAt(\
			pModelScaleMode.getSelected()) cast CharacterConfiguration.ScaleMode)
		pCharacterConfiguration.setShoulderLevel(shoulderLevel)
		pCharacterConfiguration.setMoveCalibrate(pModelTextMoveCalibrate.getText())
		pCharacterConfiguration.setCameraPosition(pEditCameraPosition.getVector())
		pCharacterConfiguration.setCameraRotation(pEditCameraRotation.getVector())
		
		pCharacterConfiguration.getTrackerSlots().removeAll()
		pModelTrackerSlots.forEach(block CharacterTrackerSlot each
			pCharacterConfiguration.getTrackerSlots().add(each)
		end)
		
		pCharacterConfiguration.getProfile().save()
		
		// finish and close window
		setResult(true)
		close()
	end
	
	
	
	/** Create window content. */
	protected func void createContent()
		var TextField textField
		var ComboBox comboBox
		var Button button
		
		setLayout(BorderLayout.new(20))
		
		pCharacterPreview = WidgetCharacterPreview.new()
		pCharacterPreview.addListener(UpdateListsListener.new(this))
		addWidget(pCharacterPreview, BorderLayout.Area.content)
		
		// properties
		addWidget(ScrollPanel.new(Viewport.new(Panel.new(FlowLayout.new(LayoutAxis.y), block Panel p
			// global parameters
			p.addWidget(Panel.new(FormLayout.new(true, 10, 2), block Panel p2
				p2.setDesignerSelector("Panel.WMPanelConfiguration.Configuration")
				
				// config name
				p2.addWidget(Label.new("Configuration Name:", "Label.FormCaption"))
				
				textField = TextField.new(pModelConfigName, 15)
				textField.setDesignerSelector("TextField.WindowCharacterConfiguration")
				textField.setToolTip("Unique configuration name")
				p2.addWidget(textField)
				
				// scale mode
				p2.addWidget(Label.new("Scale Mode:", "Label.FormCaption"))
				
				comboBox = ComboBox.new(pModelScaleMode)
				comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
				comboBox.setToolTip("Scale actor or character to match the other.")
				p2.addWidget(comboBox)
				
				// shoulder level
				p2.addWidget(Label.new("Shoulder Level:", "Label.FormCaption"))
				
				textField = TextField.new(pModelShoulderLevel, 8)
				textField.setDesignerSelector("TextField.WindowCharacterConfiguration")
				textField.setToolTip("Shoulder level in meters. Use height of upper arm bone origin above ground.")
				textField.setValidator(SimpleTextValidator.new(8, SimpleTextValidator.CharacterClass.positiveNumber))
				p2.addWidget(textField)
				
				// move calibrate
				p2.addWidget(Label.new("Move Calibrate:", "Label.FormCaption"))
				
				comboBox = ComboBox.new(pModelListMoveCalibrate, DefaultComboBoxEditor.new(pModelTextMoveCalibrate))
				comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
				comboBox.setToolTip("Animation move to use for calibration. " \
					+ "This move is also applied before the first motion transfer is applied.")
				comboBox.getEditor().addActionListener(MoveCalibrateChanged.new(this))
				p2.addWidget(comboBox)
			end))
			
			// camera
			p.addWidget(Panel.new(FormLayout.new(true, 10, 2), block Panel p2
				p2.setDesignerSelector("Panel.WMPanelConfiguration.Camera")
				
				// camera bone
				var Label labelBone = Label.new("Bone:", "Label.FormCaption")
				p2.addWidget(labelBone)
				
				var ComboBox cbCameraBone = ComboBox.new(pModelListCameraBone, DefaultComboBoxEditor.new(pModelTextCameraBone))
				cbCameraBone.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
				cbCameraBone.setToolTip("Bone to attach VR Camera to. If empty string use HMD.")
				p2.addWidget(cbCameraBone)
				
				CPEBone.new(pCharacterPreview, labelBone, cbCameraBone)
				
				// camera position
				var Label labelPosition = Label.new("Position:", "Label.FormCaption")
				p2.addWidget(labelPosition)
				
				pEditCameraPosition = EditVector.new(pCharacterConfiguration.getCameraPosition())
				pEditCameraPosition.setToolTip("Attach position of camera relative to bone. Not used if bone is empty string.")
				p2.addWidget(pEditCameraPosition)
				
				// camera rotation
				var Label labelRotation = Label.new("Rotation:", "Label.FormCaption")
				p2.addWidget(labelRotation)
				
				pEditCameraRotation = EditVector.new(pCharacterConfiguration.getCameraRotation())
				pEditCameraRotation.setToolTip("Attach rotation in degrees of camera relative to bone. Not used if bone is empty string.")
				p2.addWidget(pEditCameraRotation)
				
				// camera coordinate system
				CPECoordinateSystem.new(pCharacterPreview, labelPosition,\
					pEditCameraPosition, labelRotation, pEditCameraRotation, cbCameraBone)
			end))
			
			// tracker slots
			p.addWidget(Panel.new(FlowLayout.new(LayoutAxis.y, 5), block Panel p2
				p2.setDesignerSelector("Panel.WMPanelConfiguration.TrackerSlots")
				
				p2.addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 1, FlowLayout.Stretch.first), block Panel p3
					comboBox = ComboBox.new(pModelTrackerSlots)
					p3.addWidget(comboBox)
					
					button = Button.new("...", TrackerSlotPopupAction.new(this))
					p3.addWidget(button)
				end))
				
				pPanelTrackerSlot = WCCPTrackerSlot.new(this)
				p2.addWidget(pPanelTrackerSlot)
			end))
			
			// motion transfers
			p.addWidget(Panel.new(FlowLayout.new(LayoutAxis.y), block Panel p2
				p2.setDesignerSelector("Panel.WMPanelConfiguration.MotionTransfers")
				
				p2.addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 1, FlowLayout.Stretch.first), block Panel p3
					comboBox = ComboBox.new(pModelMotionTransfers, MotionTransferRenderer.new())
					p3.addWidget(comboBox)
					
					button = Button.new("...", MotionTransferPopupAction.new(this))
					p3.addWidget(button)
				end))
				
				var SwitchPanel switcher = SwitchPanel.new(pModelMotionTransferPanel)
				p2.addWidget(switcher)
				
				pPanelsMotionTransfer.add(WCCPMTAnimation.new(this))
				
				switcher.addWidget(Panel.new()) // empty
				pPanelsMotionTransfer.forEach(block WCCPanelMotionTransfer each
					switcher.addWidget(each)
				end)
			end))
		end), 0, 20, true), ScrollPanel.Policy.hidden, ScrollPanel.Policy.visible), BorderLayout.Area.right)
		
		// button line
		addWidget(Panel.new(CentrizedBoxLayout.new(LayoutAxis.x), block Panel p
			button = Button.new("Save", BlockActionListener.new(block ActionEvent e
				saveAndClose()
			end))
			button.setDesignerSelector("Button.WindowCharacterConfiguration.Save")
			p.addWidget(button)
			
			button = Button.new("Cancel", CloseDialog.new(this, false))
			button.setDesignerSelector("Button.WindowCharacterConfiguration.Cancel")
			p.addWidget(button)
		end ), BorderLayout.Area.bottom )
	end
	
	/** Update bone lists. */
	public func void updateBoneLists()
		var Array bones = Array.new()
		var Rig rig
		
		var BehaviorElement element = pCharacterPreview.getCharacterPreview()
		if element != null
			rig = ECBehaviorComponent.getInstanceIn(element).getComponent().getRig()
		end
		
		if rig != null
			var int i, count = rig.getBoneCount()
			for i = 0 to count
				bones.add(rig.boneGetName(i))
			end
			bones.sort(block String a, String b
				return a.compareNoCase(b)
			end)
		end
		
		pModelListCameraBone.setContent(bones)
	end
	
	/** Update move lists. */
	public func void updateMoveLists()
		var Array moves = Array.newWith("")
		var Animation animation
		
		var BehaviorElement element = pCharacterPreview.getCharacterPreview()
		if element != null
			var ECBPreviewAnimation.Instance previewAnimation = ECBPreviewAnimation.getInstanceIn(element)
			if previewAnimation != null
				animation = previewAnimation.getAnimation()
			end
		end
		
		if animation != null
			var int i, count = animation.getMoveCount()
			for i = 0 to count
				moves.add(animation.getMoveName(i))
			end
			moves.sort(block String a, String b
				return a.compareNoCase(b)
			end)
		end
		
		pModelListMoveCalibrate.setContent(moves)
		
		pPanelsMotionTransfer.forEach(block WCCPanelMotionTransfer each
			each.updateMoveLists(moves)
		end)
	end
	
	/** Update calibration move. */
	public func void updateMoveCalibrate()
		var BehaviorElement element = pCharacterPreview.getCharacterPreview()
		if element == null
			return
		end
		
		var ECBPreviewAnimation.Instance previewAnimation = ECBPreviewAnimation.getInstanceIn(element)
		if previewAnimation != null
			previewAnimation.setMove(pModelTextMoveCalibrate.getText())
		end
		
		var ECBPreviewBones.Instance previewBones = ECBPreviewBones.getInstanceIn(element)
		if previewBones != null
			previewBones.bonePositionChanged()
		end
	end
	
	
	
	/** Active tracker slot. */
	public func CharacterTrackerSlot getTrackerSlot()
		if pModelTrackerSlots.getSelected() != -1
			return pModelTrackerSlots.getAt(pModelTrackerSlots.getSelected()) cast CharacterTrackerSlot
		end
		return null
	end
	
	/** Select tracker slot. */
	public func void selectTrackerSlot()
		if pModelTrackerSlots.getSelected() != -1
			pPanelTrackerSlot.setTrackerSlot(pModelTrackerSlots.getAt(\
				pModelTrackerSlots.getSelected()) cast CharacterTrackerSlot)
			pPanelTrackerSlot.setEnabled(true)
			
		else
			pPanelTrackerSlot.setTrackerSlot(null)
			pPanelTrackerSlot.setEnabled(false)
		end
	end
	
	/** Add tracker slot. */
	public func void addTrackerSlot()
		WindowDialog.input(this, "Add Tracker Slot", "Slot Name:", null, "Slot",\
			null, null, WindowDialog.BlockResultListener.new(block String result
				if result != null
					if pModelTrackerSlots.find(block CharacterTrackerSlot each
						return each.getName().compareNoCase(result) == 0
					end) != null
						WindowDialog.message(this, "Add Tracker Slot", "Slot '"\
							+ result + "' exists already", null, null, null)
						
					else
						var CharacterTrackerSlot slot = CharacterTrackerSlot.new(pCharacterConfiguration, result)
						pModelTrackerSlots.add(slot)
						pModelTrackerSlots.sort()
						pModelTrackerSlots.setSelected(pModelTrackerSlots.indexOf(slot))
					end
				end
			end))
	end
	
	/** Duplicate tracker slot. */
	public func void duplicateTrackerSlot()
		var CharacterTrackerSlot slot = getTrackerSlot()
		if slot == null
			return
		end
		
		WindowDialog.input(this, "Duplicate Tracker Slot", "Slot Name:", null, slot.getName(),\
			null, null, WindowDialog.BlockResultListener.new(block String result
				if result != null
					if pModelTrackerSlots.find(block CharacterTrackerSlot each
						return each.getName().compareNoCase(result) == 0
					end) != null
						WindowDialog.message(this, "Duplicate Tracker Slot", "Slot '"\
							+ result + "' exists already", null, null, null)
						
					else
						slot = CharacterTrackerSlot.new(pCharacterConfiguration, slot)
						slot.setName(result)
						pModelTrackerSlots.add(slot)
						pModelTrackerSlots.sort()
						pModelTrackerSlots.setSelected(pModelTrackerSlots.indexOf(slot))
					end
				end
			end))
	end
	
	/** Remove tracker slot. */
	public func void removeTrackerSlot()
		var CharacterTrackerSlot slot = getTrackerSlot()
		if slot == null
			return
		end
		
		WindowDialog.question(this, "Remove Tracker Slot",\
			"Do you really want to remove slot '" + slot.getName() + "'?",\
			null, Array.newWith(WindowDialog.ButtonConfiguration.new("Remove", true), \
				WindowDialog.ButtonConfiguration.new("Cancel", false)),\
			WindowDialog.BlockResultListener.new(block bool result
				if result
					pModelTrackerSlots.remove(slot)
				end
			end))
	end
	
	/** Ensure unique tracker slot name. */
	public func String uniqueTrackerSlotName(String name)
		var String baseName = name
		var int number = 2
		
		while pModelTrackerSlots.find(block CharacterTrackerSlot each
			return each.getName().compareNoCase(name) == 0
		end) != null
			name = baseName + " #" + number++
		end
		
		return name
	end
	
	/** Tracker slot name changed. */
	public func void onTrackerSlotNameChanged()
		var int index = pModelTrackerSlots.indexOf(getTrackerSlot())
		if index != -1
			pModelTrackerSlots.notifyContentChanged(index, index)
		end
	end
	
	
	
	/** Active motion transfer. */
	public func MotionTransfer getMotionTransfer()
		if pModelMotionTransfers.getSelected() != -1
			return pModelMotionTransfers.getAt(pModelMotionTransfers.getSelected()) cast MotionTransfer
		end
		return null
	end
	
	/** Select motion transfer. */
	public func void selectMotionTransfer()
		var int selection = pModelMotionTransferPanel.getValue()
		var WCCPanelMotionTransfer panel
		
		if selection > 0
			panel = pPanelsMotionTransfer.getAt(selection - 1) cast WCCPanelMotionTransfer
			if panel != null
				panel.saveValues()
			end
		end
		
		if pModelMotionTransfers.getSelected() != -1
			var MotionTransfer motionTransfer = pModelMotionTransfers.getAt(\
				pModelMotionTransfers.getSelected()) cast MotionTransfer
			
			panel = pPanelsMotionTransfer.find(block WCCPanelMotionTransfer each
				return each.supports(motionTransfer)
			end) cast WCCPanelMotionTransfer
			
			pModelMotionTransferPanel.setValue(pPanelsMotionTransfer.indexOf(panel) + 1)
			
			if panel != null
				panel.setMotionTransfer(motionTransfer)
			end
			
		else
			pModelMotionTransferPanel.setValue(0)
		end
	end
	
	/** Add motion transfer. */
	public func void addMotionTransfer()
		var DefaultListModel model = DefaultListModel.new(\
			GameApp.getGameApp().getMotionTransferFactories().toArraySorted())
		
		WindowDialog.chooseList(this, "Add Motion Transfer", "Type:", null, model,\
			MotionTransferFactoryRenderer.new(), null, null, WindowDialog.BlockResultListener.new(\
			block int result
				if result != -1
					var MotionTransferFactory factory = model.getAt(result) cast MotionTransferFactory
					var MotionTransfer motionTransfer = factory.createMotionTransfer()
					motionTransfer.setName(factory.displayName())
					pModelMotionTransfers.add(motionTransfer)
					pModelMotionTransfers.setSelected(pModelMotionTransfers.indexOf(motionTransfer))
				end
			end))
	end
	
	/** Duplicate motion transfer. */
	public func void duplicateMotionTransfer()
		var MotionTransfer motionTransfer = getMotionTransfer()
		if motionTransfer != null
			var int index = pModelMotionTransfers.indexOf(motionTransfer)
			motionTransfer = motionTransfer.createCopy()
			pModelMotionTransfers.insert(index + 1, motionTransfer)
			pModelMotionTransfers.setSelected(index + 1)
		end
	end
	
	/** Remove motion transfer. */
	public func void removeMotionTransfer()
		// TODO
	end
	
	/** Motion transfer name changed. */
	public func void onMotionTransferNameChanged()
		var int index = pModelMotionTransfers.indexOf(getMotionTransfer())
		if index != -1
			pModelMotionTransfers.notifyContentChanged(index, index)
		end
	end
end
