/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Gui

pin Democap.Actors
pin Democap.Behaviors
pin Democap.Characters
pin Democap.Elements
pin Democap.MotionTransferSystem

pin Dragengine.CameraDirectors
pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events
pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * Edit character config window.
 */
class WindowCharacterConfiguration extends WindowDialog
	class UpdateListsListener implements WidgetCharacterPreview.Listener
		var WindowCharacterConfiguration pWindow
		
		func new(WindowCharacterConfiguration window)
			pWindow = window
		end
		
		func void characterReloaded(WidgetCharacterPreview widget)
			pWindow.updateBoneList()
			pWindow.updateMoveList()
			pWindow.updateVPSList()
			pWindow.updateMoveCalibrate()
		end
	end
	
	class MoveCalibrateChanged implements ActionListener
		var WindowCharacterConfiguration pWindow
		
		func new(WindowCharacterConfiguration window)
			pWindow = window
		end
		
		func void onAction(ActionEvent event)
			pWindow.updateMoveCalibrate()
		end
	end
	
	class MotionTransferRenderer extends DefaultListElementRenderer
		func new()
		end
		
		func void updateRenderer(ListBox listBox, Widget renderer, Object element, bool selected, bool focused)
			var String text
			if element != null
				text = (element cast MotionTransfer).getName()
			else
				text = " "
			end
			super.updateRenderer(listBox, renderer, text, selected, focused)
		end
	end
	
	class TrackerSlotSelected extends DefaultListModelListener
		var WindowCharacterConfiguration pWindow
		
		func new(WindowCharacterConfiguration window)
			pWindow = window
		end
		
		func void selectionChanged(ListModel listModel)
			pWindow.selectTrackerSlot()
		end
	end
	
	class TrackerSlotPopupAction extends DefaultActionListener
		var WindowCharacterConfiguration pWindow
		
		func new(WindowCharacterConfiguration window)
			pWindow = window
		end
		
		func void onAction(ActionEvent event)
			var Widget widget = event.getSource() cast Widget
			var MenuPopup menu = MenuPopup.new()
			var MenuItemCommand item
			
			item = MenuItemCommand.new("@UI.AddSlot.Dialog", BlockActionListener.new(block ActionEvent event
				pWindow.addTrackerSlot()
			end))
			menu.addWidget(item)
			
			item = MenuItemCommand.new("@UI.Add3TrackerSlots", BlockActionListener.new(block ActionEvent event
				var Array types = Array.new()
				types.add(CharacterTrackerSlot.Type.headTracker)
				types.add(CharacterTrackerSlot.Type.headHmd)
				types.add(CharacterTrackerSlot.Type.rightHandController)
				types.add(CharacterTrackerSlot.Type.leftHandController)
				types.add(CharacterTrackerSlot.Type.eyes)
				pWindow.addTrackerSlotsTemplate(types)
			end))
			menu.addWidget(item)
			
			item = MenuItemCommand.new("@UI.Add6TrackerSlots", BlockActionListener.new(block ActionEvent event
				var Array types = Array.new()
				types.add(CharacterTrackerSlot.Type.headTracker)
				types.add(CharacterTrackerSlot.Type.headHmd)
				types.add(CharacterTrackerSlot.Type.rightHandController)
				types.add(CharacterTrackerSlot.Type.leftHandController)
				types.add(CharacterTrackerSlot.Type.waist)
				types.add(CharacterTrackerSlot.Type.rightFoot)
				types.add(CharacterTrackerSlot.Type.leftFoot)
				types.add(CharacterTrackerSlot.Type.eyes)
				pWindow.addTrackerSlotsTemplate(types)
			end))
			menu.addWidget(item)
			
			item = MenuItemCommand.new("@UI.Add10TrackerSlots", BlockActionListener.new(block ActionEvent event
				var Array types = Array.new()
				types.add(CharacterTrackerSlot.Type.headTracker)
				types.add(CharacterTrackerSlot.Type.headHmd)
				types.add(CharacterTrackerSlot.Type.rightHandController)
				types.add(CharacterTrackerSlot.Type.rightElbow)
				types.add(CharacterTrackerSlot.Type.leftHandController)
				types.add(CharacterTrackerSlot.Type.leftElbow)
				types.add(CharacterTrackerSlot.Type.waist)
				types.add(CharacterTrackerSlot.Type.rightKnee)
				types.add(CharacterTrackerSlot.Type.rightFoot)
				types.add(CharacterTrackerSlot.Type.leftKnee)
				types.add(CharacterTrackerSlot.Type.leftFoot)
				types.add(CharacterTrackerSlot.Type.eyes)
				pWindow.addTrackerSlotsTemplate(types)
			end))
			menu.addWidget(item)
			
			item = MenuItemCommand.new("@UI.Add11TrackerSlots", BlockActionListener.new(block ActionEvent event
				var Array types = Array.new()
				types.add(CharacterTrackerSlot.Type.headTracker)
				types.add(CharacterTrackerSlot.Type.headHmd)
				types.add(CharacterTrackerSlot.Type.chest)
				types.add(CharacterTrackerSlot.Type.rightHandController)
				types.add(CharacterTrackerSlot.Type.rightElbow)
				types.add(CharacterTrackerSlot.Type.leftHandController)
				types.add(CharacterTrackerSlot.Type.leftElbow)
				types.add(CharacterTrackerSlot.Type.waist)
				types.add(CharacterTrackerSlot.Type.rightKnee)
				types.add(CharacterTrackerSlot.Type.rightFoot)
				types.add(CharacterTrackerSlot.Type.leftKnee)
				types.add(CharacterTrackerSlot.Type.leftFoot)
				types.add(CharacterTrackerSlot.Type.eyes)
				pWindow.addTrackerSlotsTemplate(types)
			end))
			menu.addWidget(item)
			
			item = MenuItemCommand.new("@UI.DuplicateSlot.Dialog", BlockActionListener.new(block ActionEvent event
				pWindow.duplicateTrackerSlot()
			end))
			menu.addWidget(item)
			
			item = MenuItemCommand.new("@UI.Cut.Dialog", BlockActionListener.new(block ActionEvent event
				pWindow.cutTrackerSlot()
			end))
			item.setEnabled(pWindow.getTrackerSlot() != null)
			menu.addWidget(item)
			
			item = MenuItemCommand.new("@UI.Copy", BlockActionListener.new(block ActionEvent event
				pWindow.copyTrackerSlot()
			end))
			item.setEnabled(pWindow.getTrackerSlot() != null)
			menu.addWidget(item)
			
			item = MenuItemCommand.new("@UI.Paste.Dialog", BlockActionListener.new(block ActionEvent event
				pWindow.pasteTrackerSlot()
			end))
			item.setEnabled(pWindow.getClipboard().hasClip())
			menu.addWidget(item)
			
			item = MenuItemCommand.new("@UI.RemoveSlot", BlockActionListener.new(block ActionEvent event
				pWindow.removeTrackerSlot()
			end))
			item.setEnabled(pWindow.getTrackerSlot() != null)
			menu.addWidget(item)
			
			item = MenuItemCommand.new("@UI.RemoveAllSlots", BlockActionListener.new(block ActionEvent event
				pWindow.removeAllTrackerSlots()
			end))
			item.setEnabled(pWindow.getTrackerSlot() != null)
			menu.addWidget(item)
			
			pWindow.getDesktop().addWindow(menu)
			menu.popup(widget.getDesktopPosition() + Point.new(0, widget.getHeight()))
		end
	end
	
	class MotionTransferSelected extends DefaultListModelListener
		var WindowCharacterConfiguration pWindow
		
		func new(WindowCharacterConfiguration window)
			pWindow = window
		end
		
		func void selectionChanged(ListModel listModel)
			pWindow.selectMotionTransfer()
		end
	end
	
	class MotionTransferPopupAction extends DefaultActionListener
		var WindowCharacterConfiguration pWindow
		
		func new(WindowCharacterConfiguration window)
			pWindow = window
		end
		
		func void onAction(ActionEvent event)
			var Widget widget = event.getSource() cast Widget
			var MenuPopup menu = MenuPopup.new()
			var MenuItemCommand item
			
			var MenuPopup subMenu = MenuPopup.new()
			GameApp.getGameApp().getMotionTransferFactories().toArraySorted().forEach(block MotionTransferFactory factory
				if factory.displayName().startsWith("Auto")
					item = MenuItemCommand.new(factory.displayName(), BlockActionListener.new(block ActionEvent event
						pWindow.addMotionTransfer(factory)
					end))
					subMenu.addWidget(item)
				end
			end)
			subMenu.addWidget(MenuItemSeparator.new())
			GameApp.getGameApp().getMotionTransferFactories().toArraySorted().forEach(block MotionTransferFactory factory
				if not factory.displayName().startsWith("Auto")
					item = MenuItemCommand.new(factory.displayName(), BlockActionListener.new(block ActionEvent event
						pWindow.addMotionTransfer(factory)
					end))
					subMenu.addWidget(item)
				end
			end)
			menu.addWidget(MenuItemSubMenu.new("@UI.Add", subMenu))
			
			item = MenuItemCommand.new("@UI.Duplicate.Dialog", BlockActionListener.new(block ActionEvent event
				pWindow.duplicateMotionTransfer()
			end))
			menu.addWidget(item)
			
			item = MenuItemCommand.new("@UI.Remove", BlockActionListener.new(block ActionEvent event
				pWindow.removeMotionTransfer()
			end))
			item.setEnabled(pWindow.getMotionTransfer() != null)
			menu.addWidget(item)
			
			item = MenuItemCommand.new("@UI.RemoveAll", BlockActionListener.new(block ActionEvent event
				pWindow.removeAllMotionTransfers()
			end))
			item.setEnabled(pWindow.getTrackerSlot() != null)
			menu.addWidget(item)
			
			item = MenuItemCommand.new("@UI.Cut", BlockActionListener.new(block ActionEvent event
				pWindow.cutMotionTransfer()
			end))
			item.setEnabled(pWindow.getMotionTransfer() != null)
			menu.addWidget(item)
			
			item = MenuItemCommand.new("@UI.Copy", BlockActionListener.new(block ActionEvent event
				pWindow.copyMotionTransfer()
			end))
			item.setEnabled(pWindow.getMotionTransfer() != null)
			menu.addWidget(item)
			
			item = MenuItemCommand.new("@UI.Paste.Dialog", BlockActionListener.new(block ActionEvent event
				pWindow.pasteMotionTransfer()
			end))
			item.setEnabled(pWindow.getClipboard().hasClip())
			menu.addWidget(item)
			
			item = MenuItemCommand.new("@UI.Reorder.Dialog", BlockActionListener.new(block ActionEvent event
				pWindow.reorderMotionTransferUp()
			end))
			item.setEnabled(pWindow.getMotionTransfer() != null)
			menu.addWidget(item)
			
			// TODO replace move up/down with reorder using a dialog with ListBox and ReorderListMouseListener
			item = MenuItemCommand.new("@UI.DecomposeTransfer", BlockActionListener.new(block ActionEvent event
				pWindow.decomposeMotionTransfer()
			end))
			item.setEnabled(pWindow.getMotionTransfer() != null)
			menu.addWidget(item)
			
			pWindow.getDesktop().addWindow(menu)
			menu.popup(widget.getDesktopPosition() + Point.new(0, widget.getHeight()))
		end
	end
	
	class PreviewDataQuery implements ECBPreviewDataQuery.DataQuery
		var WindowCharacterConfiguration pWindow
		
		func new(WindowCharacterConfiguration window)
			pWindow = window
		end
		
		func Matrix getSlotMatrix(String name)
			var CharacterTrackerSlot slot = pWindow.getTrackerSlotNamed(name)
			if slot == null
				return Matrix.new()
			end
			return slot.getTargetMatrix()
		end
	end
	
	
	
	var CharacterConfiguration pCharacterConfiguration
	var DefaultTextModel pModelConfigName
	var DefaultListModel pModelScaleMode
	var SharedListModel pModelListMoveCalibrate
	var DefaultTextModel pModelTextMoveCalibrate
	var SharedListModel pModelListCameraBone
	var DefaultTextModel pModelTextCameraBone
	var SharedListModel pModelListGrabBoneRight
	var DefaultTextModel pModelTextGrabBoneRight
	var SharedListModel pModelListGrabTipBoneRight
	var DefaultTextModel pModelTextGrabTipBoneRight
	var SharedListModel pModelListGrabBaseBoneRight
	var DefaultTextModel pModelTextGrabBaseBoneRight
	var SharedListModel pModelListGrabBoneLeft
	var DefaultTextModel pModelTextGrabBoneLeft
	var SharedListModel pModelListGrabTipBoneLeft
	var DefaultTextModel pModelTextGrabTipBoneLeft
	var SharedListModel pModelListGrabBaseBoneLeft
	var DefaultTextModel pModelTextGrabBaseBoneLeft
	var EditVector pEditCameraPosition
	var EditVector pEditCameraRotation
	var DefaultListModel pModelTrackerSlots
	var DefaultListModel pModelMotionTransfers
	var DefaultRangeModel pModelMotionTransferPanel
	var WidgetCharacterPreview pCharacterPreview
	var WCCPTrackerSlot pPanelTrackerSlot
	var Array pPanelsMotionTransfer
	var bool pInVR
	var DefaultListModel pModelBones
	var DefaultListModel pModelMoves
	var DefaultListModel pModelVPS
	var DefaultListModel pModelTrackerSlotNames
	
	
	
	/** Create window. */
	func new(Window window, bool inVR, CharacterConfiguration config, ResultListener listener)
		pInVR = inVR
		pCharacterConfiguration = config
		
		var ActorProfile actorProfile = GameApp.getGameApp().getActiveActorProfile()
		config.getTrackerSlots().forEach(block CharacterTrackerSlot each
			each.initFromType(actorProfile)
		end)
		
		pModelBones = DefaultListModel.new()
		pModelBones.setAutoSelect(false)
		
		pModelMoves = DefaultListModel.new()
		pModelMoves.setAutoSelect(false)
		
		pModelVPS = DefaultListModel.new()
		pModelVPS.setAutoSelect(false)
		
		pModelTrackerSlotNames = DefaultListModel.new()
		pModelTrackerSlotNames.setAutoSelect(false)
		
		pModelConfigName = DefaultTextModel.new(config.getName())
		
		pModelScaleMode = DefaultListModel.new(CharacterConfiguration.ScaleMode.all().toArray())
		pModelScaleMode.setSelected(pModelScaleMode.indexOf(config.getScaleMode()))
		
		pModelListMoveCalibrate = SharedListModel.new(pModelMoves)
		pModelListMoveCalibrate.setAutoSelect(false)
		pModelTextMoveCalibrate = DefaultTextModel.new(config.getMoveCalibrate())
		
		pModelListCameraBone = SharedListModel.new(pModelBones)
		pModelListCameraBone.setAutoSelect(false)
		pModelTextCameraBone = DefaultTextModel.new(config.getCameraBone())
		
		pModelListGrabBoneRight = SharedListModel.new(pModelBones)
		pModelListGrabBoneRight.setAutoSelect(false)
		pModelTextGrabBoneRight = DefaultTextModel.new(config.getGrabBoneRight())
		
		pModelListGrabTipBoneRight = SharedListModel.new(pModelBones)
		pModelListGrabTipBoneRight.setAutoSelect(false)
		pModelTextGrabTipBoneRight = DefaultTextModel.new(config.getGrabTipBoneRight())
		
		pModelListGrabBaseBoneRight = SharedListModel.new(pModelBones)
		pModelListGrabBaseBoneRight.setAutoSelect(false)
		pModelTextGrabBaseBoneRight = DefaultTextModel.new(config.getGrabBaseBoneRight())
		
		pModelListGrabBoneLeft = SharedListModel.new(pModelBones)
		pModelListGrabBoneLeft.setAutoSelect(false)
		pModelTextGrabBoneLeft = DefaultTextModel.new(config.getGrabBoneLeft())
		
		pModelListGrabTipBoneLeft = SharedListModel.new(pModelBones)
		pModelListGrabTipBoneLeft.setAutoSelect(false)
		pModelTextGrabTipBoneLeft = DefaultTextModel.new(config.getGrabTipBoneLeft())
		
		pModelListGrabBaseBoneLeft = SharedListModel.new(pModelBones)
		pModelListGrabBaseBoneLeft.setAutoSelect(false)
		pModelTextGrabBaseBoneLeft = DefaultTextModel.new(config.getGrabBaseBoneLeft())
		
		pModelTrackerSlots = DefaultListModel.new(config.getTrackerSlots().toArray().map(\
			block CharacterTrackerSlot each
				return CharacterTrackerSlot.new(config, each)
			end).sorted())
		
		pModelMotionTransfers = DefaultListModel.new(config.getMotionTransfers().toArray().map(\
			block MotionTransfer each
				return each.createCopy()
			end))
		
		pModelMotionTransferPanel = DefaultRangeModel.new()
		
		pPanelsMotionTransfer = Array.new()
		
		runWhileBlockingLayout(block
			setGuiTheme(window.getGuiTheme())
			setTitle("@UI.CharacterConfiguration")
			setDesignerSelector("Window.Dialog.CharacterConfiguration")
			setSize(window.getDesktop().getContainerSize() - Point.new(100, 100))
			
			createContent()
			
			pEditCameraPosition.setVector(config.getCameraPosition())
			pEditCameraRotation.setVector(config.getCameraRotation())
		end)
		doLayout()
		
		pModelTrackerSlots.addListener(TrackerSlotSelected.new(this))
		selectTrackerSlot()
		
		pModelMotionTransfers.addListener(MotionTransferSelected.new(this))
		selectMotionTransfer()
		
		var CharacterAppearance appearance = config.getProfile().getAppearance()
		pCharacterPreview.setPathModel(appearance.getPathModel())
		pCharacterPreview.setPathSkin(appearance.getPathSkin())
		pCharacterPreview.setPathRig(appearance.getPathRig())
		pCharacterPreview.setPathAnimation(appearance.getPathAnimation())
		pCharacterPreview.setBoneAxisRotation(CharacterProfile.boneAxisRotation(config.getProfile().getBoneAxis()))
		pCharacterPreview.setScale(config.getProfile().getScale())
		pCharacterPreview.reloadCharacterPreview()
		
		setResultListener(listener)
		
		if inVR
			setPosition(Point.new())
			setSize(window.getDesktop().getSize())
			show(window, false, WindowModal.Placement.none)
			
		else
			show(window, false, WindowModal.Placement.desktop)
		end
		
		pCharacterPreview.setEditor(null)
		
		updateTrackerSlotLists()
	end
	
	/** Dispose of window. */
	func void dispose()
		super.dispose()
		
		pPanelsMotionTransfer = null
		pPanelTrackerSlot = null
		pModelConfigName = null
		pModelScaleMode = null
		pModelListMoveCalibrate = null
		pModelTextMoveCalibrate = null
		pModelListCameraBone = null
		pModelTextCameraBone = null
		pModelListGrabBoneRight = null
		pModelTextGrabBoneRight = null
		pModelListGrabTipBoneRight = null
		pModelTextGrabTipBoneRight = null
		pModelListGrabBaseBoneRight = null
		pModelTextGrabBaseBoneRight = null
		pModelListGrabBoneLeft = null
		pModelTextGrabBoneLeft = null
		pModelListGrabTipBoneLeft = null
		pModelTextGrabTipBoneLeft = null
		pModelListGrabBaseBoneLeft = null
		pModelTextGrabBaseBoneLeft = null
		pEditCameraPosition = null
		pEditCameraRotation = null
		pModelTrackerSlots = null
		pModelMotionTransfers = null
		pModelMotionTransferPanel = null
		
		pModelBones = null
		pModelMoves = null
		pModelVPS = null
		pModelTrackerSlotNames = null
	end
	
	
	
	/** Character configuration. */
	func CharacterConfiguration getCharacterConfiguration()
		return pCharacterConfiguration
	end
	
	/** Character preview widget. */
	func WidgetCharacterPreview getCharacterPreview()
		return pCharacterPreview
	end
	
	/** Tracker slot panel. */
	func WCCPTrackerSlot getPanelTrackerSlot()
		return pPanelTrackerSlot
	end
	
	/** Shared models. */
	func DefaultListModel getModelBones()
		return pModelBones
	end
	
	func DefaultListModel getModelMoves()
		return pModelMoves
	end
	
	func DefaultListModel getModelVPS()
		return pModelVPS
	end
	
	func DefaultListModel getModelTrackerSlotNames()
		return pModelTrackerSlotNames
	end
	
	
	
	/** Save dialog and close if no problems are found. */
	func void saveAndClose()
		// verify input
		var String configName = pModelConfigName.getText()
		
		if not configName.toLower().equals(pCharacterConfiguration.getName().toLower())
			if configName.empty()
				WindowDialog.message(this, "@UI.SaveConfiguration",\
					"@UI.Message.ConfigurationEmpty", null, null, null)
				return
			end
			if pCharacterConfiguration.getProfile().getConfigurations().hasNamed(configName)
				WindowDialog.message(this, "@UI.SaveConfiguration",\
					"@UI.Message.DuplicateConfiguration", null, null, null)
				return
			end
		end
		
		pPanelTrackerSlot.saveValues()
		
		var int selection = pModelMotionTransferPanel.getValue() - 1
		if selection >= 0
			(pPanelsMotionTransfer.getAt(selection) cast WCCPanelMotionTransfer).saveValues()
		end
		
		// save changes
		pCharacterConfiguration.setName(configName)
		pCharacterConfiguration.setScaleMode(pModelScaleMode.getAt(\
			pModelScaleMode.getSelected()) cast CharacterConfiguration.ScaleMode)
		pCharacterConfiguration.setMoveCalibrate(pModelTextMoveCalibrate.getText())
		pCharacterConfiguration.setCameraBone(pModelTextCameraBone.getText())
		pCharacterConfiguration.setCameraPosition(pEditCameraPosition.getVector())
		pCharacterConfiguration.setCameraRotation(pEditCameraRotation.getVector())
		pCharacterConfiguration.setGrabBoneRight(pModelTextGrabBoneRight.getText())
		pCharacterConfiguration.setGrabTipBoneRight(pModelTextGrabTipBoneRight.getText())
		pCharacterConfiguration.setGrabBaseBoneRight(pModelTextGrabBaseBoneRight.getText())
		pCharacterConfiguration.setGrabBoneLeft(pModelTextGrabBoneLeft.getText())
		pCharacterConfiguration.setGrabTipBoneLeft(pModelTextGrabTipBoneLeft.getText())
		pCharacterConfiguration.setGrabBaseBoneLeft(pModelTextGrabBaseBoneLeft.getText())
		
		pCharacterConfiguration.getTrackerSlots().removeAll()
		pModelTrackerSlots.forEach(block CharacterTrackerSlot each
			pCharacterConfiguration.getTrackerSlots().add(each)
		end)
		
		pCharacterConfiguration.getMotionTransfers().removeAll()
		pModelMotionTransfers.forEach(block MotionTransfer each
			pCharacterConfiguration.getMotionTransfers().add(each.createCopy())
		end)
		
		pCharacterConfiguration.getProfile().save()
		pCharacterConfiguration.notifyChanged()
		
		// finish and close window
		setResult(true)
		close()
	end
	
	/** UI options prefix. */
	static func String prefixUIOptions(bool inVR)
		return inVR if "UI/VR/WindowCharacterConfiguration" else "UI/WindowCharacterConfiguration"
	end
	
	
	
	/** Create window content. */
	protected func void createContent()
		var String uioptPrefix = prefixUIOptions(pInVR)
		var LabelledComboBox lcb, lcbtip, lcbbase
		var EnumListElementRenderer renderer
		var LabelledTextField ltf
		var TextField textField
		var ComboBox comboBox
		var Button button
		var Array result
		
		var UIBuilder uiBuilder = UIBuilder.new()
		uiBuilder.updateDesignerSelectors(".WindowCharacterConfiguration")
		
		setLayout(BorderLayout.new(20))
		
		pCharacterPreview = WidgetCharacterPreview.new()
		pCharacterPreview.setDataQuery(PreviewDataQuery.new(this))
		pCharacterPreview.addListener(UpdateListsListener.new(this))
		addWidget(pCharacterPreview, BorderLayout.Area.content)
		
		// properties
		addWidget(ScrollPanel.new(Viewport.new(Panel.new(FlowLayout.new(LayoutAxis.y, 5), block Panel p
			// global parameters
			p.addWidget(CollapsibleGroup.new("@UI.CharacterConfiguration",\
			"dialog_characterconfiguration#character_configuration",\
			CollapsibleGroup.persistModel(uioptPrefix + "/GroupCharacter"),\
			FormLayout.new(true, 10, 2), block Panel p2
				ltf = LabelledTextField.new(p2, "@UI.ConfigurationName.Label", pModelConfigName)
				ltf.setToolTip("@UI.ToolTip.ConfigurationName")
				
				renderer = EnumListElementRenderer.new()
				renderer.setTranslationPrefix("UI.Enum.CharacterScaleMode.")
				lcb = LabelledComboBox.new(p2, "@UI.ScaleMode.Label", pModelScaleMode, renderer)
				lcb.setToolTip("@UI.ToolTip.ScaleMode")
				
				lcb = LabelledComboBox.new(p2, "@UI.MoveCalibrate.Label", pModelListMoveCalibrate,\
					pModelTextMoveCalibrate, MoveCalibrateChanged.new(this))
				lcb.setToolTip("@UI.ToolTip.MoveCalibrate")
			end))
			
			// camera
			p.addWidget(CollapsibleGroup.new("@UI.CameraParameters",\
			"dialog_characterconfiguration#camera_parameters",\
			CollapsibleGroup.persistModel(uioptPrefix + "/GroupCamera"),\
			FormLayout.new(true, 10, 2), block Panel p2
				result = uiBuilder.formBonePositionRotation(p2, pCharacterPreview,\
					"@UI.Bone.Label", "@UI.Position.Label", "@UI.Rotation.Label",\
					"@UI.ToolTip.VRCameraBone",\
					"@UI.ToolTip.VRCameraPosition",\
					"@UI.ToolTip.VRCameraRotation",\
					pModelListCameraBone, pModelTextCameraBone,\
					pCharacterConfiguration.getCameraPosition(), pCharacterConfiguration.getCameraRotation())
				
				pEditCameraPosition = result.getAt(0) cast EditVector
				pEditCameraRotation = result.getAt(1) cast EditVector
			end))
			
			// grab
			p.addWidget(CollapsibleGroup.new("@UI.GrabParameters",\
			"dialog_characterconfiguration#grab_parameters",\
			CollapsibleGroup.persistModel(uioptPrefix + "/GroupGrab"),\
			FormLayout.new(true, 10, 2), block Panel p2
				// right hand
				lcb = LabelledComboBox.new(p2, "@UI.BoneRight.Label", pModelListGrabBoneRight, pModelTextGrabBoneRight)
				lcb.setToolTip("@UI.ToolTip.GrabRightHandBone")
				CPEBone.new(pCharacterPreview, lcb)
				
				lcbtip = LabelledComboBox.new(p2, "@UI.TipBoneRight.Label", pModelListGrabTipBoneRight, pModelTextGrabTipBoneRight)
				lcbtip.setToolTip("@UI.ToolTip.GrabRightHandTipBone")
				
				lcbbase = LabelledComboBox.new(p2, "@UI.BaseBoneRight.Label", pModelListGrabBaseBoneRight, pModelTextGrabBaseBoneRight)
				lcbbase.setToolTip("@UI.ToolTip.GrabRightHandBaseBone")
				
				CPEBoneChain.new(pCharacterPreview, lcbtip, lcbbase, false)
				CPEBoneChain.new(pCharacterPreview, lcbtip, lcbbase, true)
				
				// left hand
				lcb = LabelledComboBox.new(p2, "@UI.BoneLeft.Label", pModelListGrabBoneLeft, pModelTextGrabBoneLeft)
				lcb.setToolTip("@UI.ToolTip.GrabLeftHandBone")
				CPEBone.new(pCharacterPreview, lcb)
				
				lcbtip = LabelledComboBox.new(p2, "@UI.TipBoneLeft.Label", pModelListGrabTipBoneLeft, pModelTextGrabTipBoneLeft)
				lcbtip.setToolTip("@UI.ToolTip.GrabLeftHandTipBone")
				
				lcbbase = LabelledComboBox.new(p2, "@UI.BaseBoneLeft.Label", pModelListGrabBaseBoneLeft, pModelTextGrabBaseBoneLeft)
				lcbbase.setToolTip("@UI.ToolTip.GrabLeftHandBaseBone")
				
				CPEBoneChain.new(pCharacterPreview, lcbtip, lcbbase, false)
				CPEBoneChain.new(pCharacterPreview, lcbtip, lcbbase, true)
			end))
			
			// tracker slots
			p.addWidget(CollapsibleGroup.new("@UI.TrackerSlots",\
			"dialog_characterconfiguration#tracker_slots",\
			CollapsibleGroup.persistModel(uioptPrefix + "/GroupSlots"),\
			FlowLayout.new(LayoutAxis.y, 5), block Panel p2
				p2.addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 1, FlowLayout.Stretch.first), block Panel p3
					comboBox = ComboBox.new(pModelTrackerSlots)
					p3.addWidget(comboBox)
					
					button = Button.new("...", TrackerSlotPopupAction.new(this))
					button.setDesignerSelector("Button.Popup")
					p3.addWidget(button)
				end))
				
				pPanelTrackerSlot = WCCPTrackerSlot.new(this)
				p2.addWidget(pPanelTrackerSlot)
			end))
			
			// motion transfers
			p.addWidget(CollapsibleGroup.new("@UI.MotionTransfers",\
			"dialog_characterconfiguration#motion_transfers",\
			CollapsibleGroup.persistModel(uioptPrefix + "/GroupTransfers"),\
			FlowLayout.new(LayoutAxis.y), block Panel p2
				p2.addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 1, FlowLayout.Stretch.first), block Panel p3
					comboBox = ComboBox.new(pModelMotionTransfers, MotionTransferRenderer.new())
					p3.addWidget(comboBox)
					
					button = Button.new("...", MotionTransferPopupAction.new(this))
					button.setDesignerSelector("Button.Popup")
					p3.addWidget(button)
				end))
				
				var SwitchPanel switcher = SwitchPanel.new(pModelMotionTransferPanel)
				p2.addWidget(switcher)
				
				pPanelsMotionTransfer.add(WCCPMTAnimation.new(this))
				pPanelsMotionTransfer.add(WCCPMTBend.new(this, uioptPrefix + "/MTBend"))
				pPanelsMotionTransfer.add(WCCPMTChild.new(this, uioptPrefix + "/MTChild"))
				pPanelsMotionTransfer.add(WCCPMTCopy.new(this))
				pPanelsMotionTransfer.add(WCCPMTFingers.new(this))
				pPanelsMotionTransfer.add(WCCPMTEyes.new(this))
				pPanelsMotionTransfer.add(WCCPMTFace.new(this, uioptPrefix + "/MTFace"))
				pPanelsMotionTransfer.add(WCCPMTIK.new(this, uioptPrefix + "/MTIK"))
				pPanelsMotionTransfer.add(WCCPMTSlot.new(this, uioptPrefix + "/MTSlot"))
				pPanelsMotionTransfer.add(WCCPMTSecondary.new(this))
				pPanelsMotionTransfer.add(WCCPMTRotation.new(this))
				pPanelsMotionTransfer.add(WCCPMTAutoHuman.new(this, uioptPrefix + "/MTAutoHuman"))
				pPanelsMotionTransfer.add(WCCPMTAutoFPV.new(this, uioptPrefix + "/MTAutoFPV"))
				
				switcher.addWidget(Panel.new()) // empty
				pPanelsMotionTransfer.forEach(block WCCPanelMotionTransfer each
					switcher.addWidget(each)
				end)
			end))
		end), 0, 20, true), ScrollPanel.Policy.hidden, ScrollPanel.Policy.visible), BorderLayout.Area.right)
		
		// button line
		addWidget(Panel.new(CentrizedBoxLayout.new(LayoutAxis.x), block Panel p
			button = Button.new("@UI.Save", BlockActionListener.new(block ActionEvent e
				saveAndClose()
			end))
			button.setDesignerSelector("Button.WindowCharacterConfiguration.Save")
			p.addWidget(button)
			
			button = Button.new("@UI.Cancel", CloseDialog.new(this, false))
			button.setDesignerSelector("Button.WindowCharacterConfiguration.Cancel")
			p.addWidget(button)
		end ), BorderLayout.Area.bottom )
	end
	
	/** Update shared bone list. */
	func void updateBoneList()
		var Array bones = Array.new()
		var Rig rig
		
		var BehaviorElement element = pCharacterPreview.getCharacterPreview()
		if element != null
			rig = ECBehaviorComponent.getInstanceIn(element).getComponent().getRig()
		end
		
		if rig != null
			var int i, count = rig.getBoneCount()
			for i = 0 to count
				bones.add(rig.boneGetName(i))
			end
			bones.sort(block String a, String b
				return a.compareNoCase(b)
			end)
		end
		
		bones.insert(0, "")
		pModelBones.setContent(bones)
	end
	
	/** Update shared move list. */
	func void updateMoveList()
		var Array moves = Array.new()
		var Animation animation
		
		var BehaviorElement element = pCharacterPreview.getCharacterPreview()
		if element != null
			var ECBPreviewAnimation.Instance previewAnimation = ECBPreviewAnimation.getInstanceIn(element)
			if previewAnimation != null
				animation = previewAnimation.getAnimation()
			end
		end
		
		if animation != null
			var int i, count = animation.getMoveCount()
			for i = 0 to count
				moves.add(animation.getMoveName(i))
			end
			moves.sort(block String a, String b
				return a.compareNoCase(b)
			end)
		end
		
		moves.insert(0, "")
		pModelMoves.setContent(moves)
	end
	
	/** Update shared vertex position set list. */
	func void updateVPSList()
		var Array vps = Array.new()
		var Component component
		
		var BehaviorElement element = pCharacterPreview.getCharacterPreview()
		if element != null
			component = ECBehaviorComponent.getInstanceIn(element).getComponent()
		end
		
		if component != null
			var int i, count = component.getVertexPositionSetCount()
			for i = 0 to count
				vps.add(component.vertexPositionSetGetNameAt(i))
			end
			vps.sort(block String a, String b
				return a.compareNoCase(b)
			end)
		end
		
		vps.insert(0, "")
		pModelVPS.setContent(vps)
	end
	
	/** Update calibration move. */
	func void updateMoveCalibrate()
		var BehaviorElement element = pCharacterPreview.getCharacterPreview()
		if element == null
			return
		end
		
		var ECBPreviewAnimation.Instance previewAnimation = ECBPreviewAnimation.getInstanceIn(element)
		if previewAnimation != null
			previewAnimation.setMove(pModelTextMoveCalibrate.getText())
		end
		
		var ECBPreviewBones.Instance previewBones = ECBPreviewBones.getInstanceIn(element)
		if previewBones != null
			previewBones.bonePositionChanged()
		end
	end
	
	
	
	/** Active tracker slot. */
	func CharacterTrackerSlot getTrackerSlot()
		if pModelTrackerSlots.getSelected() != -1
			return pModelTrackerSlots.getAt(pModelTrackerSlots.getSelected()) cast CharacterTrackerSlot
		end
		return null
	end
	
	/** Named tracker slot or null. */
	func CharacterTrackerSlot getTrackerSlotNamed(String name)
		return pModelTrackerSlots.find(block CharacterTrackerSlot each
			return each.getName().compareNoCase(name) == 0
		end) cast CharacterTrackerSlot
	end
	
	/** Tracker slot with type or null. */
	func CharacterTrackerSlot getTrackerSlotWithType(CharacterTrackerSlot.Type type)
		return pModelTrackerSlots.find(block CharacterTrackerSlot each
			return each.getType() == type
		end) cast CharacterTrackerSlot
	end
	
	/** Select tracker slot. */
	func void selectTrackerSlot()
		if pModelTrackerSlots.getSelected() != -1
			pPanelTrackerSlot.saveValues()
			pPanelTrackerSlot.setTrackerSlot(pModelTrackerSlots.getAt(\
				pModelTrackerSlots.getSelected()) cast CharacterTrackerSlot)
			pPanelTrackerSlot.setEnabled(true)
			
		else
			pPanelTrackerSlot.saveValues()
			pPanelTrackerSlot.setTrackerSlot(null)
			pPanelTrackerSlot.setEnabled(false)
		end
	end
	
	/** Add tracker slot. */
	func void addTrackerSlot()
		var DefaultListModel model = DefaultListModel.new(CharacterTrackerSlot.Type.all().toArray()\
			.sorted(block CharacterTrackerSlot.Type a, CharacterTrackerSlot.Type b
				return a.name().compare(b.name())
			end))
		var DefaultListElementRenderer renderer = DefaultListElementRenderer.new(CharacterTrackerSlot.Type.rightHandController)
		
		WindowDialog.chooseList(this, "@UI.AddTrackerSlot", "@UI.SlotType.Label", null, model, renderer,\
			null, null, WindowDialog.BlockResultListener.new(block int result
				if result != -1
					var CharacterTrackerSlot.Type type = model.getAt(result) cast CharacterTrackerSlot.Type
					var String name = uniqueTrackerSlotName(CharacterTrackerSlot.defaultSlotNameForType(type))
					
					var ActorProfile actorProfile = GameApp.getGameApp().getActiveActorProfile()
					var CharacterTrackerSlot slot = CharacterTrackerSlot.new(pCharacterConfiguration, name)
					slot.setType(type)
					slot.initFromType(actorProfile)
					slot.setTargetFromActor(actorProfile)
					pModelTrackerSlots.add(slot)
					pModelTrackerSlots.sort()
					pModelTrackerSlots.setSelected(pModelTrackerSlots.indexOf(slot))
					updateTrackerSlotLists()
				end
			end))
	end
	
	/** Add template tracker slots. */
	func void addTrackerSlotsTemplate(Array types)
		var ActorProfile actorProfile = GameApp.getGameApp().getActiveActorProfile()
		
		types.forEach(block CharacterTrackerSlot.Type type
			var String name = uniqueTrackerSlotName(CharacterTrackerSlot.defaultSlotNameForType(type))
			var CharacterTrackerSlot slot = CharacterTrackerSlot.new(pCharacterConfiguration, name)
			slot.setType(type)
			slot.initFromType(actorProfile)
			slot.setTargetFromActor(actorProfile)
			pModelTrackerSlots.add(slot)
		end)
		
		pModelTrackerSlots.sort()
		pModelTrackerSlots.setSelected(pModelTrackerSlots.getCount() - types.getCount())
		updateTrackerSlotLists()
	end
	
	/** Duplicate tracker slot. */
	func void duplicateTrackerSlot()
		var CharacterTrackerSlot slot = getTrackerSlot()
		if slot == null
			return
		end
		
		WindowDialog.input(this, "@UI.DuplicateTrackerSlot", "@UI.SlotName.Label", null, slot.getName(),\
			null, null, WindowDialog.BlockResultListener.new(block String result
				if result != null
					if pModelTrackerSlots.find(block CharacterTrackerSlot each
						return each.getName().compareNoCase(result) == 0
					end) != null
						WindowDialog.message(this, "@UI.DuplicateTrackerSlot",\
							TranslationManager.get().translate("UI.Message.DuplicateSlot")\
								.toUTF8().format(Array.newWith(result)), null, null, null)
						
					else
						slot = CharacterTrackerSlot.new(pCharacterConfiguration, slot)
						slot.setName(result)
						pModelTrackerSlots.add(slot)
						pModelTrackerSlots.sort()
						pModelTrackerSlots.setSelected(pModelTrackerSlots.indexOf(slot))
						updateTrackerSlotLists()
					end
				end
			end))
	end
	
	/** Copy tracker slot. */
	func void copyTrackerSlot()
		var CharacterTrackerSlot slot = getTrackerSlot()
		if slot == null
			return
		end
		
		getClipboard().setClipWith(CharacterTrackerSlot.new(pCharacterConfiguration, slot))
	end
	
	/** Cut tracker slot. */
	func void cutTrackerSlot()
		var CharacterTrackerSlot slot = getTrackerSlot()
		if slot == null
			return
		end
		
		WindowDialog.question(this, "@UI.CutTrackerSlot",\
			TranslationManager.get().translate("UI.Message.AskCutSlot")\
				.toUTF8().format(Array.newWith(slot.getName())),\
			null, Array.newWith(WindowDialog.ButtonConfiguration.new("@UI.Cut", true), \
				WindowDialog.ButtonConfiguration.new("@UI.Cancel", false)),\
			WindowDialog.BlockResultListener.new(block bool result
				if result
					getClipboard().setClipWith(CharacterTrackerSlot.new(pCharacterConfiguration, slot))
					pModelTrackerSlots.remove(slot)
					updateTrackerSlotLists()
				end
			end))
	end
	
	/** Paste tracker slot. */
	func void pasteTrackerSlot()
		if getClipboard().isEmpty()
			return
		end
		
		getClipboard().getClip().findCastable(block CharacterTrackerSlot slot
			WindowDialog.input(this, "@UI.PasteTrackerSlot",\
				"@UI.SlotName.Label", null, slot.getName(),\
				null, null, WindowDialog.BlockResultListener.new(block String result
					if result != null
						if pModelTrackerSlots.find(block CharacterTrackerSlot each
							return each.getName().compareNoCase(result) == 0
						end) != null
							WindowDialog.message(this, "@UI.PasteTrackerSlot",\
								TranslationManager.get().translate("UI.Message.DuplicateSlot")\
									.toUTF8().format(Array.newWith(result)), null, null, null)
							
						else
							slot = CharacterTrackerSlot.new(pCharacterConfiguration, slot)
							slot.setName(result)
							pModelTrackerSlots.add(slot)
							pModelTrackerSlots.sort()
							pModelTrackerSlots.setSelected(pModelTrackerSlots.indexOf(slot))
							updateTrackerSlotLists()
						end
					end
				end))
			return true
		end)
	end
	
	/** Remove tracker slot. */
	func void removeTrackerSlot()
		var CharacterTrackerSlot slot = getTrackerSlot()
		if slot == null
			return
		end
		
		WindowDialog.question(this, "@UI.RemoveTrackerSlot",\
			TranslationManager.get().translate("UI.Message.AskRemoveSlot")\
				.toUTF8().format(Array.newWith(slot.getName())),\
			null, Array.newWith(WindowDialog.ButtonConfiguration.new("@UI.Remove", true), \
				WindowDialog.ButtonConfiguration.new("@UI.Cancel", false)),\
			WindowDialog.BlockResultListener.new(block bool result
				if result
					pModelTrackerSlots.remove(slot)
					updateTrackerSlotLists()
				end
			end))
	end
	
	/** Remove all tracker slots. */
	func void removeAllTrackerSlots()
		if pModelTrackerSlots.getCount() == 0
			return
		end
		
		WindowDialog.question(this, "@UI.RemoveAllTrackerSlots",\
			"@UI.Message.AskRemoveAllTrackerSlots", null,\
			Array.newWith(WindowDialog.ButtonConfiguration.new("@UI.RemoveAll", true), \
				WindowDialog.ButtonConfiguration.new("@UI.Cancel", false)),\
			WindowDialog.BlockResultListener.new(block bool result
				if result
					pModelTrackerSlots.removeAll()
					updateTrackerSlotLists()
				end
			end))
	end
	
	/** Ensure unique tracker slot name. */
	func String uniqueTrackerSlotName(String name)
		var String baseName = name
		var int number = 2
		
		while pModelTrackerSlots.find(block CharacterTrackerSlot each
			return each.getName().compareNoCase(name) == 0
		end) != null
			name = baseName + " #" + number++
		end
		
		return name
	end
	
	/** Tracker slot name changed. */
	func void onTrackerSlotNameChanged()
		var int index = pModelTrackerSlots.indexOf(getTrackerSlot())
		if index != -1
			pModelTrackerSlots.notifyContentChanged(index, index)
			updateTrackerSlotLists()
		end
	end
	
	/** Update tracker slot lists. */
	func void updateTrackerSlotLists()
		var Array content = pModelTrackerSlots.getContent().map(block CharacterTrackerSlot each
			return each.getName()
		end)
		
		content.sort(block String a, String b
			return a.compareNoCase(b)
		end)
		
		content.insert(0, "")
		pModelTrackerSlotNames.setContent(content)
	end
	
	
	
	/** Active motion transfer. */
	func MotionTransfer getMotionTransfer()
		if pModelMotionTransfers.getSelected() != -1
			return pModelMotionTransfers.getAt(pModelMotionTransfers.getSelected()) cast MotionTransfer
		end
		return null
	end
	
	/** Select motion transfer. */
	func void selectMotionTransfer()
		var int selection = pModelMotionTransferPanel.getValue()
		var WCCPanelMotionTransfer panel
		
		if selection > 0
			panel = pPanelsMotionTransfer.getAt(selection - 1) cast WCCPanelMotionTransfer
			if panel != null
				panel.saveValues()
			end
		end
		
		if pModelMotionTransfers.getSelected() != -1
			var MotionTransfer motionTransfer = pModelMotionTransfers.getAt(\
				pModelMotionTransfers.getSelected()) cast MotionTransfer
			
			panel = pPanelsMotionTransfer.find(block WCCPanelMotionTransfer each
				return each.supports(motionTransfer)
			end) cast WCCPanelMotionTransfer
			
			pModelMotionTransferPanel.setValue(pPanelsMotionTransfer.indexOf(panel) + 1)
			
			if panel != null
				panel.setMotionTransfer(motionTransfer)
			end
			
		else
			pModelMotionTransferPanel.setValue(0)
		end
	end
	
	/** Add motion transfer. */
	func void addMotionTransfer(MotionTransferFactory factory)
		var MotionTransfer motionTransfer = factory.createMotionTransfer()
		motionTransfer.setName(factory.displayName())
		pModelMotionTransfers.add(motionTransfer)
		pModelMotionTransfers.setSelected(pModelMotionTransfers.indexOf(motionTransfer))
	end
	
	/** Duplicate motion transfer. */
	func void duplicateMotionTransfer()
		var MotionTransfer motionTransfer = getMotionTransfer()
		if motionTransfer != null
			var int index = pModelMotionTransfers.indexOf(motionTransfer)
			motionTransfer = motionTransfer.createCopy()
			pModelMotionTransfers.insert(index + 1, motionTransfer)
			pModelMotionTransfers.setSelected(index + 1)
		end
	end
	
	/** Copy motion transfer. */
	func void copyMotionTransfer()
		var MotionTransfer motionTransfer = getMotionTransfer()
		if motionTransfer != null
			getClipboard().setClipWith(motionTransfer.createCopy())
		end
	end
	
	/** Cut motion transfer. */
	func void cutMotionTransfer()
		var MotionTransfer motionTransfer = getMotionTransfer()
		if motionTransfer == null
			return
		end
		
		WindowDialog.question(this, "@UI.CutMotionTransfer",\
			TranslationManager.get().translate("UI.Message.AskCutMotionTransfer")\
				.toUTF8().format(Array.newWith(motionTransfer.getName())),\
			null, Array.newWith(WindowDialog.ButtonConfiguration.new("@UI.Cut", true), \
				WindowDialog.ButtonConfiguration.new("@UI.Cancel", false)),\
			WindowDialog.BlockResultListener.new(block bool result
				if result
					getClipboard().setClipWith(motionTransfer.createCopy())
					pModelMotionTransfers.remove(motionTransfer)
				end
			end))
	end
	
	/** Paste motion transfer. */
	func void pasteMotionTransfer()
		if getClipboard().isEmpty()
			return
		end
		
		getClipboard().getClip().findCastable(block MotionTransfer motionTransfer
			pModelMotionTransfers.add(motionTransfer.createCopy())
			pModelMotionTransfers.setSelected(pModelMotionTransfers.getCount() - 1)
			return true
		end)
	end
	
	/** Remove motion transfer. */
	func void removeMotionTransfer()
		var MotionTransfer motionTransfer = getMotionTransfer()
		if motionTransfer == null
			return
		end
		
		WindowDialog.question(this, "@UI.RemoveMotionTransfer",\
			TranslationManager.get().translate("UI.Message.AskRemoveMotionTransfer")\
				.toUTF8().format(Array.newWith(motionTransfer.getName())),\
			null, Array.newWith(WindowDialog.ButtonConfiguration.new("@UI.Remove", true), \
				WindowDialog.ButtonConfiguration.new("@UI.Cancel", false)),\
			WindowDialog.BlockResultListener.new(block bool result
				if result
					pModelMotionTransfers.remove(motionTransfer)
				end
			end))
	end
	
	/** Remove all motion transfers. */
	func void removeAllMotionTransfers()
		if pModelMotionTransfers.getCount() == 0
			return
		end
		
		WindowDialog.question(this, "@UI.RemoveAllMotionTransfers",\
			"@UI.Message.AskRemoveAllMotionTransfers", null,\
			Array.newWith(WindowDialog.ButtonConfiguration.new("@UI.RemoveAll", true), \
				WindowDialog.ButtonConfiguration.new("@UI.Cancel", false)),\
			WindowDialog.BlockResultListener.new(block bool result
				if result
					pModelMotionTransfers.removeAll()
				end
			end))
	end
	
	/** Reorder motion transfer up. */
	func void reorderMotionTransferUp()
		var MotionTransfer motionTransfer = getMotionTransfer()
		if motionTransfer == null
			return
		end
		
		var DefaultListModel list = DefaultListModel.new(pModelMotionTransfers.getContent())
		WindowDialog.reorderList(this, "@UI.ReorderMotionTransfers",\
			"@UI.Message.ReorderMotionTransfers",\
			null, list, MotionTransferRenderer.new(), null, null,\
			WindowDialog.BlockResultListener.new(block bool result
				pModelMotionTransfers.setContent(list.getContent())
				pModelMotionTransfers.setSelectedElement(motionTransfer)
			end))
	end
	
	/** Decompose motion transfer. */
	func void decomposeMotionTransfer()
		var MotionTransfer motionTransfer = getMotionTransfer()
		if motionTransfer == null
			return
		end
		
		var String message = TranslationManager.get().translate("UI.Message.AskDecomposeMotionTransfer")\
			.toUTF8().format(Array.newWith(motionTransfer.getName()))
		
		if not pCharacterConfiguration.isCalibrated()
			message = TranslationManager.get().translate("UI.Message.CharacterNotCalibrated").toUTF8() + "\n\n" + message
		end
		
		WindowDialog.question(this, "@UI.DecomposeMotionTransfer", message,\
			null, Array.newWith(WindowDialog.ButtonConfiguration.new("@UI.Decompose", true), \
				WindowDialog.ButtonConfiguration.new("@UI.Cancel", false)),\
			WindowDialog.BlockResultListener.new(block bool result
				if result
					var Array list = motionTransfer.decompose()
					if list.getCount() > 0
						var int index = pModelMotionTransfers.indexOf(motionTransfer)
						pModelMotionTransfers.remove(motionTransfer)
						pModelMotionTransfers.insertAll(index, list)
						pModelMotionTransfers.setSelected(index)
					end
				end
			end))
	end
	
	/** Motion transfer name changed. */
	func void onMotionTransferNameChanged()
		var int index = pModelMotionTransfers.indexOf(getMotionTransfer())
		if index != -1
			pModelMotionTransfers.notifyContentChanged(index, index)
		end
	end
end
