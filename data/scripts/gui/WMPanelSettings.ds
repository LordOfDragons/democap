/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2022, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Gui

pin Democap.Settingss
pin Democap.Actions
pin Democap.Behaviors
pin Democap.Characters
pin Democap.Worlds

pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events
pin Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.Gui.ModManagement



/**
 * Main window character panel.
 */
class WMPanelSettings extends Panel
	protected var bool pInVR
	protected var String pPrefixUIOptions
	
	
	
	/** Create session panel. */
	func new(bool inVR, String prefixUIOptions)
		pInVR = inVR
		pPrefixUIOptions = prefixUIOptions + "/WMPanelSettings"
		
		runWhileBlockingLayout(block
			createContent()
		end)
	end
	
	/** Dispose of widget. */
	func void dispose()
		super.dispose()
	end
	
	
	
	/** Shown in VR. */
	func bool getInVR()
		return pInVR
	end
	
	/** UI prefix options. */
	func String getPrefixUIOptions()
		return pPrefixUIOptions
	end
	
	
	
	/** Create panel content. */
	protected func void createContent()
		var SessionSettings sessionSettings = SessionSettings.get()
		var CheckBox checkBox
		var ComboBox comboBox
		var Label label
		var String toolTip
		var Button button
		var TextField textField
		
		setLayout(FlowLayout.new(LayoutAxis.y, 2))
		
		addWidget(Panel.new(BorderLayout.new(5), block Panel p
			p.setDesignerSelector("Panel.CollapsibleGroup.Header")
			p.addWidget(Label.new("@UI.SettingsVRControl", "Label.CollapsibleGroup"), BorderLayout.Area.content)
			
			p.addWidget(HelpButton.new("uipanelsettings"), BorderLayout.Area.right)
		end))
		
		if GameApp.versionPatch == 0
			addWidget(Label.new("DEMoCap {}.{}".format(Array.newWith(GameApp.versionMajor, GameApp.versionMinor))))
		else
			addWidget(Label.new("DEMoCap {}.{}.{}".format(Array.newWith(\
				GameApp.versionMajor, GameApp.versionMinor, GameApp.versionPatch))))
		end
		
		addWidget(Panel.new(GridLayout.new(2, 0), block Panel p
			button = Button.new("@UI.ModuleParameters", BlockActionListener.new(block ActionEvent event
				var WindowSettings window
				if pInVR
					window = WindowSettings.new(getDesktop().getSize())
				else
					window = WindowSettings.new(Point.new(800, 600))
				end
				window.addSheet(WSSModuleParameters.new())
				window.show(getWindow(), false, WindowModal.Placement.desktop)
			end))
			button.setToolTip("@UI.ToolTip.ModuleParameters")
			p.addWidget(button)
			
			button = Button.new("@UI.TestInputDevices", BlockActionListener.new(block ActionEvent event
				WindowInputDevice.new(getWindow(), pInVR)
			end))
			button.setToolTip("@UI.ToolTip.TestInputDevices")
			p.addWidget(button)
			
			button = Button.new("@UI.HelpWiki", BlockActionListener.new(block ActionEvent event
				FileSystem.openUrl("https://developer.dragondreams.ch/wiki/doku.php/democap:main")
			end))
			button.setToolTip("@UI.ToolTip.HelpWiki")
			p.addWidget(button)
			
			button = Button.new("@UI.Modifications", BlockActionListener.new(block ActionEvent event
				var GameApp app = GameApp.getGameApp()
				var Window window = getWindow()
				
				if app.getBaseGameServices().getUserServiceCount() > 0
					app.getProject().save()
					var MMWindowModManagement windowMM = MMWindowModManagement.new()
					windowMM.setGuiTheme(window.getGuiTheme())
					windowMM.setSize(window.getDesktop().getContainerSize() - Point.new(100, 100))
					windowMM.setResultListener(WindowDialog.BlockResultListener.new(\
						block MMPanelModManagement.ActivateModsResult result
							if result == MMPanelModManagement.ActivateModsResult.activated
								app.reloadAfterModsChanged()
							end
						end))
					windowMM.show(window, false, WindowModal.Placement.desktop)
					
				else
					WindowDialog.message(window, "@UI.Modifications",\
						"@UI.ModManagement.Message.NoModService", null, null, null)
				end
			end))
			button.setToolTip("@UI.Modifications.ToolTip")
			p.addWidget(button)
			
			button = Button.new("@UI.CenterPlayspace", BlockActionListener.new(block ActionEvent event
				VRSystem.centerPlayspace()
			end))
			button.setToolTip("@UI.ToolTip.CenterPlayspace")
			p.addWidget(button)
		end))
		
		addWidget(Panel.new(GridLayout.new(2, 0), block Panel p
			checkBox = CheckBox.new(sessionSettings.getModelEnableVR(), "@UI.EnableVR")
			checkBox.setToolTip("@UI.ToolTip.EnableVR")
			p.addWidget(checkBox)
			
			checkBox = CheckBox.new(sessionSettings.getModelEnableHMD(), "@UI.EnableHMD")
			checkBox.setToolTip("@UI.ToolTip.EnableHMD")
			p.addWidget(checkBox)
			
			checkBox = CheckBox.new(sessionSettings.getModelUseEyeGazeTracking(), "@UI.EyeGazeTracking")
			checkBox.setToolTip("@UI.ToolTip.EnableEyeGazeTracking")
			p.addWidget(checkBox)
			
			checkBox = CheckBox.new(sessionSettings.getModelUseFacialTracking(), "@UI.FacialTracking")
			checkBox.setToolTip("@UI.ToolTip.EnableFacialTracking")
			p.addWidget(checkBox)
			
			checkBox = CheckBox.new(sessionSettings.getModelShowVRCamera(), "@UI.ShowVRView")
			checkBox.setToolTip("@UI.ToolTip.ShowVRView")
			p.addWidget(checkBox)
			
			checkBox = CheckBox.new(sessionSettings.getModelEnablePassthrough(), "@UI.EnablePassthrough")
			checkBox.setToolTip("@UI.ToolTip.EnablePassthrough")
			p.addWidget(checkBox)
			
			checkBox = CheckBox.new(sessionSettings.getModelAutoExport(), "@UI.AutoExport")
			checkBox.setToolTip("@UI.ToolTip.AutoExport")
			p.addWidget(checkBox)
		end))
		
		addWidget(Panel.new(FormLayout.new(), block Panel p
			// remote camera
			label = Label.new("@UI.RemoteCamera.Label", "Label.FormCaption.SingleLine")
			label.setToolTip("@UI.ToolTip.RemoteCamera.ViewSettings")
			p.addWidget(label)
			
			comboBox = ComboBox.new(sessionSettings.getModelViewCamera(), WMPanelActorControl.RemoteCameraElementRenderer.new())
			comboBox.setToolTip("@UI.ToolTip.RemoteCamera.ViewSettings")
			p.addWidget(comboBox)
		end))
		
		addWidget(Panel.new(GridLayout.new(2, 0, 5), block Panel p
			var DefaultTextModel modelEstimated = GameApp.getGameApp().getWorldSpawnCharacter().getEstimatedFloorOffset()
			
			p.addWidget(Panel.new(BorderLayout.new(2), block Panel p2
				toolTip = "@UI.ToolTip.FloorOffset"
				label = Label.new("@UI.FloorOffset.Label", "Label.FormCaption.SingleLine")
				label.setToolTip(toolTip)
				p2.addWidget(label, BorderLayout.Area.left)
				
				textField = TextField.new(sessionSettings.getModelFloorOffset(), 4)
				textField.setToolTip(toolTip)
				textField.setValidator(SimpleTextValidator.new(12, SimpleTextValidator.CharacterClass.number))
				p2.addWidget(textField, BorderLayout.Area.content)
				
				button = Button.new("<", BlockActionListener.new(block ActionEvent event
					sessionSettings.getModelFloorOffset().setText(modelEstimated.getText())
				end))
				button.setToolTip("@UI.ToolTip.UseEstimateAsFloorOffset")
				p2.addWidget(button, BorderLayout.Area.right)
			end))
			
			p.addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 5, FlowLayout.Stretch.last), block Panel p2
				toolTip = "@UI.ToolTip.EstimatedFloorOffset"
				label = Label.new("@UI.Estimated", "Label.FormCaption.SingleLine")
				label.setToolTip(toolTip)
				p2.addWidget(label)
				
				textField = TextField.new(modelEstimated, 4, true)
				textField.setToolTip(toolTip)
				p2.addWidget(textField)
			end))
		end))
		
		addWidget(WMPPanelView.new(this))
		addWidget(WMPPanelNetworkAccess.new(this))
		addWidget(WMPPanelDebug.new(this))
	end
end
