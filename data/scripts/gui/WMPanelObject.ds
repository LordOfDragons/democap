/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Gui

pin Democap.Actors
pin Democap.Actions
pin Democap.Behaviors
pin Democap.Characters
pin Democap.Worlds

pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events
pin Dragengine.Scenery



/**
 * Main window character panel.
 */
class WMPanelObject extends CollapsibleGroup
	/** Object element renderer. */
	class ObjectElementRenderer extends DefaultListElementRenderer
		public func new()
			setDefaultMinimumSize(Point.new(80, 20))
		end
		
		public func void updateRenderer(ListBox listBox, Widget renderer, Object element, bool selected, bool focused)
			var String text = ""
			if element != null
				text = (element cast ECBSceneObject.Instance).getDisplayName()
			end
			super.updateRenderer(listBox, renderer, text, selected, focused)
		end
	end
	
	/** Scene objects listener. */
	class UpdateModelObjects extends DefaultListModelListener
		protected var WMPanelObject pPanel
		
		public func new(WMPanelObject panel)
			pPanel = panel
		end
		
		public func void contentChanged(ListModel listModel, int fromIndex, int toIndex)
			pPanel.updateModelObjects()
		end
		
		public func void elementsAdded(ListModel listModel, int fromIndex, int toIndex)
			pPanel.updateModelObjects()
		end
		
		public func void elementsRemoved(ListModel listModel, int fromIndex, int toIndex)
			pPanel.updateModelObjects()
		end
	end
	
	/** Select object listener. */
	class SelectObject extends DefaultListModelListener
		protected var WMPanelObject pWindow
		
		public func new(WMPanelObject window)
			pWindow = window
		end
		
		public func void contentChanged(ListModel model, int fromIndex, int toIndex)
			selectionChanged(model)
		end
		
		public func void selectionChanged(ListModel model)
			var int index = model.getSelected()
			if index != -1
				pWindow.setObject(model.getAt(index) cast ECBSceneObject.Instance)
				
			else
				pWindow.setObject(null)
			end
		end
	end
	
	/** Object popup menu. */
	class ObjectPopupAction extends DefaultActionListener
		private var WMPanelObject pPanel
		
		public func new(WMPanelObject panel)
			pPanel = panel
		end
		
		public func void onAction(ActionEvent event)
			var Widget widget = event.getSource() cast Widget
			var WindowPopup popup = WindowPopup.new()
			var Button button
			
// 			button = Button.new("Activate", BlockActionListener.new(block ActionEvent event
// 				pPanel.activateWorld()
// 			end))
// 			button.setToolTip("Activate world. Replaces entire world with selected one")
// 			popup.addWidget(button)
// 			
// 			button = Button.new("Browse Worlds...", BlockActionListener.new(block ActionEvent event
// 				popup.popdown()
// 				pPanel.browseBehaviorElements()
// 			end))
// 			popup.addWidget(button)
			
			pPanel.getDesktop().addWindow(popup)
			popup.popup(widget.getDesktopPosition() + Point.new(0, widget.getHeight()))
		end
	end
	
	
	
	protected var DefaultListModel pModelObjects
	protected var ECBSceneObject.Instance pObject
	protected var bool pInVR
	
	
	
	/** Create session panel. */
	public func new(bool inVR) super("Scene Objects", CollapsibleGroup.persistModel(prefixUIOptions(inVR)))
		pInVR = inVR
		
		pModelObjects = DefaultListModel.new()
		
		getPanelContent().runWhileBlockingLayout(block
			createContent(getPanelContent())
		end)
		
		pModelObjects.addListener(SelectObject.new(this))
		
		updateModelObjects()
		GameApp.getGameApp().getModelSceneObjects().addListener(UpdateModelObjects.new(this))
	end
	
	/** Dispose of widget. */
	public func void dispose()
		setObject(null)
		
		pModelObjects = null
		
		super.dispose()
	end
	
	/** UI options prefix. */
	static public func String prefixUIOptions(bool inVR)
		return inVR if "UI/VR/WMPanelObject" else "UI/WMPanelObject"
	end
	
	
	
	/** Shown in VR. */
	public func bool getInVR()
		return pInVR
	end
	
	
	
	/** Selected object or null. */
	public func ECBSceneObject.Instance getObject()
		return pObject
	end
	
	/** Set selected object or null. */
	public func void setObject(ECBSceneObject.Instance object)
		if object == pObject
			return
		end
		
		pObject = object
	end
	
	/** Update objects model. */
	public func void updateModelObjects()
		if pModelObjects == null
			return // dispose protection
		end
		
		var ECBSceneObject.Instance selection = pObject
		
		var Array content = Array.new()
		
		var GameWorld gameWorld = GameApp.getGameApp().getWindowGameWorld().getGameWorld()
		if gameWorld != null
			gameWorld.forEachElement(block BehaviorElement each
				if each castable BehaviorElement
					var ECBSceneObject.Instance sceneObject = ECBSceneObject.getInstanceIn(each cast BehaviorElement)
					if sceneObject != null
						content.add(sceneObject)
					end
				end
			end)
		end
		
		content.sort(block ECBSceneObject.Instance a, ECBSceneObject.Instance b
			return a.getDisplayName().compare(b.getDisplayName())
		end)
		
		pModelObjects.setContent(content)
		
		var int index = pModelObjects.indexOf(selection)
		if index != -1
			pModelObjects.setSelected(index)
			pModelObjects.notifyContentChanged(index, index)
		end
	end
	
	
	
	/** Create panel content. */
	protected func void createContent(Panel content)
		var Button button
		
		content.setLayout(FlowLayout.new(LayoutAxis.y, 2))
		
		content.addWidget(Panel.new(FormLayout.new(true, 5, 1), block Panel p
			p.addWidget(Label.new("Object:", "Label.FormCaption"))
			
			p.addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 1, FlowLayout.Stretch.first), block Panel p2
				p2.addWidget(ComboBox.new(pModelObjects, ObjectElementRenderer.new()))
				
				button = Button.new("...", ObjectPopupAction.new(this))
				button.setDesignerSelector("Button.Popup")
				p2.addWidget(button)
			end))
		end))
	end
end
