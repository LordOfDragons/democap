/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Gui

pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events
pin Dragengine.Scenery


/**
 * Edit Vector widget.
 */
class EditVector extends Panel
	protected class ComponentValueChanged extends DefaultTextModelListener
		private var EditVector pEditVector
		private var int pComponent
		
		public func new(EditVector editVector, int component)
			pEditVector = editVector
			pComponent = component
		end
		
		public func void textChanged(TextModel textModel)
			pEditVector.onComponentValueChanged(pComponent)
		end
	end
	
	protected class ComponentValueAccepted implements ActionListener
		private var EditVector pEditVector
		
		public func new(EditVector editVector)
			pEditVector = editVector
		end
		
		public func void onAction(ActionEvent event)
			pEditVector.onComponentValueAccepted()
		end
	end
	
	
	
	private var TextField pEditX
	private var TextField pEditY
	private var TextField pEditZ
	private var Vector pVector
	private var int pPrecision
	private var float pRoundUnit
	private var bool pPreventUpdate
	private var Array pActionListeners
	
	
	
	/** Create widget. */
	public func new() this(4)
	end
	
	/** Create widget. */
	public func new(int precision)
		pActionListeners = Array.new()
		pPreventUpdate = true
		pPrecision = DEMath.clamp(precision, 0, 6)
		pRoundUnit = DEMath.pow(0.1, pPrecision)
		
		runWhileBlockingLayout(block
			createContent()
		end)
		
		pVector = Vector.new()
		pPreventUpdate = false
	end
	
	/** Create widget. */
	public func new(Vector vector) this()
		setVector(vector)
	end
	
	/** Dispose of window. */
	public func void dispose()
		pPreventUpdate = true
		pActionListeners = null
		pEditX = null
		pEditY = null
		pEditZ = null
		super.dispose()
	end
	
	
	
	/** Precision in digits in the range from 0 to 6. */
	public func int getPrecision()
		return pPrecision
	end
	
	/** Round unit */
	public func float getRoundUnit()
		return pRoundUnit
	end
	
	/** Get vector. */
	public func Vector getVector()
		return pVector
	end
	
	/** Set vector. */
	public func void setVector(Vector vector)
		if vector.isEqualTo(pVector, pRoundUnit)
			return
		end
		
		pVector = vector
		updateTextFields()
		notifyListeners()
	end
	
	/** Vector is equal. */
	public func bool isEqualTo(Vector vector)
		return vector.isEqualTo(pVector, pRoundUnit)
	end
	
	/** Update text fields. */
	protected func void updateTextFields()
		var Vector v = pVector.round(pRoundUnit)
		pPreventUpdate = true
		pEditX.setText(v.getX().toString())
		pEditY.setText(v.getY().toString())
		pEditZ.setText(v.getZ().toString())
		pPreventUpdate = false
	end
	
	
	
	/** X component text field. */
	public func TextField getEditX()
		return pEditX
	end
	
	/** Y component text field. */
	public func TextField getEditY()
		return pEditY
	end
	
	/** Z component text field. */
	public func TextField getEditZ()
		return pEditZ
	end
	
	
	
	/** Add focus listener. */
	public func void addFocusListener(FocusListener listener)
		pEditX.addFocusListener(listener)
		pEditY.addFocusListener(listener)
		pEditZ.addFocusListener(listener)
	end
	
	/** Remove focus listener. */
	public func void removeFocusListener(FocusListener listener)
		pEditX.removeFocusListener(listener)
		pEditY.removeFocusListener(listener)
		pEditZ.removeFocusListener(listener)
	end
	
	
	
	/** Add action listener. */
	public func void addActionListener(ActionListener listener)
		if listener == null
			throw ENullPointer.new("listener")
		end
		pActionListeners.add(listener)
	end
	
	/** Remove action listener. */
	public func void removeActionListener(ActionListener listener)
		pActionListeners.remove(listener)
	end
	
	
	
	/** Create window content. */
	protected func void createContent()
		setLayout(BoxLayout.new(LayoutAxis.x, 5))
		
		var ComponentValueAccepted action = ComponentValueAccepted.new(this)
		
		addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 0, FlowLayout.Stretch.last), block Panel p
			p.addWidget(Label.new("X"))
			pEditX = TextField.new(DefaultTextModel.new((0).toString()), 5)
			pEditX.setValidator(SimpleTextValidator.new(10, SimpleTextValidator.CharacterClass.number))
			pEditX.getModel().addListener(ComponentValueChanged.new(this, 0))
			pEditX.addActionListener(action)
			p.addWidget(pEditX)
		end))
		
		addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 0, FlowLayout.Stretch.last), block Panel p
			p.addWidget(Label.new("Y"))
			pEditY = TextField.new(DefaultTextModel.new((0).toString()), 5)
			pEditY.setValidator(SimpleTextValidator.new(10, SimpleTextValidator.CharacterClass.number))
			pEditY.getModel().addListener(ComponentValueChanged.new(this, 1))
			pEditY.addActionListener(action)
			p.addWidget(pEditY)
		end))
		
		addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 0, FlowLayout.Stretch.last), block Panel p
			p.addWidget(Label.new("Z"))
			pEditZ = TextField.new(DefaultTextModel.new((0).toString()), 5)
			pEditZ.setValidator(SimpleTextValidator.new(10, SimpleTextValidator.CharacterClass.number))
			pEditZ.getModel().addListener(ComponentValueChanged.new(this, 2))
			pEditZ.addActionListener(action)
			p.addWidget(pEditZ)
		end))
	end
	
	/** Component value changed. */
	public func void onComponentValueChanged(int component)
		if pPreventUpdate
			return
		end
		
		var float x = pVector.getX()
		var float y = pVector.getY()
		var float z = pVector.getZ()
		
		try
			select component
			case 0
				x = pEditX.getText().toFloat()
				
			case 1
				y = pEditY.getText().toFloat()
				
			case 2
				z = pEditZ.getText().toFloat()
			end
			
		catch Exception e
			return
		end
		
		pVector = Vector.new(x, y, z)
	end
	
	/** Component value accepted. */
	public func void onComponentValueAccepted()
		notifyListeners()
	end
	
	/** Notify listeners. */
	protected func void notifyListeners()
		if pActionListeners == null
			return // disposed
		end
		
		var ActionEvent event = ActionEvent.new(this, ActionEvent.idAction, 0)
		pActionListeners.forEach(block ActionListener each
			each.onAction(event)
		end)
	end
end
