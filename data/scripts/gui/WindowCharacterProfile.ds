/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Gui

pin Democap.Behaviors
pin Democap.Characters
pin Democap.Elements

pin Dragengine.CameraDirectors
pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events
pin Dragengine.Preloading
pin Dragengine.Scenery


/**
 * Edit character profile window.
 */
class WindowCharacterProfile extends WindowDialog
	class UpdateListsListener implements WidgetCharacterPreview.Listener
		var WindowCharacterProfile pWindow
		
		func new(WindowCharacterProfile window)
			pWindow = window
		end
		
		func void characterReloaded(WidgetCharacterPreview widget)
			pWindow.updateBoneLists()
			pWindow.updateMoveLists()
		end
	end
	
	class PreviewMoveChanged implements ActionListener
		var WindowCharacterProfile pWindow
		
		func new(WindowCharacterProfile window)
			pWindow = window
		end
		
		func void onAction(ActionEvent event)
			pWindow.updatePreviewMove()
		end
	end
	
	class BoneAxisChanged extends DefaultListModelListener
		var WindowCharacterProfile pWindow
		
		func new(WindowCharacterProfile window)
			pWindow = window
		end
		
		func void selectionChanged(ListModel listModel)
			pWindow.updateBoneAxis()
		end
	end
	
	class ScaleChanged implements ActionListener
		var WindowCharacterProfile pWindow
		
		func new(WindowCharacterProfile window)
			pWindow = window
		end
		
		func void onAction(ActionEvent event)
			pWindow.updateScale()
		end
	end
	
	
	
	var CharacterProfile pCharacterProfile
	var DefaultTextModel pModelProfileName
	var DefaultListModel pModelListOriginBone
	var DefaultTextModel pModelTextOriginBone
	var DefaultListModel pModelListTeleportBone
	var DefaultTextModel pModelTextTeleportBone
	var DefaultTextModel pModelShoulderLevel
	var DefaultTextModel pModelPathModel
	var DefaultTextModel pModelPathSkin
	var DefaultTextModel pModelPathRig
	var DefaultTextModel pModelPathAnimation
	var DefaultListModel pModelListPreviewMove
	var DefaultTextModel pModelTextPreviewMove
	var DefaultListModel pModelBoneAxis
	var DefaultTextModel pModelScale
	var WidgetCharacterPreview pCharacterPreview
	var bool pInVR
	
	
	
	/** Create window. */
	func new(Window window, bool inVR, CharacterProfile profile, ResultListener listener)
		pInVR = inVR
		pCharacterProfile = profile
		
		pModelProfileName = DefaultTextModel.new(profile.getName())
		pModelListOriginBone = DefaultListModel.new()
		pModelListOriginBone.setAutoSelect(false)
		pModelTextOriginBone = DefaultTextModel.new(profile.getOriginBone())
		pModelListTeleportBone = DefaultListModel.new()
		pModelListTeleportBone.setAutoSelect(false)
		pModelTextTeleportBone = DefaultTextModel.new(profile.getTeleportBone())
		pModelShoulderLevel = DefaultTextModel.new(profile.getShoulderLevel().toString())
		pModelPathModel = DefaultTextModel.new(profile.getAppearance().getPathModel())
		pModelPathSkin = DefaultTextModel.new(profile.getAppearance().getPathSkin())
		pModelPathRig = DefaultTextModel.new(profile.getAppearance().getPathRig())
		pModelPathAnimation = DefaultTextModel.new(profile.getAppearance().getPathAnimation())
		pModelListPreviewMove = DefaultListModel.new()
		pModelListPreviewMove.setAutoSelect(false)
		pModelTextPreviewMove = DefaultTextModel.new(profile.getPreviewMove())
		pModelBoneAxis = DefaultListModel.new(CharacterProfile.BoneAxis.all().toArray().sorted())
		pModelBoneAxis.setSelectedElement(profile.getBoneAxis())
		pModelBoneAxis.addListener(BoneAxisChanged.new(this))
		pModelScale = DefaultTextModel.new(profile.getScale().toString())
		
		runWhileBlockingLayout(block
			setGuiTheme(window.getGuiTheme())
			setTitle("Character Profile")
			setDesignerSelector("Window.Dialog.CharacterProfile")
			setSize(window.getDesktop().getContainerSize() - Point.new(100, 100))
			
			createContent()
		end)
		doLayout()
		
		reloadCharacterPreview()
		
		setResultListener(listener)
		
		if inVR
			setPosition(Point.new())
			setSize(window.getDesktop().getSize())
			show(window, false, WindowModal.Placement.none)
			
		else
			show(window, false, WindowModal.Placement.desktop)
		end
		
		pCharacterPreview.setEditor(null)
	end
	
	/** Dispose of window. */
	func void dispose()
		pCharacterPreview = null
		pModelProfileName = null
		pModelListOriginBone = null
		pModelTextOriginBone = null
		pModelListTeleportBone = null
		pModelTextTeleportBone = null
		pModelShoulderLevel = null
		pModelPathModel = null
		pModelPathSkin = null
		pModelPathRig = null
		pModelPathAnimation = null
		pModelListPreviewMove = null
		pModelTextPreviewMove = null
		pModelBoneAxis = null
		pModelScale = null
		
		super.dispose()
	end
	
	
	
	/** Save dialog and close if no problems are found. */
	func void saveAndClose()
		// verify input
		var String profileName = pModelProfileName.getText()
		if not profileName.toLower().equals(pCharacterProfile.getName().toLower())
			if profileName.empty()
				WindowDialog.message(this, "Save Profile", "Profile name can not be empty", null, null, null)
				return
			end
			if GameApp.getGameApp().getCharacterProfiles().hasNamed(profileName)
				WindowDialog.message(this, "Save Profile", "Profile with same name exists", null, null, null)
				return
			end
			if not FileSystem.canDeleteFile(pCharacterProfile.getPathProfile())
				WindowDialog.message(this, "Save Profile", \
					"Profile can not be renamed. Old profile file can not be deleted", null, null, null)
				return
			end
		end
		
		// save changes
		var String oldPathProfile = pCharacterProfile.getPathProfile()
		
		pCharacterProfile.setName(profileName)
		pCharacterProfile.setOriginBone(pModelTextOriginBone.getText())
		pCharacterProfile.setTeleportBone(pModelTextTeleportBone.getText())
		pCharacterProfile.setShoulderLevel(pModelShoulderLevel.getText().toFloat())
		pCharacterProfile.setPreviewMove(pModelTextPreviewMove.getText())
		pCharacterProfile.setBoneAxis(pModelBoneAxis.getSelectedElement() cast CharacterProfile.BoneAxis)
		pCharacterProfile.setScale(pModelScale.getText().toFloat())
		
		var CharacterAppearance appearance = pCharacterProfile.getAppearance()
		appearance.setPathModel(pModelPathModel.getText())
		appearance.setPathSkin(pModelPathSkin.getText())
		appearance.setPathRig(pModelPathRig.getText())
		appearance.setPathAnimation(pModelPathAnimation.getText())
		
		pCharacterProfile.save()
		pCharacterProfile.preloadResources()
		
		// if profile file name changed delete the old profile file
		if not pCharacterProfile.getPathProfile().equals(oldPathProfile) and FileSystem.existsFile(oldPathProfile)
			try
				FileSystem.deleteFile(oldPathProfile)
				
			catch Exception e
				GameApp.getGameApp().getConsole().addError("Delete profile", e)
				WindowDialog.message(this, "Save Profile", "Failed deleting old profile:\n" + e, null, null, null)
			end
		end
		
		// finish and close window
		setResult(true)
		close()
	end
	
	/** Reload character preview. */
	func void reloadCharacterPreview()
		pCharacterPreview.setPathModel(pModelPathModel.getText())
		pCharacterPreview.setPathSkin( pModelPathSkin.getText())
		pCharacterPreview.setPathRig(pModelPathRig.getText())
		pCharacterPreview.setPathAnimation(pModelPathAnimation.getText())
		pCharacterPreview.setScale(pModelScale.getText().toFloat())
		pCharacterPreview.setBoneAxisRotation(CharacterProfile.boneAxisRotation(\
			pModelBoneAxis.getSelectedElement() cast CharacterProfile.BoneAxis))
		pCharacterPreview.reloadCharacterPreview()
	end
	
	
	
	/** Create window content. */
	protected func void createContent()
		var TextField textField
		var EditPath editPath
		var ComboBox comboBox
		var Button button
		var Label label
		
		var String startDirectory = "/content/models/characters"
		var BlockActionListener actionReloadCharacterPreview = BlockActionListener.new(block ActionEvent event
			reloadCharacterPreview()
		end)
		
		setLayout(BorderLayout.new(20))
		
		pCharacterPreview = WidgetCharacterPreview.new()
		pCharacterPreview.addListener(UpdateListsListener.new(this))
		addWidget(pCharacterPreview, BorderLayout.Area.content)
		
		// properties
		addWidget(StaticGroup.new("Actor Configuration", "dialog_characterprofile",\
		FormLayout.new(true, 10, 2), block Panel p
			// profile name
			p.addWidget(Label.new("Profile Name:", "Label.FormCaption"))
			
			textField = TextField.new(pModelProfileName, 15)
			textField.setDesignerSelector("TextField.WindowCharacterProfile")
			textField.setToolTip("Unique profile name")
			p.addWidget(textField)
			
			// path model resource
			p.addWidget(Label.new("Model:", "Label.FormCaption"))
			
			editPath = EditPath.new(pModelPathModel, ResourceLoaderType.model, startDirectory)
			editPath.setToolTip("Model resource to use")
			p.addWidget(editPath)
			editPath.addActionListener(actionReloadCharacterPreview)
			
			// path skin resource
			p.addWidget(Label.new("Skin:", "Label.FormCaption"))
			
			editPath = EditPath.new(pModelPathSkin, ResourceLoaderType.skin, startDirectory)
			editPath.setToolTip("Skin resource to use")
			p.addWidget(editPath)
			editPath.addActionListener(actionReloadCharacterPreview)
			
			// path rig resource
			p.addWidget(Label.new("Rig:", "Label.FormCaption"))
			
			editPath = EditPath.new(pModelPathRig, ResourceLoaderType.rig, startDirectory)
			editPath.setToolTip("Rig resource to use")
			p.addWidget(editPath)
			editPath.addActionListener(actionReloadCharacterPreview)
			
			// path animation resource
			p.addWidget(Label.new("Animation:", "Label.FormCaption"))
			
			editPath = EditPath.new(pModelPathAnimation, ResourceLoaderType.animation, startDirectory)
			editPath.setToolTip("Animation resource to use")
			p.addWidget(editPath)
			editPath.addActionListener(actionReloadCharacterPreview)
			
			// origin bone
			label = Label.new("Origin Bone:", "Label.FormCaption")
			p.addWidget(label)
			
			comboBox = ComboBox.new(pModelListOriginBone, DefaultComboBoxEditor.new(pModelTextOriginBone))
			comboBox.setDesignerSelector("ComboBox.WindowCharacterProfile")
			comboBox.setToolTip("Origin bone. This bone is moved to the calibration origin during capturing.")
			p.addWidget(comboBox)
			
			CPEBone.new(pCharacterPreview, label, comboBox)
			
			// teleport bone
			label = Label.new("Teleport Bone:", "Label.FormCaption")
			p.addWidget(label)
			
			comboBox = ComboBox.new(pModelListTeleportBone, DefaultComboBoxEditor.new(pModelTextTeleportBone))
			comboBox.setDesignerSelector("ComboBox.WindowCharacterProfile")
			comboBox.setToolTip("Teleport bone. If not empty string this bone is used to align with markers"\
				+ " on teleporting. If empty string playspace origin is used instead. Waist bone is recommended.")
			p.addWidget(comboBox)
			
			CPEBone.new(pCharacterPreview, label, comboBox)
			
			// shoulder level
			label = Label.new("Shoulder Level:", "Label.FormCaption")
			p.addWidget(label)
			
			textField = TextField.new(pModelShoulderLevel, 8)
			textField.setDesignerSelector("TextField.WindowCharacterConfiguration")
			textField.setToolTip("Shoulder level in meters. Use height of upper arm bone origin above ground.")
			textField.setValidator(SimpleTextValidator.new(10, SimpleTextValidator.CharacterClass.positiveNumber))
			p.addWidget(textField)
			
			CPELevel.new(pCharacterPreview, label, textField)
			
			// bone axis
			label = Label.new("Bone Axis:", "Label.FormCaption")
			p.addWidget(label)
			
			comboBox = ComboBox.new(pModelBoneAxis)
			comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
			comboBox.setToolTip("Major bone axis. Used to adjust orientation to match Z-axis.")
			p.addWidget(comboBox)
			
			// scale
			label = Label.new("Scale:", "Label.FormCaption")
			p.addWidget(label)
			
			textField = TextField.new(pModelScale, 8)
			textField.setDesignerSelector("TextField.WindowCharacterConfiguration")
			textField.setToolTip("Scale to apply if model does not use 1m as unit scale.")
			textField.setValidator(SimpleTextValidator.new(10, SimpleTextValidator.CharacterClass.positiveNumber))
			textField.addActionListener(ScaleChanged.new(this))
			p.addWidget(textField)
			
			// preview move
			p.addWidget(Label.new("Preview Move:", "Label.FormCaption"))
			
			comboBox = ComboBox.new(pModelListPreviewMove, DefaultComboBoxEditor.new(pModelTextPreviewMove))
			comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
			comboBox.setToolTip("Preview animation move to use.")
			comboBox.getEditor().addActionListener(PreviewMoveChanged.new(this))
			p.addWidget(comboBox)
			
		end), BorderLayout.Area.right)
		
		// button line
		addWidget(Panel.new(CentrizedBoxLayout.new(LayoutAxis.x), block Panel p
			button = Button.new("Save", BlockActionListener.new(block ActionEvent e
				saveAndClose()
			end))
			button.setDesignerSelector("Button.WindowCharacterProfile.Save")
			p.addWidget(button)
			
			button = Button.new("Cancel", CloseDialog.new(this, false))
			button.setDesignerSelector("Button.WindowCharacterProfile.Cancel")
			p.addWidget(button)
		end ), BorderLayout.Area.bottom )
	end
	
	/** Update bone lists. */
	func void updateBoneLists()
		var Array bones = Array.new()
		
		var Rig rig
		
		var BehaviorElement element = pCharacterPreview.getCharacterPreview()
		if element != null
			rig = ECBehaviorComponent.getInstanceIn(element).getComponent().getRig()
		end
		
		if rig != null
			var int i, count = rig.getBoneCount()
			for i = 0 to count
				bones.add(rig.boneGetName(i))
			end
			bones.sort(block String a, String b
				return a.compareNoCase(b)
			end)
		end
		
		pModelListOriginBone.setContent(bones)
		pModelListTeleportBone.setContent(bones)
	end
	
	/** Update move lists. */
	func void updateMoveLists()
		var Array moves = Array.new()
		var Animation animation
		
		var BehaviorElement element = pCharacterPreview.getCharacterPreview()
		if element != null
			var ECBPreviewAnimation.Instance previewAnimation = ECBPreviewAnimation.getInstanceIn(element)
			if previewAnimation != null
				animation = previewAnimation.getAnimation()
			end
		end
		
		if animation != null
			var int i, count = animation.getMoveCount()
			for i = 0 to count
				moves.add(animation.getMoveName(i))
			end
			moves.sort(block String a, String b
				return a.compareNoCase(b)
			end)
		end
		
		pModelListPreviewMove.setContent(moves)
	end
	
	/** Update preview move. */
	func void updatePreviewMove()
		var BehaviorElement element = pCharacterPreview.getCharacterPreview()
		if element == null
			return
		end
		
		var ECBPreviewAnimation.Instance previewAnimation = ECBPreviewAnimation.getInstanceIn(element)
		if previewAnimation != null
			previewAnimation.setMove(pModelTextPreviewMove.getText())
		end
		
		var ECBPreviewBones.Instance previewBones = ECBPreviewBones.getInstanceIn(element)
		if previewBones != null
			previewBones.bonePositionChanged()
		end
	end
	
	/** Update bone axis. */
	func void updateBoneAxis()
		var BehaviorElement element = pCharacterPreview.getCharacterPreview()
		if element == null
			return
		end
		
		var ECBPreviewBones.Instance previewBones = ECBPreviewBones.getInstanceIn(element)
		if previewBones != null
			previewBones.setAxisRotation(CharacterProfile.boneAxisRotation(\
				pModelBoneAxis.getSelectedElement() cast CharacterProfile.BoneAxis))
		end
	end
	
	/** Update scale. */
	func void updateScale()
		var BehaviorElement element = pCharacterPreview.getCharacterPreview()
		if element == null
			return
		end
		
		var float scale = pModelScale.getText().toFloat()
		element.setScaling(Vector.new(scale, scale, scale))
		
		var ECBehaviorComponent.Instance component = ECBehaviorComponent.getInstanceIn(element)
		if component != null
			component.getComponent().setScaling(Vector.new(scale, scale, scale))
		end
	end
end
