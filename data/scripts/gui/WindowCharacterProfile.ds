/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Gui

pin Democap.Behaviors
pin Democap.Characters
pin Democap.Elements

pin Dragengine.CameraDirectors
pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events
pin Dragengine.Preloading
pin Dragengine.Scenery


/**
 * Edit character profile window.
 */
class WindowCharacterProfile extends WindowDialog
	class UpdateBonesListener implements WidgetCharacterPreview.Listener
		private var WindowCharacterProfile pWindow
		
		public func new(WindowCharacterProfile window)
			pWindow = window
		end
		
		public func void characterReloaded(WidgetCharacterPreview widget)
			pWindow.updateBoneLists()
		end
	end
	
	
	
	private var CharacterProfile pCharacterProfile
	private var DefaultTextModel pModelProfileName
	private var DefaultListModel pModelListOriginBone
	private var DefaultTextModel pModelTextOriginBone
	private var DefaultTextModel pModelShoulderLevel
	private var DefaultTextModel pModelPathModel
	private var DefaultTextModel pModelPathSkin
	private var DefaultTextModel pModelPathRig
	private var DefaultTextModel pModelPathAnimation
	private var WidgetCharacterPreview pCharacterPreview
	private var bool pInVR
	
	
	
	/** Create window. */
	public func new(Window window, bool inVR, CharacterProfile profile, ResultListener listener)
		pInVR = inVR
		pCharacterProfile = profile
		
		pModelProfileName = DefaultTextModel.new(profile.getName())
		pModelListOriginBone = DefaultListModel.new()
		pModelListOriginBone.setAutoSelect(false)
		pModelTextOriginBone = DefaultTextModel.new(profile.getOriginBone())
		pModelShoulderLevel = DefaultTextModel.new(profile.getShoulderLevel().toString())
		pModelPathModel = DefaultTextModel.new(profile.getAppearance().getPathModel())
		pModelPathSkin = DefaultTextModel.new(profile.getAppearance().getPathSkin())
		pModelPathRig = DefaultTextModel.new(profile.getAppearance().getPathRig())
		pModelPathAnimation = DefaultTextModel.new(profile.getAppearance().getPathAnimation())
		
		runWhileBlockingLayout(block
			setGuiTheme(window.getGuiTheme())
			setTitle("Character Profile")
			setDesignerSelector("Window.Dialog.CharacterProfile")
			setSize(window.getDesktop().getContainerSize() - Point.new(100, 100))
			
			createContent()
		end)
		
		reloadCharacterPreview()
		
		setResultListener(listener)
		
		if inVR
			setPosition(Point.new())
			setSize(window.getDesktop().getSize())
			show(window, false, WindowModal.Placement.none)
			
		else
			show(window, false, WindowModal.Placement.desktop)
		end
		
		pCharacterPreview.setEditor(null)
	end
	
	/** Dispose of window. */
	public func void dispose()
		pCharacterPreview = null
		pModelProfileName = null
		pModelListOriginBone = null
		pModelTextOriginBone = null
		pModelShoulderLevel = null
		pModelPathModel = null
		pModelPathSkin = null
		pModelPathRig = null
		pModelPathAnimation = null
		
		super.dispose()
	end
	
	
	
	/** Save dialog and close if no problems are found. */
	public func void saveAndClose()
		// verify input
		var String profileName = pModelProfileName.getText()
		if not profileName.toLower().equals(pCharacterProfile.getName().toLower())
			if profileName.empty()
				WindowDialog.message(this, "Save Profile", "Profile name can not be empty", null, null, null)
				return
			end
			if GameApp.getGameApp().getCharacterProfiles().hasNamed(profileName)
				WindowDialog.message(this, "Save Profile", "Profile with same name exists", null, null, null)
				return
			end
			if not FileSystem.canDeleteFile(pCharacterProfile.getPathProfile())
				WindowDialog.message(this, "Save Profile", \
					"Profile can not be renamed. Old profile file can not be deleted", null, null, null)
				return
			end
		end
		
		// save changes
		var String oldPathProfile = pCharacterProfile.getPathProfile()
		
		pCharacterProfile.setName(profileName)
		pCharacterProfile.setOriginBone(pModelTextOriginBone.getText())
		pCharacterProfile.setShoulderLevel(pModelShoulderLevel.getText().toFloat())
		
		var CharacterAppearance appearance = pCharacterProfile.getAppearance()
		appearance.setPathModel(pModelPathModel.getText())
		appearance.setPathSkin(pModelPathSkin.getText())
		appearance.setPathRig(pModelPathRig.getText())
		appearance.setPathAnimation(pModelPathAnimation.getText())
		
		pCharacterProfile.save()
		pCharacterProfile.preloadResources()
		
		// if profile file name changed delete the old profile file
		if not pCharacterProfile.getPathProfile().equals(oldPathProfile) and FileSystem.existsFile(oldPathProfile)
			try
				FileSystem.deleteFile(oldPathProfile)
				
			catch Exception e
				GameApp.getGameApp().getConsole().addError("Delete profile", e)
				WindowDialog.message(this, "Save Profile", "Failed deleting old profile:\n" + e, null, null, null)
			end
		end
		
		// finish and close window
		setResult(true)
		close()
	end
	
	/** Reload character preview. */
	public func void reloadCharacterPreview()
		pCharacterPreview.setPathModel(pModelPathModel.getText())
		pCharacterPreview.setPathSkin( pModelPathSkin.getText())
		pCharacterPreview.setPathRig(pModelPathRig.getText())
		pCharacterPreview.setPathAnimation(pModelPathAnimation.getText())
		pCharacterPreview.reloadCharacterPreview()
	end
	
	
	
	/** Create window content. */
	protected func void createContent()
		var TextField textField
		var ComboBox comboBox
		var Button button
		var Label label
		
		setLayout(BorderLayout.new(20))
		
		pCharacterPreview = WidgetCharacterPreview.new()
		pCharacterPreview.addListener(UpdateBonesListener.new(this))
		addWidget(pCharacterPreview, BorderLayout.Area.content)
		
		// properties
		addWidget(Panel.new(FormLayout.new(true, 10, 2), block Panel p
			// profile name
			p.addWidget(Label.new("Profile Name:", "Label.FormCaption"))
			
			textField = TextField.new(pModelProfileName, 15)
			textField.setDesignerSelector("TextField.WindowCharacterProfile")
			textField.setToolTip("Unique profile name")
			p.addWidget(textField)
			
			// path model resource
			p.addWidget(Label.new("Model:", "Label.FormCaption"))
			
			p.addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 0, FlowLayout.Stretch.first), block Panel p2
				textField = TextField.new(pModelPathModel, 20)
				textField.setDesignerSelector("TextField.WindowCharacterProfile")
				textField.setToolTip("Model resource to use")
				p2.addWidget(textField)
				
				button = Button.new("...", BlockActionListener.new(block ActionEvent e
					// TODO select file using file dialog
				end))
				button.setDesignerSelector("Button.Popup")
				p2.addWidget(button)
			end))
			
			// path skin resource
			p.addWidget(Label.new("Skin:", "Label.FormCaption"))
			
			p.addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 0, FlowLayout.Stretch.first), block Panel p2
				textField = TextField.new(pModelPathSkin, 20)
				textField.setDesignerSelector("TextField.WindowCharacterProfile")
				textField.setToolTip("Skin resource to use")
				p2.addWidget(textField)
				
				button = Button.new("...", BlockActionListener.new(block ActionEvent e
					// TODO select file using file dialog
				end))
				button.setDesignerSelector("Button.Popup")
				p2.addWidget(button)
			end))
			
			// path rig resource
			p.addWidget(Label.new("Rig:", "Label.FormCaption"))
			
			p.addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 0, FlowLayout.Stretch.first), block Panel p2
				textField = TextField.new(pModelPathRig, 20)
				textField.setDesignerSelector("TextField.WindowCharacterProfile")
				textField.setToolTip("Rig resource to use")
				p2.addWidget(textField)
				
				button = Button.new("...", BlockActionListener.new(block ActionEvent e
					// TODO select file using file dialog
				end))
				button.setDesignerSelector("Button.Popup")
				p2.addWidget(button)
			end))
			
			// path animation resource
			p.addWidget(Label.new("Animation:", "Label.FormCaption"))
			
			p.addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 0, FlowLayout.Stretch.first), block Panel p2
				textField = TextField.new(pModelPathAnimation, 20)
				textField.setDesignerSelector("TextField.WindowCharacterProfile")
				textField.setToolTip("Animation resource to use")
				p2.addWidget(textField)
				
				button = Button.new("...", BlockActionListener.new(block ActionEvent e
					// TODO select file using file dialog
				end))
				button.setDesignerSelector("Button.Popup")
				p2.addWidget(button)
			end))
			
			// origin bone
			label = Label.new("Origin Bone:", "Label.FormCaption")
			p.addWidget(label)
			
			comboBox = ComboBox.new(pModelListOriginBone, DefaultComboBoxEditor.new(pModelTextOriginBone))
			comboBox.setDesignerSelector("ComboBox.WindowCharacterProfile")
			comboBox.setToolTip("Origin bone. This bone is moved to the calibration origin during capturing.")
			p.addWidget(comboBox)
			
			CPEBone.new(pCharacterPreview, label, comboBox)
			
			// shoulder level
			p.addWidget(Label.new("Shoulder Level:", "Label.FormCaption"))
			
			textField = TextField.new(pModelShoulderLevel, 8)
			textField.setDesignerSelector("TextField.WindowCharacterConfiguration")
			textField.setToolTip("Shoulder level in meters. Use height of upper arm bone origin above ground.")
			textField.setValidator(SimpleTextValidator.new(10, SimpleTextValidator.CharacterClass.positiveNumber))
			p.addWidget(textField)
			
		end), BorderLayout.Area.right)
		
		// button line
		addWidget(Panel.new(CentrizedBoxLayout.new(LayoutAxis.x), block Panel p
			button = Button.new("Save", BlockActionListener.new(block ActionEvent e
				saveAndClose()
			end))
			button.setDesignerSelector("Button.WindowCharacterProfile.Save")
			p.addWidget(button)
			
			button = Button.new("Cancel", CloseDialog.new(this, false))
			button.setDesignerSelector("Button.WindowCharacterProfile.Cancel")
			p.addWidget(button)
		end ), BorderLayout.Area.bottom )
	end
	
	/** Update bone lists. */
	public func void updateBoneLists()
		var Array bones = Array.new()
		
		var Rig rig
		
		var BehaviorElement element = pCharacterPreview.getCharacterPreview()
		if element != null
			rig = ECBehaviorComponent.getInstanceIn(element).getComponent().getRig()
		end
		
		if rig != null
			var int i, count = rig.getBoneCount()
			for i = 0 to count
				bones.add(rig.boneGetName(i))
			end
			bones.sort(block String a, String b
				return a.compareNoCase(b)
			end)
		end
		
		pModelListOriginBone.setContent(bones)
	end
end
