/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2022, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Gui

pin Democap.Actors
pin Democap.Actions
pin Democap.Behaviors
pin Democap.Characters
pin Democap.Worlds

pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events
pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.XML



/**
 * Main window project panel.
 */
class WMPSOCapturedObject extends WMPPanelSceneObject
	/** Animation popup menu. */
	class AnimationPopupAction extends DefaultActionListener
		protected var WMPSOCapturedObject pPanel
		
		public func new(WMPSOCapturedObject panel)
			pPanel = panel
		end
		
		public func void onAction(ActionEvent event)
			var Widget widget = event.getSource() cast Widget
			var MenuPopup menu = MenuPopup.new()
			var MenuItemCommand item
			
			item = MenuItemCommand.new("Clear", BlockActionListener.new(block ActionEvent event
				pPanel.clearAnimation()
			end))
			item.setToolTip("Clear animation")
			menu.addWidget(item)
			
			item = MenuItemCommand.new("Export object animation...", BlockActionListener.new(block ActionEvent event
				pPanel.exportObjectAnimation()
			end))
			item.setToolTip("Export object animation")
			menu.addWidget(item)
			
			item = MenuItemCommand.new("Browse exported...", BlockActionListener.new(block ActionEvent event
				pPanel.browseExportedAnimations()
			end))
			item.setToolTip("Open native file browser with directory containing exported animations")
			menu.addWidget(item)
			
			pPanel.getDesktop().addWindow(menu)
			menu.popup(widget.getDesktopPosition() + Point.new(0, widget.getHeight()))
		end
	end
	
	/** Behavior listener. */
	class BehaviorChangedListener extends ECBCapturedObject.DefaultListener
		protected var WMPSOCapturedObject pPanel
		
		public func new(WMPSOCapturedObject panel)
			pPanel = panel
		end
		
		public func void animationChanged(ECBCapturedObject.Instance instance)
			pPanel.updateAnimationInfo()
		end
	end
	
	/** Toggle record listener. */
	class ToggleRecord extends DefaultToggleModelListener
		protected var WMPSOCapturedObject pPanel
		
		public func new(WMPSOCapturedObject panel)
			pPanel = panel
		end
		
		public func void toggledChanged(ToggleModel model)
			pPanel.getBehaviorCapturedObject().setRecord(model.getToggled())
		end
	end
	
	
	
	protected var ECBCapturedObject.Instance pBehaviorCapturedObject
	protected var DefaultTextModel pModelAnimationInfo
	protected var DefaultToggleModel pModelRecord
	protected var BehaviorChangedListener pBehaviorChangedListener
	
	
	
	/** Create panel. */
	public func new(WMPanelProject panelProject, ECBCapturedObject.Instance behavior)\
	super(panelProject, behavior, behavior.getECBehavior().getID(),\
	"Captured Object", "WMPSOCapturedObject", "ppob_capturedobject")
		pBehaviorCapturedObject = behavior
		
		pModelAnimationInfo = DefaultTextModel.new("")
		pModelRecord = DefaultToggleModel.new()
		
		getPanelContent().runWhileBlockingLayout(block
			createContent(getPanelContent())
		end)
		
		updateAnimationInfo()
		
		pModelRecord.addListener(ToggleRecord.new(this))
		
		pBehaviorChangedListener = BehaviorChangedListener.new(this)
		behavior.addListener(pBehaviorChangedListener)
	end
	
	/** Dispose of widget. */
	public func void dispose()
		if pBehaviorChangedListener != null
			pBehaviorCapturedObject.removeListener(pBehaviorChangedListener)
			pBehaviorChangedListener = null
		end
		
		pModelAnimationInfo = null
		pModelRecord = null
		
		super.dispose()
	end
	
	
	
	/** CapturedObject behavior. */
	public func ECBCapturedObject.Instance getBehaviorCapturedObject()
		return pBehaviorCapturedObject
	end
	
	/** Update behavior. */
	public func void updateBehavior()
		pModelRecord.setToggled(pBehaviorCapturedObject.getRecord())
	end
	
	
	
	/** Update animation info. */
	public func void updateAnimationInfo()
		var Animation animation = pBehaviorCapturedObject.getObjectAnimation().getAnimation()
		if animation != null and animation.getMoveCount() > 0
			pModelAnimationInfo.setText("{}: {:.1f}s".format(Array.newWith(\
				File.new(pBehaviorCapturedObject.getObjectAnimation().getPath()).getName(),\
				animation.getMovePlaytime(animation.getMoveName(0)))))
			
		else
			pModelAnimationInfo.setText("")
		end
	end
	
	/** Clear animation. */
	public func void clearAnimation()
		pBehaviorCapturedObject.getObjectAnimation().clear()
		pBehaviorCapturedObject.getCharacterAnimation().clear()
		pBehaviorCapturedObject.rebuildAnimator()
		pBehaviorCapturedObject.notifyAnimationChanged()
	end
	
	/** Export object animation. */
	public func void exportObjectAnimation()
		var Project project = GameApp.getGameApp().getProject()
		if project == null
			return
		end
		
		WindowDialog.input(getWindow(), "Export Object Animation", "Name:", null, "Animation",\
		null, null, WindowDialog.BlockResultListener.new(block String result
			if result != null and not result.empty()
				pBehaviorCapturedObject.getObjectAnimation().export(project, result)
			end
		end))
	end
	
	/** Browse exported animations directory. */
	public func void browseExportedAnimations()
		var Project project = GameApp.getGameApp().getProject()
		if project != null
			project.browseExportedAnimations()
		end
	end
	
	
	
	/** Create panel content. */
	protected func void createContent(Panel content)
		var CheckBox checkBox
		var Button button
		
		content.setLayout(FlowLayout.new(LayoutAxis.y, 2))
		
		content.addWidget(Panel.new(FormLayout.new(true, 5, 2), block Panel p
			// enabled
			p.addWidget(Label.new("", "Label.FormCaption"))
			
			checkBox = CheckBox.new(pModelRecord, "Record")
			checkBox.setToolTip("Enable object recording.")
			p.addWidget(checkBox)
			
			// animation info
			p.addWidget(Label.new("Animation:", "Label.FormCaption"))
			p.addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 1, FlowLayout.Stretch.first), block Panel p2
				p2.addWidget(Label.new(pModelAnimationInfo, "Label.FormText"))
				
				button = Button.new("...", AnimationPopupAction.new(this))
				button.setDesignerSelector("Button.Popup")
				p2.addWidget(button)
			end))
		end))
	end
end
