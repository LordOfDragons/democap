/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Gui

pin Democap.Actors
pin Democap.Actions
pin Democap.Behaviors
pin Democap.Characters
pin Democap.Worlds

pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events
pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.XML



/**
 * ECBCapturedAnimations panel.
 */
class WMPSOCapturedAnimations extends WMPPanelSceneObject
	/** Animation element renderer. */
	class AnimationElementRenderer extends DefaultListElementRenderer
		public func new()
			setDefaultMinimumSize(Point.new(80, 20))
		end
		
		public func void updateRenderer(ListBox listBox, Widget renderer, Object element, bool selected, bool focused)
			var String text = ""
			if element != null
				text = (element cast CharacterAnimation).getName()
			end
			super.updateRenderer(listBox, renderer, text, selected, focused)
		end
	end
	
	/** Animations listener. */
	class AnimationsChangedListener extends DefaultCharacterAnimationsListener
		protected var WMPSOCapturedAnimations pPanel
		
		public func new(WMPSOCapturedAnimations panel)
			pPanel = panel
		end
		
		public func void animationAdded(CharacterAnimations animations, CharacterAnimation animation)
			pPanel.updateModelAnimations()
		end
		
		public func void animationRemoved(CharacterAnimations animations, CharacterAnimation animation)
			pPanel.updateModelAnimations()
		end
		
		public func void animationNameChanged(CharacterAnimations animations, CharacterAnimation animation)
			pPanel.updateModelAnimations()
		end
		
		public func void animationChanged(CharacterAnimations animations, CharacterAnimation animation)
			if animation == pPanel.getAnimation()
				pPanel.updateAnimation()
			end
		end
		
		public func void allAnimationsRemoved(CharacterAnimations animations)
			pPanel.updateModelAnimations()
		end
		
		public func void activeAnimationChanged(CharacterAnimations animations)
			pPanel.setAnimation(animations.getActive())
		end
	end
	
	/** Select animation listener. */
	class SelectedAnimationChanged extends DefaultListModelListener
		protected var WMPSOCapturedAnimations pPanel
		
		public func new(WMPSOCapturedAnimations panel)
			pPanel = panel
		end
		
		public func void contentChanged(ListModel model, int fromIndex, int toIndex)
			selectionChanged(model)
		end
		
		public func void selectionChanged(ListModel model)
			var int index = model.getSelected()
			if index != -1
				pPanel.getBehaviorCapturedAnimations().getAnimations().setActive(\
					model.getAt(index) cast CharacterAnimation)
				
			else
				pPanel.getBehaviorCapturedAnimations().getAnimations().setActive(null)
			end
		end
	end
	
	/** Animation popup menu. */
	class AnimationPopupAction extends DefaultActionListener
		protected var WMPSOCapturedAnimations pPanel
		
		public func new(WMPSOCapturedAnimations panel)
			pPanel = panel
		end
		
		public func void onAction(ActionEvent event)
			var Widget widget = event.getSource() cast Widget
			var MenuPopup menu = MenuPopup.new()
			var MenuItemCommand item
			
			item = MenuItemCommand.new("Add...", BlockActionListener.new(block ActionEvent event
				pPanel.addAnimation()
			end))
			item.setToolTip("Add animation")
			menu.addWidget(item)
			
			item = MenuItemCommand.new("Remove", BlockActionListener.new(block ActionEvent event
				pPanel.removeAnimation()
			end))
			item.setToolTip("Remove animation")
			menu.addWidget(item)
			
			item = MenuItemCommand.new("Rename...", BlockActionListener.new(block ActionEvent event
				pPanel.renameAnimation()
			end))
			item.setToolTip("Rename animation")
			menu.addWidget(item)
			
			item = MenuItemCommand.new("Clear", BlockActionListener.new(block ActionEvent event
				pPanel.clearAnimation()
			end))
			item.setToolTip("Clear animation")
			menu.addWidget(item)
			
			item = MenuItemCommand.new("Save animation...", BlockActionListener.new(block ActionEvent event
				pPanel.saveAnimation()
			end))
			item.setToolTip("Save animation")
			menu.addWidget(item)
			
			item = MenuItemCommand.new("Export animation...", BlockActionListener.new(block ActionEvent event
				pPanel.exportAnimation()
			end))
			item.setToolTip("Export animation")
			menu.addWidget(item)
			
			item = MenuItemCommand.new("Browse exported...", BlockActionListener.new(block ActionEvent event
				pPanel.browseExportedAnimations()
			end))
			item.setToolTip("Open native file browser with directory containing exported animations")
			menu.addWidget(item)
			
			pPanel.getDesktop().addWindow(menu)
			menu.popup(widget.getDesktopPosition() + Point.new(0, widget.getHeight()))
		end
	end
	
	/** Toggle record listener. */
	class ToggleRecord extends DefaultToggleModelListener
		protected var WMPSOCapturedAnimations pPanel
		
		public func new(WMPSOCapturedAnimations panel)
			pPanel = panel
		end
		
		public func void toggledChanged(ToggleModel model)
			pPanel.getBehaviorCapturedAnimations().setRecord(model.getToggled())
		end
	end
	
	
	
	protected var ECBCapturedAnimations.Instance pBehaviorCapturedAnimations
	protected var DefaultListModel pModelAnimations
	protected var DefaultTextModel pModelAnimationInfo
	protected var DefaultToggleModel pModelRecord
	protected var AnimationsChangedListener pAnimationsChangedListener
	protected var CharacterAnimation pAnimation
	
	
	
	/** Create panel. */
	public func new(WMPanelProject panelProject, ECBCapturedAnimations.Instance behavior)\
	super(panelProject, behavior, behavior.getECBehavior().getID(),\
	"Captured Animations", "WMPSOCapturedAnimations", "ppob_capturedanimations")
		pBehaviorCapturedAnimations = behavior
		
		pModelAnimations = DefaultListModel.new()
		pModelAnimationInfo = DefaultTextModel.new("")
		pModelRecord = DefaultToggleModel.new()
		
		getPanelContent().runWhileBlockingLayout(block
			createContent(getPanelContent())
		end)
		
		updateModelAnimations()
		setAnimation(behavior.getAnimations().getActive())
		
		pModelAnimations.addListener(SelectedAnimationChanged.new(this))
		pModelRecord.addListener(ToggleRecord.new(this))
		
		pAnimationsChangedListener = AnimationsChangedListener.new(this)
		behavior.getAnimations().addListener(pAnimationsChangedListener)
	end
	
	/** Dispose of widget. */
	public func void dispose()
		setAnimation(null)
		
		if pAnimationsChangedListener != null
			pBehaviorCapturedAnimations.getAnimations().removeListener(pAnimationsChangedListener)
			pAnimationsChangedListener = null
		end
		
		pModelAnimations = null
		pModelAnimationInfo = null
		pModelRecord = null
		
		super.dispose()
	end
	
	
	
	/** CapturedAnimations behavior. */
	public func ECBCapturedAnimations.Instance getBehaviorCapturedAnimations()
		return pBehaviorCapturedAnimations
	end
	
	/** Update behavior. */
	public func void updateBehavior()
		pModelRecord.setToggled(pBehaviorCapturedAnimations.getRecord())
	end
	
	
	
	/** Update animations model. */
	public func void updateModelAnimations()
		var CharacterAnimation selection = pAnimation
		
		pModelAnimations.setContent(pBehaviorCapturedAnimations.getAnimations().toArray())
		
		var int index = pModelAnimations.indexOf(selection)
		if index != -1
			pModelAnimations.setSelected(index)
			pModelAnimations.notifyContentChanged(index, index)
		end
	end
	
	/** Animation or null. */
	public func CharacterAnimation getAnimation()
		return pAnimation
	end
	
	/** Set animation or null. */
	public func void setAnimation(CharacterAnimation animation)
		if animation == pAnimation
			return
		end
		
		pAnimation = animation
		updateAnimation()
	end
	
	/** Update animation. */
	public func void updateAnimation()
		var Animation animation
		var Animation animationObject
		if pAnimation != null
			animation = pAnimation.getAnimation()
			animationObject = pAnimation.getAnimationObject()
		end
		
		if animation != null and animation.getMoveCount() > 0
			pModelAnimationInfo.setText("{}: {:.1f}s, {} bones".format(Array.newWith(\
				File.new(pAnimation.getPath()).getName(),\
				animation.getMovePlaytime(animation.getMoveName(0)),\
				animation.getBoneCount())))
			
		elif animationObject != null and animationObject.getMoveCount() > 0
			pModelAnimationInfo.setText("{}: {:.1f}s, {} bones".format(Array.newWith(\
				File.new(pAnimation.getPathObject()).getName(),\
				animationObject.getMovePlaytime(animationObject.getMoveName(0)),\
				animationObject.getBoneCount())))
			
		else
			pModelAnimationInfo.setText("")
		end
	end
	
	/** Add animation. */
	public func void addAnimation()
		WindowDialog.input(getWindow(), "Add Animation", "Name:", null,\
			pBehaviorCapturedAnimations.getAnimationName(),\
			WindowDialog.ButtonConfiguration.new("Add Animation"),\
			WindowDialog.ButtonConfiguration.new("Cancel"),\
			WindowDialog.BlockResultListener.new(block String result
				if result != null
					if pBehaviorCapturedAnimations.getAnimations().hasNamed(result)
						WindowDialog.message(getWindow(), "Add Animation",\
							"Animation with this name exists already.", null, null, null)
						
					else
						var CharacterAnimation animation = CharacterAnimation.new(result)
						pBehaviorCapturedAnimations.getAnimations().add(animation)
						pModelAnimations.setSelected(pModelAnimations.indexOf(animation))
					end
				end
		end))
	end
	
	/** Remove animation. */
	public func void removeAnimation()
		if pAnimation == null
			return
		end
		
		WindowDialog.question(getWindow(), "Remove Animation", "Remove Animation '"\
			+ pAnimation.getName() + "'?", null, Array.newWith(\
				WindowDialog.ButtonConfiguration.new("Remove", true),\
				WindowDialog.ButtonConfiguration.new("Cancel", false)),\
			WindowDialog.BlockResultListener.new(block bool result
				if result
					pBehaviorCapturedAnimations.getAnimations().remove(pAnimation)
				end
		end))
	end
	
	/** Rename animation. */
	public func void renameAnimation()
		if pAnimation == null
			return
		end
		
		WindowDialog.input(getWindow(), "Rename Animation", "Name:", null, pAnimation.getName(),\
		null, null, WindowDialog.BlockResultListener.new(block String result
			if result != null
				if not result.equals(pAnimation.getName())
					pAnimation.setName(result)
					pBehaviorCapturedAnimations.getAnimations().notifyAnimationNameChanged(pAnimation)
				end
			end
		end))
	end
	
	/** Clear animation. */
	public func void clearAnimation()
		if pAnimation == null or pAnimation.getAnimation() == null
			return
		end
		
		pAnimation.clear()
		pBehaviorCapturedAnimations.getAnimations().notifyAnimationChanged(pAnimation)
	end
	
	/** Save animation. */
	public func void saveAnimation()
		if pAnimation == null or pAnimation.getAnimation() == null
			return
		end
		
		WindowDialog.input(getWindow(), "Save Animation", "Name:", null, "Animation",\
		null, null, WindowDialog.BlockResultListener.new(block String result
			if result == null or result.empty()
				return null
			end
			
			var Project project = GameApp.getGameApp().getProject()
			if project.getSavedAnimations().hasNamed(result)
				WindowDialog.message(getWindow(), "Save Animation", "Name exists already", null, null, null)
				return null
			end
			
			var CharacterAnimation anim = CharacterAnimation.new(pAnimation)
			anim.setName(result)
			project.getSavedAnimations().add(anim) // we have to do this before altering any file usage
			GameApp.getGameApp().notifySavedAnimationsChanged()
			project.save()
		end))
	end
	
	/** Export animation. */
	public func void exportAnimation()
		var Project project = GameApp.getGameApp().getProject()
		if pAnimation == null or project == null
			return
		end
		
		WindowDialog.input(getWindow(), "Export Animation", "Name:", null, "Animation",\
		null, null, WindowDialog.BlockResultListener.new(block String result
			if result != null and not result.empty()
				pAnimation.export(project, result)
			end
		end))
	end
	
	/** Browse exported animations directory. */
	public func void browseExportedAnimations()
		var Project project = GameApp.getGameApp().getProject()
		if project != null
			project.browseExportedAnimations()
		end
	end
	
	
	
	/** Create panel content. */
	protected func void createContent(Panel content)
		var CheckBox checkBox
		var Button button
		
		content.setLayout(FlowLayout.new(LayoutAxis.y, 2))
		
		content.addWidget(Panel.new(FormLayout.new(true, 5, 2), block Panel p
			// animations
			p.addWidget(Label.new("Animation:", "Label.FormCaption"))
			p.addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 1, FlowLayout.Stretch.first), block Panel p2
				p2.addWidget(ComboBox.new(pModelAnimations, AnimationElementRenderer.new()))
				
				button = Button.new("...", AnimationPopupAction.new(this))
				button.setDesignerSelector("Button.Popup")
				p2.addWidget(button)
			end))
			
			// animation information
			p.addWidget(Label.new("", "Label.FormCaption"))
			p.addWidget(Label.new(pModelAnimationInfo, "Label.FormText"))
			
			// recording
			p.addWidget(Label.new("", "Label.FormCaption"))
			checkBox = CheckBox.new(pModelRecord, "Record")
			checkBox.setToolTip("Enable recording.")
			p.addWidget(checkBox)
		end))
	end
end
