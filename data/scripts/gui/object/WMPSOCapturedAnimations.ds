/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Gui

pin Democap.Actors
pin Democap.Actions
pin Democap.Behaviors
pin Democap.Characters
pin Democap.Worlds

pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events
pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.XML



/**
 * ECBCapturedAnimations panel.
 */
class WMPSOCapturedAnimations extends WMPPanelSceneObject
	/** Animation element renderer. */
	class AnimationElementRenderer extends DefaultListElementRenderer
		func new()
			setDefaultMinimumSize(Point.new(80, 20))
		end
		
		func void updateRenderer(ListBox listBox, Widget renderer, Object element, bool selected, bool focused)
			var String text = ""
			if element != null
				text = (element cast CharacterAnimation).getName()
			end
			super.updateRenderer(listBox, renderer, text, selected, focused)
		end
	end
	
	/** Animations listener. */
	class AnimationsChangedListener extends DefaultCharacterAnimationsListener
		protected var WMPSOCapturedAnimations pPanel
		
		func new(WMPSOCapturedAnimations panel)
			pPanel = panel
		end
		
		func void animationAdded(CharacterAnimations animations, CharacterAnimation animation)
			pPanel.updateModelAnimations()
		end
		
		func void animationRemoved(CharacterAnimations animations, CharacterAnimation animation)
			pPanel.updateModelAnimations()
		end
		
		func void animationNameChanged(CharacterAnimations animations, CharacterAnimation animation)
			pPanel.updateModelAnimationName(animation)
		end
		
		func void animationChanged(CharacterAnimations animations, CharacterAnimation animation)
			if animation == pPanel.getAnimation()
				pPanel.updateAnimation()
			end
		end
		
		func void allAnimationsRemoved(CharacterAnimations animations)
			pPanel.updateModelAnimations()
		end
		
		func void activeAnimationChanged(CharacterAnimations animations)
			pPanel.setAnimation(animations.getActive())
		end
	end
	
	/** Select animation listener. */
	class SelectedAnimationChanged extends DefaultListModelListener
		protected var WMPSOCapturedAnimations pPanel
		
		func new(WMPSOCapturedAnimations panel)
			pPanel = panel
		end
		
		func void contentChanged(ListModel model, int fromIndex, int toIndex)
			selectionChanged(model)
		end
		
		func void selectionChanged(ListModel model)
			if pPanel.preventSelectAnimation
				return
			end
			
			var int index = model.getSelected()
			if index != -1
				pPanel.getBehaviorCapturedAnimations().getAnimations().setActive(\
					model.getAt(index) cast CharacterAnimation)
				
			else
				pPanel.getBehaviorCapturedAnimations().getAnimations().setActive(null)
			end
		end
	end
	
	/** Animation popup menu. */
	class AnimationPopupAction extends DefaultActionListener
		protected var WMPSOCapturedAnimations pPanel
		
		func new(WMPSOCapturedAnimations panel)
			pPanel = panel
		end
		
		func void onAction(ActionEvent event)
			var bool inVR = pPanel.getPanelProject().getInVR()
			var Widget widget = event.getSource() cast Widget
			var MenuPopup menu = MenuPopup.new()
			var MenuItemCommand item
			
			item = MenuItemCommand.new(Resources.add.get(inVR), "@UI.Add.Dialog", BlockActionListener.new(block ActionEvent event
				pPanel.addAnimation()
			end))
			item.setToolTip("@UI.ToolTip.AddAnimation")
			menu.addWidget(item)
			
			item = MenuItemCommand.new(Resources.remove.get(inVR), "@UI.Remove", BlockActionListener.new(block ActionEvent event
				pPanel.removeAnimation()
			end))
			item.setToolTip("@UI.ToolTip.RemoveAnimation")
			menu.addWidget(item)
			
			item = MenuItemCommand.new(Resources.edit.get(inVR), "@UI.Rename.Dialog", BlockActionListener.new(block ActionEvent event
				pPanel.renameAnimation()
			end))
			item.setToolTip("@UI.ToolTip.RenameAnimation")
			menu.addWidget(item)
			
			item = MenuItemCommand.new(Resources.clear.get(inVR), "@UI.Clear", BlockActionListener.new(block ActionEvent event
				pPanel.clearAnimation()
			end))
			item.setToolTip("@UI.ToolTip.ClearAnimation")
			menu.addWidget(item)
			
			item = MenuItemCommand.new(Resources.save.get(inVR), "@UI.SaveAnimation.Dialog", BlockActionListener.new(block ActionEvent event
				pPanel.saveAnimation()
			end))
			item.setToolTip("@UI.SaveAnimation")
			menu.addWidget(item)
			
			item = MenuItemCommand.new(Resources.save.get(inVR), "@UI.ExportAnimation.Dialog", BlockActionListener.new(block ActionEvent event
				pPanel.exportAnimation()
			end))
			item.setToolTip("@UI.ToolTip.ExportAnimation")
			menu.addWidget(item)
			
			item = MenuItemCommand.new(Resources.open.get(inVR), "@UI.ImportAnimation.Dialog", BlockActionListener.new(block ActionEvent event
				pPanel.importAnimation()
			end))
			item.setToolTip("@UI.ToolTip.ImportAnimation")
			menu.addWidget(item)
			
			item = MenuItemCommand.new(Resources.browse.get(inVR), "@UI.BrowseExported.Dialog", BlockActionListener.new(block ActionEvent event
				pPanel.browseExportedAnimations()
			end))
			item.setToolTip("@UI.ToolTip.BrowseExportedAnimations")
			menu.addWidget(item)
			
			pPanel.getDesktop().addWindow(menu)
			menu.popup(widget.getDesktopPosition() + Point.new(0, widget.getHeight()))
		end
	end
	
	/** Toggle record listener. */
	class ToggleRecord extends DefaultToggleModelListener
		protected var WMPSOCapturedAnimations pPanel
		
		func new(WMPSOCapturedAnimations panel)
			pPanel = panel
		end
		
		func void toggledChanged(ToggleModel model)
			pPanel.getBehaviorCapturedAnimations().setRecord(model.getToggled())
		end
	end
	
	class ToggleRecordObject extends DefaultToggleModelListener
		protected var WMPSOCapturedAnimations pPanel
		
		func new(WMPSOCapturedAnimations panel)
			pPanel = panel
		end
		
		func void toggledChanged(ToggleModel model)
			pPanel.getBehaviorCapturedAnimations().setRecordObject(model.getToggled())
		end
	end
	
	class CapturedAnimationsChanged extends ECBCapturedAnimations.DefaultListener
		protected var DefaultToggleModel pModelRecord
		protected var DefaultToggleModel pModelRecordObject
		
		func new(DefaultToggleModel modelRecord, DefaultToggleModel modelRecordObject)
			pModelRecord = modelRecord
			pModelRecordObject = modelRecordObject
		end
		
		func void recordChanged(ECBCapturedAnimations.Instance instance)
			pModelRecord.setToggled(instance.getRecord())
			pModelRecordObject.setToggled(instance.getRecordObject())
		end
	end
	
	
	
	protected var ECBCapturedAnimations.Instance pBehaviorCapturedAnimations
	protected var DefaultListModel pModelAnimations
	protected var DefaultTextModel pModelAnimationInfo
	protected var DefaultToggleModel pModelRecord
	protected var DefaultToggleModel pModelRecordObject
	protected var AnimationsChangedListener pAnimationsChangedListener
	protected var CharacterAnimation pAnimation
	protected var CapturedAnimationsChanged pCapturedAnimationsChanged
	
	public var bool preventSelectAnimation
	
	
	/** Create panel. */
	func new(WMPanelProject panelProject, String bgpTypeId) super(panelProject, bgpTypeId,\
	"", "@UI.CapturedAnimations", "WMPSOCapturedAnimations", "ppob_capturedanimations")
		pModelAnimations = DefaultListModel.new()
		pModelAnimationInfo = DefaultTextModel.new("")
		pModelRecord = DefaultToggleModel.new()
		pModelRecordObject = DefaultToggleModel.new()
		
		getPanelContent().runWhileBlockingLayout(block
			createContent(getPanelContent())
		end)
		
		pModelAnimations.addListener(SelectedAnimationChanged.new(this))
		pModelRecord.addListener(ToggleRecord.new(this))
		pModelRecordObject.addListener(ToggleRecordObject.new(this))
		
		pAnimationsChangedListener = AnimationsChangedListener.new(this)
		pCapturedAnimationsChanged = CapturedAnimationsChanged.new(pModelRecord, pModelRecordObject)
	end
	
	/** Dispose of widget. */
	func void dispose()
		setBehavior(null)
		
		pAnimationsChangedListener = null
		pCapturedAnimationsChanged = null
		
		pModelAnimations = null
		pModelAnimationInfo = null
		pModelRecord = null
		pModelRecordObject = null
		
		super.dispose()
	end
	
	
	
	/** CapturedAnimations behavior. */
	func ECBCapturedAnimations.Instance getBehaviorCapturedAnimations()
		return pBehaviorCapturedAnimations
	end
	
	/** Update behavior. */
	func void updateBehavior()
		if pBehaviorCapturedAnimations == null
			return
		end
		
		runWhileBlockingLayout(block
			pModelRecord.setToggled(pBehaviorCapturedAnimations.getRecord())
			pModelRecordObject.setToggled(pBehaviorCapturedAnimations.getRecordObject())
			
			pAnimation = pBehaviorCapturedAnimations.getAnimations().getActive()
			pModelAnimations.setSelectedElement(pAnimation)
		end)
	end
	
	
	
	/** Update animations model. */
	func void updateModelAnimations()
		preventSelectAnimation = true
		pModelAnimations.setContent(pBehaviorCapturedAnimations.getAnimations().toArray())
		
		pModelAnimations.setSelectedElement(pAnimation)
		preventSelectAnimation = false
		pBehaviorCapturedAnimations.getAnimations().setActive(pAnimation)
	end
	
	func void updateModelAnimationName(CharacterAnimation animation)
		var int index = pModelAnimations.indexOf(animation)
		if index != -1
			pModelAnimations.notifyElementChanged(index)
		end
	end
	
	/** Animation or null. */
	func CharacterAnimation getAnimation()
		return pAnimation
	end
	
	/** Set animation or null. */
	func void setAnimation(CharacterAnimation animation)
		if animation == pAnimation
			return
		end
		
		pAnimation = animation
		updateAnimation()
	end
	
	/** Update animation. */
	func void updateAnimation()
		runWhileBlockingLayout(block
			var Animation animation
			var Animation animationObject
			if pAnimation != null
				animation = pAnimation.getAnimation()
				animationObject = pAnimation.getAnimationObject()
			end
			
			if animation != null and animation.getMoveCount() > 0
				pModelAnimationInfo.setText(TranslationManager.get().translate("UI.Info.AnimationBones")\
					.toUTF8().format(Array.newWith(File.new(pAnimation.getPath()).getName(),\
						animation.getMovePlaytime(animation.getMoveName(0)),\
						animation.getBoneCount())))
				
			elif animationObject != null and animationObject.getMoveCount() > 0
				pModelAnimationInfo.setText(TranslationManager.get().translate("UI.Info.AnimationBones")\
					.toUTF8().format(Array.newWith(File.new(pAnimation.getPathObject()).getName(),\
						animationObject.getMovePlaytime(animationObject.getMoveName(0)),\
						animationObject.getBoneCount())))
				
			else
				pModelAnimationInfo.setText("")
			end
		end)
	end
	
	/** Add animation. */
	func void addAnimation()
		WindowDialog.input(getWindow(), "@UI.AddAnimation", "@UI.Name.Label", null,\
			pBehaviorCapturedAnimations.getAnimationName(),\
			WindowDialog.ButtonConfiguration.new("@UI.AddAnimation"),\
			WindowDialog.ButtonConfiguration.new("@UI.Cancel"),\
			WindowDialog.BlockResultListener.new(block String result
				if result != null
					if pBehaviorCapturedAnimations.getAnimations().hasNamed(result)
						WindowDialog.message(getWindow(), "@UI.AddAnimation",\
							"@UI.Message.DuplicateAnimation", null, null, null)
						
					else
						var CharacterAnimation animation = CharacterAnimation.new(result)
						pBehaviorCapturedAnimations.getAnimations().add(animation)
						pModelAnimations.setSelected(pModelAnimations.indexOf(animation))
					end
				end
		end))
	end
	
	/** Remove animation. */
	func void removeAnimation()
		if pAnimation == null
			return
		end
		
		WindowDialog.question(getWindow(), "@UI.RemoveAnimation",\
			TranslationManager.get().translate("UI.Message.RemoveAnimation")\
				.toUTF8().format(Array.newWith(pAnimation.getName())),\
			null, Array.newWith(\
				WindowDialog.ButtonConfiguration.new("@UI.Remove", true),\
				WindowDialog.ButtonConfiguration.new("@UI.Cancel", false)),\
			WindowDialog.BlockResultListener.new(block bool result
				if result
					pBehaviorCapturedAnimations.getAnimations().remove(pAnimation)
				end
		end))
	end
	
	/** Rename animation. */
	func void renameAnimation()
		if pAnimation == null
			return
		end
		
		WindowDialog.input(getWindow(), "@UI.RenameAnimation", "@UI.Name.Label", null, pAnimation.getName(),\
		null, null, WindowDialog.BlockResultListener.new(block String result
			if result != null
				if not result.equals(pAnimation.getName())
					pAnimation.setName(result)
					pBehaviorCapturedAnimations.getAnimations().notifyAnimationNameChanged(pAnimation)
				end
			end
		end))
	end
	
	/** Clear animation. */
	func void clearAnimation()
		if pAnimation == null or (pAnimation.getAnimation() == null and pAnimation.getAnimationObject() == null)
			return
		end
		
		pAnimation.clear()
		pBehaviorCapturedAnimations.getAnimations().notifyAnimationChanged(pAnimation)
	end
	
	/** Save animation. */
	func void saveAnimation()
		if pAnimation == null or (pAnimation.getAnimation() == null and pAnimation.getAnimationObject() == null)
			return
		end
		
		WindowDialog.input(getWindow(), "@UI.SaveAnimation", "@UI.Name.Label", null, "Animation",\
		null, null, WindowDialog.BlockResultListener.new(block String result
			if result == null or result.empty()
				return null
			end
			
			var Project project = GameApp.getGameApp().getProject()
			if project.getSavedAnimations().hasNamed(result)
				WindowDialog.message(getWindow(), "@UI.SaveAnimation", "@UI.Message.DuplicateAnimation", null, null, null)
				return null
			end
			
			var CharacterAnimation anim = CharacterAnimation.new(pAnimation)
			anim.setName(result)
			project.getSavedAnimations().add(anim) // we have to do this before altering any file usage
			GameApp.getGameApp().notifySavedAnimationsChanged()
			project.save()
		end))
	end
	
	/** Export animation. */
	func void exportAnimation()
		var Project project = GameApp.getGameApp().getProject()
		if pAnimation == null or project == null
			return
		end
		
		WindowDialog.input(getWindow(), "@UI.ExportAnimation", "@UI.Name.Label", null, "Animation",\
		null, null, WindowDialog.BlockResultListener.new(block String result
			if result != null and not result.empty()
				pAnimation.export(project, result)
			end
		end))
	end
	
	/** Import animation. */
	func void importAnimation()
		var Project project = GameApp.getGameApp().getProject()
		if pAnimation == null or project == null
			return
		end
		
		DialogFileSelect.showOpenFile(getWindow(), "@UI.ImportAnimation",\
			Array.newWith(FileExtension.new("@UI.Extensions.DEMoCapCapture", Array.newWith("*.demca"), ".demca")),\
			File.new(GameApp.getGameApp().getPathCaptureAnimations(), "capture.demca").getPath(),\
			WindowDialog.BlockResultListener.new(block String result
				if result == null or result.empty()
					return null
				end
				
				var CharacterAnimation animation
				try
					animation = CharacterAnimation.new(pAnimation.getName())
					animation.import(project, result)
					
					var String characterImp = animation.getCharacterProfile(project)
					var String characterCur = pBehaviorCapturedAnimations.getCharacterProfile()
					if characterImp.equals(characterCur)
						pAnimation.assign(animation)
						pAnimation.loadAnimation(project)
						pBehaviorCapturedAnimations.getAnimations().notifyAnimationChanged(pAnimation)
						GameApp.getGameApp().getPlaybackScene().updatePlaytime()
						project.save()
						
					else
						WindowDialog.message(getWindow(), "@UI.ImportAnimation",\
							TranslationManager.get().translate("UI.Message.ImportAnimationCharacterMismatch").toUTF8().format(\
								Array.newWith(characterCur, characterImp)), null, null, null)
					end
					
				catch Exception e
					if animation != null
						animation.dispose()
					end
					
					GameApp.getGameApp().getConsole().addError("Failed importing animation", e)
					WindowDialog.message(getWindow(), "@UI.ImportAnimation",\
						TranslationManager.get().translate("UI.Message.ImportAnimationFailed").toUTF8() + "\n" + e, null, null, null)
				end
		end))
	end
	
	/** Browse exported animations directory. */
	func void browseExportedAnimations()
		var Project project = GameApp.getGameApp().getProject()
		if project != null
			project.browseExportedAnimations()
		end
	end
	
	
	
	/** Create panel content. */
	protected func void createContent(Panel content)
		var CheckBox checkBox
		var Button button
		
		content.setLayout(FlowLayout.new(LayoutAxis.y, 2))
		
		content.addWidget(Panel.new(FormLayout.new(true, 5, 2), block Panel p
			// animations
			p.addWidget(Label.new("@UI.Animation.Label", "Label.FormCaption.SingleLine"))
			p.addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 1, FlowLayout.Stretch.first), block Panel p2
				p2.addWidget(ComboBox.new(pModelAnimations, AnimationElementRenderer.new()))
				
				button = Button.new("...", AnimationPopupAction.new(this))
				button.setDesignerSelector("Button.Popup")
				p2.addWidget(button)
			end))
			
			// animation information
			p.addWidget(Label.new("", "Label.FormCaption.SingleLine"))
			p.addWidget(Label.new(pModelAnimationInfo, "Label.FormText"))
			
			// recording
			p.addWidget(Label.new("", "Label.FormCaption.SingleLine"))
			p.addWidget(Panel.new(GridLayout.new(2, 0), block Panel p2
				checkBox = CheckBox.new(pModelRecord, "@UI.Record")
				checkBox.setToolTip("@UI.ToolTip.EnableRecord")
				p2.addWidget(checkBox)
				
				checkBox = CheckBox.new(pModelRecordObject, "@UI.RecordObject")
				checkBox.setToolTip("@UI.ToolTip.EnableRecordObject")
				p2.addWidget(checkBox)
			end))
		end))
	end
	
	protected func void onBehaviorChanged()
		runWhileBlockingLayout(block
			if pBehaviorCapturedAnimations != null
				if pBehaviorCapturedAnimations.getElement() != null // dispose protection
					pBehaviorCapturedAnimations.removeListener(pCapturedAnimationsChanged)
					pBehaviorCapturedAnimations.getAnimations().removeListener(pAnimationsChangedListener)
				end
				
				setAnimation(null)
				preventSelectAnimation = true
				pModelAnimations.removeAll()
				preventSelectAnimation = false
			end
			
			pBehaviorCapturedAnimations = pBehavior cast ECBCapturedAnimations.Instance
			
			if pBehaviorCapturedAnimations != null
				setAnimation(pBehaviorCapturedAnimations.getAnimations().getActive())
				updateModelAnimations()
				pBehaviorCapturedAnimations.getAnimations().addListener(pAnimationsChangedListener)
				pBehaviorCapturedAnimations.addListener(pCapturedAnimationsChanged)
			end
		end)
	end
end
