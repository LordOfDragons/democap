/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2022, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Gui

pin Democap.Behaviors
pin Democap.Worlds

pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events
pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * ECBColliderPhysics panel.
 */
class WMPSOColliderPhysics extends WMPPanelSceneObject
	class UsePhysicsChanged extends DefaultToggleModelListener
		protected var WMPSOColliderPhysics pPanel
		
		public func new(WMPSOColliderPhysics panel)
			pPanel = panel
		end
		
		public func void toggledChanged(ToggleModel model)
			pPanel.getBehaviorColliderPhysics().setUsePhysics(model.getToggled())
		end
	end
	
	class LivePhysicsChanged extends DefaultToggleModelListener
		protected var WMPSOColliderPhysics pPanel
		
		public func new(WMPSOColliderPhysics panel)
			pPanel = panel
		end
		
		public func void toggledChanged(ToggleModel model)
			pPanel.getBehaviorColliderPhysics().setLivePhysics(model.getToggled())
		end
	end
	
	class TouchActorChanged extends DefaultToggleModelListener
		protected var WMPSOColliderPhysics pPanel
		
		public func new(WMPSOColliderPhysics panel)
			pPanel = panel
		end
		
		public func void toggledChanged(ToggleModel model)
			pPanel.getBehaviorColliderPhysics().setTouchActor(model.getToggled())
		end
	end
	
	class WeightChanged implements ActionListener
		protected var WMPSOColliderPhysics pPanel
		protected var DefaultTextModel pModel
		
		public func new(WMPSOColliderPhysics panel, DefaultTextModel model)
			pPanel = panel
			pModel = model
		end
		
		public func void onAction(ActionEvent event)
			pPanel.getBehaviorColliderPhysics().setWeight(pModel.getText().toFloat())
		end
	end
	
	class UseLocalGravityChanged extends DefaultToggleModelListener
		protected var WMPSOColliderPhysics pPanel
		
		public func new(WMPSOColliderPhysics panel)
			pPanel = panel
		end
		
		public func void toggledChanged(ToggleModel model)
			pPanel.getBehaviorColliderPhysics().setUseLocalGravity(model.getToggled())
		end
	end
	
	class GravityChanged implements ActionListener
		protected var WMPSOColliderPhysics pPanel
		protected var EditVector pEditVector
		
		public func new(WMPSOColliderPhysics panel, EditVector editVector)
			pPanel = panel
			pEditVector = editVector
		end
		
		public func void onAction(ActionEvent event)
			pPanel.getBehaviorColliderPhysics().setGravity(pEditVector.getVector())
		end
	end
	
	class CanGrabActorChanged extends DefaultToggleModelListener
		protected var WMPSOColliderPhysics pPanel
		
		public func new(WMPSOColliderPhysics panel)
			pPanel = panel
		end
		
		public func void toggledChanged(ToggleModel model)
			pPanel.getBehaviorColliderPhysics().setCanGrabActor(model.getToggled())
		end
	end
	
	
	
	protected var ECBColliderPhysics.Instance pBehaviorColliderPhysics
	protected var DefaultToggleModel pModelUsePhysics
	protected var DefaultToggleModel pModelLivePhysics
	protected var DefaultToggleModel pModelTouchActor
	protected var DefaultTextModel pModelWeight
	protected var DefaultToggleModel pModelUseLocalGravity
	protected var EditVector pEditGravity
	protected var DefaultToggleModel pModelCanGrabActor
	
	
	
	/** Create panel. */
	public func new(WMPanelProject panelProject, String bgpTypeId) super(panelProject, bgpTypeId,\
	"", "ColliderPhysics", "WMPSOColliderPhysics", "ppob_colliderphysics")
		pModelUsePhysics = DefaultToggleModel.new(false)
		pModelLivePhysics = DefaultToggleModel.new(false)
		pModelTouchActor = DefaultToggleModel.new(true)
		pModelWeight = DefaultTextModel.new("1")
		pModelUseLocalGravity = DefaultToggleModel.new(false)
		pModelCanGrabActor = DefaultToggleModel.new(true)
		
		getPanelContent().runWhileBlockingLayout(block
			createContent(getPanelContent())
		end)
		
		pModelUsePhysics.addListener(UsePhysicsChanged.new(this))
		pModelLivePhysics.addListener(LivePhysicsChanged.new(this))
		pModelTouchActor.addListener(TouchActorChanged.new(this))
		pModelUseLocalGravity.addListener(UseLocalGravityChanged.new(this))
		pModelCanGrabActor.addListener(CanGrabActorChanged.new(this))
	end
	
	/** Dispose of widget. */
	public func void dispose()
		setBehavior(null)
		
		pModelTouchActor = null
		pModelLivePhysics = null
		pModelUsePhysics = null
		pModelWeight = null
		pModelUseLocalGravity = null
		pEditGravity = null
		pModelCanGrabActor = null
		
		super.dispose()
	end
	
	
	
	/** ColliderPhysics behavior. */
	public func ECBColliderPhysics.Instance getBehaviorColliderPhysics()
		return pBehaviorColliderPhysics
	end
	
	/** Update behavior. */
	public func void updateBehavior()
		if pBehaviorColliderPhysics == null
			return
		end
		
		runWhileBlockingLayout(block
			pModelUsePhysics.setToggled(pBehaviorColliderPhysics.getUsePhysics())
			pModelLivePhysics.setToggled(pBehaviorColliderPhysics.getLivePhysics())
			pModelTouchActor.setToggled(pBehaviorColliderPhysics.getTouchActor())
			pModelWeight.setText(pBehaviorColliderPhysics.getWeight().toString())
			pModelUseLocalGravity.setToggled(pBehaviorColliderPhysics.getUseLocalGravity())
			pEditGravity.setVector(pBehaviorColliderPhysics.getGravity())
			pModelCanGrabActor.setToggled(pBehaviorColliderPhysics.getCanGrabActor())
		end)
	end
	
	
	
	/** Create panel content. */
	protected func void createContent(Panel content)
		var TextField textField
		var CheckBox checkBox
		var Button button
		
		content.setLayout(FlowLayout.new(LayoutAxis.y, 2))
		
		content.addWidget(Panel.new(FormLayout.new(true, 5, 2), block Panel p
			// use physics
			p.addWidget(Label.new("Physics:", "Label.FormCaption"))
			p.addWidget(Panel.new(GridLayout.new(0, 1), block Panel p2
				checkBox = CheckBox.new(pModelUsePhysics, "Record")
				checkBox.setToolTip("Use physics simulation during recording.")
				p2.addWidget(checkBox)
				
				checkBox = CheckBox.new(pModelLivePhysics, "Live")
				checkBox.setToolTip("Use physics simulation always except while playing back.")
				p2.addWidget(checkBox)
			end))
			
			// collision
			p.addWidget(Label.new("Collision:", "Label.FormCaption"))
			p.addWidget(Panel.new(GridLayout.new(0, 1), block Panel p2
				checkBox = CheckBox.new(pModelTouchActor, "Actor")
				checkBox.setToolTip("Colliders collide with motion capture actor. Disable to avoid actor limbs to push object.")
				p2.addWidget(checkBox)
			end))
			
			// grabbing
			p.addWidget(Label.new("Grab:", "Label.FormCaption"))
			p.addWidget(Panel.new(BoxLayout.new(LayoutAxis.x), block Panel p2
				checkBox = CheckBox.new(pModelCanGrabActor, "Actor")
				checkBox.setToolTip("Actor can grab object and physics bones. Disable to avoid accidentially grab object.")
				p2.addWidget(checkBox)
			end))
			
			// weight
			p.addWidget(Label.new("Weight:", "Label.FormCaption"))
			
			textField = TextField.new(pModelWeight)
			textField.setValidator(SimpleTextValidator.new(8, SimpleTextValidator.CharacterClass.positiveNumber))
			textField.setToolTip("Weight in kg distributed equally over all colliders.")
			p.addWidget(textField)
			textField.addActionListener(WeightChanged.new(this, pModelWeight))
			
			// local gravity
			checkBox = CheckBox.new(pModelUseLocalGravity, "Local Gravity:")
			checkBox.setToolTip("Use local gravity instead of world gravity. Check this if you do not need world gravity.")
			p.addWidget(checkBox)
			
			pEditGravity = EditVector.new()
			pEditGravity.setToolTip("Gravity to use if 'Local Gravity' is checked.")
			p.addWidget(pEditGravity)
			pEditGravity.addActionListener(GravityChanged.new(this, pEditGravity))
			
			// reset bones
			p.addWidget(Label.new("Reset:", "Label.FormCaption"))
			p.addWidget(Panel.new(GridLayout.new(0, 1), block Panel p2
				button = Button.new("Geometry", BlockActionListener.new(block ActionEvent event
					pBehaviorColliderPhysics.resetDynamicBones()
				end))
				button.setToolTip("Reset dynamic bone position, orientation and velocities.")
				p2.addWidget(button)
				
				button = Button.new("Velocities", BlockActionListener.new(block ActionEvent event
					pBehaviorColliderPhysics.resetDynamicBoneVelocities()
				end))
				button.setToolTip("Reset dynamic bone velocities only.")
				p2.addWidget(button)
			end))
		end))
	end
	
	protected func void onBehaviorChanged()
		pBehaviorColliderPhysics = pBehavior cast ECBColliderPhysics.Instance
	end
end
