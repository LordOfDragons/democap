/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2022, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Gui

pin Democap.Behaviors

pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events
pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * ECBRemoteCamera panel.
 */
class WMPSORemoteCamera extends WMPPanelSceneObject
	protected var ECBRemoteCamera.Instance pBehaviorRemoteCamera
	protected var WorldRenderer pWorldRenderer
	protected var DisplayImage pImageReticle
	protected var DefaultTextModel pModelName
	
	
	
	/** Create panel. */
	func new(WMPanelProject panelProject, String bgpTypeId, String behaviorId)\
	super(panelProject, bgpTypeId, behaviorId, "Remote Camera", "WMPSORemoteCamera", "ppob_remotecamera")
		pModelName = DefaultTextModel.new()
		
		getPanelContent().runWhileBlockingLayout(block
			createContent(getPanelContent())
		end)
	end
	
	/** Dispose of widget. */
	func void dispose()
		setBehavior(null)
		
		pModelName = null
		pWorldRenderer = null
		super.dispose()
	end
	
	
	
	/** RemoteCamera behavior. */
	func ECBRemoteCamera.Instance getBehaviorRemoteCamera()
		return pBehaviorRemoteCamera
	end
	
	/** Update behavior. */
	func void updateBehavior()
		if pBehaviorRemoteCamera == null
			return
		end
		
		runWhileBlockingLayout(block
			pModelName.setText(pBehaviorRemoteCamera.getName())
		end)
	end
	
	
	
	/** Create panel content. */
	protected func void createContent(Panel content)
		var TextField textField
		var String toolTip
		var Label label
		
		content.setLayout(FlowLayout.new(LayoutAxis.y, 2))
		
		content.addWidget(Panel.new(FormLayout.new(true, 5, 2), block Panel p
			// name
			toolTip = "Name to identify remote camera in listings."
			label = Label.new("Name:", "Label.FormCaption")
			label.setToolTip(toolTip)
			p.addWidget(label)
			
			textField = TextField.new(pModelName, 20)
			textField.setToolTip(toolTip)
			p.addWidget(textField)
			textField.addActionListener(BlockActionListener.new(block ActionEvent event
				pBehaviorRemoteCamera.setName(pModelName.getText())
			end))
		end))
		
		content.addWidget(Panel.new(StackLayout.new(StackLayout.AspectRatio.fit), block Panel p
			pWorldRenderer = WorldRenderer.new()
			pWorldRenderer.setDesignerSelector("WorldRenderer.WMPSORemoteCamera.View")
			p.addWidget(pWorldRenderer)
			
			pImageReticle = DisplayImage.new(Image.new("/content/models/videocamera/finder_reticle.webp"),\
				RepeatMode.stretch, "Image.WMPSORemoteCamera.ViewReticle")
			//pImageReticle.setTransparency(0.5)
			p.addWidget(pImageReticle)
		end))
	end
	
	protected func void onBehaviorChanged()
		if pBehaviorRemoteCamera != null
			pWorldRenderer.setCamera(null)
		end
		
		pBehaviorRemoteCamera = pBehavior cast ECBRemoteCamera.Instance
		
		if pBehaviorRemoteCamera != null
			pWorldRenderer.setCamera(pBehaviorRemoteCamera.getCamera().getCamera())
		end
		
		// TODO for performance do not assign camera unless panel is visible/unfolded
	end
end
