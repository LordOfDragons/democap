/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Gui

pin Democap.Behaviors

pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events
pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * Scene object panel.
 */
class WMPPanelSceneObject extends CollapsibleGroup
	protected var WMPanelProject pPanelProject
	protected var String pBGPTypeId
	protected var ECBehaviorInstance pBehavior
	protected var String pPrefixUIOptions
	
	
	
	/** Create panel. */
	public func new(WMPanelProject panelProject, String bgpTypeId, String behaviorId, String label, String settingsName, String helpUrl)\
		super(behaviorId.empty() if label else label + ": " + behaviorId,\
			helpUrl, CollapsibleGroup.persistModel(prefixUIOptions(panelProject, behaviorId, settingsName)))
		pPanelProject = panelProject
		pBGPTypeId = bgpTypeId
		pPrefixUIOptions = prefixUIOptions(panelProject, behaviorId, settingsName)
	end
	
		public func new(WMPanelProject panelProject, String behaviorId, String label, String settingsName, String helpUrl)\
			super(behaviorId.empty() if label else label + ": " + behaviorId,\
				helpUrl, CollapsibleGroup.persistModel(prefixUIOptions(panelProject, behaviorId, settingsName)))
			pPanelProject = panelProject
			pPrefixUIOptions = prefixUIOptions(panelProject, behaviorId, settingsName)
		end
	
	/** Dispose of widget. */
	public func void dispose()
		pBehavior = null
		pPanelProject = null
		super.dispose()
	end
	
	/** UI options prefix. */
	static public func String prefixUIOptions(WMPanelProject panelProject, String behaviorId, String settingsName)
		var String prefix = panelProject.getPrefixUIOptions() + "/" + settingsName
		if not behaviorId.empty()
			prefix = prefix + "(" + behaviorId + ")"
		end
		return prefix
	end
	
	
	
	/** Parent project panel. */
	public func WMPanelProject getPanelProject()
		return pPanelProject
	end
	
	/** Behavior Gui Panel Type ID. */
	public func String getBGPTypeId()
		return pBGPTypeId
	end
	
	/** Prefix UI Options. */
	public func String getPrefixUIOptions()
		return pPrefixUIOptions
	end
	
	/** Behavior instance or null. */
	public func ECBehaviorInstance getBehavior()
		return pBehavior
	end
	
	/** Set behavior instance or null. */
	public func void setBehavior(ECBehaviorInstance behavior)
		if behavior == pBehavior
			return
		end
		
		pBehavior = behavior
		onBehaviorChanged()
		updateBehavior()
	end
	
	/** Update behavior. */
	public func void updateBehavior()
	end
	
	/** Get string stub parameter converting null to empty string. */
	protected func String stubParamValue(StubElement stub, String name, String defaultValue)
		var String value = stub.getPropertyValueFor(name, defaultValue)
		if value == null or value.empty()
			value = defaultValue
		end
		return value != null if value else ""
	end
	
	/** Get path stub parameter converting null to empty string. */
	protected func String stubParamPath(StubElement stub, String basePath, String name, String defaultValue)
		var String value = stub.getPropertyValueFor(name, "")
		if value.empty()
			if defaultValue == null or defaultValue.empty()
				return ""
			end
			return File.absolutePath(defaultValue, basePath).getPath()
		end
		return value
	end
	
	protected func String stubParamValue(StubElement stub, ECPString param)
		return stubParamValue(stub, param.getName(), param.getValue())
	end
	
	protected func String stubParamPath(StubElement stub, ECPString param)
		return stubParamPath(stub, stub.getClass().getBasePath(), param.getName(), param.getValue())
	end
	
	protected func String stubParamPath(StubElement stub, ECPModel param)
		return stubParamPath(stub, stub.getClass().getBasePath(), param.getName(), param.getPath())
	end
	
	protected func String stubParamPath(StubElement stub, ECPSkin param)
		return stubParamPath(stub, stub.getClass().getBasePath(), param.getName(), param.getPath())
	end
	
	protected func String stubParamPath(StubElement stub, ECPRig param)
		return stubParamPath(stub, stub.getClass().getBasePath(), param.getName(), param.getPath())
	end
	
	protected func String stubParamPath(StubElement stub, ECPOcclusionMesh param)
		return stubParamPath(stub, stub.getClass().getBasePath(), param.getName(), param.getPath())
	end
	
	protected func String stubParamPath(StubElement stub, ECPAnimator param)
		return stubParamPath(stub, stub.getClass().getBasePath(), param.getName(), param.getPath())
	end
	
	/**
	 * Set string stub parameter and call notifyStubChanged if value is different than
	 * the stored value. Returns true if value changed or false otherwise.
	 */
	protected func bool setStubParamValue(StubElement stub, String name, String value)
		if value.equals(stub.getPropertyValueFor(name, null))
			return false
		end
		
		stub.setPropertyValueFor(name, value)
		notifyStubChanged()
		return true
	end
	
	/** Notify element stub changed. */
	protected func void notifyStubChanged()
		pPanelProject.elementStubChanged()
	end
	
	
	
	/** Behavior instance changed. */
	protected func void onBehaviorChanged()
	end
end
