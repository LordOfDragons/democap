/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2022, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Gui

pin Democap.Behaviors
pin Democap.Worlds

pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events
pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * ECBGrabAttach panel.
 */
class WMPSOGrabAttach extends WMPPanelSceneObject
	class ImmobileChanged extends DefaultToggleModelListener
		protected var WMPSOGrabAttach pPanel
		
		public func new(WMPSOGrabAttach panel)
			pPanel = panel
		end
		
		public func void toggledChanged(ToggleModel model)
			pPanel.getBehaviorGrabAttach().setImmobile(model.getToggled())
		end
	end
	
	class IKLockRotationChanged extends DefaultToggleModelListener
		protected var WMPSOGrabAttach pPanel
		
		public func new(WMPSOGrabAttach panel)
			pPanel = panel
		end
		
		public func void toggledChanged(ToggleModel model)
			pPanel.getBehaviorGrabAttach().setIKLockRotation(model.getToggled())
		end
	end
	
	
	
	protected var ECBGrabAttach.Instance pBehaviorGrabAttach
	protected var DefaultListModel pModelBoneList
	protected var DefaultTextModel pModelBoneText
	protected var DefaultToggleModel pModelImmobile
	protected var DefaultToggleModel pModelIKLockRotation
	
	
	
	/** Create panel. */
	public func new(WMPanelProject panelProject, String bgpTypeId, String behaviorId)\
	super(panelProject, bgpTypeId, behaviorId, "GrabAttach", "WMPSOGrabAttach", "ppob_grabattach")
		pModelBoneList = DefaultListModel.new()
		pModelBoneList.setAutoSelect(false)
		pModelImmobile = DefaultToggleModel.new(false)
		pModelIKLockRotation = DefaultToggleModel.new(false)
		pModelBoneText = DefaultTextModel.new()
		
		getPanelContent().runWhileBlockingLayout(block
			createContent(getPanelContent())
		end)
		
		pModelImmobile.addListener(ImmobileChanged.new(this))
		pModelIKLockRotation.addListener(IKLockRotationChanged.new(this))
	end
	
	/** Dispose of widget. */
	public func void dispose()
		setBehavior(null)
		
		pModelBoneText = null
		pModelBoneList = null
		pModelImmobile = null
		pModelIKLockRotation = null
		super.dispose()
	end
	
	
	
	/** GrabAttach behavior. */
	public func ECBGrabAttach.Instance getBehaviorGrabAttach()
		return pBehaviorGrabAttach
	end
	
	/** Update behavior. */
	public func void updateBehavior()
		if pBehaviorGrabAttach == null
			return
		end
		
		runWhileBlockingLayout(block
			pModelImmobile.setToggled(pBehaviorGrabAttach.getImmobile())
			pModelIKLockRotation.setToggled(pBehaviorGrabAttach.getIKLockRotation())
			pModelBoneText.setText(pBehaviorGrabAttach.getBone())
			updateModelBone()
		end)
	end
	
	
	
	/** Update bone model. */
	public func void updateModelBone()
		var Array content = Array.new()
		content.add("")
		
		var Rig rig
		if pBehaviorGrabAttach.getParentCollider() != null
			var ECBehaviorComponent.Instance component = ECBehaviorComponent.getInstanceIn(\
				pBehaviorGrabAttach.getParentCollider().getElement())
			if component != null and component.getComponent() != null
				rig = component.getComponent().getRig()
			end
		end
		
		if rig != null
			var int i, count = rig.getBoneCount()
			for i = 0 to count
				content.add(rig.boneGetName(i))
			end
		end
		
		pModelBoneList.setContent(content)
	end
	
	
	
	/** Create panel content. */
	protected func void createContent(Panel content)
		var DefaultComboBoxEditor editor
		var CheckBox checkBox
		var ComboBox comboBox
		var String tooltip
		var Button button
		var Label label
		
		content.setLayout(FlowLayout.new(LayoutAxis.y, 2))
		
		content.addWidget(Panel.new(FormLayout.new(true, 5, 2), block Panel p
			// attach bone
			tooltip = "Bone in parent object to grab or empty string to grab entire object."
			
			label = Label.new("Bone", "Label.FormCaption")
			label.setToolTip(tooltip)
			p.addWidget(label)
			
			p.addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 2, FlowLayout.Stretch.first), block Panel p2
				editor = DefaultComboBoxEditor.new(pModelBoneText)
				comboBox = ComboBox.new(pModelBoneList, editor)
				comboBox.setToolTip(tooltip)
				p2.addWidget(comboBox)
				editor.addTextActionListener(BlockActionListener.new(block ActionEvent event
					pBehaviorGrabAttach.setBone(pModelBoneText.getText())
					notifyStubChanged()
				end))
				
				button = Button.new("Update", BlockActionListener.new(block ActionEvent event
					updateModelBone()
				end))
				button.setToolTip("Update list of bones to grab to.")
				p2.addWidget(button)
			end))
			
			// grabbing
			p.addWidget(Label.new("Grab:", "Label.FormCaption"))
			p.addWidget(Panel.new(BoxLayout.new(LayoutAxis.x), block Panel p2
				checkBox = CheckBox.new(pModelImmobile, "Immobile")
				checkBox.setToolTip("Object stays immobile while grabbed. Check this for locked objects or hand rails.")
				p2.addWidget(checkBox)
				
				checkBox = CheckBox.new(pModelIKLockRotation, "Lock IK Rotation")
				checkBox.setToolTip("Lock rotation of actor hand while grabbing.")
				p2.addWidget(checkBox)
			end))
		end))
	end
	
	protected func void onBehaviorChanged()
		pModelBoneList.removeAll()
		
		pBehaviorGrabAttach = pBehavior cast ECBGrabAttach.Instance
	end
end
