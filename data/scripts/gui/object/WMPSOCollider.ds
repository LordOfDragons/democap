/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Gui

pin Democap.Actors
pin Democap.Actions
pin Democap.Behaviors
pin Democap.Characters
pin Democap.Worlds

pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events
pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * Main window project panel.
 */
class WMPSOCollider extends WMPPanelSceneObject
	class DynamicCollisionChanged extends DefaultToggleModelListener
		protected var WMPSOCollider pPanel
		
		public func new(WMPSOCollider panel)
			pPanel = panel
		end
		
		public func void toggledChanged(ToggleModel model)
			var ECBehaviorCollider.Instance behavior = pPanel.getBehaviorCollider()
			var BehaviorElement element = behavior.getElement()
			var ECComposeCollider ccollider = behavior.getECBehavior().getCollider()
			var Collider collider = behavior.getCollider()
			var StubElement stub = element.getStub()
			
			if model.getToggled()
				stub.setPropertyValueFor(ccollider.getPhysicsType().getName(), "dynamic")
				stub.setPropertyValueFor(ccollider.getLocalGravity().getName(), "")
				
				if collider != null
					collider.setResponseType(CollisionResponse.kinematic)
					collider.setUseLocalGravity(false)
				end
				
			else
				stub.setPropertyValueFor(ccollider.getPhysicsType().getName(), "kinematic")
				stub.setPropertyValueFor(ccollider.getLocalGravity().getName(), "0 0 0")
				
				if collider != null
					collider.setResponseType(CollisionResponse.kinematic)
					collider.setGravity(Vector.new())
					collider.setUseLocalGravity(true)
				end
			end
		end
	end
	
	class WeightChanged implements ActionListener
		protected var WMPSOCollider pPanel
		protected var DefaultTextModel pModel
		
		public func new(WMPSOCollider panel, DefaultTextModel model)
			pPanel = panel
			pModel = model
		end
		
		public func void onAction(ActionEvent event)
			var ECBehaviorCollider.Instance behavior = pPanel.getBehaviorCollider()
			var Collider collider = behavior.getCollider()
			var float weight = pModel.getText().toFloat()
			
			behavior.getElement().getStub().setPropertyFloatFor(\
				behavior.getECBehavior().getCollider().getWeight().getName(), weight)
			
			if collider != null
				collider.setMass(weight)
			end
		end
	end
	
	
	
	protected var ECBehaviorCollider.Instance pBehaviorCollider
	protected var DefaultToggleModel pModelDynamic
	protected var DefaultTextModel pModelWeight
	
	
	
	/** Create panel. */
	public func new(WMPanelProject panelProject, ECBehaviorCollider.Instance behavior)\
		super(panelProject, behavior, behavior.getECBehavior().getID(),\
			"Collider", "WMPSOCollider", "ppob_collider")
		
		pBehaviorCollider = behavior
		
		pModelDynamic = DefaultToggleModel.new(false)
		pModelWeight = DefaultTextModel.new("1")
		
		getPanelContent().runWhileBlockingLayout(block
			createContent(getPanelContent())
		end)
		
		pModelDynamic.addListener(DynamicCollisionChanged.new(this))
	end
	
	/** Dispose of widget. */
	public func void dispose()
		pModelDynamic = null
		pModelWeight = null
		super.dispose()
	end
	
	
	
	/** Collider behavior. */
	public func ECBehaviorCollider.Instance getBehaviorCollider()
		return pBehaviorCollider
	end
	
	/** Update behavior. */
	public func void updateBehavior()
		var ECBehaviorCollider behavior = pBehaviorCollider.getECBehavior()
		var StubElement stub = pBehaviorCollider.getElement().getStub()
		var ECComposeCollider collider = behavior.getCollider()
		
		pModelDynamic.setToggled(collider.getPhysicsType().getEnumeration(stub) == CollisionResponse.dynamic)
		pModelWeight.setText(collider.getWeight().getValue(stub).toString())
	end
	
	
	
	/** Create panel content. */
	protected func void createContent(Panel content)
		var TextField textField
		var CheckBox checkBox
		
		content.setLayout(FlowLayout.new(LayoutAxis.y, 2))
		
		content.addWidget(Panel.new(FormLayout.new(true, 5, 2), block Panel p
			// dynamic
			p.addWidget(Label.new("", "Label.FormCaption"))
			
			checkBox = CheckBox.new(pModelDynamic, "Dynamic Collision")
			checkBox.setToolTip("Use physics simulation. If kinematic gravity is set to 0.")
			p.addWidget(checkBox)
			
			// weight
			p.addWidget(Label.new("Weight:", "Label.FormCaption"))
			
			textField = TextField.new(pModelWeight)
			textField.setValidator(SimpleTextValidator.new(8, SimpleTextValidator.CharacterClass.positiveNumber))
			textField.setToolTip("Weight in kg. Used only if dynamic is enabled.")
			p.addWidget(textField)
			textField.addActionListener(WeightChanged.new(this, pModelWeight))
		end))
	end
end
