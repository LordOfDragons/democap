/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Gui

pin Democap.Actors
pin Democap.Actions
pin Democap.Behaviors
pin Democap.Characters
pin Democap.Worlds

pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events
pin Dragengine.Preloading
pin Dragengine.LoadSave
pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * Main window project panel.
 */
class WMPanelProject extends Panel
	class EnableUpdateObjectsListener extends DefaultWidgetListener
		protected var WMPanelProject pPanel
		protected var Array pWidgets
		
		public func new(WMPanelProject panel, Array widgets)
			pPanel = panel
			pWidgets = widgets
		end
		
		public func void onWidgetShown(WidgetEvent event)
			pPanel.setEnableObjectUpdates(pWidgets.find(block Widget each
				return not each.getVisible()
			end) == null)
		end
		
		public func void onWidgetHidden(WidgetEvent event)
			pPanel.setEnableObjectUpdates(false)
		end
	end
	
	/** Game changes listener. */
	class GameChangedListener extends DefaultGameListener
		protected var WMPanelProject pPanel
		
		public func new(WMPanelProject panel)
			pPanel = panel
		end
		
		public func void projectChanged(GameApp app)
			pPanel.setProject(app.getProject())
		end
		
		public func void sceneChanged(GameApp app)
			pPanel.setScene(app.getScene())
		end
		
		public func void gameWorldChanged(GameApp app)
			pPanel.updateModelObjects()
		end
		
		public func void savedAnimationsChanged(GameApp app)
			pPanel.updateSavedAnimations()
		end
	end
	
	
	
	/** Project popup menu. */
	class ProjectPopupAction extends DefaultActionListener
		protected var WMPanelProject pPanel
		
		public func new(WMPanelProject panel)
			pPanel = panel
		end
		
		public func void onAction(ActionEvent event)
			var Widget widget = event.getSource() cast Widget
			var MenuPopup menu = MenuPopup.new()
			var MenuItemCommand item
			
			item = MenuItemCommand.new("New...", BlockActionListener.new(block ActionEvent event
				pPanel.newProject()
			end))
			menu.addWidget(item)
			
			item = MenuItemCommand.new("Open...", BlockActionListener.new(block ActionEvent event
				pPanel.openProject()
			end))
			menu.addWidget(item)
			
			item = MenuItemCommand.new("Save", BlockActionListener.new(block ActionEvent event
				pPanel.saveProject()
			end))
			menu.addWidget(item)
			
			item = MenuItemCommand.new("Browse Data...", BlockActionListener.new(block ActionEvent event
				pPanel.browseProjectData()
			end))
			menu.addWidget(item)
			
			pPanel.getDesktop().addWindow(menu)
			menu.popup(widget.getDesktopPosition() + Point.new(0, widget.getHeight()))
		end
	end
	
	
	
	/** Scenes changed listener. */
	class ScenesChangedListener extends DefaultScenesListener
		protected var WMPanelProject pPanel
		
		public func new(WMPanelProject panel)
			pPanel = panel
		end
		
		public func void sceneAdded(Scenes scenes, Scene scene)
			pPanel.updateModelScenes()
		end
		
		public func void sceneRemoved(Scenes scenes, Scene scene)
			pPanel.updateModelScenes()
		end
		
		public func void allScenesRemoved(Scenes scenes)
			pPanel.updateModelScenes()
		end
	end
	
	/** Scene list element renderer. */
	class SceneListElementRenderer extends DefaultListElementRenderer
		public func new()
			setDefaultMinimumSize(Point.new(50, 10))
		end
		
		public func void updateRenderer(ListBox listBox, Widget renderer, Object element, bool selected, bool focused)
			var String text = ""
			if element != null
				text = (element cast Scene).getName()
			end
			super.updateRenderer(listBox, renderer, text, selected, focused)
		end
	end
	
	/** Scene selection listener. */
	class SelectScene extends DefaultListModelListener
		protected var WMPanelProject pPanel
		
		public func new(WMPanelProject panel)
			pPanel = panel
		end
		
		public func void contentChanged(ListModel model, int fromIndex, int toIndex)
			selectionChanged(model)
		end
		
		public func void selectionChanged(ListModel model)
			if not pPanel.preventUpdate
				var int index = model.getSelected()
				if index != -1
					GameApp.getGameApp().setScene(model.getAt(index) cast Scene)
				end
			end
		end
	end
	
	/** Scene changed listener. */
	class SceneChangedListener extends DefaultSceneListener
		protected var WMPanelProject pPanel
		protected var TimerBlock pTimer
		protected var bool pUpdateModelScenes
		protected var bool pUpdateModelObjects
		protected var ECBSceneObject.Instance pUpdateModelObjectName
		protected var bool pUpdateObject
		
		public func new(WMPanelProject panel)
			pPanel = panel
		end
		
		public func void sceneNameChanged(Scene scene)
			pUpdateModelScenes = true
			pStartTimer()
		end
		
		public func void objectAdded(Scene scene, ECBSceneObject.Instance object)
			pUpdateModelObjects = true
			pUpdateModelObjectName = null
			pStartTimer()
		end
		
		public func void objectRemoved(Scene scene, ECBSceneObject.Instance object)
			pUpdateModelObjects = true
			pUpdateModelObjectName = null
			pStartTimer()
		end
		
		public func void allObjectsRemoved(Scene scene)
			pUpdateModelObjects = true
			pUpdateModelObjectName = null
			pUpdateObject = false
			pStartTimer()
		end
		
		public func void objectNameChanged(Scene scene, ECBSceneObject.Instance object)
			if pUpdateModelObjectName == null
				pUpdateModelObjectName = object
			else
				pUpdateModelObjectName = null
				pUpdateModelObjects = true
			end
			pStartTimer()
		end
		
		public func void objectGeometryChanged(Scene scene, ECBSceneObject.Instance object)
			if object == pPanel.getObject()
				pUpdateObject = true
				pStartTimer()
			end
		end
		
		public func void objectParameterChanged(Scene scene, ECBSceneObject.Instance object)
			if object == pPanel.getObject()
				pUpdateObject = true
				pStartTimer()
			end
		end
		
		protected func void pStartTimer()
			if pTimer != null
				return
			end
			
			pTimer = TimerBlock.new(0, false, block
				pRunTimer()
			end)
		end
		
		protected func void pRunTimer()
			pTimer = null
			if pUpdateModelScenes
				pUpdateModelScenes = false
				pPanel.updateModelObjects()
			end
			if pUpdateModelObjects
				pUpdateModelObjects = false
				pPanel.updateModelObjects()
			end
			if pUpdateModelObjectName != null
				pPanel.updateModelObjectName(pUpdateModelObjectName)
				pUpdateModelObjectName = null
			end
			if pUpdateObject
				pUpdateObject = false
				pPanel.updateObject()
			end
		end
	end
	
	/** Scene popup menu. */
	class ScenePopupAction extends DefaultActionListener
		protected var WMPanelProject pPanel
		
		public func new(WMPanelProject panel)
			pPanel = panel
		end
		
		public func void onAction(ActionEvent event)
			var Widget widget = event.getSource() cast Widget
			var MenuPopup menu = MenuPopup.new()
			var MenuItemCommand item
			
			item = MenuItemCommand.new("Add...", BlockActionListener.new(block ActionEvent event
				pPanel.addScene()
			end))
			menu.addWidget(item)
			
			item = MenuItemCommand.new("Duplicate...", BlockActionListener.new(block ActionEvent event
				pPanel.duplicateScene()
			end))
			menu.addWidget(item)
			
			item = MenuItemCommand.new("Rename...", BlockActionListener.new(block ActionEvent event
				pPanel.renameScene()
			end))
			menu.addWidget(item)
			
			item = MenuItemCommand.new("Remove...", BlockActionListener.new(block ActionEvent event
				pPanel.removeScene()
			end))
			menu.addWidget(item)
			
			pPanel.getDesktop().addWindow(menu)
			menu.popup(widget.getDesktopPosition() + Point.new(0, widget.getHeight()))
		end
	end
	
	
	
	/** Loadable world list element renderer. */
	class LoadableWorldRenderer extends DefaultListElementRenderer
		public func new()
			setDefaultMinimumSize(Point.new(50, 10))
		end
		
		public func void updateRenderer(ListBox listBox, Widget renderer, Object element, bool selected, bool focused)
			var String text = ""
			if element != null
				text = (element cast LoadableWorld).getName()
			end
			super.updateRenderer(listBox, renderer, text, selected, focused)
		end
	end
	
	/** Loadable worlds listener. */
	class ListenLoadableWorlds extends DefaultLoadableWorldsListener
		protected var WMPanelProject pPanel
		
		public func new(WMPanelProject panel)
			pPanel = panel
		end
		
		public func void worldAdded(LoadableWorlds worlds, LoadableWorld world)
			pPanel.updateModelLoadableWorlds()
		end
		
		public func void worldRemoved(LoadableWorlds worlds, LoadableWorld world)
			pPanel.updateModelLoadableWorlds()
		end
		
		public func void allWorldsRemoved(LoadableWorlds worlds)
			pPanel.updateModelLoadableWorlds()
		end
	end
	
	/** Loadable world popup menu. */
	class LoadableWorldPopupAction extends DefaultActionListener
		protected var WMPanelProject pPanel
		
		public func new(WMPanelProject panel)
			pPanel = panel
		end
		
		public func void onAction(ActionEvent event)
			var Widget widget = event.getSource() cast Widget
			var MenuPopup menu = MenuPopup.new()
			var MenuItemCommand item
			
			item = MenuItemCommand.new("Activate World", BlockActionListener.new(block ActionEvent event
				pPanel.activateWorld()
			end))
			menu.addWidget(item)
			
			item = MenuItemCommand.new("Browse Worlds...", BlockActionListener.new(block ActionEvent event
				pPanel.browseLoadableWorlds()
			end))
			menu.addWidget(item)
			
			pPanel.getDesktop().addWindow(menu)
			menu.popup(widget.getDesktopPosition() + Point.new(0, widget.getHeight()))
		end
	end
	
	
	
	/** Saved animation list element renderer. */
	class SavedAnimationRenderer extends DefaultListElementRenderer
		protected var WMPanelProject pPanel
		
		public func new(WMPanelProject panel)
			pPanel = panel
			setDefaultMinimumSize(Point.new(50, 10))
		end
		
		public func void updateRenderer(ListBox listBox, Widget renderer, Object element, bool selected, bool focused)
			var String text = ""
			if element != null
				var CharacterAnimation animation = element cast CharacterAnimation
				text = animation.getName()
				
				if pPanel.getProject() != null
					text = text + " [" + animation.getCharacterProfile(pPanel.getProject()) + "]"
				end
			end
			super.updateRenderer(listBox, renderer, text, selected, focused)
		end
	end
	
	/** Saved animation popup menu. */
	class SavedAnimationPopupAction extends DefaultActionListener
		protected var WMPanelProject pPanel
		
		public func new(WMPanelProject panel)
			pPanel = panel
		end
		
		public func void onAction(ActionEvent event)
			var Widget widget = event.getSource() cast Widget
			var MenuPopup menu = MenuPopup.new()
			var MenuItemCommand item
			
			item = MenuItemCommand.new("Rename", BlockActionListener.new(block ActionEvent event
				pPanel.renameSavedAnimation()
			end))
			item.setToolTip("Rename saved animation")
			menu.addWidget(item)
			
			item = MenuItemCommand.new("Load", BlockActionListener.new(block ActionEvent event
				pPanel.loadSavedAnimation()
			end))
			item.setToolTip("Load saved animation into selected object of type CapturedCharacter")
			menu.addWidget(item)
			
			item = MenuItemCommand.new("Remove", BlockActionListener.new(block ActionEvent event
				pPanel.removeSavedAnimation()
			end))
			item.setToolTip("Remove saved animation")
			menu.addWidget(item)
			
			item = MenuItemCommand.new("Export...", BlockActionListener.new(block ActionEvent event
				pPanel.exportSavedAnimation()
			end))
			item.setToolTip("Export saved animation")
			menu.addWidget(item)
			
			item = MenuItemCommand.new("Browse exported...", BlockActionListener.new(block ActionEvent event
				pPanel.browseExportedAnimations()
			end))
			item.setToolTip("Open native file browser with directory containing exported animations")
			menu.addWidget(item)
			
			pPanel.getDesktop().addWindow(menu)
			menu.popup(widget.getDesktopPosition() + Point.new(0, widget.getHeight()))
		end
	end
	
	
	
	/** Object element renderer. */
	class ObjectElementRenderer extends DefaultListElementRenderer
		public func new()
			setDefaultMinimumSize(Point.new(80, 20))
		end
		
		public func void updateRenderer(ListBox listBox, Widget renderer, Object element, bool selected, bool focused)
			var String text = ""
			if element != null
				text = (element cast ECBSceneObject.Instance).getDisplayName()
				
			else
				text = "< None >"
			end
			super.updateRenderer(listBox, renderer, text, selected, focused)
		end
	end
	
	/** Select object listener. */
	class SelectObject extends DefaultListModelListener
		protected var WMPanelProject pPanel
		
		public func new(WMPanelProject panel)
			pPanel = panel
		end
		
		public func void contentChanged(ListModel model, int fromIndex, int toIndex)
			selectionChanged(model)
		end
		
		public func void selectionChanged(ListModel model)
			if pPanel.preventUpdateObjects
				return
			end
			
			var ECBSelectable.Instance selectable
			var int index = model.getSelected()
			if index != -1
				selectable = ECBSelectable.getInstanceIn((model.getAt(index) cast ECBSceneObject.Instance).getElement())
			end
			GameApp.getGameApp().getSelectionTracker().setElement(selectable)
		end
	end
	
	/** Selected selectable object changed. */
	class SelectedSelectableObjectChanged extends ECBSelectable.Tracker.DefaultListener
		protected var WMPanelProject pPanel
		protected var TimerBlock pTimer
		
		public func new(WMPanelProject panel)
			pPanel = panel
		end
		
		public func void selectedElementChanged(ECBSelectable.Tracker tracker)
			pStartTimer()
		end
		
		protected func void pStartTimer()
			if pTimer != null
				return
			end
			
			pTimer = TimerBlock.new(0, false, block
				pTimer = null
				pPanel.selectObjectFromTracker()
			end)
		end
	end
	
	/** Object popup menu. */
	class ObjectPopupAction extends DefaultActionListener
		private var WMPanelProject pPanel
		
		public func new(WMPanelProject panel)
			pPanel = panel
		end
		
		public func void onAction(ActionEvent event)
			var Widget widget = event.getSource() cast Widget
			var MenuPopup menu = MenuPopup.new()
			var MenuItemCommand item
			
			item = MenuItemCommand.new("Add...", BlockActionListener.new(block ActionEvent event
				pPanel.addObject()
			end))
			item.setToolTip("Add scene object")
			menu.addWidget(item)
			
			item = MenuItemCommand.new("Duplicate", BlockActionListener.new(block ActionEvent event
				pPanel.duplicateObject()
			end))
			item.setToolTip("Duplicate scene object")
			menu.addWidget(item)
			
			item = MenuItemCommand.new("Remove", BlockActionListener.new(block ActionEvent event
				pPanel.removeObject()
			end))
			item.setToolTip("Remove scene object")
			menu.addWidget(item)
			
			item = MenuItemCommand.new("Change Class...", BlockActionListener.new(block ActionEvent event
				pPanel.changeObjectClass()
			end))
			item.setToolTip("Rename scene object")
			menu.addWidget(item)
			
			item = MenuItemCommand.new("Rename...", BlockActionListener.new(block ActionEvent event
				pPanel.renameObject()
			end))
			item.setToolTip("Rename scene object")
			menu.addWidget(item)
			
			item = MenuItemCommand.new("Cut...", BlockActionListener.new(block ActionEvent event
				pPanel.cutObject()
			end))
			item.setToolTip("Cut scene object")
			item.setEnabled(pPanel.getObject() != null)
			menu.addWidget(item)
			
			item = MenuItemCommand.new("Copy", BlockActionListener.new(block ActionEvent event
				pPanel.copyObject()
			end))
			item.setToolTip("Copy scene object")
			item.setEnabled(pPanel.getObject() != null)
			menu.addWidget(item)
			
			item = MenuItemCommand.new("Paste", BlockActionListener.new(block ActionEvent event
				pPanel.pasteObject()
			end))
			item.setToolTip("Paste scene object")
			item.setEnabled(pPanel.getClipboard().hasClip())
			menu.addWidget(item)
			
			item = MenuItemCommand.new("Browse Objects...", BlockActionListener.new(block ActionEvent event
				pPanel.browseObjects()
			end))
			item.setToolTip("Open directory containing object data in system file browser")
			menu.addWidget(item)
			
			pPanel.getDesktop().addWindow(menu)
			menu.popup(widget.getDesktopPosition() + Point.new(0, widget.getHeight()))
		end
	end
	
	class SelectParent extends DefaultListModelListener
		protected var WMPanelProject pPanel
		
		public func new(WMPanelProject panel)
			pPanel = panel
		end
		
		public func void contentChanged(ListModel model, int fromIndex, int toIndex)
			selectionChanged(model)
		end
		
		public func void selectionChanged(ListModel model)
			if pPanel.preventUpdateObjects
				return
			end
			
			var ECBSceneObject.Instance object = pPanel.getObject()
			if object == null
				return
			end
			
			var ECBSceneObject.Instance parent
			var int index = model.getSelected()
			if index != -1
				parent = model.getAt(index) cast ECBSceneObject.Instance
			end
			
			if parent == object
				WindowDialog.message(pPanel.getWindow(), "Set Parent", "Can not attach to yourself", null, null, null)
				parent = null
			end
			
			var UniqueID parentId = parent != null if parent.getElement().getID() else null
			var BehaviorElement element = object.getElement()
			var UniqueID oldParentId = element.getStub().getAttachTo()
			if parentId == oldParentId or (parentId != null and parentId.equals(oldParentId))
				return
			end
			
			element.getStub().setAttachTo(parentId)
			pPanel.elementStubChanged()
		end
	end
	
	class ParentPopupAction extends DefaultActionListener
		private var WMPanelProject pPanel
		
		public func new(WMPanelProject panel)
			pPanel = panel
		end
		
		public func void onAction(ActionEvent event)
			var Widget widget = event.getSource() cast Widget
			var MenuPopup menu = MenuPopup.new()
			var MenuItemCommand item
			
			item = MenuItemCommand.new("Attach Closest", BlockActionListener.new(block ActionEvent event
				pPanel.objectAttachClosest()
			end))
			item.setToolTip("Attach to closest suitable object")
			menu.addWidget(item)
			
			item = MenuItemCommand.new("Detach", BlockActionListener.new(block ActionEvent event
				pPanel.objectDetach()
			end))
			item.setToolTip("Detach object")
			menu.addWidget(item)
			
			pPanel.getDesktop().addWindow(menu)
			menu.popup(widget.getDesktopPosition() + Point.new(0, widget.getHeight()))
		end
	end
	
	/** Object position changed. */
	class ObjectPositionChanged implements ActionListener
		private var WMPanelProject pPanel
		private var EditVector pEditVector
		
		public func new(WMPanelProject panel, EditVector editVector)
			pPanel = panel
			pEditVector = editVector
		end
		
		public func void onAction(ActionEvent event)
			var ECBSceneObject.Instance object = pPanel.getObject()
			if object != null and not pEditVector.isEqualTo(object.getElement().getPosition().toVector())
				ECBShowInteractHandles.directMoveObjectTo(object.getElement(), DVector.new(pEditVector.getVector()))
			end
		end
	end
	
	/** Object rotation changed. */
	class ObjectRotationChanged implements ActionListener
		private var WMPanelProject pPanel
		private var EditVector pEditVector
		
		public func new(WMPanelProject panel, EditVector editVector)
			pPanel = panel
			pEditVector = editVector
		end
		
		public func void onAction(ActionEvent event)
			var ECBSceneObject.Instance object = pPanel.getObject()
			if object != null and not pEditVector.isEqualTo(object.getElement().getOrientation().getEulerAngles())
				ECBShowInteractHandles.directRotateObjectTo(object.getElement(), Quaternion.newFromEuler(pEditVector.getVector()))
			end
		end
	end
	
	/** Object class help button. */
	class ObjectHelpButton extends Button
		private var WMPanelProject pPanel
		
		public func new(WMPanelProject panel) super("?")
			pPanel = panel
			setDesignerSelector("Button.Help")
			setToolTip("Show help webpage")
		end
		
		public func void fireAction(int modifiers)
			super.fireAction(modifiers)
			
			var ECBSceneObject.Instance object = pPanel.getObject()
			if object != null
				var ECBHelpTopic.Instance helpTopic = ECBHelpTopic.getInstanceIn(object.getElement())
				if helpTopic != null and not helpTopic.getHelpTopic().empty()
					FileSystem.openUrl("https://developer.dragondreams.ch/wiki/doku.php/democap:" + helpTopic.getHelpTopic())
				end
			end
		end
	end
	
	
	
	public var bool preventUpdate
	
	protected var DefaultTextModel pModelProjectFilename
	protected var DefaultListModel pModelScenes
	protected var DefaultListModel pModelLoadableWorlds
	protected var DefaultListModel pModelSavedAnimations
	protected var DefaultListModel pModelObjects
	protected var DefaultTextModel pModelObjectClass
	protected var DefaultListModel pModelParent
	protected var EditVector pEditObjectPosition
	protected var EditVector pEditObjectRotation
	protected var ECBSceneObject.Instance pObject
	protected var bool pInVR
	protected var bool pDisposing
	protected var String pPrefixUIOptions
	protected var Project pProject
	protected var Scene pScene
	protected var ScenesChangedListener pScenesChangedListener
	protected var SceneChangedListener pSceneChangedListener
	protected var ListenLoadableWorlds pListenLoadableWorlds
	protected var GameChangedListener pGameChangedListener
	protected var SelectedSelectableObjectChanged pSelectedSelectableObjectChanged
	protected var CollapsibleGroup pPanelParenting
	protected var Panel pPanelBehaviors
	protected var ECBBehaviorGuiPanels.Manager pBGPManager
	protected var bool pEnableObjectUpdates
	
	public var bool preventUpdateObjects
	
	
	
	/** Create panel. */
	public func new(bool inVR, String prefixUIOptions)
		pInVR = inVR
		pPrefixUIOptions = prefixUIOptions + "/WMPanelProject"
		pEnableObjectUpdates = true
		pBGPManager = ECBBehaviorGuiPanels.Manager.new(this)
		
		pModelProjectFilename = DefaultTextModel.new("")
		pModelScenes = DefaultListModel.new()
		pModelScenes.setAutoSelect(false)
		pModelLoadableWorlds = DefaultListModel.new()
		pModelSavedAnimations = DefaultListModel.new()
		
		pModelObjects = DefaultListModel.new()
		pModelObjects.setAutoSelect(false)
		
		pModelObjectClass = DefaultTextModel.new("")
		
		pModelParent = DefaultListModel.new()
		
		runWhileBlockingLayout(block
			createContent()
		end)
		
		var GameApp app = GameApp.getGameApp()
		pListenLoadableWorlds = ListenLoadableWorlds.new(this)
		app.getLoadableWorlds().addListener(pListenLoadableWorlds)
		updateModelLoadableWorlds()
		
		pModelScenes.addListener(SelectScene.new(this))
		pModelObjects.addListener(SelectObject.new(this))
		pModelParent.addListener(SelectParent.new(this))
		
		pScenesChangedListener = ScenesChangedListener.new(this)
		pSceneChangedListener = SceneChangedListener.new(this)
		
		pGameChangedListener = GameChangedListener.new(this)
		app.addListener(pGameChangedListener)
		
		pSelectedSelectableObjectChanged = SelectedSelectableObjectChanged.new(this)
		app.getSelectionTracker().addListener(pSelectedSelectableObjectChanged)
		
		setProject(app.getProject())
		setScene(app.getScene(), true)
	end
	
	/** Dispose of widget. */
	public func void dispose()
		pDisposing = true
		
		var GameApp app = GameApp.getGameApp()
		if pSelectedSelectableObjectChanged != null
			app.getSelectionTracker().removeListener(pSelectedSelectableObjectChanged)
		end
		if pListenLoadableWorlds != null
			app.getLoadableWorlds().removeListener(pListenLoadableWorlds)
		end
		if pGameChangedListener != null
			app.removeListener(pGameChangedListener)
		end
		
		setObject(null)
		setScene(null)
		setProject(null)
		
		pSelectedSelectableObjectChanged = null
		pSceneChangedListener = null
		pScenesChangedListener = null
		pGameChangedListener = null
		pListenLoadableWorlds = null
		
		pModelParent = null
		pModelObjectClass = null
		pModelObjects = null
		pModelLoadableWorlds = null
		pModelSavedAnimations = null
		pModelScenes = null
		pModelProjectFilename = null
		pEditObjectPosition = null
		pEditObjectRotation = null
		pPanelBehaviors = null
		
		if pBGPManager != null
			pBGPManager.dispose()
			pBGPManager = null
		end
		
		super.dispose()
	end
	
	
	
	/** Shown in VR. */
	public func bool getInVR()
		return pInVR
	end
	
	/** UI Option Prefix. */
	public func String getPrefixUIOptions()
		return pPrefixUIOptions
	end
	
	/** Scene objects model. */
	public func DefaultListModel getModelObjects()
		return pModelObjects
	end
	
	public func bool getEnableObjectUpdates()
		return pEnableObjectUpdates
	end
	
	public func void setEnableObjectUpdates(bool enable)
		if enable == pEnableObjectUpdates
			return
		end
		
		pEnableObjectUpdates = enable
		
		if enable
			selectObjectFromTracker()
			
		else
			setObject(null)
		end
	end
	
	
	
	/** Active project or null. */
	public func Project getProject()
		return pProject
	end
	
	/** Set active project or null. */
	public func void setProject(Project project)
		if project == pProject
			return
		end
		
		setScene(null)
		
		if pProject != null and pProject.getScenes() != null // dispose protection
			pProject.getScenes().removeListener(pScenesChangedListener)
		end
		
		pProject = project
		
		if project != null
			project.getScenes().addListener(pScenesChangedListener)
			pModelProjectFilename.setText(File.new(project.getPath()).getName())
			
		else
			pModelProjectFilename.setText("")
		end
		
		updateModelScenes()
		updateSavedAnimations()
	end
	
	
	
	/** Create new project. */
	public func void newProject()
		if pProject == null
			return
		end
		
		var GameApp app = GameApp.getGameApp()
		
		DialogFileSelect.showSaveFile(getWindow(), "New Project", app.getPatternsProject(),\
		File.new(app.getPathProjects(), "Project.demcp").getPath(),\
			DialogFileSelect.BlockResultListener.new(block String result
				if result != null
					if FileSystem.existsFile(result)
						WindowDialog.message(getWindow(), "New Project",\
							"Project file exists already", null, null, null)
						
					else
						try
							var Project project = Project.new(result)
							project.getScenes().add(Scene.new("Scene"))
							project.save()
							app.setProject(project)
							app.setScene(project.getScenes().getAt(0))
							
						catch Exception e
							app.getConsole().addError("create project failed: " + result, e)
							WindowDialog.message(getWindow(), "New Project",\
								"Failed creating project\n" + result + "\n" + e, null, null, null)
						end
					end
				end
			end))
	end
	
	/** Open project. */
	public func void openProject()
		if pProject == null
			return
		end
		
		var GameApp app = GameApp.getGameApp()
		
		DialogFileSelect.showOpenFile(getWindow(), "Open Project",\
		app.getPatternsProject(), pProject.getPath(),\
			DialogFileSelect.BlockResultListener.new(block String result
				if result != null
					try
						var Project project = Project.load(result)
						app.setProject(project)
						app.setScene(project.getScenes().getNamed(project.getPostLoadActivateScene()))
						
					catch Exception e
						app.getConsole().addError("open project failed: " + result, e)
						WindowDialog.message(getWindow(), "Open Project",\
							"Failed opening project\n" + result + "\n" + e, null, null, null)
					end
				end
			end))
	end
	
	/** Save project. */
	public func void saveProject()
		if pProject != null
			pProject.save()
		end
	end
	
	/** Browse project data in overlay directory. */
	public func void browseProjectData()
		if pProject == null
			return
		end
		
		var String path = pProject.getDataDirectory().getPath()
		if path.startsWith("/config")
			FileSystem.browseConfig(path)
			
		elif path.startsWith("/capture")
			FileSystem.browseCapture(path)
			
		else
			FileSystem.browseOverlay(path)
		end
	end
	
	
	
	/** Update scenes model. */
	public func void updateModelScenes()
		var Array content = Array.new()
		if GameApp.getGameApp().getProject() != null
			content = GameApp.getGameApp().getProject().getScenes().toArray()
		end
		
		preventUpdate = true
		try
			pModelScenes.setSelected(-1)
			pModelScenes.setContent(content)
			
		catch Exception e
			preventUpdate = false
			throw
		end
		preventUpdate = false
		
		selectScene()
	end
	
	/** Select scene. */
	public func void selectScene()
		pModelScenes.setSelected(pModelScenes.indexOf(GameApp.getGameApp().getScene()))
	end
	
	/** Active scene or null. */
	public func Scene getScene()
		return pScene
	end
	
	/** Set active scene or null. */
	public func void setScene(Scene scene)
		setScene(scene, false)
	end
	
	public func void setScene(Scene scene, bool noLoad)
		if scene == pScene
			return
		end
		
		if pScene != null
			pScene.removeListener(pSceneChangedListener)
		end
		
		pScene = scene
		
		if scene != null
			scene.addListener(pSceneChangedListener)
		end
		
		selectScene()
		
		if scene != null and not noLoad
			var Object world = pModelLoadableWorlds.find(block LoadableWorld each
				return each.getPath().equals(scene.getPathWorld())
			end)
			if world != null
				pModelLoadableWorlds.setSelected(pModelLoadableWorlds.indexOf(world))
			end
		end
		
		updateModelObjects()
	end
	
	/** Add scene. */
	public func void addScene()
		var LoadableWorld world = getLoadableWorld()
		if world == null
			return
		end
		
		WindowDialog.input(getWindow(), "Add Scene", "Name:", null, "Scene",\
		null, null, WindowDialog.BlockResultListener.new(block String result
			if result != null
				if result.empty()
					WindowDialog.message(getWindow(), "Add Scene", "Scene name can not be empty.", null, null, null)
					
				elif pProject.getScenes().hasNamed(result)
					WindowDialog.message(getWindow(), "Add Scene", "Scene with this name exists already.", null, null, null)
					
				else
					var Scene scene = Scene.new(result)
					scene.setPathWorld(world.getPath())
					pProject.getScenes().add(scene)
					GameApp.getGameApp().setScene(scene)
				end
			end
		end))
	end
	
	/** Duplicate scene. */
	public func void duplicateScene()
		if pScene == null
			return
		end
		
		WindowDialog.input(getWindow(), "Duplicate Scene", "Name:", null, pScene.getName(),\
		null, null, WindowDialog.BlockResultListener.new(block String result
			if result != null
				if result.empty()
					WindowDialog.message(getWindow(), "Duplicate Scene", "Scene name can not be empty.", null, null, null)
					
				elif pProject.getScenes().hasNamed(result)
					WindowDialog.message(getWindow(), "Duplicate Scene", "Scene with this name exists already.", null, null, null)
					
				else
					var Scene scene = Scene.new(result, pScene)
					pProject.getScenes().add(scene)
					GameApp.getGameApp().setScene(scene)
				end
			end
		end))
	end
	
	/** Remove scene. */
	public func void removeScene()
		if pScene == null
			return
		end
		
		if pProject.getScenes().getCount() == 1
			WindowDialog.message(getWindow(), "Remove Scene", "You can not remove the last scene.", null, null, null)
			return
		end
		
		WindowDialog.question(getWindow(), "Remove Scene", "Remove Scene '"\
			+ pScene.getName() + "'?", null, Array.newWith(\
				WindowDialog.ButtonConfiguration.new("Remove", true),\
				WindowDialog.ButtonConfiguration.new("Cancel", false)),\
			WindowDialog.BlockResultListener.new(block bool result
				if result
					var Scene scene = pScene
					var int index = pModelScenes.indexOf(scene)
					if index < pModelScenes.getCount() - 1
						index++
						
					else
						index--
					end
					GameApp.getGameApp().setScene(pModelScenes.getAt(index) cast Scene)
					pProject.getScenes().remove(scene)
					pProject.save()
				end
		end))
	end
	
	/** Rename scene. */
	public func void renameScene()
		if pScene == null
			return
		end
		
		WindowDialog.input(getWindow(), "Rename Scene", "Name:", null, pScene.getName(),\
		null, null, WindowDialog.BlockResultListener.new(block String result
			if result != null and not result.equals(pScene.getName())
				if result.empty()
					WindowDialog.message(getWindow(), "Rename Scene", "Scene name can not be empty.", null, null, null)
					
				elif pProject.getScenes().hasNamed(result)
					WindowDialog.message(getWindow(), "Rename Scene", "Scene with this name exists already.", null, null, null)
					
				else
					pScene.setName(result)
				end
			end
		end))
	end
	
	
	
	/** Selected loadable world or null. */
	public func LoadableWorld getLoadableWorld()
		if pModelLoadableWorlds.getSelected() == -1
			return null
		end
		return pModelLoadableWorlds.getAt(pModelLoadableWorlds.getSelected()) cast LoadableWorld
	end
	
	/** Update loadable worlds model. */
	public func void updateModelLoadableWorlds()
		var LoadableWorld world = getLoadableWorld()
		
		pModelLoadableWorlds.setContent(GameApp.getGameApp().getLoadableWorlds().toArray().sorted())
		
		var int index = pModelLoadableWorlds.indexOf(world)
		if index != -1
			pModelLoadableWorlds.setSelected(index)
			pModelLoadableWorlds.notifyContentChanged(index, index)
		end
	end
	
	/** Browse loadable worlds in overlay directory. */
	public func void browseLoadableWorlds()
		FileSystem.browseOverlay(GameApp.getGameApp().getLoadableWorlds().getDirectory())
	end
	
	/** Activate world. */
	public func void activateWorld()
		var GameApp app = GameApp.getGameApp()
		var LoadableWorld world = getLoadableWorld()
		if pScene == null or world == null or app.getGameWorldLoader() != null
			return
		end
		
		// dispose game world. this removes scene objects and clears held file usages
		app.getWorldSpawnCharacter().setGameWorld(null)
		app.getWindowGameWorld().setGameWorld(null)
		
		// drop saved state
		pScene.dropSaveState()
		
		// set new path and load world
		pScene.setPathWorld(world.getPath())
		pProject.save()
		
		pScene.loadWorld(pProject)
	end
	
	
	
	/** Selected saved animation or null. */
	public func CharacterAnimation getSavedAnimation()
		if pModelSavedAnimations.getSelected() == -1
			return null
		end
		return pModelSavedAnimations.getAt(pModelSavedAnimations.getSelected()) cast CharacterAnimation
	end
	
	/** Rename saved animation. */
	public func void renameSavedAnimation()
		var CharacterAnimation savedAnimation = getSavedAnimation()
		if pProject == null or savedAnimation == null
			return
		end
		
		WindowDialog.input(getWindow(), "Rename Saved Animation", "Name:", null,\
		savedAnimation.getName(), null, null, WindowDialog.BlockResultListener.new(block String result
			if result != null and not result.equals(savedAnimation.getName())
				if result.empty()
					WindowDialog.message(getWindow(), "Rename Saved Animation", "Name can not be empty.", null, null, null)
					
				elif pProject.getSavedAnimations().hasNamed(result)
					WindowDialog.message(getWindow(), "Rename Saved Animation",\
						"Saved animation with this name exists already.", null, null, null)
					
				else
					savedAnimation.setName(result)
					GameApp.getGameApp().notifySavedAnimationsChanged()
				end
			end
		end))
	end
	
	/** Load saved animation. */
	public func void loadSavedAnimation()
		var CharacterAnimation savedAnimation = getSavedAnimation()
		if pObject == null or pProject == null or savedAnimation == null
			return
		end
		
		var ECBCapturedAnimations.Instance capturedAnimations =\
			ECBCapturedAnimations.getInstanceIn(pObject.getElement())
		if capturedAnimations == null
			return
		end
		
		var CharacterAnimation animation = capturedAnimations.getAnimations().getActive()
		if animation == null
			return
		end
		
		select capturedAnimations.getCaptureTarget()
		case ECBCapturedAnimations.CaptureTarget.character
			var String targetProfile = capturedAnimations.getCharacterProfile()
			var String sourceProfile = savedAnimation.getCharacterProfile(pProject)
			if targetProfile.empty() or sourceProfile.empty() or not sourceProfile.equals(targetProfile)
				WindowDialog.message(getWindow(), "Load Saved Animation",\
					"Scene objects is not compatible (character profile differs).", null, null, null)
				return
			end
			
		case ECBCapturedAnimations.CaptureTarget.object
			// find some rules here
		end
		
		animation.assign(savedAnimation)
		capturedAnimations.getAnimations().notifyAnimationChanged(animation)
	end
	
	/** Update saved animations model. */
	public func void updateSavedAnimations()
		var CharacterAnimation savedAnimation = getSavedAnimation()
		
		if pProject != null
			pModelSavedAnimations.setContent(pProject.getSavedAnimations().toArray().sorted())
			
		else
			pModelSavedAnimations.removeAll()
		end
		
		pModelSavedAnimations.setSelected(pModelSavedAnimations.indexOf(savedAnimation))
	end
	
	/** Remove saved animation. */
	public func void removeSavedAnimation()
		var CharacterAnimation savedAnimation = getSavedAnimation()
		if savedAnimation == null or pProject == null
			return
		end
		
		WindowDialog.question(getWindow(), "Remove Saved Animation", "Remove Saved Animation '"\
			+ savedAnimation.getName() + "'?", null, Array.newWith(\
				WindowDialog.ButtonConfiguration.new("Remove", true),\
				WindowDialog.ButtonConfiguration.new("Cancel", false)),\
			WindowDialog.BlockResultListener.new(block bool result
				if result
					pProject.getSavedAnimations().remove(savedAnimation)
					GameApp.getGameApp().notifySavedAnimationsChanged()
				end
		end))
	end
	
	/** Export saved animation. */
	public func void exportSavedAnimation()
		var CharacterAnimation savedAnimation = getSavedAnimation()
		if savedAnimation == null or pProject == null
			return
		end
		
		WindowDialog.input(getWindow(), "Export Saved Animation", "Name:", null, "Animation",\
		null, null, WindowDialog.BlockResultListener.new(block String result
			if result != null and not result.empty()
				savedAnimation.export(pProject, result)
			end
		end))
	end
	
	/** Browse exported animations directory. */
	public func void browseExportedAnimations()
		if pProject != null
			pProject.browseExportedAnimations()
		end
	end
	
	
	
	/** Selected object or null. */
	public func ECBSceneObject.Instance getObject()
		return pObject
	end
	
	/** Set selected object or null. */
	public func void setObject(ECBSceneObject.Instance object)
		if object == pObject
			return
		end
		
		pPanelBehaviors.runWhileBlockingLayout(block
			while pPanelBehaviors.getWidgetCount() > 0
				var WMPPanelSceneObject panel = pPanelBehaviors.getWidget(pPanelBehaviors.getWidgetCount() - 1) cast WMPPanelSceneObject
				pBGPManager.returnPanel(panel)
				pPanelBehaviors.removeWidget(panel)
			end
		end)
		
		pObject = object
		
		var bool showParenting = true
		
		if object != null
			var ECBBehaviorGuiPanels.Instance behaviorGuiPanels = \
				ECBBehaviorGuiPanels.getInstanceIn(object.getElement() cast BehaviorElement)
			if behaviorGuiPanels != null
				behaviorGuiPanels.forEachBehaviorGuiPanel(block ECBBehaviorGuiPanels.BehaviorGuiPanel each
					var WMPPanelSceneObject panel = pBGPManager.getPanel(each)
					panel.setBehavior(each.getInstance())
					pPanelBehaviors.addWidget(panel)
				end)
			end
			pPanelBehaviors.doLayoutIfBlocked()
		end
		
		pPanelParenting.setVisible(showParenting)
		
		updateObject()
	end
	
	/** Get selected scene object from tracker. */
	public func ECBSceneObject.Instance getTrackerSelectedObject()
		var ECBSelectable.Tracker tracker = GameApp.getGameApp().getSelectionTracker()
		if tracker.getElement() != null
			return ECBSceneObject.getInstanceIn(tracker.getElement().getElement())
		end
		return null
	end
	
	/** Select object from tracker. */
	public func void selectObjectFromTracker()
		if not pEnableObjectUpdates
			return
		end
		
			var RuntimeMeter rm = RuntimeMeter.new()
			rm.counterReset(0)
			rm.reset(0)
		var ECBSceneObject.Instance selection = getTrackerSelectedObject()
		preventUpdateObjects = true
		pModelObjects.setSelectedElement(selection)
		preventUpdateObjects = false
		setObject(selection)
			rm.counterAdd(0, 0)
			GameApp.getGameApp().getConsole().addMessage("WMPanelProject(" + pInVR + ").selectObjectFromTracker: " + pObject + " => " + rm.counterTime(0))
	end
	
	/** Update objects model. */
	public func void updateModelObjects()
		if pModelObjects == null
			return // dispose protection
		end
		
		var ECBSceneObject.Instance selection = getTrackerSelectedObject()
		var ECBSceneObject.Instance selectionParent = pModelParent.getSelectedElement() cast ECBSceneObject.Instance
		
		var Array content = Array.new()
		
		var GameWorld gameWorld = GameApp.getGameApp().getWindowGameWorld().getGameWorld()
		if gameWorld != null
			gameWorld.forEachElement(block BehaviorElement each
				var ECBSceneObject.Instance sceneObject = ECBSceneObject.getInstanceIn(each)
				if sceneObject != null
					content.add(sceneObject)
				end
			end)
		end
		
		content.sort(block ECBSceneObject.Instance a, ECBSceneObject.Instance b
			return a.getDisplayName().compare(b.getDisplayName())
		end)
		
		content.insert(0, null)
		preventUpdateObjects = true
		pModelObjects.setContent(content)
		
		pModelParent.setContent(content.collect(block ECBSceneObject.Instance each
			return each == null or ECBehaviorAttachments.getInstanceIn(each.getElement()) != null
		end))
		
		pModelObjects.setSelectedElement(selection)
		
		pModelParent.setSelectedElement(selectionParent)
		preventUpdateObjects = false
		setObject(selection)
	end
	
	public func void updateModelObjectName(ECBSceneObject.Instance object)
		if pModelObjects == null or pModelParent == null
			return // dispose protection
		end
		
		preventUpdateObjects = true
		var int index = pModelObjects.indexOf(object)
		if index != -1
			pModelObjects.notifyElementChanged(index)
		end
		
		index = pModelParent.indexOf(object)
		if index != -1
			pModelParent.notifyElementChanged(index)
		end
		preventUpdateObjects = false
	end
	
	/** Update object. */
	public func void updateObject()
		runWhileBlockingLayout(block
			if pObject != null
				var BehaviorElement element = pObject.getElement()
				pModelObjectClass.setText(element.getClass().getClassname())
				pEditObjectPosition.setVector(element.getPosition().toVector())
				pEditObjectRotation.setVector(element.getOrientation().getEulerAngles())
				
				var UniqueID parentId = element.getStub().getAttachTo()
				var Element parent
				if parentId != null
					parent = element.getGameWorld().getElementWithID(parentId)
				end
				if parent != null
					pModelParent.setSelectedElement(ECBSceneObject.getInstanceIn(parent cast BehaviorElement))
					
				else
					pModelParent.setSelectedElement(null)
				end
				
				pPanelBehaviors.forEachWidget(block WMPPanelSceneObject each
					each.updateBehavior()
				end)
				
			else
				pModelObjectClass.setText("")
				pModelParent.setSelectedElement(null)
				pEditObjectPosition.setVector(Vector.new())
				pEditObjectRotation.setVector(Vector.new())
			end
		end)
		doLayoutIfBlocked()
	end
	
	/** Add object. */
	public func void addObject()
		if pScene == null
			return
		end
		
		var GameWorld gameWorld = GameApp.getGameApp().getWindowGameWorld().getGameWorld()
		if gameWorld == null
			return
		end
		
		var ElementClassList eclist = GameApp.getGameApp().getECListSceneObjects()
		var DefaultListModel model = DefaultListModel.new()
		eclist.forEach(block ElementClass each
			model.add(each.getClassname())
		end)
		model.sort()
		
		WindowDialog.chooseList(getWindow(), "Add Scene Object", "Object Class:", null, model,\
			DefaultListElementRenderer.new(String.new('X', 30)),\
			WindowDialog.ButtonConfiguration.new("Add Object"),\
			WindowDialog.ButtonConfiguration.new("Cancel"),\
			WindowDialog.BlockResultListener.new(block int result
				if result != -1
					var String cname = model.getAt(result) cast String
					var BehaviorElementClass eclass = eclist.getNamed(cname) cast BehaviorElementClass
					var ECBSceneObject sceneObject = ECBSceneObject.getBehaviorIn(eclass)
					var StubElement stub = StubElement.new(eclass)
					
					if eclass.getPersistable()
						stub.setID(GameApp.getGameApp().getIDGenerator().nextID())
					end
					
					var DMatrix matrix = DMatrix.newTranslation(DVector.new(sceneObject.addActorOffset.getVector()))
					var BaseVRActor actor = GameApp.getGameApp().getWorldSpawnCharacter().getActor()
					if actor != null
						matrix = matrix * actor.getElementMatrix()
					end
					
					stub.setPosition(matrix.getPosition())
					stub.setRotation(matrix.getEulerAngles().toVector())
					
					if not sceneObject.runSceneObjectStubInitializers(stub, getWindow())
						return null
					end
					
					var BehaviorElement element = stub.createElement() cast BehaviorElement
					gameWorld.addElement(element)
					ECBSelectable.getInstanceIn(element).selectElement()
				end
		end))
	end
	
	/** Duplicate object. */
	public func void duplicateObject()
		var GameWorld gameWorld = GameApp.getGameApp().getWindowGameWorld().getGameWorld()
		if pObject == null or pScene == null or gameWorld == null
			return
		end
		
		var ECBCopyObject.Instance behavior = ECBCopyObject.getInstanceIn(pObject.getElement())
		if behavior == null
			WindowDialog.message(getWindow(), "Duplicate Scene Object",\
				"Scene objects of type " + pObject.getElement().getClass().getClassname()\
					+ " can not be duplicated.", null, null, null)
			return
		end
		
		var Array objects = behavior.createCopyData().createCopy(gameWorld, getWindow(), DVector.new(0.2, 0, 0.2))
		if objects.getCount() > 0
			ECBSelectable.getInstanceIn(objects.getAt(0) cast BehaviorElement).selectElement()
		end
	end
	
	/** Copy object. */
	public func void copyObject()
		var GameWorld gameWorld = GameApp.getGameApp().getWindowGameWorld().getGameWorld()
		if pObject == null or pScene == null or gameWorld == null
			return
		end
		
		var ECBCopyObject.Instance behavior = ECBCopyObject.getInstanceIn(pObject.getElement())
		if behavior == null
			WindowDialog.message(getWindow(), "Copy Scene Object",\
				"Scene objects of type " + pObject.getElement().getClass().getClassname()\
					+ " can not be copied.", null, null, null)
			
		else
			getClipboard().setClipWith(behavior.createCopyData())
		end
	end
	
	/** Cut object. */
	public func void cutObject()
		if pObject == null
			return
		end
		
		var ECBCopyObject.Instance behavior = ECBCopyObject.getInstanceIn(pObject.getElement())
		if behavior == null or not pObject.getECBehavior().canRemove.getValue()
			WindowDialog.message(getWindow(), "Cut Scene Object",\
				"Scene objects of type " + pObject.getElement().getClass().getClassname()\
					+ " can not be cut.", null, null, null)
			return
		end
		
		WindowDialog.question(getWindow(), "Cut Scene Object", "Cut Scene Object '"\
			+ pObject.getDisplayName() + "'?", null, Array.newWith(\
				WindowDialog.ButtonConfiguration.new("Cut", true),\
				WindowDialog.ButtonConfiguration.new("Cancel", false)),\
			WindowDialog.BlockResultListener.new(block bool result
				if result
					getClipboard().setClipWith(behavior.createCopyData())
					pObject.getElement().safeDispose()
				end
		end))
	end
	
	/** Paste object. */
	public func void pasteObject()
		var GameWorld gameWorld = GameApp.getGameApp().getWindowGameWorld().getGameWorld()
		if pScene == null or gameWorld == null or getClipboard().isEmpty()
			return
		end
		
		getClipboard().getClip().findCastable(block ECBCopyObject.ObjectCopyData data
			var Array objects = data.createCopy(gameWorld, getWindow(), DVector.new(0.2, 0, 0.2))
			if objects.getCount() > 0
				ECBSelectable.getInstanceIn(objects.getAt(0) cast BehaviorElement).selectElement()
			end
			return true
		end)
	end
	
	/** Remove object. */
	public func void removeObject()
		if pObject == null
			return
		end
		
		if not pObject.getECBehavior().canRemove.getValue()
			WindowDialog.message(getWindow(), "Remove Scene Object",\
				"Scene objects of type " + pObject.getElement().getClass().getClassname()\
					+ " can not be removed.", null, null, null)
			return
		end
		
		WindowDialog.question(getWindow(), "Remove Scene Object", "Remove Scene Object '"\
			+ pObject.getDisplayName() + "'?", null, Array.newWith(\
				WindowDialog.ButtonConfiguration.new("Remove", true),\
				WindowDialog.ButtonConfiguration.new("Cancel", false)),\
			WindowDialog.BlockResultListener.new(block bool result
				if result
					pObject.getElement().safeDispose()
				end
		end))
	end
	
	/** Rename object. */
	public func void renameObject()
		if pObject == null
			return
		end
		
		WindowDialog.input(getWindow(), "Rename Scene Object", "Name:", null, pObject.getName(),\
		null, null, WindowDialog.BlockResultListener.new(block String result
			if result != null
				pObject.getElement().getStub().setPropertyValueFor(pObject.getECBehavior().name.getName(), result)
				pObject.setName(result)
			end
		end))
	end
	
	/** Change object class. */
	public func void changeObjectClass()
		if pScene == null
			return
		end
		
		var GameWorld gameWorld = GameApp.getGameApp().getWindowGameWorld().getGameWorld()
		if gameWorld == null
			return
		end
		
		var ElementClassList eclist = GameApp.getGameApp().getECListSceneObjects()
		var DefaultListModel model = DefaultListModel.new()
		eclist.forEach(block ElementClass each
			model.add(each.getClassname())
		end)
		model.sort()
		
		var String curCName = pObject.getElement().getClass().getClassname()
		model.setSelectedElement(curCName)
		
		WindowDialog.chooseList(getWindow(), "Change Object Class", "Object Class:", null, model,\
			DefaultListElementRenderer.new(String.new('X', 30)),\
			WindowDialog.ButtonConfiguration.new("Change Class"),\
			WindowDialog.ButtonConfiguration.new("Cancel"),\
			WindowDialog.BlockResultListener.new(block int result
				if result == -1
					return null
				end
				
				var String newCName = model.getAt(result) cast String
				if newCName.equals(curCName)
					return null
				end
				
				var BehaviorElement element = pObject.getElement()
				var String soname = ECBSceneObject.getInstanceIn(element).getName()
				
				var BehaviorElementClass eclass = eclist.getNamed(newCName) cast BehaviorElementClass
				var ECBSceneObject sceneObject = ECBSceneObject.getBehaviorIn(eclass)
				var StubElement stub = StubElement.new(eclass)
				
				if not sceneObject.runSceneObjectStubInitializers(stub, getWindow())
					return null
				end
				
				stub.setPosition(element.getPosition())
				stub.setRotation(element.getOrientation().getEulerAngles())
				
				if eclass.getPersistable()
					stub.setID(element.getStub().getID())
					
				else
					stub.setID(UniqueID.new())
				end
				
				var Array attachments
				
				var ECBehaviorAttachments.Instance behaviorAttachments = ECBehaviorAttachments.getInstanceIn(element)
				if behaviorAttachments != null
					attachments = Array.new()
					behaviorAttachments.forEachAttachment(block BehaviorElement each
						attachments.add(each)
					end)
					behaviorAttachments = null
					
					attachments.forEach(block BehaviorElement each
						gameWorld.removeElement(each)
					end)
				end
				
				element.safeDispose()
				
				element = stub.createElement() cast BehaviorElement
				sceneObject.instance(element).setName(soname)
				
				gameWorld.addElement(element)
				
				if attachments != null
					behaviorAttachments = ECBehaviorAttachments.getInstanceIn(element)
					if behaviorAttachments != null
						attachments.forEach(block BehaviorElement each
							gameWorld.addElement(each)
						end)
						behaviorAttachments = null
						
					else
						attachments.forEach(block BehaviorElement each
							each.getStub().setAttachTo(null)
						end)
					end
				end
				
				ECBSelectable.getInstanceIn(element).selectElement()
		end))
	end
	
	/** Browse objects in overlay directory. */
	public func void browseObjects()
		FileSystem.browseOverlay(GameApp.getGameApp().getPathObjects())
	end
	
	/** Attach to closest suitable object. */
	protected class FindClosestParent extends ElementVisitor
		public var ECBSceneObject.Instance bestParent
		public var BehaviorElement object
		public var DVector position
		public var float bestDistance
		
		public func new(BehaviorElement object)
			this.object = object
			position = object.getPosition()
		end
		
		public func void visitBehaviorElement(BehaviorElement element)
			if element == object
				return
			end
			
			var ECBSceneObject.Instance sceneObject = ECBSceneObject.getInstanceIn(element)
			var ECBehaviorAttachments.Instance attachments = ECBehaviorAttachments.getInstanceIn(element)
			if sceneObject == null or attachments == null
				return
			end
			
			var float distance = (element.getPosition() - position).getLength()
			if bestParent == null or distance < bestDistance
				bestParent = sceneObject
				bestDistance = distance
			end
		end
	end
	
	public func void objectAttachClosest()
		if pObject == null
			return
		end
		
		var BehaviorElement element = pObject.getElement()
		var GameWorld gameWorld = element.getGameWorld()
		var FindClosestParent visitor = FindClosestParent.new(pObject.getElement())
		gameWorld.visitElements(visitor)
		
		element.getStub().setAttachTo(visitor.bestParent != null if visitor.bestParent.getElement().getID() else null)
		elementStubChanged()
	end
	
	/** Detach object. */
	public func void objectDetach()
		if pObject == null
			return
		end
		
		var BehaviorElement element = pObject.getElement()
		if element.getStub().getAttachTo() == null
			return
		end
		
		var GameWorld gameWorld = element.getGameWorld()
		gameWorld.removeElement(element)
		element.getStub().setAttachTo(null)
		gameWorld.addElement(element)
	end
	
	/** Move object. */
	public func void moveObject(DVector direction)
		if pObject != null
			ECBShowInteractHandles.directMoveObject(pObject.getElement(), direction)
		end
	end
	
	/** Move object. */
	public func void moveObjectTo(DVector position)
		if pObject != null
			ECBShowInteractHandles.directMoveObjectTo(pObject.getElement(), position)
		end
	end
	
	/** Rotate object. */
	public func void rotateObject(Vector axis)
		if pObject != null
			ECBShowInteractHandles.directRotateObject(pObject.getElement(), axis)
		end
	end
	
	/** Rotate object. */
	public func void rotateObjectTo(Quaternion orientation)
		if pObject != null
			ECBShowInteractHandles.directRotateObjectTo(pObject.getElement(), orientation)
		end
	end
	
	
	
	/** Behavior panel matching prefix UI options value or null. */
	public func WMPPanelSceneObject getBehaviorPanelWith(String prefix)
		return pPanelBehaviors.findWidget(block WMPPanelSceneObject each
			return each.getPrefixUIOptions().equals(prefix)
		end) cast WMPPanelSceneObject
	end
	
	
	
	/** Element stub changed. */
	public func void elementStubChanged()
		var BehaviorElement element = pObject.getElement()
		var GameWorld gameWorld = element.getGameWorld()
		
		var Widget focusWidget = getDesktop().getDesktop().getFocusWidget()
		var Point focusPosition
		var String puio
		
		if focusWidget != null
			var Container widget = focusWidget.getParent()
			while widget != null
				if widget castable WMPPanelSceneObject
					focusPosition = focusWidget.getRelativePosition(widget) + focusWidget.getSize() / 2
					puio = (widget cast WMPPanelSceneObject).getPrefixUIOptions()
					break
				end
				widget = widget.getParent()
			end
		end
		
		// we delay this by one frame update to avoid complicated problems due to disposing
		TimerBlock.new(0, false, block
			var StubElement stub = element.getStub()
			stub.setPosition(element.getPosition())
			stub.setRotation(element.getOrientation().getEulerAngles())
			
			var Array attachments
			
			var ECBehaviorAttachments.Instance behaviorAttachments = ECBehaviorAttachments.getInstanceIn(element)
			if behaviorAttachments != null
				attachments = Array.new()
				behaviorAttachments.forEachAttachment(block BehaviorElement each
					attachments.add(each)
				end)
				behaviorAttachments = null
				
				attachments.forEach(block BehaviorElement each
					gameWorld.removeElement(each)
				end)
			end
			
			var MemoryFile objectState = MemoryFile.new("objectState")
			var PersistencyEnvironment env = PersistencyEnvironment.new(GameApp.getGameApp().getLoaders().getPersistency())
			element.writeToFile(env, objectState.getWriter(false))
			
			element.safeDispose()
			
			element = stub.createElement() cast BehaviorElement
			
			element.readFromFile(env, objectState.getReader())
			
			gameWorld.addElement(element)
			
			if attachments != null
				behaviorAttachments = ECBehaviorAttachments.getInstanceIn(element)
				if behaviorAttachments != null
					attachments.forEach(block BehaviorElement each
						gameWorld.addElement(each)
					end)
					behaviorAttachments = null
					
				else
					attachments.forEach(block BehaviorElement each
						each.safeDispose()
					end)
				end
			end
			
			ECBSelectable.getInstanceIn(element).selectElement()
			
			if focusPosition != null
				var WMPPanelSceneObject pso = getBehaviorPanelWith(puio)
				if pso != null
					focusWidget = pso.getWidgetAt(focusPosition)
					if focusWidget != null
						focusWidget.grabFocus()
					end
				end
			end
		end)
	end
	
	
	/** Create panel content. */
	protected func void createContent()
		var DefaultListModel comboBoxListModel
		var TextField textField
		var ComboBox comboBox
		var Button button
		var Label label
		
		setLayout(FlowLayout.new(LayoutAxis.y, 2))
		
		addWidget(CollapsibleGroup.new("Project", "uipanelproject",\
		CollapsibleGroup.persistModel(pPrefixUIOptions + "/Project"),\
		FormLayout.new(true, 5, 2), block Panel p
			p.addWidget(Label.new("Project:", "Label.FormCaption"))
			p.addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 1, FlowLayout.Stretch.first), block Panel p2
				label = Label.new(pModelProjectFilename, "Label.FormText")
				label.setToolTip("Project filename")
				p2.addWidget(label)
				
				button = Button.new("...", ProjectPopupAction.new(this))
				button.setDesignerSelector("Button.Popup")
				p2.addWidget(button)
			end))
			
			p.addWidget(Label.new("Scene:", "Label.FormCaption"))
			p.addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 1, FlowLayout.Stretch.first), block Panel p2
				p2.addWidget(ComboBox.new(pModelScenes, SceneListElementRenderer.new()))
				
				button = Button.new("...", ScenePopupAction.new(this))
				button.setDesignerSelector("Button.Popup")
				p2.addWidget(button)
			end))
			
			p.addWidget(Label.new("World:", "Label.FormCaption"))
			p.addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 1, FlowLayout.Stretch.first), block Panel p2
				p2.addWidget(ComboBox.new(pModelLoadableWorlds, LoadableWorldRenderer.new()))
				
				button = Button.new("...", LoadableWorldPopupAction.new(this))
				button.setDesignerSelector("Button.Popup")
				p2.addWidget(button)
			end))
			
			p.addWidget(Label.new("Saved Anims:", "Label.FormCaption"))
			p.addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 1, FlowLayout.Stretch.first), block Panel p2
				p2.addWidget(ComboBox.new(pModelSavedAnimations, SavedAnimationRenderer.new(this)))
				
				button = Button.new("...", SavedAnimationPopupAction.new(this))
				button.setDesignerSelector("Button.Popup")
				p2.addWidget(button)
			end))
		end))
		
		addWidget(Panel.new(FormLayout.new(true, 5, 2), block Panel p
			p.addWidget(Label.new("Object:", "Label.FormCaption"))
			p.addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 1, FlowLayout.Stretch.first), block Panel p2
				p2.addWidget(ComboBox.new(pModelObjects, ObjectElementRenderer.new()))
				
				button = Button.new("...", ObjectPopupAction.new(this))
				button.setDesignerSelector("Button.Popup")
				p2.addWidget(button)
			end))
		end))
		
		pPanelParenting = CollapsibleGroup.new("Parenting", "uipanelproject#parenting", \
		CollapsibleGroup.persistModel(pPrefixUIOptions + "/ObjectParenting"),\
		FormLayout.new(true, 5, 2), block Panel p
			p.addWidget(Label.new("Parent:", "Label.FormCaption"))
			p.addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 0, FlowLayout.Stretch.first), block Panel p2
				comboBox = ComboBox.new(pModelParent, ObjectElementRenderer.new())
				comboBox.setToolTip("Parent object. Has no effect if no attach behavior is present.")
				p2.addWidget(comboBox)
				
				button = Button.new("...", ParentPopupAction.new(this))
				button.setDesignerSelector("Button.Popup")
				p2.addWidget(button)
			end))
		end)
		addWidget(pPanelParenting)
		
		addWidget(CollapsibleGroup.new("Geometry", "uipanelproject#geometry", \
		CollapsibleGroup.persistModel(pPrefixUIOptions + "/ObjectGeometry"),\
		FormLayout.new(true, 5, 2), block Panel p
			p.addWidget(Label.new("Class:", "Label.FormCaption"))
			p.addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 0, FlowLayout.Stretch.first), block Panel p2
				label = Label.new(pModelObjectClass, "Label.FormText")
				label.setToolTip("Object class. Defines behaviors shown below")
				p2.addWidget(label)
				p2.addWidget(ObjectHelpButton.new(this))
			end))
			
			p.addWidget(Label.new("Position:", "Label.FormCaption"))
			pEditObjectPosition = EditVector.new()
			pEditObjectPosition.setToolTip("Object position")
			p.addWidget(pEditObjectPosition)
			pEditObjectPosition.addActionListener(ObjectPositionChanged.new(this, pEditObjectPosition))
			
			p.addWidget(Label.new("Rotation:", "Label.FormCaption"))
			pEditObjectRotation = EditVector.new()
			pEditObjectRotation.setToolTip("Object rotation in euler angles")
			p.addWidget(pEditObjectRotation)
			pEditObjectRotation.addActionListener(ObjectRotationChanged.new(this, pEditObjectRotation))
			
			// manual movement
			label = Label.new("Manual Move:", "Label.FormCaption")
			label.setToolTip("Manually move object by step width")
			p.addWidget(label)
			
			p.addWidget(Panel.new(CentrizedBoxLayout.new(LayoutAxis.x, 2), block Panel p2
				button = Button.new(" ", BlockActionListener.new(block ActionEvent event
					moveObject(DVector.new(-1, 0, 0))
				end))
				button.setDesignerSelector("Button.MovementLeft")
				button.setToolTip("Move object left by step width")
				p2.addWidget(button)
				
				button = Button.new(" ", BlockActionListener.new(block ActionEvent event
					moveObject(DVector.new(0, 1, 0))
				end))
				button.setDesignerSelector("Button.MovementUp")
				button.setToolTip("Move object up by step width")
				p2.addWidget(button)
				
				button = Button.new(" ", BlockActionListener.new(block ActionEvent event
					moveObject(DVector.new(0, 0, 1))
				end))
				button.setDesignerSelector("Button.MovementForward")
				button.setToolTip("Move object forward by step width")
				p2.addWidget(button)
				
				button = Button.new(" ", BlockActionListener.new(block ActionEvent event
					moveObject(DVector.new(0, 0, -1))
				end))
				button.setDesignerSelector("Button.MovementBackwards")
				button.setToolTip("Move object backwards by step width")
				p2.addWidget(button)
				
				button = Button.new(" ", BlockActionListener.new(block ActionEvent event
					moveObject(DVector.new(0, -1, 0))
				end))
				button.setDesignerSelector("Button.MovementDown")
				button.setToolTip("Move object down by step width")
				p2.addWidget(button)
				
				button = Button.new(" ", BlockActionListener.new(block ActionEvent event
					moveObject(DVector.new(1, 0, 0))
				end))
				button.setDesignerSelector("Button.MovementRight")
				button.setToolTip("Move object right by step width")
				p2.addWidget(button)
				
				comboBoxListModel = DefaultListModel.new()
				comboBoxListModel.setAutoSelect(false)
				comboBoxListModel.add("10")
				comboBoxListModel.add("1")
				comboBoxListModel.add("0.1")
				comboBoxListModel.add("0.01")
				comboBoxListModel.add("0.001")
				
				comboBox = ComboBox.new(comboBoxListModel, DefaultComboBoxEditor.new(\
					SessionSettings.get().getModelManualMovementStep(), 4))
				comboBox.setToolTip("Step width in meters for manual movement")
				p2.addWidget(comboBox)
			end))
			
			// manual rotation
			label = Label.new("Manual Rotate:", "Label.FormCaption")
			label.setToolTip("Manually rotate object by step angle")
			p.addWidget(label)
			
			p.addWidget(Panel.new(CentrizedBoxLayout.new(LayoutAxis.x, 2), block Panel p2
				button = Button.new(" ", BlockActionListener.new(block ActionEvent event
					rotateObject(Vector.new(1, 0, 0))
				end))
				button.setDesignerSelector("Button.RotationXPositive")
				button.setToolTip("Rotate object around positive X axis")
				p2.addWidget(button)
				
				button = Button.new(" ", BlockActionListener.new(block ActionEvent event
					rotateObject(Vector.new(-1, 0, 0))
				end))
				button.setDesignerSelector("Button.RotationXNegative")
				button.setToolTip("Rotate object around negative X axis")
				p2.addWidget(button)
				
				button = Button.new(" ", BlockActionListener.new(block ActionEvent event
					rotateObject(Vector.new(0, 1, 0))
				end))
				button.setDesignerSelector("Button.RotationYPositive")
				button.setToolTip("Rotate object around positive Y axis")
				p2.addWidget(button)
				
				button = Button.new(" ", BlockActionListener.new(block ActionEvent event
					rotateObject(Vector.new(0, -1, 0))
				end))
				button.setDesignerSelector("Button.RotationYNegative")
				button.setToolTip("Rotate object negative Y axis")
				p2.addWidget(button)
				
				button = Button.new(" ", BlockActionListener.new(block ActionEvent event
					rotateObject(Vector.new(0, 0, 1))
				end))
				button.setDesignerSelector("Button.RotationZPositive")
				button.setToolTip("Rotate object around positive Z axis")
				p2.addWidget(button)
				
				button = Button.new(" ", BlockActionListener.new(block ActionEvent event
					rotateObject(Vector.new(0, 0, -1))
				end))
				button.setDesignerSelector("Button.RotationZNegative")
				button.setToolTip("Rotate object around negative Z axis")
				p2.addWidget(button)
				
				comboBoxListModel = DefaultListModel.new()
				comboBoxListModel.setAutoSelect(false)
				comboBoxListModel.add("90")
				comboBoxListModel.add("45")
				comboBoxListModel.add("30")
				comboBoxListModel.add("15")
				comboBoxListModel.add("10")
				comboBoxListModel.add("5")
				comboBoxListModel.add("1")
				comboBoxListModel.add("0.1")
				
				comboBox = ComboBox.new(comboBoxListModel, DefaultComboBoxEditor.new(\
					SessionSettings.get().getModelManualRotationStep(), 4))
				comboBox.setToolTip("Step width in meters for manual rotation")
				p2.addWidget(comboBox)
			end))
		end))
		
		pPanelBehaviors = Panel.new(FlowLayout.new(LayoutAxis.y, 2))
		addWidget(pPanelBehaviors)
	end
end
