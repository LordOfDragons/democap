/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Gui

pin Democap.Actors
pin Democap.Actions
pin Democap.Behaviors
pin Democap.Characters
pin Democap.Worlds

pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events
pin Dragengine.Preloading
pin Dragengine.Scenery



/**
 * Main window project panel.
 */
class WMPanelProject extends CollapsibleGroup
	/** Game changes listener. */
	class GameChangedListener extends DefaultGameListener
		protected var WMPanelProject pPanel
		
		public func new(WMPanelProject panel)
			pPanel = panel
		end
		
		public func void projectChanged(GameApp app)
			pPanel.setProject(app.getProject())
		end
		
		public func void sceneChanged(GameApp app)
			pPanel.setScene(app.getScene())
		end
		
		public func void gameWorldChanged(GameApp app)
			pPanel.updateModelObjects()
		end
	end
	
	
	
	/** Scenes changed listener. */
	class ScenesChangedListener extends DefaultScenesListener
		protected var WMPanelProject pPanel
		
		public func new(WMPanelProject panel)
			pPanel = panel
		end
		
		public func void sceneAdded(Scenes scenes, Scene scene)
			pPanel.updateModelScenes()
		end
		
		public func void sceneRemoved(Scenes scenes, Scene scene)
			pPanel.updateModelScenes()
		end
		
		public func void allScenesRemoved(Scenes scenes)
			pPanel.updateModelScenes()
		end
	end
	
	/** Scene list element renderer. */
	class SceneListElementRenderer extends DefaultListElementRenderer
		public func new()
			setDefaultMinimumSize(Point.new(50, 10))
		end
		
		public func void updateRenderer(ListBox listBox, Widget renderer, Object element, bool selected, bool focused)
			var String text = ""
			if element != null
				text = (element cast Scene).getName()
			end
			super.updateRenderer(listBox, renderer, text, selected, focused)
		end
	end
	
	/** Scene selection listener. */
	class SelectScene extends DefaultListModelListener
		protected var WMPanelProject pPanel
		
		public func new(WMPanelProject panel)
			pPanel = panel
		end
		
		public func void contentChanged(ListModel model, int fromIndex, int toIndex)
			selectionChanged(model)
		end
		
		public func void selectionChanged(ListModel model)
			if not pPanel.preventUpdate
				var int index = model.getSelected()
				if index != -1
					GameApp.getGameApp().setScene(model.getAt(index) cast Scene)
				end
			end
		end
	end
	
	/** Scene changed listener. */
	class SceneChangedListener extends DefaultSceneListener
		protected var WMPanelProject pPanel
		
		public func new(WMPanelProject panel)
			pPanel = panel
		end
		
		public func void sceneNameChanged(Scene scene)
			pPanel.updateModelScenes()
		end
		
		public func void objectAdded(Scene scene, ECBSceneObject.Instance object)
			pPanel.updateModelObjects()
		end
		
		public func void objectRemoved(Scene scene, ECBSceneObject.Instance object)
			pPanel.updateModelObjects()
		end
		
		public func void allObjectsRemoved(Scene scene)
			pPanel.updateModelObjects()
		end
		
		public func void objectNameChanged(Scene scene, ECBSceneObject.Instance object)
			pPanel.updateModelObjects()
		end
		
		public func void objectGeometryChanged(Scene scene, ECBSceneObject.Instance object)
			if object == pPanel.getObject()
				pPanel.updateObject()
			end
		end
		
		public func void objectParameterChanged(Scene scene, ECBSceneObject.Instance object)
			if object == pPanel.getObject()
				pPanel.updateObject()
			end
		end
	end
	
	/** Scene popup menu. */
	class ScenePopupAction extends DefaultActionListener
		protected var WMPanelProject pPanel
		
		public func new(WMPanelProject panel)
			pPanel = panel
		end
		
		public func void onAction(ActionEvent event)
			var Widget widget = event.getSource() cast Widget
			var WindowPopup popup = WindowPopup.new()
			var Button button
			
			button = Button.new("Add...", BlockActionListener.new(block ActionEvent event
				popup.popdown()
				pPanel.addScene()
			end))
			popup.addWidget(button)
			
			button = Button.new("Duplicate...", BlockActionListener.new(block ActionEvent event
				popup.popdown()
				pPanel.duplicateScene()
			end))
			popup.addWidget(button)
			
			button = Button.new("Rename...", BlockActionListener.new(block ActionEvent event
				popup.popdown()
				pPanel.renameScene()
			end))
			popup.addWidget(button)
			
			button = Button.new("Remove...", BlockActionListener.new(block ActionEvent event
				popup.popdown()
				pPanel.removeScene()
			end))
			popup.addWidget(button)
			
			pPanel.getDesktop().addWindow(popup)
			popup.popup(widget.getDesktopPosition() + Point.new(0, widget.getHeight()))
		end
	end
	
	
	
	/** Loadable world list element renderer. */
	class LoadableWorldRenderer extends DefaultListElementRenderer
		public func new()
			setDefaultMinimumSize(Point.new(50, 10))
		end
		
		public func void updateRenderer(ListBox listBox, Widget renderer, Object element, bool selected, bool focused)
			var String text = ""
			if element != null
				text = (element cast LoadableWorld).getName()
			end
			super.updateRenderer(listBox, renderer, text, selected, focused)
		end
	end
	
	/** Loadable worlds listener. */
	class ListenLoadableWorlds extends DefaultLoadableWorldsListener
		protected var WMPanelProject pPanel
		
		public func new(WMPanelProject panel)
			pPanel = panel
		end
		
		public func void worldAdded(LoadableWorlds worlds, LoadableWorld world)
			pPanel.updateModelLoadableWorlds()
		end
		
		public func void worldRemoved(LoadableWorlds worlds, LoadableWorld world)
			pPanel.updateModelLoadableWorlds()
		end
		
		public func void allWorldsRemoved(LoadableWorlds worlds)
			pPanel.updateModelLoadableWorlds()
		end
	end
	
	/** Loadable world popup menu. */
	class LoadableWorldPopupAction extends DefaultActionListener
		protected var WMPanelProject pPanel
		
		public func new(WMPanelProject panel)
			pPanel = panel
		end
		
		public func void onAction(ActionEvent event)
			var Widget widget = event.getSource() cast Widget
			var WindowPopup popup = WindowPopup.new()
			var Button button
			
			button = Button.new("Activate World", BlockActionListener.new(block ActionEvent event
				popup.popdown()
				pPanel.activateWorld()
			end))
			popup.addWidget(button)
			
			button = Button.new("Browse Worlds...", BlockActionListener.new(block ActionEvent event
				popup.popdown()
				pPanel.browseLoadableWorlds()
			end))
			popup.addWidget(button)
			
			pPanel.getDesktop().addWindow(popup)
			popup.popup(widget.getDesktopPosition() + Point.new(0, widget.getHeight()))
		end
	end
	
	
	
	/** Object element renderer. */
	class ObjectElementRenderer extends DefaultListElementRenderer
		public func new()
			setDefaultMinimumSize(Point.new(80, 20))
		end
		
		public func void updateRenderer(ListBox listBox, Widget renderer, Object element, bool selected, bool focused)
			var String text = ""
			if element != null
				text = (element cast ECBSceneObject.Instance).getDisplayName()
			end
			super.updateRenderer(listBox, renderer, text, selected, focused)
		end
	end
	
	/** Select object listener. */
	class SelectObject extends DefaultListModelListener
		protected var WMPanelProject pWindow
		
		public func new(WMPanelProject window)
			pWindow = window
		end
		
		public func void contentChanged(ListModel model, int fromIndex, int toIndex)
			selectionChanged(model)
		end
		
		public func void selectionChanged(ListModel model)
			var int index = model.getSelected()
			if index != -1
				pWindow.setObject(model.getAt(index) cast ECBSceneObject.Instance)
				
			else
				pWindow.setObject(null)
			end
		end
	end
	
	/** Selected selectable object changed. */
	class SelectedSelectableObjectChanged extends ECBSelectable.Tracker.DefaultListener
		protected var WMPanelProject pPanel
		
		public func new(WMPanelProject panel)
			pPanel = panel
		end
		
		public func void selectedElementChanged(ECBSelectable.Tracker tracker)
			if tracker.getElement() == null
				pPanel.getModelObjects().setSelected(-1)
				return
			end
			
			var ECBSceneObject.Instance sceneObject = ECBSceneObject.getInstanceIn(tracker.getElement().getElement())
			if sceneObject == null
				pPanel.getModelObjects().setSelected(-1)
				return
			end
			
			pPanel.getModelObjects().setSelected(pPanel.getModelObjects().indexOf(sceneObject))
		end
	end
	
	/** Object popup menu. */
	class ObjectPopupAction extends DefaultActionListener
		private var WMPanelProject pPanel
		
		public func new(WMPanelProject panel)
			pPanel = panel
		end
		
		public func void onAction(ActionEvent event)
			var Widget widget = event.getSource() cast Widget
			var WindowPopup popup = WindowPopup.new()
			var Button button
			
			button = Button.new("Add...", BlockActionListener.new(block ActionEvent event
				popup.popdown()
				pPanel.addObject()
			end))
			popup.addWidget(button)
			button.setToolTip("Add scene object")
			
			button = Button.new("Duplicate", BlockActionListener.new(block ActionEvent event
				popup.popdown()
				pPanel.duplicateObject()
			end))
			popup.addWidget(button)
			button.setToolTip("Add scene object")
			
			button = Button.new("Remove", BlockActionListener.new(block ActionEvent event
				popup.popdown()
				pPanel.removeObject()
			end))
			popup.addWidget(button)
			button.setToolTip("Remove scene object")
			
			button = Button.new("Rename...", BlockActionListener.new(block ActionEvent event
				popup.popdown()
				pPanel.renameObject()
			end))
			popup.addWidget(button)
			button.setToolTip("Rename scene object")
			
			button = Button.new("Browse Objects...", BlockActionListener.new(block ActionEvent event
				popup.popdown()
				pPanel.browseObjects()
			end))
			popup.addWidget(button)
			
			pPanel.getDesktop().addWindow(popup)
			popup.popup(widget.getDesktopPosition() + Point.new(0, widget.getHeight()))
		end
	end
	
	/** Object position changed. */
	class ObjectPositionChanged implements ActionListener
		private var WMPanelProject pPanel
		private var EditVector pEditVector
		
		public func new(WMPanelProject panel, EditVector editVector)
			pPanel = panel
			pEditVector = editVector
		end
		
		public func void onAction(ActionEvent event)
			var ECBSceneObject.Instance object = pPanel.getObject()
			if object != null and not pEditVector.isEqualTo(object.getElement().getPosition().toVector())
				object.getElement().setPosition(DVector.new(pEditVector.getVector()))
			end
		end
	end
	
	/** Object rotation changed. */
	class ObjectRotationChanged implements ActionListener
		private var WMPanelProject pPanel
		private var EditVector pEditVector
		
		public func new(WMPanelProject panel, EditVector editVector)
			pPanel = panel
			pEditVector = editVector
		end
		
		public func void onAction(ActionEvent event)
			var ECBSceneObject.Instance object = pPanel.getObject()
			if object != null and not pEditVector.isEqualTo(object.getElement().getOrientation().getEulerAngles())
				object.getElement().setOrientation(Quaternion.newFromEuler(pEditVector.getVector()))
			end
		end
	end
	
	
	
	public var bool preventUpdate
	
	protected var DefaultListModel pModelScenes
	protected var DefaultListModel pModelLoadableWorlds
	protected var DefaultListModel pModelObjects
	protected var DefaultTextModel pModelObjectClass
	protected var EditVector pEditObjectPosition
	protected var EditVector pEditObjectRotation
	protected var ECBSceneObject.Instance pObject
	protected var bool pInVR
	protected var Project pProject
	protected var Scene pScene
	protected var ScenesChangedListener pScenesChangedListener
	protected var SceneChangedListener pSceneChangedListener
	protected var SelectedSelectableObjectChanged pSelectedSelectableObjectChanged
	protected var Panel pPanelBehaviors
	
	
	
	/** Create panel. */
	public func new(bool inVR) super("Project", CollapsibleGroup.persistModel(prefixUIOptions(inVR)))
		pInVR = inVR
		
		pModelScenes = DefaultListModel.new()
		pModelScenes.setAutoSelect(false)
		pModelLoadableWorlds = DefaultListModel.new()
		
		pModelObjects = DefaultListModel.new()
		pModelObjects.setAutoSelect(false)
		
		pModelObjectClass = DefaultTextModel.new("")
		
		getPanelContent().runWhileBlockingLayout(block
			createContent(getPanelContent())
		end)
		
		GameApp.getGameApp().getLoadableWorlds().addListener(ListenLoadableWorlds.new(this))
		updateModelLoadableWorlds()
		
		pModelScenes.addListener(SelectScene.new(this))
		pModelObjects.addListener(SelectObject.new(this))
		
		pScenesChangedListener = ScenesChangedListener.new(this)
		pSceneChangedListener = SceneChangedListener.new(this)
		pSelectedSelectableObjectChanged = SelectedSelectableObjectChanged.new(this)
		GameApp.getGameApp().addListener(GameChangedListener.new(this))
		GameApp.getGameApp().getSelectionTracker().addListener(pSelectedSelectableObjectChanged)
	end
	
	/** Dispose of widget. */
	public func void dispose()
		GameApp.getGameApp().getSelectionTracker().removeListener(pSelectedSelectableObjectChanged)
		
		setObject(null)
		setScene(null)
		setProject(null)
		
		pSelectedSelectableObjectChanged = null
		pSceneChangedListener = null
		pScenesChangedListener = null
		pModelObjectClass = null
		pModelObjects = null
		pModelLoadableWorlds = null
		pModelScenes = null
		pEditObjectPosition = null
		pEditObjectRotation = null
		pPanelBehaviors = null
		
		super.dispose()
	end
	
	/** UI options prefix. */
	static public func String prefixUIOptions(bool inVR)
		return inVR if "UI/VR/WMPanelProject" else "UI/WMPanelProject"
	end
	
	
	
	/** Shown in VR. */
	public func bool getInVR()
		return pInVR
	end
	
	/** Scene objects model. */
	public func DefaultListModel getModelObjects()
		return pModelObjects
	end
	
	
	
	/** Active project or null. */
	public func Project getProject()
		return pProject
	end
	
	/** Set active project or null. */
	public func void setProject(Project project)
		if project == pProject
			return
		end
		
		setScene(null)
		
		if pProject != null and pProject.getScenes() != null // dispose protection
			pProject.getScenes().removeListener(pScenesChangedListener)
		end
		
		pProject = project
		
		if project != null
			project.getScenes().addListener(pScenesChangedListener)
		end
		
		updateModelScenes()
	end
	
	
	
	/** Update scenes model. */
	public func void updateModelScenes()
		var Array content = Array.new()
		if GameApp.getGameApp().getProject() != null
			content = GameApp.getGameApp().getProject().getScenes().toArray()
		end
		
		preventUpdate = true
		try
			pModelScenes.setSelected(-1)
			pModelScenes.setContent(content)
			
		catch Exception e
			preventUpdate = false
			throw
		end
		preventUpdate = false
		
		selectScene()
	end
	
	/** Select scene. */
	public func void selectScene()
		pModelScenes.setSelected(pModelScenes.indexOf(GameApp.getGameApp().getScene()))
	end
	
	/** Active scene or null. */
	public func Scene getScene()
		return pScene
	end
	
	/** Set active scene or null. */
	public func void setScene(Scene scene)
		if scene == pScene
			return
		end
		
		if pScene != null
			pScene.removeListener(pSceneChangedListener)
		end
		
		pScene = scene
		
		if scene != null
			scene.addListener(pSceneChangedListener)
		end
		
		selectScene()
		updateModelObjects()
		
		if scene != null
			var Object world = pModelLoadableWorlds.find(block LoadableWorld each
				return each.getPath().equals(scene.getPathWorld())
			end)
			if world != null
				pModelLoadableWorlds.setSelected(pModelLoadableWorlds.indexOf(world))
			end
		end
	end
	
	/** Add scene. */
	public func void addScene()
		var LoadableWorld world = getLoadableWorld()
		if world == null
			return
		end
		
		WindowDialog.input(getWindow(), "Add Scene", "Name:", null, "Scene",\
		null, null, WindowDialog.BlockResultListener.new(block String result
			if result != null
				if result.empty()
					WindowDialog.message(getWindow(), "Add Scene", "Scene name can not be empty.", null, null, null)
					
				elif pProject.getScenes().hasNamed(result)
					WindowDialog.message(getWindow(), "Add Scene", "Scene with this name exists already.", null, null, null)
					
				else
					var Scene scene = Scene.new(result)
					scene.setPathWorld(world.getPath())
					pProject.getScenes().add(scene)
					GameApp.getGameApp().setScene(scene)
				end
			end
		end))
	end
	
	/** Duplicate scene. */
	public func void duplicateScene()
		if pScene == null
			return
		end
		
		WindowDialog.input(getWindow(), "Duplicate Scene", "Name:", null, pScene.getName(),\
		null, null, WindowDialog.BlockResultListener.new(block String result
			if result != null
				if result.empty()
					WindowDialog.message(getWindow(), "Duplicate Scene", "Scene name can not be empty.", null, null, null)
					
				elif pProject.getScenes().hasNamed(result)
					WindowDialog.message(getWindow(), "Duplicate Scene", "Scene with this name exists already.", null, null, null)
					
				else
					var Scene scene = Scene.new(result, pScene)
					pProject.getScenes().add(scene)
					GameApp.getGameApp().setScene(scene)
				end
			end
		end))
	end
	
	/** Remove scene. */
	public func void removeScene()
		if pScene == null
			return
		end
		
		if pProject.getScenes().getCount() == 1
			WindowDialog.message(getWindow(), "Remove Scene", "You can not remove the last scene.", null, null, null)
			return
		end
		
		WindowDialog.question(getWindow(), "Remove Scene", "Remove Scene '"\
			+ pScene.getName() + "'?", null, Array.newWith(\
				WindowDialog.ButtonConfiguration.new("Remove", true),\
				WindowDialog.ButtonConfiguration.new("Cancel", false)),\
			WindowDialog.BlockResultListener.new(block bool result
				if result
					var Scene scene = pScene
					var int index = pModelScenes.indexOf(scene)
					if index < pModelScenes.getCount() - 1
						index++
						
					else
						index--
					end
					GameApp.getGameApp().setScene(pModelScenes.getAt(index) cast Scene)
					pProject.getScenes().remove(scene)
				end
		end))
	end
	
	/** Rename scene. */
	public func void renameScene()
		if pScene == null
			return
		end
		
		WindowDialog.input(getWindow(), "Rename Scene", "Name:", null, pScene.getName(),\
		null, null, WindowDialog.BlockResultListener.new(block String result
			if result != null and not result.equals(pScene.getName())
				if result.empty()
					WindowDialog.message(getWindow(), "Rename Scene", "Scene name can not be empty.", null, null, null)
					
				elif pProject.getScenes().hasNamed(result)
					WindowDialog.message(getWindow(), "Rename Scene", "Scene with this name exists already.", null, null, null)
					
				else
					pScene.setName(result)
				end
			end
		end))
	end
	
	
	
	/** Selected loadable world or null. */
	public func LoadableWorld getLoadableWorld()
		if pModelLoadableWorlds.getSelected() == -1
			return null
		end
		return pModelLoadableWorlds.getAt(pModelLoadableWorlds.getSelected()) cast LoadableWorld
	end
	
	/** Update loadable worlds model. */
	public func void updateModelLoadableWorlds()
		var LoadableWorld world = getLoadableWorld()
		
		pModelLoadableWorlds.setContent(GameApp.getGameApp().getLoadableWorlds().toArray().sorted())
		
		var int index = pModelLoadableWorlds.indexOf(world)
		if index != -1
			pModelLoadableWorlds.setSelected(index)
			pModelLoadableWorlds.notifyContentChanged(index, index)
		end
	end
	
	/** Browse loadable worlds in overlay directory. */
	public func void browseLoadableWorlds()
		FileSystem.browseOverlay(GameApp.getGameApp().getLoadableWorlds().getDirectory())
	end
	
	/** Activate world. */
	public func void activateWorld()
		var GameApp app = GameApp.getGameApp()
		var LoadableWorld world = getLoadableWorld()
		if pScene == null or world == null or app.getGameWorldLoader() != null
			return
		end
		
		// dispose game world. this removes scene objects and clears held file usages
		app.getWorldSpawnCharacter().setGameWorld(null)
		app.getWindowGameWorld().setGameWorld(null)
		
		// drop saved state
		pScene.dropSaveState()
		
		// set new path and load world
		pScene.setPathWorld(world.getPath())
		pScene.loadWorld()
	end
	
	
	
	/** Selected object or null. */
	public func ECBSceneObject.Instance getObject()
		return pObject
	end
	
	/** Set selected object or null. */
	public func void setObject(ECBSceneObject.Instance object)
		if object == pObject
			return
		end
		
		pPanelBehaviors.removeAllWidgets()
		
		pObject = object
		
		var ECBSelectable.Instance selectable
		if object != null
			selectable = ECBSelectable.getInstanceIn(object.getElement())
			if selectable != null
				GameApp.getGameApp().getSelectionTracker().setElement(selectable)
			end
		end
		
		if object != null
			var bool noBehaviors = object.getECBehavior().editPanelNoBehaviors.getValue()
			var bool noPhysics = object.getECBehavior().editPanelNoPhysics.getValue()
			
			if not noBehaviors
				pPanelBehaviors.runWhileBlockingLayout(block
					(object.getElement() cast BehaviorElement).forEachInstance(block ECBehaviorInstance each
						if each castable ECBehaviorComponent.Instance
							pPanelBehaviors.addWidget(WMPSOComponent.new(this, each cast ECBehaviorComponent.Instance))
							
						elif each castable ECBehaviorCollider.Instance
							if not noPhysics
								pPanelBehaviors.addWidget(WMPSOCollider.new(this, each cast ECBehaviorCollider.Instance))
							end
							
						elif each castable ECBShowInteractHandles.Instance
							pPanelBehaviors.addWidget(WMPSOShowInteractHandles.new(this, each cast ECBShowInteractHandles.Instance))
							
						elif each castable ECBehaviorCustomColor.Instance
							pPanelBehaviors.addWidget(WMPSOCustomColor.new(this, each cast ECBehaviorCustomColor.Instance))
							
						elif each castable ECBCapturedAnimations.Instance
							pPanelBehaviors.addWidget(WMPSOCapturedAnimations.new(this, each cast ECBCapturedAnimations.Instance))
						end
					end)
				end)
				pPanelBehaviors.doLayoutIfBlocked()
			end
		end
		
		updateObject()
	end
	
	/** Update objects model. */
	public func void updateModelObjects()
		if pModelObjects == null
			return // dispose protection
		end
		
		var ECBSceneObject.Instance selection = pObject
		
		var Array content = Array.new()
		
		var GameWorld gameWorld = GameApp.getGameApp().getWindowGameWorld().getGameWorld()
		if gameWorld != null
			gameWorld.forEachElement(block BehaviorElement each
				if each castable BehaviorElement
					var ECBSceneObject.Instance sceneObject = ECBSceneObject.getInstanceIn(each cast BehaviorElement)
					if sceneObject != null
						content.add(sceneObject)
					end
				end
			end)
		end
		
		content.sort(block ECBSceneObject.Instance a, ECBSceneObject.Instance b
			return a.getDisplayName().compare(b.getDisplayName())
		end)
		
		pModelObjects.setContent(content)
		
		var int index = pModelObjects.indexOf(selection)
		if index != -1
			pModelObjects.setSelected(index)
			pModelObjects.notifyContentChanged(index, index)
		end
	end
	
	/** Update object. */
	public func void updateObject()
		if pObject != null
			var BehaviorElement element = pObject.getElement()
			pModelObjectClass.setText(element.getClass().getClassname())
			pEditObjectPosition.setVector(element.getPosition().toVector())
			pEditObjectRotation.setVector(element.getOrientation().getEulerAngles())
			
			pPanelBehaviors.forEachWidget(block WMPPanelSceneObject each
				each.updateBehavior()
			end)
			
		else
			pModelObjectClass.setText("")
			pEditObjectPosition.setVector(Vector.new())
			pEditObjectRotation.setVector(Vector.new())
		end
	end
	
	/** Add object. */
	public func void addObject()
		if pScene == null
			return
		end
		
		var GameWorld gameWorld = GameApp.getGameApp().getWindowGameWorld().getGameWorld()
		if gameWorld == null
			return
		end
		
		var ElementClassList eclist = GameApp.getGameApp().getECListSceneObjects()
		var DefaultListModel model = DefaultListModel.new()
		eclist.forEach(block ElementClass each
			model.add(each.getClassname())
		end)
		model.sort()
		
		WindowDialog.chooseList(getWindow(), "Add Scene Object", "Object Class:", null, model,\
			DefaultListElementRenderer.new(String.new('X', 30)),\
			WindowDialog.ButtonConfiguration.new("Add Object"),\
			WindowDialog.ButtonConfiguration.new("Cancel"),\
			WindowDialog.BlockResultListener.new(block int result
				if result != -1
					var String cname = model.getAt(result) cast String
					var BehaviorElementClass eclass = eclist.getNamed(cname) cast BehaviorElementClass
					var ECBSceneObject sceneObject = ECBSceneObject.getBehaviorIn(eclass)
					var StubElement stub = StubElement.new(eclass)
					
					if eclass.getPersistable()
						stub.setID(GameApp.getGameApp().getIDGenerator().nextID())
					end
					
					var DMatrix matrix = DMatrix.newTranslation(DVector.new(sceneObject.addActorOffset.getVector()))
					var BaseVRActor actor = GameApp.getGameApp().getWorldSpawnCharacter().getActor()
					if actor != null
						matrix = matrix * actor.getElementMatrix()
					end
					
					stub.setPosition(matrix.getPosition())
					stub.setRotation(matrix.getEulerAngles().toVector())
					
					if not sceneObject.runSceneObjectStubInitializers(stub, getWindow())
						return null
					end
					
					var BehaviorElement element = stub.createElement() cast BehaviorElement
					gameWorld.addElement(element)
					ECBSelectable.getInstanceIn(element).selectElement()
				end
		end))
	end
	
	/** Duplicate object. */
	public func void duplicateObject()
		var GameWorld gameWorld = GameApp.getGameApp().getWindowGameWorld().getGameWorld()
		if pObject == null or pScene == null or gameWorld == null
			return
		end
		
		var StubElement stub = StubElement.new(pObject.getElement().getStub())
		var BehaviorElementClass eclass = stub.getClass() cast BehaviorElementClass
		var ECBSceneObject sceneObject = ECBSceneObject.getBehaviorIn(eclass)
		
		if eclass.getPersistable()
			stub.setID(GameApp.getGameApp().getIDGenerator().nextID())
		end
		
		var DMatrix matrix = pObject.getElement().getElementMatrix() * DMatrix.newTranslation(1, 0, 1)
		stub.setPosition(matrix.getPosition())
		stub.setRotation(matrix.getEulerAngles().toVector())
		
		if not sceneObject.runSceneObjectStubInitializers(stub, getWindow())
			return
		end
		
		var BehaviorElement element = stub.createElement() cast BehaviorElement
		gameWorld.addElement(element)
		ECBSelectable.getInstanceIn(element).selectElement()
	end
	
	/** Remove object. */
	public func void removeObject()
		if pObject == null
			return
		end
		
		if not pObject.getECBehavior().canRemove.getValue()
			WindowDialog.message(getWindow(), "Remove Scene Object",\
				"Scene objects of type " + pObject.getElement().getClass().getClassname()\
					+ " can not be removed.", null, null, null)
			return
		end
		
		WindowDialog.question(getWindow(), "Remove Scene Object", "Remove Scene Object '"\
			+ pObject.getDisplayName() + "'?", null, Array.newWith(\
				WindowDialog.ButtonConfiguration.new("Remove", true),\
				WindowDialog.ButtonConfiguration.new("Cancel", false)),\
			WindowDialog.BlockResultListener.new(block bool result
				if result
					pObject.getElement().safeDispose()
				end
		end))
	end
	
	/** Rename object. */
	public func void renameObject()
		if pObject == null
			return
		end
		
		WindowDialog.input(getWindow(), "Rename Scene Object", "Name:", null, pObject.getName(),\
		null, null, WindowDialog.BlockResultListener.new(block String result
			if result != null
				pObject.getElement().getStub().setPropertyValueFor(pObject.getECBehavior().name.getName(), result)
				pObject.setName(result)
			end
		end))
	end
	
	/** Browse objects in overlay directory. */
	public func void browseObjects()
		FileSystem.browseOverlay(GameApp.getGameApp().getPathObjects())
	end
	
	
	
	/** Behavior panel matching prefix UI options value or null. */
	public func WMPPanelSceneObject getBehaviorPanelWith(String prefix)
		return pPanelBehaviors.findWidget(block WMPPanelSceneObject each
			return each.getPrefixUIOptions().equals(prefix)
		end) cast WMPPanelSceneObject
	end
	
	
	
	/** Create panel content. */
	protected func void createContent(Panel content)
		var TextField textField
		var Button button
		
		content.setLayout(FlowLayout.new(LayoutAxis.y, 2))
		
		content.addWidget(Panel.new(FormLayout.new(true, 5, 2), block Panel p
			p.addWidget(Label.new("Scene:", "Label.FormCaption"))
			p.addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 1, FlowLayout.Stretch.first), block Panel p2
				p2.addWidget(ComboBox.new(pModelScenes, SceneListElementRenderer.new()))
				
				button = Button.new("...", ScenePopupAction.new(this))
				button.setDesignerSelector("Button.Popup")
				p2.addWidget(button)
			end))
			
			p.addWidget(Label.new("World:", "Label.FormCaption"))
			p.addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 1, FlowLayout.Stretch.first), block Panel p2
				p2.addWidget(ComboBox.new(pModelLoadableWorlds, LoadableWorldRenderer.new()))
				
				button = Button.new("...", LoadableWorldPopupAction.new(this))
				button.setDesignerSelector("Button.Popup")
				p2.addWidget(button)
			end))
			
			p.addWidget(Label.new("Object:", "Label.FormCaption"))
			p.addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 1, FlowLayout.Stretch.first), block Panel p2
				p2.addWidget(ComboBox.new(pModelObjects, ObjectElementRenderer.new()))
				
				button = Button.new("...", ObjectPopupAction.new(this))
				button.setDesignerSelector("Button.Popup")
				p2.addWidget(button)
			end))
			
			p.addWidget(Label.new("Class:", "Label.FormCaption"))
			textField = TextField.new(pModelObjectClass, true)
			textField.setToolTip("Object class. Defines behaviors shown below")
			p.addWidget(textField)
			
			p.addWidget(Label.new("Position:", "Label.FormCaption"))
			pEditObjectPosition = EditVector.new(3)
			pEditObjectPosition.setToolTip("Object position")
			p.addWidget(pEditObjectPosition)
			pEditObjectPosition.addActionListener(ObjectPositionChanged.new(this, pEditObjectPosition))
			
			p.addWidget(Label.new("Rotation:", "Label.FormCaption"))
			pEditObjectRotation = EditVector.new(1)
			pEditObjectRotation.setToolTip("Object rotation in euler angles")
			p.addWidget(pEditObjectRotation)
			pEditObjectRotation.addActionListener(ObjectRotationChanged.new(this, pEditObjectRotation))
		end))
		
		pPanelBehaviors = Panel.new(FlowLayout.new(LayoutAxis.y, 2))
		content.addWidget(pPanelBehaviors)
	end
end
