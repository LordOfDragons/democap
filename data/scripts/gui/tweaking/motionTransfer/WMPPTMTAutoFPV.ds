/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2023, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Gui

pin Democap.Behaviors
pin Democap.Characters
pin Democap.MotionTransferSystem

pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events
pin Dragengine.Scenery


/**
 * Tweak panel motion transfer.
 */
class WMPPTMTAutoFPV extends WMPPMotionTransfer
	class ReachScalingArmRightChanged implements ActionListener
		protected var WMPPTMTAutoFPV pPanel
		
		public func new(WMPPTMTAutoFPV panel)
			pPanel = panel
		end
		
		public func void onAction(ActionEvent event)
			pPanel.onReachScalingArmRightChanged()
		end
	end
	
	class ReachScalingArmRightBackChanged implements ActionListener
		protected var WMPPTMTAutoFPV pPanel
		
		public func new(WMPPTMTAutoFPV panel)
			pPanel = panel
		end
		
		public func void onAction(ActionEvent event)
			pPanel.onReachScalingArmRightBackChanged()
		end
	end
	
	class ReachScalingArmLeftChanged implements ActionListener
		protected var WMPPTMTAutoFPV pPanel
		
		public func new(WMPPTMTAutoFPV panel)
			pPanel = panel
		end
		
		public func void onAction(ActionEvent event)
			pPanel.onReachScalingArmLeftChanged()
		end
	end
	
	class ReachScalingArmLeftBackChanged implements ActionListener
		protected var WMPPTMTAutoFPV pPanel
		
		public func new(WMPPTMTAutoFPV panel)
			pPanel = panel
		end
		
		public func void onAction(ActionEvent event)
			pPanel.onReachScalingArmLeftBackChanged()
		end
	end
	
	
	
	
	private var WMPPTweakValue pEditReachScalingArmRightX
	private var WMPPTweakValue pEditReachScalingArmRightY
	private var WMPPTweakValue pEditReachScalingArmRightZ
	private var WMPPTweakValue pEditReachScalingArmRightBackX
	private var WMPPTweakValue pEditReachScalingArmRightBackY
	private var WMPPTweakValue pEditReachScalingArmRightBackZ
	private var WMPPTweakValue pEditReachScalingArmLeftX
	private var WMPPTweakValue pEditReachScalingArmLeftY
	private var WMPPTweakValue pEditReachScalingArmLeftZ
	private var WMPPTweakValue pEditReachScalingArmLeftBackX
	private var WMPPTweakValue pEditReachScalingArmLeftBackY
	private var WMPPTweakValue pEditReachScalingArmLeftBackZ
	
	
	
	/** Create panel. */
	public func new(WMPPanelTweaking panelTweaking) super(panelTweaking)
		runWhileBlockingLayout(block
			createContent()
		end)
	end
	
	/** Dispose of panel. */
	public func void dispose()
		pEditReachScalingArmRightX = null
		pEditReachScalingArmRightY = null
		pEditReachScalingArmRightZ = null
		pEditReachScalingArmRightBackX = null
		pEditReachScalingArmRightBackY = null
		pEditReachScalingArmRightBackZ = null
		pEditReachScalingArmLeftX = null
		pEditReachScalingArmLeftY = null
		pEditReachScalingArmLeftZ = null
		pEditReachScalingArmLeftBackX = null
		pEditReachScalingArmLeftBackY = null
		pEditReachScalingArmLeftBackZ = null
		super.dispose()
	end
	
	
	
	public func void onTweaked()
		if pMotionTransfer == null
			return
		end
		
		runWhileBlockingLayout(block
			var MotionTransferAutoFPV mt = pMotionTransfer cast MotionTransferAutoFPV
			
			var Vector v = mt.getReachScalingArmRight()
			pEditReachScalingArmRightX.setValue(v.getX())
			pEditReachScalingArmRightY.setValue(v.getY())
			pEditReachScalingArmRightZ.setValue(v.getZ())
			
			v = mt.getReachScalingArmRightBack()
			pEditReachScalingArmRightBackX.setValue(v.getX())
			pEditReachScalingArmRightBackY.setValue(v.getY())
			pEditReachScalingArmRightBackZ.setValue(v.getZ())
			
			v = mt.getReachScalingArmLeft()
			pEditReachScalingArmLeftX.setValue(v.getX())
			pEditReachScalingArmLeftY.setValue(v.getY())
			pEditReachScalingArmLeftZ.setValue(v.getZ())
			
			v = mt.getReachScalingArmLeftBack()
			pEditReachScalingArmLeftBackX.setValue(v.getX())
			pEditReachScalingArmLeftBackY.setValue(v.getY())
			pEditReachScalingArmLeftBackZ.setValue(v.getZ())
		end)
		doLayoutIfBlocked()
	end
	
	public func void onReachScalingArmRightChanged()
		var MotionTransferAutoFPV mt = pMotionTransfer cast MotionTransferAutoFPV
		if mt != null
			var Vector v = Vector.new(pEditReachScalingArmRightX.getValue(),\
				pEditReachScalingArmRightY.getValue(), pEditReachScalingArmRightZ.getValue())
			if not mt.getReachScalingArmRight().equals(v)
				mt.setReachScalingArmRight(v)
				mt.tweaked()
				pPanelTweaking.notifyCharacterTweaked()
			end
		end
	end
	
	public func void onReachScalingArmRightBackChanged()
		var MotionTransferAutoFPV mt = pMotionTransfer cast MotionTransferAutoFPV
		if mt != null
			var Vector v = Vector.new(pEditReachScalingArmRightBackX.getValue(),\
				pEditReachScalingArmRightBackY.getValue(), pEditReachScalingArmRightBackZ.getValue())
			if not mt.getReachScalingArmRightBack().equals(v)
				mt.setReachScalingArmRightBack(v)
				mt.tweaked()
				pPanelTweaking.notifyCharacterTweaked()
			end
		end
	end
	
	public func void onReachScalingArmLeftChanged()
		var MotionTransferAutoFPV mt = pMotionTransfer cast MotionTransferAutoFPV
		if mt != null
			var Vector v = Vector.new(pEditReachScalingArmLeftX.getValue(),\
				pEditReachScalingArmLeftY.getValue(), pEditReachScalingArmLeftZ.getValue())
			if not mt.getReachScalingArmLeft().equals(v)
				mt.setReachScalingArmLeft(v)
				mt.tweaked()
				pPanelTweaking.notifyCharacterTweaked()
			end
		end
	end
	
	public func void onReachScalingArmLeftBackChanged()
		var MotionTransferAutoFPV mt = pMotionTransfer cast MotionTransferAutoFPV
		if mt != null
			var Vector v = Vector.new(pEditReachScalingArmLeftBackX.getValue(),\
				pEditReachScalingArmLeftBackY.getValue(), pEditReachScalingArmLeftBackZ.getValue())
			if not mt.getReachScalingArmLeftBack().equals(v)
				mt.setReachScalingArmLeftBack(v)
				mt.tweaked()
				pPanelTweaking.notifyCharacterTweaked()
			end
		end
	end
	
	/** Supports motion transfer type. */
	public func bool supports(MotionTransfer motionTranfer)
		return motionTranfer castable MotionTransferAutoFPV
	end
	
	
	
	/** Create window content. */
	protected func void createContent()
		var Label label
		var String toolTip
		
		// right arm reach scaling
		var ReachScalingArmRightChanged actionAR = ReachScalingArmRightChanged.new(this)
		toolTip = "Right arm scale reach along axis"
		
		label = Label.new("Reach Scaling", "Label.FormCaption")
		label.setToolTip(toolTip)
		addWidget(label)
		
		label = Label.new("Right Arm:", "Label.FormCaption")
		label.setToolTip(toolTip)
		addWidget(label)
		
		
		label = Label.new("Right:", "Label.FormCaption")
		label.setToolTip(toolTip)
		addWidget(label)
		
		pEditReachScalingArmRightX = WMPPTweakValue.new(4, 0.001, 0.01, 0.1, actionAR)
		addWidget(pEditReachScalingArmRightX)
		
		label = Label.new("Down:", "Label.FormCaption")
		label.setToolTip(toolTip)
		addWidget(label)
		
		pEditReachScalingArmRightY = WMPPTweakValue.new(4, 0.001, 0.01, 0.1, actionAR)
		addWidget(pEditReachScalingArmRightY)
		
		label = Label.new("Front:", "Label.FormCaption")
		label.setToolTip(toolTip)
		addWidget(label)
		
		pEditReachScalingArmRightZ = WMPPTweakValue.new(4, 0.001, 0.01, 0.1, actionAR)
		addWidget(pEditReachScalingArmRightZ)
		
		
		var ReachScalingArmRightBackChanged actionARB = ReachScalingArmRightBackChanged.new(this)
		
		label = Label.new("Left:", "Label.FormCaption")
		label.setToolTip(toolTip)
		addWidget(label)
		
		pEditReachScalingArmRightBackX = WMPPTweakValue.new(4, 0.001, 0.01, 0.1, actionARB)
		addWidget(pEditReachScalingArmRightBackX)
		
		label = Label.new("Up:", "Label.FormCaption")
		label.setToolTip(toolTip)
		addWidget(label)
		
		pEditReachScalingArmRightBackY = WMPPTweakValue.new(4, 0.001, 0.01, 0.1, actionARB)
		addWidget(pEditReachScalingArmRightBackY)
		
		label = Label.new("Back:", "Label.FormCaption")
		label.setToolTip(toolTip)
		addWidget(label)
		
		pEditReachScalingArmRightBackZ = WMPPTweakValue.new(4, 0.001, 0.01, 0.1, actionARB)
		addWidget(pEditReachScalingArmRightBackZ)
		
		
		// left arm reach scaling
		var ReachScalingArmLeftChanged actionAL = ReachScalingArmLeftChanged.new(this)
		toolTip = "Left arm scale reach along axis"
		
		label = Label.new("Reach Scaling", "Label.FormCaption")
		label.setToolTip(toolTip)
		addWidget(label)
		
		label = Label.new("Left Arm:", "Label.FormCaption")
		label.setToolTip(toolTip)
		addWidget(label)
		
		
		label = Label.new("Left:", "Label.FormCaption")
		label.setToolTip(toolTip)
		addWidget(label)
		
		pEditReachScalingArmLeftX = WMPPTweakValue.new(4, 0.001, 0.01, 0.1, actionAL)
		addWidget(pEditReachScalingArmLeftX)
		
		label = Label.new("Down:", "Label.FormCaption")
		label.setToolTip(toolTip)
		addWidget(label)
		
		pEditReachScalingArmLeftY = WMPPTweakValue.new(4, 0.001, 0.01, 0.1, actionAL)
		addWidget(pEditReachScalingArmLeftY)
		
		label = Label.new("Front:", "Label.FormCaption")
		label.setToolTip(toolTip)
		addWidget(label)
		
		pEditReachScalingArmLeftZ = WMPPTweakValue.new(4, 0.001, 0.01, 0.1, actionAL)
		addWidget(pEditReachScalingArmLeftZ)
		
		
		var ReachScalingArmLeftBackChanged actionALB = ReachScalingArmLeftBackChanged.new(this)
		
		label = Label.new("Right:", "Label.FormCaption")
		label.setToolTip(toolTip)
		addWidget(label)
		
		pEditReachScalingArmLeftBackX = WMPPTweakValue.new(4, 0.001, 0.01, 0.1, actionALB)
		addWidget(pEditReachScalingArmLeftBackX)
		
		label = Label.new("Up:", "Label.FormCaption")
		label.setToolTip(toolTip)
		addWidget(label)
		
		pEditReachScalingArmLeftBackY = WMPPTweakValue.new(4, 0.001, 0.01, 0.1, actionALB)
		addWidget(pEditReachScalingArmLeftBackY)
		
		label = Label.new("Back:", "Label.FormCaption")
		label.setToolTip(toolTip)
		addWidget(label)
		
		pEditReachScalingArmLeftBackZ = WMPPTweakValue.new(4, 0.001, 0.01, 0.1, actionALB)
		addWidget(pEditReachScalingArmLeftBackZ)
	end
end
