/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Gui

pin Democap.Behaviors
pin Democap.Characters
pin Democap.Elements

pin Dragengine.CameraDirectors
pin Dragengine.Gui.Designers
pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events
pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils.StyledText.Definition
pin Dragengine.Utils.StyledText.Definition.Nodes


/**
 * Character preview renderer widget.
 */
class WidgetCharacterPreview extends Panel
	interface Listener
		func void characterReloaded(WidgetCharacterPreview widget)
	end
	
	class PreviewPreloader implements ResourceListener
		var PreloadCounter pPreloadCounter
		
		public var String pathModel, pathSkin, pathRig, pathAnimation
		public var Model model
		public var Skin skin
		public var Rig rig
		public var Animation animation
		
		func new()
			pPreloadCounter = PreloadCounter.new()
		end
		
		func bool finished()
			return pPreloadCounter.isZero()
		end
		
		func void preload()
			if not pathModel.empty()
				pPreloadCounter.increase()
				Model.loadAsynchron(pathModel, this)
			end
			
			if not pathSkin.empty()
				pPreloadCounter.increase()
				Skin.loadAsynchron(pathSkin, this)
			end
			
			if not pathRig.empty()
				pPreloadCounter.increase()
				Rig.loadAsynchron(pathRig, this)
			end
			
			if not pathAnimation.empty()
				pPreloadCounter.increase()
				Animation.loadAsynchron(pathAnimation, this)
			end
		end
		
		func void finishedLoading(String filename, ResourceLoaderType resourceType, Object resource)
			if resourceType == ResourceLoaderType.model and filename.equals(pathModel)
				model = resource cast Model
				pPreloadCounter.decrease()
			end
			
			if resourceType == ResourceLoaderType.skin and filename.equals(pathSkin)
				skin = resource cast Skin
				pPreloadCounter.decrease()
			end
			
			if resourceType == ResourceLoaderType.rig and filename.equals(pathRig)
				rig = resource cast Rig
				pPreloadCounter.decrease()
			end
			
			if resourceType == ResourceLoaderType.animation and filename.equals(pathAnimation)
				animation = resource cast Animation
				pPreloadCounter.decrease()
			end
		end
		
		func void failedLoading(String filename, ResourceLoaderType resourceType)
			GameApp.getGameApp().getConsole().addMessage("PreviewPreloader: Failed loading "\
				+ resourceType.name() + " '" + filename)
			if resourceType == ResourceLoaderType.model and filename.equals(pathModel)
				pPreloadCounter.decrease()
			end
			if resourceType == ResourceLoaderType.skin and filename.equals(pathSkin)
				pPreloadCounter.decrease()
			end
			if resourceType == ResourceLoaderType.rig and filename.equals(pathRig)
				pPreloadCounter.decrease()
			end
			if resourceType == ResourceLoaderType.animation and filename.equals(pathAnimation)
				pPreloadCounter.decrease()
			end
		end
	end
	
	class ShowHelpClicked extends ClickedActionListener
		var Widget pWidget
		
		func new(Widget widget)
			pWidget = widget
		end
		
		func void onAction()
			WindowDialog.message(pWidget.getWindow(), "@UI.Navigation",\
				"@UI.Message.WidgetCharacterPreview.Help", null, null, null)
		end
	end
	
	class HitResult
		var Object pObject
		var float pDistance
		var DVector pHitPoint
		
		func new(Object object, float distance, DVector hitPoint)
			pObject = object
			pDistance = distance
			pHitPoint = hitPoint
		end
		
		func Object getObject()
			return pObject
		end
		
		func float getDistance()
			return pDistance
		end
		
		func DVector getHitPoint()
			return pHitPoint
		end
		
		func int compare(Object obj)
			if obj castable HitResult
				return pDistance.compare((obj cast HitResult).pDistance)
				
			else
				return 0
			end
		end
	end
	
	class CollectHits implements ColliderListener
		var Array pHits
		var DVector pRayOrigin
		var DVector pRayDirection
		
		func new(Array hits, DVector rayOrigin, Vector rayDirection)
			pHits = hits
			pRayOrigin = rayOrigin
			pRayDirection = DVector.new(rayDirection)
		end
		
		func bool canHitCollider(Collider owner, Collider collider)
			return true
		end
		
		func void collisionResponse(Collider owner, CollisionInfo info)
			var Collider collider = info.getCollider()
			if collider != null and collider.getOwner() != null
				pHits.add(HitResult.new(collider.getOwner(), info.getDistance(),\
					pRayOrigin + pRayDirection * info.getDistance()))
			end
		end
		
		func void colliderChanged(Collider owner)
		end
	end
	
	
	
	var WorldRenderer pWorldRenderer
	var PanelHud pPanelHud
	var GameWorld pGameWorld
	var ElementCameraDirector pCameraDirector
	var PreviewPreloader pPreviewPreloader
	var BehaviorElementClass pCharacterPreviewClass
	var BehaviorElement pCharacterPreview
	var BehaviorElement pLoadingCharacter
	var Array pListeners
	var ECBPreviewDataQuery.DataQuery pDataQuery
	
	var String pPathModel
	var String pPathSkin
	var String pPathRig
	var String pPathAnimation
	var Vector pBoneAxisRotation
	var float pScale
	
	var CharacterPreviewEditor pEditor
	
	
	
	/** Create widget. */
	func new()
		pPathModel = ""
		pPathSkin = ""
		pPathRig = ""
		pPathAnimation = ""
		pBoneAxisRotation = Vector.new()
		pScale = 1
		pListeners = Array.new()
		pCharacterPreviewClass = GameApp.getGameApp().getElementClassList()\
			.getNamed("CharacterPreview") cast BehaviorElementClass
		
		runWhileBlockingLayout(block
			createContent()
		end)
		
		createLoadingCharacter()
		reloadCharacterPreview()
		startFrameUpdater()
	end
	
	/** Dispose of widget. */
	func void dispose()
		pListeners = null
		
		setEditor(null)
		stopFrameUpdater()
		
		if pCharacterPreview != null
			pCharacterPreview.safeDispose()
			pCharacterPreview = null
		end
		if pLoadingCharacter != null
			pLoadingCharacter.safeDispose()
			pLoadingCharacter = null
		end
		
		pWorldRenderer = null
		pPanelHud = null
		pPreviewPreloader = null
		pDataQuery = null
		
		if pGameWorld != null
			pGameWorld.dispose()
		end
		
		super.dispose()
	end
	
	
	
	/** Data query or null. */
	func ECBPreviewDataQuery.DataQuery getDataQuery()
		return pDataQuery
	end
	
	/** Set data query or null. */
	func void setDataQuery(ECBPreviewDataQuery.DataQuery dataQuery)
		pDataQuery = dataQuery
	end
	
	/** Set model path. */
	func void setPathModel(String path)
		pPathModel = path
	end
	
	/** Set path skin. */
	func void setPathSkin(String path)
		pPathSkin = path
	end
	
	/** Set path rig. */
	func void setPathRig(String path)
		pPathRig = path
	end
	
	/** Set path animation. */
	func void setPathAnimation(String path)
		pPathAnimation = path
	end
	
	/** Set bone orientation rotation. */
	func void setBoneAxisRotation(Vector rotation)
		pBoneAxisRotation = rotation
	end
	
	/** Set scale. */
	func void setScale(float scale)
		pScale = DEMath.max(scale, 0.001)
	end
	
	/** Reload character preview. */
	func void reloadCharacterPreview()
		if pCharacterPreview != null
			pCharacterPreview.safeDispose()
			pCharacterPreview = null
		end
		pLoadingCharacter.setVisible(true)
		
		pPreviewPreloader = PreviewPreloader.new()
		pPreviewPreloader.pathModel = pPathModel
		pPreviewPreloader.pathSkin = pPathSkin
		pPreviewPreloader.pathRig = pPathRig
		pPreviewPreloader.pathAnimation = pPathAnimation
		pPreviewPreloader.preload()
	end
	
	
	
	/** World renderer. */
	func WorldRenderer getWorldRenderer()
		return pWorldRenderer
	end
	
	/** Game world. */
	func GameWorld getGameWorld()
		return pGameWorld
	end
	
	/** Camera director. */
	func ElementCameraDirector getCameraDirector()
		return pCameraDirector
	end
	
	/** Character preview element class. */
	func BehaviorElementClass getCharacterPreviewClass()
		return pCharacterPreviewClass
	end
	
	/** Character preview element or null. */
	func BehaviorElement getCharacterPreview()
		return pCharacterPreview
	end
	
	/** Editor or null. */
	func CharacterPreviewEditor getEditor()
		return pEditor
	end
	
	/** Set editor or null. */
	func void setEditor(CharacterPreviewEditor editor)
		if editor == pEditor
			return
		end
		
		if pEditor != null
			pEditor.onDeactivate()
		end
		
		pEditor = editor
		
		if editor != null
			editor.onActivate()
			
		else
			clearEditorChanges()
		end
	end
	
	/** Top most panel to add interaction listeners to. */
	func Panel getInteractionPanel()
		return pPanelHud
	end
	
	
	
	/** Ray direction. */
	func Vector viewRayDirection(Point point)
		return pWorldRenderer.backProject(point)
	end
	
	/** Detect collisions along view direction. Stores sorted HitResult into list. */
	func void viewRayCollisions(Array list)
		viewRayCollisions(list, getDesktop().getMouseLocation() - pWorldRenderer.getDesktopPosition())
	end
	
	/** Detect collisions along view direction. Stores sorted HitResult into list. */
	func void viewRayCollisions(Array list, Point point)
		var CollisionFilter collisionFilter = CollisionFilter.new(LayerMask.newWith(0))
		var DVector rayOrigin = pCameraDirector.getCamera().getPosition()
		var Vector rayDirection = pWorldRenderer.backProject(point) * 100
		var CollectHits listener = CollectHits.new(list, rayOrigin, rayDirection)
		
		pGameWorld.getWorld().rayHits(rayOrigin, rayDirection, listener, collisionFilter)
		list.sort()
	end
	
	/** Set tool tip. */
	func void setToolTip(Object toolTip)
		pPanelHud.getCenter().setToolTip(toolTip)
	end
	
	
	
	/** Add listener. */
	func void addListener(Listener listener)
		pListeners.add(listener)
	end
	
	/** Remove listener. */
	func void removeListener(Listener listener)
		pListeners.remove(listener)
	end
	
	
	
	/** Frame update. */
	func void onFrameUpdate(float elapsed)
		// if preloading create preview character is finished
		if pPreviewPreloader != null and pPreviewPreloader.finished()
			createPreviewCharacter()
			pPreviewPreloader = null
			
			pListeners.forEach(block Listener each
				each.characterReloaded(this)
			end)
		end
		
		// editor frame updates
		if pEditor != null
			pEditor.onFrameUpdate(elapsed)
		end
		
		// regular game updates
		pCameraDirector.update(elapsed)
		pGameWorld.update(elapsed)
	end
	
	/**
	 * Create styled text definition for tool tip.
	 * 
	 * Adds styles:
	 * - "default": Default text using "Label.WindowToolTip" widget designer as base
	 * - "selected": Based on "default" using red color
	 * - "chain": Based on "default" using cyan color
	 * 
	 * Default style is "default"
	 */
	func StyledTextDefinition createToolTipStyledTextDefinition()
		var StyledTextDefinition std = StyledTextDefinition.new()
		var GuiTheme guiTheme = getGuiTheme()
		
		// page width indicates the maximum width to use before breaking words.
		// here we use a huge size to avoid line breaking
		std.setPageSize(Point.new(300, 100000))
		
		var STDStyle baseStyle = STDStyle.new("default", (guiTheme.getWidgetDesigner("Label.WindowToolTip") \
			cast DefaultLabelDesigner).getLabelDesignNormal())
		std.addStyle(baseStyle)
		std.setDefaultStyle(baseStyle)
		
		var STDStyle styleSelected = STDStyle.new("selected", baseStyle)
		styleSelected.setTextColor(CharacterPreviewEditor.previewBoneColorSelected)
		std.addStyle(styleSelected)
		
		var STDStyle styleChain = STDStyle.new("chain", baseStyle)
		styleChain.setTextColor(CharacterPreviewEditor.previewBoneColorChain)
		std.addStyle(styleChain)
		
		var STDStyle styleChainEnd = STDStyle.new("chainEnd", baseStyle)
		styleChainEnd.setTextColor(CharacterPreviewEditor.previewBoneColorEnd)
		std.addStyle(styleChainEnd)
		
		return std
	end
	
	
	
	/** Create widget content. */
	protected func void createContent()
		var DisplayImage image
		
		pGameWorld = GameWorld.new()
		
		var SkyInstance sky = SkyInstance.new()
		sky.setSky(GameApp.getGameApp().getLoaders().getSky().loadFromFile("/content/skies/static.desky"))
		pGameWorld.getWorld().addSky(sky)
		
		// TODO add a ground/background model to root the model
		
		var Camera camera = Camera.new()
		pGameWorld.getWorld().addCamera(camera)
		
		pCameraDirector = ElementCameraDirector.new(pCharacterPreview, camera, null)
		GameApp.getGameApp().getLoaders().getCamera().loadFromFile("/content/camera/preview.decam", pCameraDirector)
		pCameraDirector.setPivot(DVector.new(0, 0.9, 0))
		pCameraDirector.setDistance(2)
		pCameraDirector.setAzimuth(180)
		pCameraDirector.update(0)
		pCameraDirector.initCameraParameters()
		
		setLayout(StackLayout.new())
		pWorldRenderer = WorldRenderer.new()
		pWorldRenderer.setCamera(camera)
		
		addWidget(pWorldRenderer)
		
		// add touch fields for vr use
		pPanelHud = PanelHud.new(block PanelHud p
			p.getRightCenter().setLayout(CentrizedBoxLayout.new(LayoutAxis.y))
			
			// the listeners are added to the panel and not the world renderer since the
			// panel covers the entire world renderer blocking clicks
			p.addMouseListener(RotateCameraMouseListener.new(\
				pCameraDirector, InputEventMouseButton.right, InputEventModifier.none))
			
			p.addMouseListener(PanCameraMouseListener.new(\
				pCameraDirector, InputEventMouseButton.right, InputEventModifier.shift))
			
			p.addMouseListener(ZoomCameraMouseListener.new(\
				pCameraDirector, InputEventMouseButton.right, InputEventModifier.control))
			
			image = DisplayImage.new(Image.new("/content/gui/images/icon_help_48.png"), "TouchField")
			image.addMouseListener(ShowHelpClicked.new(this))
			image.setToolTip("@UI.ToolTip.WidgetCharacterPreview.Help")
			p.getRightCenter().addWidget(image)
			
			image = DisplayImage.new(Image.new("/content/gui/images/icon_camera_zoom_48.png"), "TouchField")
			image.addMouseListener(ZoomCameraMouseListener.new(\
				pCameraDirector, InputEventMouseButton.left, InputEventModifier.none))
			image.setToolTip("@UI.ToolTip.WidgetCharacterPreview.Zoom")
			p.getRightCenter().addWidget(image)
			
			image = DisplayImage.new(Image.new("/content/gui/images/icon_camera_rotate_48.png"), "TouchField")
			image.addMouseListener(RotateCameraMouseListener.new(\
				pCameraDirector, InputEventMouseButton.left, InputEventModifier.none))
			image.setToolTip("@UI.ToolTip.WidgetCharacterPreview.Rotate")
			p.getRightCenter().addWidget(image)
			
			image = DisplayImage.new(Image.new("/content/gui/images/icon_camera_pan_48.png"), "TouchField")
			image.addMouseListener(PanCameraMouseListener.new(\
				pCameraDirector, InputEventMouseButton.left, InputEventModifier.none))
			image.setToolTip("@UI.ToolTip.WidgetCharacterPreview.Pan")
			p.getRightCenter().addWidget(image)
		end)
		addWidget(pPanelHud)
	end
	
	/** Create preview character. */
	protected func void createPreviewCharacter()
		pLoadingCharacter.setVisible(false)
		if pCharacterPreview != null
			pCharacterPreview.safeDispose()
			pCharacterPreview = null
		end
		
		var CodecPropertyString codec = pCharacterPreviewClass.getCodecPropertyString()
		var StubElement stub = StubElement.new(pCharacterPreviewClass)
		stub.setScaling(Vector.new(pScale, pScale, pScale))
		stub.setPropertyValueFor("component.model", pPreviewPreloader.pathModel)
		stub.setPropertyValueFor("component.skin", pPreviewPreloader.pathSkin)
		stub.setPropertyValueFor("component.rig", pPreviewPreloader.pathRig)
		stub.setPropertyValueFor("previewAnimation.animation", pPreviewPreloader.pathAnimation)
		stub.setPropertyValueFor("previewBones.axisRotation", codec.encodeVector(pBoneAxisRotation))
		
		try
			pCharacterPreview = stub.createElement() cast BehaviorElement
			
		catch Exception e
			GameApp.getGameApp().getConsole().addError("Create preview character failed", e)
			WindowDialog.message(getWindow(), "@UI.CreateCharacterPreviewFailed",\
				e.className().split('.').getAt(-1).toString() + "\n" + e.getReason(), null, null, null)
		end
		
		if pCharacterPreview != null
			pGameWorld.addElement(pCharacterPreview)
			
			var ECBPreviewDataQuery.Instance previewDataQuery = ECBPreviewDataQuery.getInstanceIn(pCharacterPreview)
			if previewDataQuery != null
				previewDataQuery.setDataQuery(pDataQuery)
			end
		end
		
		if pEditor != null
			pEditor.onDeactivate()
			pEditor.onActivate()
		end
	end
	
	/** Clear editor changes. */
	protected func void clearEditorChanges()
		if pCharacterPreview == null
			return
		end
		
		var ECBPreviewBones.Instance previewBones = ECBPreviewBones.getInstanceIn(pCharacterPreview)
		if previewBones != null
			previewBones.setAllBoneColor(CharacterPreviewEditor.previewBoneColorDefault)
		end
		
		setToolTip(null)
	end
	
	/** Create loading character. */
	protected func void createLoadingCharacter()
		var ElementClass eclass = GameApp.getGameApp().getElementClassList().getNamed("LoadingCharacter")
		var StubElement stub = StubElement.new(eclass)
		stub.setScaling(Vector.new(0.75, 0.75, 0.75))
		pLoadingCharacter = stub.createElement() cast BehaviorElement
		pGameWorld.addElement(pLoadingCharacter)
	end
end
