/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Gui

pin Democap.Actors
pin Democap.Actions
pin Democap.Characters

pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events
pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * Main window character panel.
 */
class WMPanelCharacter extends Panel
	/** Actor profile list element renderer. */
	class ActorProfileRenderer extends DefaultListElementRenderer
		func new()
		end
		
		func void updateRenderer(ListBox listBox, Widget renderer, Object element, bool selected, bool focused)
			var String text = String.new(' ', 20)
			if element != null
				text = (element cast ActorProfile).getName()
			end
			super.updateRenderer(listBox, renderer, text, selected, focused)
		end
	end
	
	/** Actor profile selection listener. */
	class ActorProfileSelection extends DefaultListModelListener
		protected var WMPanelCharacter pWindow
		
		func new(WMPanelCharacter window)
			pWindow = window
		end
		
		func void contentChanged(ListModel model, int fromIndex, int toIndex)
			selectionChanged(model)
		end
		
		func void selectionChanged(ListModel model)
			var int index = model.getSelected()
			if index != -1
				pWindow.setActorProfile(model.getAt(index) cast ActorProfile)
				
			else
				pWindow.setActorProfile(null)
			end
		end
	end
	
	/** Character profile list element renderer. */
	class CharacterProfileRenderer extends DefaultListElementRenderer
		func new()
			setDesignerSelector("Label.ListRenderer.CharacterSelection")
		end
		
		func void updateRenderer(ListBox listBox, Widget renderer, Object element, bool selected, bool focused)
			var CharacterProfile profile = element cast CharacterProfile
			var Label label = renderer cast Label
			var String selector = getDesignerSelector()
			
			if selected
				selector = selector + ".Selected"
			end
			if profile != null and not profile.getIsProject()
				selector = selector + ".Global"
			end
			
			label.setDesignerSelector(selector)
			
			if profile == null
				label.setText(String.new(' ', 20))
				
			else
				label.setText(profile.getName())
			end
		end
	end
	
	/** Character profile selection listener. */
	class CharacterProfileSelection extends DefaultListModelListener
		protected var WMPanelCharacter pWindow
		
		func new(WMPanelCharacter window)
			pWindow = window
		end
		
		func void contentChanged(ListModel model, int fromIndex, int toIndex)
			pWindow.updateCharacterConfigurations()
			selectionChanged(model)
		end
		
		func void selectionChanged(ListModel model)
			var int index = model.getSelected()
			if index != -1
				pWindow.setCharacterProfile(model.getAt(index) cast CharacterProfile)
				
			else
				pWindow.setCharacterProfile(null)
			end
		end
	end
	
	/** Character configuration list element renderer. */
	class CharacterConfigurationRenderer extends DefaultListElementRenderer
		func new()
		end
		
		func void updateRenderer(ListBox listBox, Widget renderer, Object element, bool selected, bool focused)
			var String text = String.new(' ', 20)
			if element != null
				text = (element cast CharacterConfiguration).getName()
			end
			super.updateRenderer(listBox, renderer, text, selected, focused)
		end
	end
	
	/** Character configuration selection listener. */
	class CharacterConfigurationSelection extends DefaultListModelListener
		protected var WMPanelCharacter pWindow
		
		func new(WMPanelCharacter window)
			pWindow = window
		end
		
		func void contentChanged(ListModel model, int fromIndex, int toIndex)
			selectionChanged(model)
		end
		
		func void selectionChanged(ListModel model)
			var int index = model.getSelected()
			if index != -1
				pWindow.setCharacterConfiguration(model.getAt(index) cast CharacterConfiguration)
				
			else
				pWindow.setCharacterConfiguration(null)
			end
		end
	end
	
	/** Actor profiles listener. */
	class ListenActorProfiles extends DefaultActorProfilesListener
		protected var WMPanelCharacter pWindow
		
		func new(WMPanelCharacter window)
			pWindow = window
		end
		
		func void profileAdded(ActorProfiles profiles, ActorProfile profile)
			pWindow.updateActorProfiles()
		end
		
		func void profileRemoved(ActorProfiles profiles, ActorProfile profile)
			pWindow.updateActorProfiles()
		end
		
		func void allProfilesRemoved(ActorProfiles profiles)
			pWindow.updateActorProfiles()
		end
	end
	
	/** Character profiles listener. */
	class ListenCharacterProfiles extends DefaultCharacterProfilesListener
		protected var WMPanelCharacter pWindow
		
		func new(WMPanelCharacter window)
			pWindow = window
		end
		
		func void profileAdded(CharacterProfiles profiles, CharacterProfile profile)
			pWindow.updateCharacterProfiles()
		end
		
		func void profileRemoved(CharacterProfiles profiles, CharacterProfile profile)
			pWindow.updateCharacterProfiles()
		end
		
		func void allProfilesRemoved(CharacterProfiles profiles)
			pWindow.updateCharacterProfiles()
		end
		
		func void loadingCharactersFinished(CharacterProfiles profiles)
			pWindow.onLoadingCharactersFinished()
		end
	end
	
	/** Character configurations listener. */
	class ListenCharacterConfigurations extends DefaultCharacterConfigurationsListener
		protected var WMPanelCharacter pWindow
		
		func new(WMPanelCharacter window)
			pWindow = window
		end
		
		func void configurationAdded(CharacterConfigurations configurations, CharacterConfiguration configuration)
			pWindow.updateCharacterConfigurations()
		end
		
		func void configurationRemoved(CharacterConfigurations configurations, CharacterConfiguration configuration)
			pWindow.updateCharacterConfigurations()
		end
		
		func void allConfigurationsRemoved(CharacterConfigurations configurations)
			pWindow.updateCharacterConfigurations()
		end
	end
	
	/** Actor profile popup menu. */
	class ActorProfilePopupAction extends DefaultActionListener
		var WMPanelCharacter pPanel
		
		func new(WMPanelCharacter panel)
			pPanel = panel
		end
		
		func void onAction(ActionEvent event)
			var bool inVR = pPanel.getInVR()
			var Widget widget = event.getSource() cast Widget
			var MenuPopup menu = MenuPopup.new()
			var MenuItemCommand item
			
			menu.addWidget(MenuItemCommand.new(Resources.add.get(inVR), "@UI.AddActor.Dialog", BlockActionListener.new(block ActionEvent event
				pPanel.addActorProfile()
			end)))
			
			menu.addWidget(MenuItemCommand.new(Resources.duplicate.get(inVR), "@UI.DuplicateActor.Dialog", BlockActionListener.new(block ActionEvent event
				pPanel.duplicateActorProfile()
			end)))
			
			item = MenuItemCommand.new(Resources.remove.get(inVR), "@UI.RemoveActor", BlockActionListener.new(block ActionEvent event
				pPanel.removeActorProfile()
			end))
			item.setEnabled(pPanel.getActorProfile() != null)
			menu.addWidget(item)
			
			menu.addWidget(MenuItemCommand.new(Resources.edit.get(inVR), "@UI.EditActor.Dialog", BlockActionListener.new(block ActionEvent event
				pPanel.editActorProfile()
			end)))
			
			menu.addWidget(MenuItemCommand.new(Resources.browse.get(inVR), "@UI.BrowseActors.Dialog", BlockActionListener.new(block ActionEvent event
				pPanel.browseActorProfiles()
			end)))
			
			pPanel.getDesktop().addWindow(menu)
			menu.popup(widget.getDesktopPosition() + Point.new(0, widget.getHeight()))
		end
	end
	
	/** Character profile popup menu. */
	class CharacterProfilePopupAction extends DefaultActionListener
		var WMPanelCharacter pPanel
		
		func new(WMPanelCharacter panel)
			pPanel = panel
		end
		
		func void onAction(ActionEvent event)
			var bool inVR = pPanel.getInVR()
			var Widget widget = event.getSource() cast Widget
			var MenuPopup menu = MenuPopup.new()
			var MenuItemCommand item
			
			menu.addWidget(MenuItemCommand.new(Resources.add.get(inVR), "@UI.AddCharacter.Dialog", BlockActionListener.new(block ActionEvent event
				pPanel.addCharacterProfile(true)
			end)))
			
			menu.addWidget(MenuItemCommand.new(Resources.add.get(inVR), "@UI.AddGlobalCharacter.Dialog", BlockActionListener.new(block ActionEvent event
				pPanel.addCharacterProfile(false)
			end)))
			
			menu.addWidget(MenuItemCommand.new(Resources.duplicate.get(inVR), "@UI.DuplicateCharacter.Dialog", BlockActionListener.new(block ActionEvent event
				pPanel.duplicateCharacterProfile()
			end)))
			
			item = MenuItemCommand.new(Resources.remove.get(inVR), "@UI.RemoveCharacter", BlockActionListener.new(block ActionEvent event
				pPanel.removeCharacterProfile()
			end))
			item.setEnabled(pPanel.getCharacterProfile() != null)
			menu.addWidget(item)
			
			menu.addWidget(MenuItemCommand.new(Resources.edit.get(inVR), "@UI.EditCharacter.Dialog", BlockActionListener.new(block ActionEvent event
				pPanel.editCharacterProfile()
			end)))
			
			menu.addWidget(MenuItemCommand.new(Resources.browse.get(inVR), "@UI.BrowseCharactersProject.Dialog", BlockActionListener.new(block ActionEvent event
				pPanel.browseProjectCharacterProfiles()
			end)))
			
			menu.addWidget(MenuItemCommand.new(Resources.browse.get(inVR), "@UI.BrowseCharactersGlobal.Dialog", BlockActionListener.new(block ActionEvent event
				pPanel.browseGlobalCharacterProfiles()
			end)))
			
			menu.addWidget(MenuItemCommand.new(Resources.browse.get(inVR), "@UI.BrowseModelsProject.Dialog", BlockActionListener.new(block ActionEvent event
				pPanel.browseProjectCharacterModels()
			end)))
			
			menu.addWidget(MenuItemCommand.new(Resources.browse.get(inVR), "@UI.BrowseModelsGlobal.Dialog", BlockActionListener.new(block ActionEvent event
				pPanel.browseGlobalCharacterModels()
			end)))
			
			pPanel.getDesktop().addWindow(menu)
			menu.popup(widget.getDesktopPosition() + Point.new(0, widget.getHeight()))
		end
	end
	
	/** Character configuration popup menu. */
	class CharacterConfigurationPopupAction extends DefaultActionListener
		var WMPanelCharacter pPanel
		
		func new(WMPanelCharacter panel)
			pPanel = panel
		end
		
		func void onAction(ActionEvent event)
			var bool inVR = pPanel.getInVR()
			var Widget widget = event.getSource() cast Widget
			var MenuPopup menu = MenuPopup.new()
			var MenuItemCommand item
			
			menu.addWidget(MenuItemCommand.new(Resources.add.get(inVR), "@UI.AddConfiguration.Dialog", BlockActionListener.new(block ActionEvent event
				pPanel.addCharacterConfiguration()
			end)))
			
			menu.addWidget(MenuItemCommand.new(Resources.duplicate.get(inVR), "@UI.DuplicateConfiguration.Dialog", BlockActionListener.new(block ActionEvent event
				pPanel.duplicateCharacterConfiguration()
			end)))
			
			item = MenuItemCommand.new(Resources.remove.get(inVR), "@UI.RemoveConfiguration", BlockActionListener.new(block ActionEvent event
				pPanel.removeCharacterConfiguration()
			end))
			item.setEnabled(pPanel.getCharacterProfile() != null)
			menu.addWidget(item)
			
			menu.addWidget(MenuItemCommand.new(Resources.edit.get(inVR), "@UI.EditConfiguration.Dialog", BlockActionListener.new(block ActionEvent event
				pPanel.editCharacterConfiguration()
			end)))
			
			pPanel.getDesktop().addWindow(menu)
			menu.popup(widget.getDesktopPosition() + Point.new(0, widget.getHeight()))
		end
	end
	
	/** Is calibrating changed. */
	class IsCalibratingChanged extends DefaultToggleModelListener
		var WMPanelCharacter pPanel
		
		func new(WMPanelCharacter panel)
			pPanel = panel
		end
		
		func void toggledChanged(ToggleModel model)
			pPanel.onIsCalibratingChanged()
		end
	end
	
	
	
	protected var DefaultListModel pModelActorProfiles, pModelCharacterProfiles, pModelCharacterConfigurations
	protected var ListenCharacterConfigurations pListenCharacterConfigurations
	protected var ListenActorProfiles pListenActorProfiles
	protected var ListenCharacterProfiles pListenCharacterProfiles
	protected var ActorProfile pActorProfile
	protected var CharacterProfile pCharacterProfile
	protected var CharacterConfiguration pCharacterConfiguration
	protected var bool pInVR
	protected var String pPrefixUIOptions
	protected var Button pButtonRecalibrate
	protected var IsCalibratingChanged pIsCalibratingChanged
	
	
	/** Create character panel. */
	func new(bool inVR, String prefixUIOptions)
		pInVR = inVR
		pPrefixUIOptions = prefixUIOptions + "/WMPanelCharacter"
		
		pModelActorProfiles = DefaultListModel.new()
		pModelCharacterProfiles = DefaultListModel.new()
		pModelCharacterConfigurations = DefaultListModel.new()
		pListenCharacterConfigurations = ListenCharacterConfigurations.new(this)
		
		runWhileBlockingLayout(block
			createContent()
		end)
		
		pModelActorProfiles.addListener(ActorProfileSelection.new(this))
		pModelCharacterProfiles.addListener(CharacterProfileSelection.new(this))
		pModelCharacterConfigurations.addListener(CharacterConfigurationSelection.new(this))
		
		pListenActorProfiles = ListenActorProfiles.new(this)
		GameApp.getGameApp().getActorProfiles().addListener(pListenActorProfiles)
		updateActorProfiles()
		
		pListenCharacterProfiles = ListenCharacterProfiles.new(this)
		GameApp.getGameApp().getCharacterProfiles().addListener(pListenCharacterProfiles)
		updateCharacterProfiles()
		
		pIsCalibratingChanged = IsCalibratingChanged.new(this)
		SessionState.get().getModelIsCalibrating().addListener(pIsCalibratingChanged)
	end
	
	/** Dispose of widget. */
	func void dispose()
		if pIsCalibratingChanged != null
			SessionState.get().getModelIsCalibrating().removeListener(pIsCalibratingChanged)
			pIsCalibratingChanged = null
		end
		
		setCharacterProfile(null)
		setActorProfile(null)
		
		pModelActorProfiles = pModelCharacterProfiles = pModelCharacterConfigurations = null
		pListenCharacterConfigurations = null
		
		if pListenActorProfiles != null
			GameApp.getGameApp().getActorProfiles().removeListener(pListenActorProfiles)
			pListenActorProfiles = null
		end
		
		if pListenCharacterProfiles != null
			GameApp.getGameApp().getCharacterProfiles().removeListener(pListenCharacterProfiles)
			pListenCharacterProfiles = null
		end
		
		pButtonRecalibrate = null
		
		super.dispose()
	end
	
	
	
	/** Shown in VR. */
	func bool getInVR()
		return pInVR
	end
	
	func String getPrefixUIOptions()
		return pPrefixUIOptions
	end
	
	/** After startup finished. */
	func void onLoadingCharactersFinished()
		if pModelCharacterProfiles.getCount() > 0
			pModelCharacterProfiles.setSelected(0)
		end
	end
	
	
	
	/** Selected actor profile or null. */
	func ActorProfile getActorProfile()
		return pActorProfile
	end
	
	/** Set selected actor profile or null. */
	func void setActorProfile(ActorProfile profile)
		if profile == pActorProfile
			return
		end
		
		pActorProfile = profile
	end
	
	/** Update actor profiles model. */
	func void updateActorProfiles()
		var ActorProfile profile = pActorProfile
		
		pModelActorProfiles.setContent(GameApp.getGameApp().getActorProfiles().toArray().sorted())
		
		var int index = pModelActorProfiles.indexOf(profile)
		if index != -1
			pModelActorProfiles.setSelected(index)
			pModelActorProfiles.notifyContentChanged(index, index)
		end
	end
	
	/** Add actor profile. */
	func void addActorProfile()
		WindowDialog.input(getWindow(), "@UI.AddActorProfile",\
			"@UI.ProfileName.Label", null, "Actor",\
			null, null, WindowDialog.BlockResultListener.new(block String result
				if result != null
					var ActorProfiles profiles = GameApp.getGameApp().getActorProfiles()
					
					if profiles.hasNamed(result)
						WindowDialog.message(getWindow(), "@UI.AddActorProfile",\
							TranslationManager.get().translate("UI.Message.DuplicateActorProfile")\
								.toUTF8().format(Array.newWith(result)), null, null, null)
						
					else
						var ActorProfile profile = ActorProfile.new(result)
						profile.save()
						profiles.add(profile)
						pModelActorProfiles.setSelected(pModelActorProfiles.indexOf(profile))
						editActorProfile()
					end
				end
			end))
	end
	
	/** Duplicate actor profile. */
	func void duplicateActorProfile()
		if pActorProfile == null
			return
		end
		
		WindowDialog.input(getWindow(), "@UI.DuplicateActorProfile",\
			"@UI.ProfileName.Label", null,\
			pActorProfile.getName(), null, null, WindowDialog.BlockResultListener.new(\
			block String result
				if result != null
					var ActorProfiles profiles = GameApp.getGameApp().getActorProfiles()
					
					if profiles.hasNamed(result)
						WindowDialog.message(getWindow(), "@UI.DuplicateActorProfile",\
							TranslationManager.get().translate("UI.Message.DuplicateActorProfile")\
								.toUTF8().format(Array.newWith(result)), null, null, null)
						
					else
						var ActorProfile profile = ActorProfile.new(result, pActorProfile)
						profile.setName(result)
						profile.save()
						profiles.add(profile)
						pModelActorProfiles.setSelected(pModelActorProfiles.indexOf(profile))
					end
				end
			end))
	end
	
	/** Remove actor profile. */
	func void removeActorProfile()
		if pActorProfile == null
			return
		end
		
		WindowDialog.question(getWindow(), "@UI.RemoveActorProfile",\
			TranslationManager.get().translate("UI.Message.AskRemoveActorProfile")\
				.toUTF8().format(Array.newWith(pActorProfile.getName())),\
			null, Array.newWith(WindowDialog.ButtonConfiguration.new("@UI.Remove", true), \
				WindowDialog.ButtonConfiguration.new("@UI.Cancel", false)),\
			WindowDialog.BlockResultListener.new(block bool result
				if result
					GameApp.getGameApp().getWorldSpawnCharacter().setCharacter(null)
					pActorProfile.delete()
					GameApp.getGameApp().getActorProfiles().remove(pActorProfile)
				end
			end))
	end
	
	/** Edit actor profile. */
	func void editActorProfile()
		if pActorProfile == null
			return
		end
		
		WindowActorProfile.new(getWindow(), pInVR, pActorProfile,\
			WindowDialog.BlockResultListener.new(block bool accepted
				updateActorProfiles()
			end))
	end
	
	/** Browse actor profiles in overlay directory. */
	func void browseActorProfiles()
		FileSystem.browseConfig(GameApp.getGameApp().getActorProfiles().getDirectory())
	end
	
	
	
	/** Selected character profile or null. */
	func CharacterProfile getCharacterProfile()
		return pCharacterProfile
	end
	
	/** Set selected character profile or null. */
	func void setCharacterProfile(CharacterProfile profile)
		if profile == pCharacterProfile
			return
		end
		
		if pCharacterProfile != null
			try
				pCharacterProfile.getConfigurations().removeListener(pListenCharacterConfigurations)
			catch Exception e
			end
		end
		
		pCharacterProfile = profile
		
		if profile != null
			profile.getConfigurations().addListener(pListenCharacterConfigurations)
		end
		
		updateCharacterConfigurations()
	end
	
	/** Update character profiles model. */
	func void updateCharacterProfiles()
		var CharacterProfile profile = pCharacterProfile
		
		pModelCharacterProfiles.setContent(GameApp.getGameApp().getCharacterProfiles().toArray().sorted())
		
		var int index = pModelCharacterProfiles.indexOf(profile)
		if index != -1
			pModelCharacterProfiles.setSelected(index)
		end
	end
	
	/** Add character profile. */
	func void addCharacterProfile(bool inProject)
		WindowDialog.input(getWindow(), "@UI.AddCharacterProfile",\
			"@UI.ProfileName.Label", null, "Character",\
			null, null, WindowDialog.BlockResultListener.new(block String result
				if result != null
					var CharacterProfiles profiles = GameApp.getGameApp().getCharacterProfiles()
					
					if profiles.hasNamed(result)
						WindowDialog.message(getWindow(), "@UI.AddCharacterProfile",\
							TranslationManager.get().translate("UI.Message.DuplicateCharacterProfile")\
								.toUTF8().format(Array.newWith(result)), null, null, null)
						
					else
						var CharacterProfile profile = CharacterProfile.new(result)
						profile.setIsProject(inProject)
						profile.save()
						profiles.add(profile)
						pModelCharacterProfiles.setSelected(pModelCharacterProfiles.indexOf(profile))
						editCharacterProfile()
					end
				end
			end))
	end
	
	/** Duplicate character profile. */
	func void duplicateCharacterProfile()
		if pCharacterProfile == null
			return
		end
		
		WindowDialog.input(getWindow(), "@UI.DuplicateCharacterProfile",\
			"@UI.ProfileName.Label",\
			null, pCharacterProfile.getName(), null, null, WindowDialog.BlockResultListener.new(\
			block String result
				if result != null
					var CharacterProfiles profiles = GameApp.getGameApp().getCharacterProfiles()
					
					if profiles.hasNamed(result)
						WindowDialog.message(getWindow(), "@UI.DuplicateCharacterProfile",\
							TranslationManager.get().translate("UI.Message.DuplicateCharacterProfile")\
								.toUTF8().format(Array.newWith(result)), null, null, null)
						
					else
						var CharacterProfile profile = CharacterProfile.new(result, pCharacterProfile)
						profile.setName(result)
						profile.save()
						profiles.add(profile)
						pModelCharacterProfiles.setSelected(pModelCharacterProfiles.indexOf(profile))
					end
				end
			end))
	end
	
	/** Remove character profile. */
	func void removeCharacterProfile()
		if pCharacterProfile == null
			return
		end
		
		WindowDialog.question(getWindow(), "@UI.RemoveCharacterProfile",\
			TranslationManager.get().translate("UI.Message.AskRemoveCharacterProfile")\
				.toUTF8().format(Array.newWith(pCharacterProfile.getName())),\
			null, Array.newWith(WindowDialog.ButtonConfiguration.new("@UI.Remove", true), \
				WindowDialog.ButtonConfiguration.new("@UI.Cancel", false)),\
			WindowDialog.BlockResultListener.new(block bool result
				if result
					GameApp.getGameApp().getWorldSpawnCharacter().setCharacter(null)
					pCharacterProfile.delete()
					GameApp.getGameApp().getCharacterProfiles().remove(pCharacterProfile)
				end
			end))
	end
	
	/** Edit character profile. */
	func void editCharacterProfile()
		if pCharacterProfile != null
			WindowCharacterProfile.new(getWindow(), pInVR, pCharacterProfile,\
				WindowDialog.BlockResultListener.new(block bool accepted
					updateCharacterProfiles()
				end))
		end
	end
	
	/** Browse character profiles. */
	func void browseProjectCharacterProfiles()
		FileSystem.browseConfig(GameApp.getGameApp().getProject().getCharactersDirectory().toString())
	end
	
	func void browseGlobalCharacterProfiles()
		FileSystem.browseConfig("/config/characters")
	end
	
	/** Browse character models. */
	func void browseProjectCharacterModels()
		FileSystem.browseConfig((GameApp.getGameApp().getProject().getDataDirectory() + "/models/characters").toString())
	end
	
	func void browseGlobalCharacterModels()
		FileSystem.browseOverlay("/content/models/characters")
	end
	
	
	
	/** Selected character configuration or null. */
	func CharacterConfiguration getCharacterConfiguration()
		return pCharacterConfiguration
	end
	
	/** Set selected character configuration or null. */
	func void setCharacterConfiguration(CharacterConfiguration configuration)
		if configuration == pCharacterConfiguration
			return
		end
		
		pCharacterConfiguration = configuration
	end
	
	/** Selected character configuration or null. */
	func CharacterConfiguration getSelectedCharacterConfiguration()
		var int index = pModelCharacterConfigurations.getSelected()
		if index != -1
			return pModelCharacterConfigurations.getAt(index) cast CharacterConfiguration
		end
		return null
	end
	
	/** Update character configurations model. */
	func void updateCharacterConfigurations()
		var CharacterConfiguration selected = getSelectedCharacterConfiguration()
		
		if pCharacterProfile != null
			pModelCharacterConfigurations.setContent(pCharacterProfile.getConfigurations().toArray().sorted())
			
		else
			pModelCharacterConfigurations.removeAll()
		end
		
		var int index = pModelCharacterConfigurations.indexOf(selected)
		if index != -1
			pModelCharacterConfigurations.setSelected(index)
		end
	end
	
	/** Add character configuration. */
	func void addCharacterConfiguration()
		if pCharacterProfile == null
			return
		end
		
		WindowDialog.input(getWindow(), "@UI.AddCharacterConfiguration",\
			"@UI.ConfigurationName.Label", null, "Configuration",\
			null, null, WindowDialog.BlockResultListener.new(block String result
				if result != null
					var CharacterConfigurations configurations = pCharacterProfile.getConfigurations()
					
					if configurations.hasNamed(result)
						WindowDialog.message(getWindow(), "@UI.AddCharacterConfiguration",\
							TranslationManager.get().translate("UI.Message.DuplicateCharacterConfiguration")\
								.toUTF8().format(Array.newWith(result)), null, null, null)
						
					else
						var CharacterConfiguration configuration = CharacterConfiguration.new(pCharacterProfile, result)
						configurations.add(configuration)
						pCharacterProfile.save()
						pModelCharacterConfigurations.setSelected(pModelCharacterConfigurations.indexOf(configuration))
						editCharacterConfiguration()
					end
				end
			end))
	end
	
	/** Duplicate character configuration. */
	func void duplicateCharacterConfiguration()
		if pCharacterConfiguration == null or pCharacterProfile == null
			return
		end
		
		WindowDialog.input(getWindow(), "@UI.DuplicateCharacterConfiguration",\
			"@UI.ConfigurationName.Label", null, pCharacterConfiguration.getName(), null, null,\
			WindowDialog.BlockResultListener.new(block String result
				if result != null
					var CharacterConfigurations configurations = pCharacterProfile.getConfigurations()
					
					if configurations.hasNamed(result)
						WindowDialog.message(getWindow(), "@UI.DuplicateCharacterConfiguration",\
							TranslationManager.get().translate("UI.Message.DuplicateCharacterConfiguration")\
								.toUTF8().format(Array.newWith(result)), null, null, null)
						
					else
						var CharacterConfiguration configuration = CharacterConfiguration.new(\
							pCharacterProfile, result, pCharacterConfiguration)
						configuration.setName(result)
						configurations.add(configuration)
						pCharacterProfile.save()
						pModelCharacterConfigurations.setSelected(pModelCharacterConfigurations.indexOf(configuration))
					end
				end
			end))
	end
	
	/** Remove character configuration. */
	func void removeCharacterConfiguration()
		if pCharacterConfiguration == null or pCharacterProfile == null
			return
		end
		
		WindowDialog.question(getWindow(), "@UI.RemoveCharacterConfiguration",\
			TranslationManager.get().translate("UI.Message.AskRemoveCharacterConfiguration")\
				.toUTF8().format(Array.newWith(pCharacterConfiguration.getName())),\
			null, Array.newWith(WindowDialog.ButtonConfiguration.new("@UI.Remove", true), \
				WindowDialog.ButtonConfiguration.new("@UI.Cancel", false)),\
			WindowDialog.BlockResultListener.new(block bool result
				if result
					GameApp.getGameApp().getWorldSpawnCharacter().setCharacter(null)
					pCharacterProfile.getConfigurations().remove(pCharacterConfiguration)
					pCharacterProfile.save()
				end
			end))
	end
	
	/** Edit character configuration. */
	func void editCharacterConfiguration()
		if pCharacterConfiguration != null and pCharacterProfile !=  null
			WindowCharacterConfiguration.new(getWindow(), pInVR, pCharacterConfiguration,\
				WindowDialog.BlockResultListener.new(block bool accepted
					updateCharacterConfigurations()
				end))
		end
	end
	
	/** Activate selected character configuration if present. */
	func void activateCharacterConfiguration()
		if pActorProfile == null
			WindowDialog.message(getWindow(), "@UI.ActivateConfiguration",\
				"@UI.Message.NoActorSelected", null, null, null)
			return
		end
		
		if pCharacterConfiguration == null
			WindowDialog.message(getWindow(), "@UI.ActivateConfiguration",\
				"@UI.Message.NoCharacterSelected", null, null, null)
			return
		end
		
		GameApp.getGameApp().getWorldSpawnCharacter().setCharacter(pCharacterConfiguration)
	end
	
	/** Deactivate character configuration if present. */
	func void deactivateCharacterConfiguration()
		GameApp.getGameApp().getWorldSpawnCharacter().setCharacter(null)
	end
	
	/** Calibrate character. */
	func void calibrateCharacter()
		var BaseVRActor actor = GameApp.getGameApp().getWorldSpawnCharacter().getActor()
		if actor == null
			return
		end
		
		var AAControlCommands aacc = actor.getAIAction().getAction() cast AAControlCommands
		if aacc != null
			aacc.startCalibrate()
		end
	end
	
	/** Recalibrate character. */
	func void recalibrateCharacter()
		var BaseVRActor actor = GameApp.getGameApp().getWorldSpawnCharacter().getActor()
		if actor == null
			return
		end
		
		var ActorProfile actorProfile = GameApp.getGameApp().getActiveActorProfile()
		if actorProfile == null
			return
		end
		
		var CharacterConfiguration character = GameApp.getGameApp().getWorldSpawnCharacter().getCharacter()
		if character == null or not character.isCalibrated() or not character.hasElementClass()
			return
		end
		
		character.recalibrate(actor, actorProfile)
		try
			character.getProfile().save()
		catch Exception e
			GameApp.getGameApp().getConsole().addError("Recalibrate failed", e)
		end
	end
	
	/** Reset character. */
	func void resetCharacter()
		var WorldSpawnCharacter wsc = GameApp.getGameApp().getWorldSpawnCharacter()
		var CharacterConfiguration character = wsc.getCharacter()
		if character == null or not character.isCalibrated() or not character.hasElementClass()
			return
		end
		
		character.resetCalibration(wsc.getActor(), false)
		try
			character.getProfile().save()
		catch Exception e
			GameApp.getGameApp().getConsole().addError("Reset character failed", e)
		end
	end
	
	/** Is calibrating changed. */
	func void onIsCalibratingChanged()
		var bool isCalibrating = SessionState.get().getModelIsCalibrating().getToggled()
		pButtonRecalibrate.setEnabled(not isCalibrating)
	end
	
	
	
	/** Create panel content. */
	protected func void createContent()
		var SessionSettings settings = SessionSettings.get()
		var SessionState state = SessionState.get()
		var Button button
		var Slider slider
		var ProgressBar progressBar
		
		setLayout(FlowLayout.new(LayoutAxis.y, 2))
		
		addWidget(Panel.new(BorderLayout.new(5), block Panel p
			p.setDesignerSelector("Panel.CollapsibleGroup.Header")
			p.addWidget(Label.new("@UI.CharacterSelection", "Label.CollapsibleGroup"), BorderLayout.Area.content)
			
			p.addWidget(HelpButton.new("uipanelcharacter"), BorderLayout.Area.right)
		end))
		
		addWidget(Panel.new(FormLayout.new(true, 5, 2), block Panel p
			p.addWidget(Label.new("@UI.Actors.Label", "Label.FormCaption.SingleLine"))
			
			p.addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 1, FlowLayout.Stretch.first), block Panel p2
				p2.addWidget(ComboBox.new(pModelActorProfiles, ActorProfileRenderer.new()))
				
				button = Button.new("...", ActorProfilePopupAction.new(this))
				button.setDesignerSelector("Button.Popup")
				p2.addWidget(button)
			end))
			
			p.addWidget(Label.new("@UI.Character.Label", "Label.FormCaption.SingleLine"))
			
			p.addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 1, FlowLayout.Stretch.first), block Panel p2
				p2.addWidget(ComboBox.new(pModelCharacterProfiles, CharacterProfileRenderer.new()))
				
				button = Button.new("...", CharacterProfilePopupAction.new(this))
				button.setDesignerSelector("Button.Popup")
				p2.addWidget(button)
			end))
			
			p.addWidget(Label.new("@UI.Configuration.Label", "Label.FormCaption.SingleLine"))
			
			p.addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 1, FlowLayout.Stretch.first), block Panel p2
				p2.addWidget(ComboBox.new(pModelCharacterConfigurations, CharacterConfigurationRenderer.new()))
				
				button = Button.new("...", CharacterConfigurationPopupAction.new(this))
				button.setDesignerSelector("Button.Popup")
				p2.addWidget(button)
			end))
		end))
		
		addWidget(Panel.new(GridLayout.new(0, 1), block Panel p
			button = Button.new("@UI.Activate", BlockActionListener.new(block ActionEvent event
				activateCharacterConfiguration()
			end))
			button.setToolTip("@UI.ToolTip.ActivateCharacter")
			p.addWidget(button)
			
			button = Button.new("@UI.Deactivate", BlockActionListener.new(block ActionEvent event
				deactivateCharacterConfiguration()
			end))
			button.setToolTip("@UI.ToolTip.DeactivateCharacter")
			p.addWidget(button)
		end))
		
		addWidget(CollapsibleGroup.new("@UI.Calibrate", "", CollapsibleGroup.persistModel(\
		pPrefixUIOptions + "/Calibrate", false), FlowLayout.new(LayoutAxis.y, 2), block Panel p
			p.addWidget(Panel.new(GridLayout.new(0, 1), block Panel p2
				button = Button.new("@UI.Calibrate", BlockActionListener.new(block ActionEvent event
					calibrateCharacter()
				end))
				button.setToolTip("@UI.ToolTip.CalibrateCharacter")
				p2.addWidget(button)
				
				pButtonRecalibrate = Button.new("@UI.Recalibrate", BlockActionListener.new(block ActionEvent event
					recalibrateCharacter()
				end))
				pButtonRecalibrate.setToolTip("@UI.ToolTip.RecalibrateCharacter")
				p2.addWidget(pButtonRecalibrate)
				
				button = Button.new("@UI.Reset", BlockActionListener.new(block ActionEvent event
					resetCharacter()
				end))
				button.setToolTip("@UI.ToolTip.ResetCharacter")
				p2.addWidget(button)
			end))
			
			p.addWidget(Panel.new(FormLayout.new(true, 5, 2), block Panel p2
				p2.addWidget(Label.new("@UI.CalibratePrepareTimeout", "Label.FormCaption.SingleLine"))
				
				slider = Slider.new(Orientation.horizontal, settings.getModelCalibratePrepareTimeout())
				slider.setShowTicks(true)
				slider.setToolTip("@UI.ToolTip.CalibratePrepareTimeout")
				p2.addWidget(slider)
			end))
			
			p.addWidget(Panel.new(FlowLayout, block Panel p2
				progressBar = ProgressBar.new(Orientation.horizontal, state.getModelCalibrateProgressPrepare())
				progressBar.setDesignerSelector("ProgressBar.WMPanelCharacter.CalibratePrepare")
				progressBar.setShowPercentage(false)
				progressBar.setToolTip("@UI.ToolTip.CalibrateCharacterProgressPrepare")
				p2.addWidget(progressBar)
				
				progressBar = ProgressBar.new(Orientation.horizontal, state.getModelCalibrateProgress())
				progressBar.setDesignerSelector("ProgressBar.WMPanelCharacter.Calibrate")
				progressBar.setShowPercentage(false)
				progressBar.setToolTip("@UI.ToolTip.CalibrateCharacterProgress")
				p2.addWidget(progressBar)
			end))
		end))
		
		addWidget(WMPPanelTweaking.new(this))
	end
end
