/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Gui

pin Democap.Actors
pin Democap.Actions
pin Democap.Characters

pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events
pin Dragengine.Scenery



/**
 * Main window character panel.
 */
class WMPanelCharacter extends Panel
	/** Actor profile list element renderer. */
	class ActorProfileRenderer extends DefaultListElementRenderer
		public func new()
		end
		
		public func void updateRenderer(ListBox listBox, Widget renderer, Object element, bool selected, bool focused)
			var String text = String.new(' ', 20)
			if element != null
				text = (element cast ActorProfile).getName()
			end
			super.updateRenderer(listBox, renderer, text, selected, focused)
		end
	end
	
	/** Actor profile selection listener. */
	class ActorProfileSelection extends DefaultListModelListener
		protected var WMPanelCharacter pWindow
		
		public func new(WMPanelCharacter window)
			pWindow = window
		end
		
		public func void contentChanged(ListModel model, int fromIndex, int toIndex)
			selectionChanged(model)
		end
		
		public func void selectionChanged(ListModel model)
			var int index = model.getSelected()
			if index != -1
				pWindow.setActorProfile(model.getAt(index) cast ActorProfile)
				
			else
				pWindow.setActorProfile(null)
			end
		end
	end
	
	/** Character profile list element renderer. */
	class CharacterProfileRenderer extends DefaultListElementRenderer
		public func new()
		end
		
		public func void updateRenderer(ListBox listBox, Widget renderer, Object element, bool selected, bool focused)
			var String text = String.new(' ', 20)
			if element != null
				text = (element cast CharacterProfile).getName()
			end
			super.updateRenderer(listBox, renderer, text, selected, focused)
		end
	end
	
	/** Character profile selection listener. */
	class CharacterProfileSelection extends DefaultListModelListener
		protected var WMPanelCharacter pWindow
		
		public func new(WMPanelCharacter window)
			pWindow = window
		end
		
		public func void contentChanged(ListModel model, int fromIndex, int toIndex)
			pWindow.updateCharacterConfigurations()
			selectionChanged(model)
		end
		
		public func void selectionChanged(ListModel model)
			var int index = model.getSelected()
			if index != -1
				pWindow.setCharacterProfile(model.getAt(index) cast CharacterProfile)
				
			else
				pWindow.setCharacterProfile(null)
			end
		end
	end
	
	/** Character configuration list element renderer. */
	class CharacterConfigurationRenderer extends DefaultListElementRenderer
		public func new()
		end
		
		public func void updateRenderer(ListBox listBox, Widget renderer, Object element, bool selected, bool focused)
			var String text = String.new(' ', 20)
			if element != null
				text = (element cast CharacterConfiguration).getName()
			end
			super.updateRenderer(listBox, renderer, text, selected, focused)
		end
	end
	
	/** Character configuration selection listener. */
	class CharacterConfigurationSelection extends DefaultListModelListener
		protected var WMPanelCharacter pWindow
		
		public func new(WMPanelCharacter window)
			pWindow = window
		end
		
		public func void contentChanged(ListModel model, int fromIndex, int toIndex)
			selectionChanged(model)
		end
		
		public func void selectionChanged(ListModel model)
			var int index = model.getSelected()
			if index != -1
				pWindow.setCharacterConfiguration(model.getAt(index) cast CharacterConfiguration)
				
			else
				pWindow.setCharacterConfiguration(null)
			end
		end
	end
	
	/** Actor profiles listener. */
	class ListenActorProfiles extends DefaultActorProfilesListener
		protected var WMPanelCharacter pWindow
		
		public func new(WMPanelCharacter window)
			pWindow = window
		end
		
		public func void profileAdded(ActorProfiles profiles, ActorProfile profile)
			pWindow.updateActorProfiles()
		end
		
		public func void profileRemoved(ActorProfiles profiles, ActorProfile profile)
			pWindow.updateActorProfiles()
		end
		
		public func void allProfilesRemoved(ActorProfiles profiles)
			pWindow.updateActorProfiles()
		end
	end
	
	/** Character profiles listener. */
	class ListenCharacterProfiles extends DefaultCharacterProfilesListener
		protected var WMPanelCharacter pWindow
		
		public func new(WMPanelCharacter window)
			pWindow = window
		end
		
		public func void profileAdded(CharacterProfiles profiles, CharacterProfile profile)
			pWindow.updateCharacterProfiles()
		end
		
		public func void profileRemoved(CharacterProfiles profiles, CharacterProfile profile)
			pWindow.updateCharacterProfiles()
		end
		
		public func void allProfilesRemoved(CharacterProfiles profiles)
			pWindow.updateCharacterProfiles()
		end
	end
	
	/** Character configurations listener. */
	class ListenCharacterConfigurations extends DefaultCharacterConfigurationsListener
		protected var WMPanelCharacter pWindow
		
		public func new(WMPanelCharacter window)
			pWindow = window
		end
		
		public func void configurationAdded(CharacterConfigurations configurations, CharacterConfiguration configuration)
			pWindow.updateCharacterConfigurations()
		end
		
		public func void configurationRemoved(CharacterConfigurations configurations, CharacterConfiguration configuration)
			pWindow.updateCharacterConfigurations()
		end
		
		public func void allConfigurationsRemoved(CharacterConfigurations configurations)
			pWindow.updateCharacterConfigurations()
		end
	end
	
	
	
	protected var DefaultListModel pModelActorProfiles
	protected var DefaultListModel pModelCharacterProfiles
	protected var DefaultListModel pModelCharacterConfigurations
	protected var ListenCharacterConfigurations pListenCharacterConfigurations
	protected var ActorProfile pActorProfile
	protected var CharacterProfile pCharacterProfile
	protected var CharacterConfiguration pCharacterConfiguration
	
	
	
	/** Create character panel. */
	public func new()
		pModelActorProfiles = DefaultListModel.new()
		pModelCharacterProfiles = DefaultListModel.new()
		pModelCharacterConfigurations = DefaultListModel.new()
		pListenCharacterConfigurations = ListenCharacterConfigurations.new(this)
		
		runWhileBlockingLayout(block
			createContent()
		end)
		
		pModelActorProfiles.addListener(ActorProfileSelection.new(this))
		pModelCharacterProfiles.addListener(CharacterProfileSelection.new(this))
		pModelCharacterConfigurations.addListener(CharacterConfigurationSelection.new(this))
		
		GameApp.getGameApp().getActorProfiles().addListener(ListenActorProfiles.new(this))
		updateActorProfiles()
		
		GameApp.getGameApp().getCharacterProfiles().addListener(ListenCharacterProfiles.new(this))
		updateCharacterProfiles()
	end
	
	/** Dispose of widget. */
	public func void dispose()
		setCharacterProfile(null)
		setActorProfile(null)
		
		pModelActorProfiles = null
		pModelCharacterProfiles = null
		pModelCharacterConfigurations = null
		pListenCharacterConfigurations = null
		
		super.dispose()
	end
	
	
	
	/** Selected actor profile or null. */
	public func ActorProfile getActorProfile()
		return pActorProfile
	end
	
	/** Set selected actor profile or null. */
	public func void setActorProfile(ActorProfile profile)
		if profile == pActorProfile
			return
		end
		
		pActorProfile = profile
	end
	
	/** Update actor profiles model. */
	public func void updateActorProfiles()
		var ActorProfile profile = pActorProfile
		
		pModelActorProfiles.setContent(GameApp.getGameApp().getActorProfiles().toArray())
		
		var int index = pModelActorProfiles.indexOf(profile)
		if index != -1
			pModelActorProfiles.setSelected(index)
		end
	end
	
	
	
	/** Selected character profile or null. */
	public func CharacterProfile getCharacterProfile()
		return pCharacterProfile
	end
	
	/** Set selected character profile or null. */
	public func void setCharacterProfile(CharacterProfile profile)
		if profile == pCharacterProfile
			return
		end
		
		if pCharacterProfile != null
			pCharacterProfile.getConfigurations().removeListener(pListenCharacterConfigurations)
		end
		
		pCharacterProfile = profile
		
		if profile != null
			profile.getConfigurations().addListener(pListenCharacterConfigurations)
		end
		
		updateCharacterConfigurations()
	end
	
	/** Update character profiles model. */
	public func void updateCharacterProfiles()
		var CharacterProfile profile = pCharacterProfile
		
		pModelCharacterProfiles.setContent(GameApp.getGameApp().getCharacterProfiles().toArray())
		
		var int index = pModelCharacterProfiles.indexOf(profile)
		if index != -1
			pModelCharacterProfiles.setSelected(index)
		end
	end
	
	
	
	/** Selected character configuration or null. */
	public func CharacterConfiguration getCharacterConfiguration()
		return pCharacterConfiguration
	end
	
	/** Set selected character configuration or null. */
	public func void setCharacterConfiguration(CharacterConfiguration configuration)
		if configuration == pCharacterConfiguration
			return
		end
		
		pCharacterConfiguration = configuration
	end
	
	/** Selected character configuration or null. */
	public func CharacterConfiguration getSelectedCharacterConfiguration()
		var int index = pModelCharacterConfigurations.getSelected()
		if index != -1
			return pModelCharacterConfigurations.getAt(index) cast CharacterConfiguration
		end
		return null
	end
	
	/** Update character configurations model. */
	public func void updateCharacterConfigurations()
		var CharacterConfiguration selected = getSelectedCharacterConfiguration()
		
		if pCharacterProfile != null
			pModelCharacterConfigurations.setContent(pCharacterProfile.getConfigurations().toArray())
			
		else
			pModelCharacterConfigurations.removeAll()
		end
		
		var int index = pModelCharacterConfigurations.indexOf(selected)
		if index != -1
			pModelCharacterConfigurations.setSelected(index)
		end
	end
	
	
	
	/** Activate selected character configuration if present. */
	public func void activateCharacterConfiguration()
		if pActorProfile == null
			WindowDialog.message(getWindow(), "Activate Configuration", "No actor selected", null, null, null)
			return
		end
		
		if pCharacterConfiguration == null
			WindowDialog.message(getWindow(), "Activate Configuration", "No character configuration selected", null, null, null)
			return
		end
		
		GameApp.getGameApp().getWorldSpawnCharacter().setCharacter(pCharacterConfiguration)
	end
	
	/** Edit actors. */
	public func void editActors()
		// TODO
	end
	
	/** Edit characters. */
	public func void editCharacters()
		// TODO
	end
	
	/** Calibrate character. */
	public func void calibrateCharacter()
		var BaseVRActor actor = GameApp.getGameApp().getWorldSpawnCharacter().getActor()
		if actor == null
			return
		end
		
		var AAControlCommands aacc = actor.getAIAction().getAction() cast AAControlCommands
		if aacc != null
			aacc.startCalibrate()
		end
	end
	
	
	
	/** Create panel content. */
	protected func void createContent()
		setDesignerSelector("Panel.WMPanelCharacter.CharacterSelection")
		setLayout(BorderLayout.new(2))
		
		addWidget(Panel.new(FormLayout.new(true, 5, 2), block Panel p
			p.addWidget(Label.new("Actors:", "Label.FormCaption"))
			p.addWidget(ComboBox.new(pModelActorProfiles, ActorProfileRenderer.new()))
			
			p.addWidget(Label.new("Character:", "Label.FormCaption"))
			p.addWidget(ComboBox.new(pModelCharacterProfiles, CharacterProfileRenderer.new()))
			
			p.addWidget(Label.new("Configuration:", "Label.FormCaption"))
			p.addWidget(ComboBox.new(pModelCharacterConfigurations, CharacterConfigurationRenderer.new()))
		end), BorderLayout.Area.content)
		
		addWidget(Panel.new(GridLayout.new(2, 0), block Panel p
			p.addWidget(Button.new("Edit Actors", BlockActionListener.new(block ActionEvent event
				editActors()
			end)))
			
			p.addWidget(Button.new("Edit Characters", BlockActionListener.new(block ActionEvent event
				editCharacters()
			end)))
			
			p.addWidget(Button.new("Activate", BlockActionListener.new(block ActionEvent event
				activateCharacterConfiguration()
			end)))
			
			p.addWidget(Button.new("Calibrate", BlockActionListener.new(block ActionEvent event
				calibrateCharacter()
			end)))
		end), BorderLayout.Area.bottom)
	end
end
