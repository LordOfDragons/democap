/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Gui

pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events
pin Dragengine.Scenery


/**
 * Main panel.
 */
class PanelMain extends Panel
	private var DMCWindowConsole pWindowConsole
	private var bool pInVR
	
	
	
	/** Create main window */
	public func new(Desktop desktop, bool inVR)
		pInVR = inVR
		
		runWhileBlockingLayout(block
			setDesignerSelector("Panel.Main")
			createContent()
		end)
		
		// create console window and add it to desktop
		pWindowConsole = DMCWindowConsole.new(desktop)
	end
	
	/** Dispose of window. */
	public func void dispose()
		pWindowConsole = null
		super.dispose()
	end
	
	
	
	/** Console window. */
	public func DMCWindowConsole getWindowConsole()
		return pWindowConsole
	end
	
	/** Window is shown in VR. */
	public func bool getInVR()
		return pInVR
	end
	
	
	
	/** Create window content. */
	protected func void createContent()
		setLayout(BorderLayout.new(2))
		
		// switch panel buttons
		var ToggleButtonGroup tbgroup = ToggleButtonGroup.new()
		var ToggleButton tbutton
		
		addWidget(Panel.new(BoxLayout.new(LayoutAxis.x), block Panel p2
			tbutton = ToggleButton.new(" ")
			tbutton.setDesignerSelector("Button.Category.Settings")
			tbutton.setToolTip("Settings and VR Control")
			p2.addWidget(tbutton)
			tbutton.setButtonGroup(tbgroup)
			
			tbutton = ToggleButton.new(" ")
			tbutton.setDesignerSelector("Button.Category.Character")
			tbutton.setToolTip("Character Configuration")
			p2.addWidget(tbutton)
			tbutton.setButtonGroup(tbgroup)
			
			tbutton = ToggleButton.new(" ")
			tbutton.setDesignerSelector("Button.Category.Project")
			tbutton.setToolTip("Project, Scenes and Objects")
			p2.addWidget(tbutton)
			tbutton.setButtonGroup(tbgroup)
			
			tbutton = ToggleButton.new(" ")
			tbutton.setDesignerSelector("Button.Category.ActorControl")
			tbutton.setToolTip("Actor Controls")
			p2.addWidget(tbutton)
			tbutton.setButtonGroup(tbgroup)
			
			tbutton = ToggleButton.new(" ")
			tbutton.setDesignerSelector("Button.Category.Capture")
			tbutton.setToolTip("Session, Recording and Playback")
			p2.addWidget(tbutton)
			tbutton.setButtonGroup(tbgroup)
			
			p2.addMouseListener(SwitchPanel.ScrollHeaderToggleButtons.new(tbgroup))
		end), BorderLayout.Area.top)
		
		// switch panels
		var String prefixUIOptions = pInVR if "UI/VR/PanelMain" else "UI/PanelMain"
		
		addWidget(SwitchPanel.new(block SwitchPanel p
			// settings panel
			p.addWidget(ScrollPanel.new(Viewport.new(Panel.new(FlowLayout.new(LayoutAxis.y, 5), block Panel p2
				p2.addWidget(WMPanelSettings.new(pInVR, prefixUIOptions))
			end), 0, 20, true), ScrollPanel.Policy.hidden, ScrollPanel.Policy.needed))
			
			// character panel
			p.addWidget(ScrollPanel.new(Viewport.new(Panel.new(FlowLayout.new(LayoutAxis.y, 5), block Panel p2
				p2.addWidget(WMPanelCharacter.new(pInVR, prefixUIOptions))
			end), 0, 20, true), ScrollPanel.Policy.hidden, ScrollPanel.Policy.needed))
			
			// project panel
			var WMPanelProject panelProject = WMPanelProject.new(pInVR, prefixUIOptions)
			var ScrollPanel scrollPanel = ScrollPanel.new(Viewport.new(Panel.new(FlowLayout.new(LayoutAxis.y, 5), block Panel p2
				p2.addWidget(panelProject)
			end), 0, 20, true), ScrollPanel.Policy.hidden, ScrollPanel.Policy.needed)
			p.addWidget(scrollPanel)
			
			var WMPanelProject.EnableUpdateObjectsListener enableUpdateObjects = \
				WMPanelProject.EnableUpdateObjectsListener.new(panelProject, Array.newWith(scrollPanel, this))
			scrollPanel.addWidgetListener(enableUpdateObjects)
			addWidgetListener(enableUpdateObjects)
			
			// actor control panel
			p.addWidget(ScrollPanel.new(Viewport.new(Panel.new(FlowLayout.new(LayoutAxis.y, 5), block Panel p2
				p2.addWidget(WMPanelActorControl.new(pInVR, prefixUIOptions))
			end), 0, 20, true), ScrollPanel.Policy.hidden, ScrollPanel.Policy.needed))
			
			// session panel
			p.addWidget(ScrollPanel.new(Viewport.new(Panel.new(FlowLayout.new(LayoutAxis.y, 5), block Panel p2
				p2.addWidget(WMPanelSession.new(pInVR, prefixUIOptions))
			end), 0, 20, true), ScrollPanel.Policy.hidden, ScrollPanel.Policy.needed))
			
			tbgroup.addListener(SwitchPanel.SwitchToggleGroup.new(p))
		end), BorderLayout.Area.content)
		
		addWidget(Panel.new(BoxLayout.new(LayoutAxis.x), block Panel p
			p.addWidget(Button.new("Quit", QuitGameActionListener.new()))
			
			p.addWidget(Button.new("Console", BlockActionListener.new(block ActionEvent event
				pWindowConsole.setVisible(true)
			end)))
		end), BorderLayout.Area.bottom)
	end
end
