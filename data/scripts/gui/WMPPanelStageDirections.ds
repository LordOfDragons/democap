/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2022, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Gui

pin Democap.Behaviors

pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events
pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * Stage directions panel.
 */
class WMPPanelStageDirections extends CollapsibleGroup
	/** Game changes listener. */
	class GameChangedListener extends DefaultGameListener
		protected var WMPPanelStageDirections pPanel
		
		public func new(WMPPanelStageDirections panel)
			pPanel = panel
		end
		
		public func void projectChanged(GameApp app)
			pPanel.setScene(app.getScene())
		end
		
		public func void sceneChanged(GameApp app)
			pPanel.setScene(app.getScene())
		end
	end
	
	/** Reorder stage directions. */
	class ReorderStageDirections extends ReorderListMouseListener
		protected var WMPPanelStageDirections pPanel
		
		public func new(WMPPanelStageDirections panel, ListBox listBox) super(DefaultListModel.new(), listBox)
			pPanel = panel
		end
		
		protected func void onStopDrag()
			if getDropIndex() != getDragIndex() and pPanel.getScene() != null
				pPanel.getScene().notifyStageDirectionsChanged()
			end
		end
	end
	
	
	
	/** Stage direction popup menu. */
	class StageDirectionPopupAction extends DefaultActionListener
		protected var WMPPanelStageDirections pPanel
		
		public func new(WMPPanelStageDirections panel)
			pPanel = panel
		end
		
		public func void onAction(ActionEvent event)
			var Scene scene = pPanel.getScene()
			if scene == null
				return
			end
			
			var Widget widget = event.getSource() cast Widget
			var MenuPopup menu = MenuPopup.new()
			var MenuItemCommand item
			
			menu.addWidget(MenuItemCommand.new("Add...", BlockActionListener.new(block ActionEvent event
				pPanel.addStageDirection()
			end)))
			
			item = MenuItemCommand.new("Remove", BlockActionListener.new(block ActionEvent event
				pPanel.removeStageDirection()
			end))
			item.setEnabled(pPanel.getStageDirection() != null)
			menu.addWidget(item)
			
			item = MenuItemCommand.new("Remove All", BlockActionListener.new(block ActionEvent event
				pPanel.removeAllStageDirections()
			end))
			item.setEnabled(scene.getStageDirections().getCount() > 0)
			menu.addWidget(item)
			
			item = MenuItemCommand.new("Rename...", BlockActionListener.new(block ActionEvent event
				pPanel.renameStageDirection()
			end))
			item.setEnabled(pPanel.getStageDirection() != null)
			menu.addWidget(item)
			
			pPanel.getDesktop().addWindow(menu)
			menu.popup(widget.getDesktopPosition() + Point.new(0, widget.getHeight()))
		end
	end
	
	/** Stage direction selection listener. */
	public class StageDirectionModelChanged extends DefaultListModelListener
		protected var WMPPanelStageDirections pPanel
		
		public func new(WMPPanelStageDirections panel)
			pPanel = panel
		end
		
		public func void contentChanged(ListModel listModel, int fromIndex, int toIndex)
			if listModel.getSelected() >= fromIndex and listModel.getSelected() <= toIndex
				pPanel.updateStageDirection()
			end
		end
		
		public func void selectionChanged(ListModel listModel)
			pPanel.updateStageDirection()
		end
	end
	
	/** Content changed listener. */
	class ContentChanged implements ActionListener
		protected var WMPPanelStageDirections pPanel
		protected var DefaultTextModel pModel
		
		public func new(WMPPanelStageDirections panel, DefaultTextModel model)
			pPanel = panel
			pModel = model
		end
		
		public func void onAction(ActionEvent event)
			var StageDirection direction = pPanel.getStageDirection()
			var Scene scene = pPanel.getScene()
			if direction == null or scene == null
				return
			end
			
			var String content = pModel.getText()
			if content.equals(direction.getContent())
				return
			end
			
			direction.setContent(content)
			scene.notifyStageDirectionContentChanged(direction)
		end
	end
	
	
	
	protected var WMPanelSession pPanelSession
	protected var String pPrefixUIOptions
	protected var DefaultTextModel pModelContent
	protected var ListBox pListBoxDirections
	protected var DisplayImage pDisplayImage
	protected var DisplayVideo pDisplayVideo
	protected var Scene pScene
	protected var GameChangedListener pGameChangedListener
	protected var StageDirectionModelChanged pStageDirectionModelChanged
	protected var ReorderStageDirections pReorderStageDirections
	
	
	
	/** Create panel. */
	public func new(WMPanelSession panelSession) super("Stage directions", "",\
	CollapsibleGroup.persistModel(prefixUIOptions(panelSession)))
		pPanelSession = panelSession
		pPrefixUIOptions = prefixUIOptions(panelSession)
		
		pStageDirectionModelChanged = StageDirectionModelChanged.new(this)
		
		pModelContent = DefaultTextModel.new("")
		
		getPanelContent().runWhileBlockingLayout(block
			createContent(getPanelContent())
		end)
		
		var GameApp app = GameApp.getGameApp()
		pGameChangedListener = GameChangedListener.new(this)
		app.addListener(pGameChangedListener)
		
		setScene(app.getScene())
	end
	
	/** Dispose of widget. */
	public func void dispose()
		var GameApp app = GameApp.getGameApp()
		if pGameChangedListener != null
			app.removeListener(pGameChangedListener)
			pGameChangedListener = null
		end
		
		setScene(null)
		
		pStageDirectionModelChanged = null
		pReorderStageDirections = null
		
		pPanelSession = null
		pDisplayImage = null
		pDisplayVideo = null
		pListBoxDirections = null
		pModelContent = null
		
		super.dispose()
	end
	
	/** UI options prefix. */
	static public func String prefixUIOptions(WMPanelSession panelSession)
		return panelSession.getPrefixUIOptions() + "/WMPPanelStageDirections"
	end
	
	
	
	/** Active scene or null. */
	public func Scene getScene()
		return pScene
	end
	
	/** Set active scene or null. */
	public func void setScene(Scene scene)
		if scene == pScene
			return
		end
		
		pListBoxDirections.getModel().removeListener(pStageDirectionModelChanged)
		pListBoxDirections.setModel(DefaultListModel.new())
		pReorderStageDirections.setModel(DefaultListModel.new())
		
		pScene = scene
		
		if scene != null
			pListBoxDirections.setModel(scene.getStageDirections().getModel())
			pReorderStageDirections.setModel(scene.getStageDirections().getModel())
		end
		
		pListBoxDirections.getModel().addListener(pStageDirectionModelChanged)
		
		updateStageDirection()
	end
	
	
	
	/** Selected stage direction or null. */
	public func StageDirection getStageDirection()
		if pScene == null
			return null
		end
		return pScene.getStageDirections().getSelected()
	end
	
	/** Update selected stage direction. */
	public func void updateStageDirection()
		var StageDirection direction = getStageDirection()
		
		if direction != null
			pModelContent.setText(direction.getContent())
			
		else
			pModelContent.setText("")
		end
	end
	
	/** Add stage direction. */
	public func void addStageDirection()
		if pScene == null
			return
		end
		
		WindowDialog.input(getWindow(), "Add Stage Direction", "Name:", null, "Stage Direction",\
		null, null, WindowDialog.BlockResultListener.new(block String result
			if result != null
				var StageDirection direction = StageDirection.new()
				direction.setName(result)
				
				pScene.getStageDirections().add(direction)
				pScene.notifyStageDirectionsChanged()
				
				pScene.getStageDirections().setSelected(direction)
			end
		end))
	end
	
	/** Remove stage direction. */
	public func void removeStageDirection()
		var StageDirection direction = getStageDirection()
		if direction == null or pScene == null
			return
		end
		
		var ListModel model = pScene.getStageDirections().getModel()
		var int index = model.indexOf(direction)
		
		pScene.getStageDirections().remove(direction)
		pScene.notifyStageDirectionsChanged()
		
		model.setSelected(DEMath.min(index, model.getCount() - 1))
	end
	
	/** Remove all stage directions. */
	public func void removeAllStageDirections()
		if pScene == null or pScene.getStageDirections().getCount() == 0
			return
		end
		
		pScene.getStageDirections().removeAll()
		pScene.notifyStageDirectionsChanged()
	end
	
	/** Rename stage direction. */
	public func void renameStageDirection()
		var StageDirection direction = getStageDirection()
		if direction == null or pScene == null
			return
		end
		
		WindowDialog.input(getWindow(), "Rename Stage Direction", "Name:", null, direction.getName(),\
		null, null, WindowDialog.BlockResultListener.new(block String result
			if result != null
				if not result.equals(direction.getName())
					direction.setName(result)
					pScene.notifyStageDirectionNameChanged(direction)
				end
			end
		end))
	end
	
	
	
	/** Create panel content. */
	protected func void createContent(Panel content)
		var bool readOnly = pPanelSession.getInVR()
		var TextArea textArea
		
		content.setLayout(BorderLayout.new(5))
		
		content.addWidget(Panel.new(FlowLayout.new(LayoutAxis.y, 0, FlowLayout.Stretch.first), block Panel p
			pListBoxDirections = ListBox.new(DefaultListModel.new(), DefaultListElementRenderer.new(String.new('X', 15)))
			pListBoxDirections.setDesignerSelector("ListBox.WMPPanelStageDirections")
			pListBoxDirections.setToolTip("Stage direction to show.")
			pListBoxDirections.setNumberDisplayLines(10)
			pListBoxDirections.getModel().addListener(pStageDirectionModelChanged)
			p.addWidget(ScrollPanel.new(pListBoxDirections))
			
			pReorderStageDirections = ReorderStageDirections.new(this, pListBoxDirections)
			pListBoxDirections.addMouseListener(pReorderStageDirections)
			
			if not readOnly
				var Button button = Button.new("...", StageDirectionPopupAction.new(this))
				button.setDesignerSelector("Button.Popup")
				p.addWidget(button)
			end
		end), BorderLayout.Area.left)
		
		content.addWidget(Panel.new(StackLayout.new(), block Panel p
			textArea = TextArea.new(pModelContent, 10, readOnly)
			textArea.setToolTip("Stage direction text.")
			p.addWidget(ScrollPanel.new(textArea, ScrollPanel.Policy.hidden, ScrollPanel.Policy.visible))
			if not readOnly
				textArea.addActionListener(ContentChanged.new(this, pModelContent))
			end
		end), BorderLayout.Area.content)
	end
end
