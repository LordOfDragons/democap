/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Gui

pin Democap.Actors

pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events
pin Dragengine.Utils


/**
 * File select dialog.
 */
class DialogFileSelect extends WindowDialog
	/** Set directory on click. */
	class ClickedSetDirectory extends ClickedActionListener
		protected var DialogFileSelect pDialog
		protected var String pDirectory
		
		func new(DialogFileSelect dialog, String directory)
			pDialog = dialog
			pDirectory = directory
		end
		
		func void onAction()
			pDialog.setDirectory(pDirectory)
		end
	end
	
	/** File list entry. */
	class FileListEntry
		public var String path
		public var String text
		public var FileType type
		public var Image icon
		
		func new(String path, String text, FileType type, Image icon)
			this.path = path
			this.text = text
			this.type = type
			this.icon = icon
		end
	end
	
	/** File list renderer. */
	class FileListRenderer extends DefaultListElementRenderer
		protected var DialogFileSelect pDialog
		
		
		func new(DialogFileSelect dialog)
			pDialog = dialog
			setDefaultObject(FileListEntry.new("/", String.new('X', 25), FileType.file, dialog.imageFile))
		end
		
		
		func Widget createRenderer(ListBox listBox)
			return Panel.new(FlowLayout.new(LayoutAxis.x, 2, FlowLayout.Stretch.last), block Panel p
				p.addWidget(DisplayImage.new())
				p.addWidget(Label.new(""))
			end )
		end
		
		func void updateRenderer(ListBox listBox, Widget renderer, Object element, bool selected, bool focused)
			var Panel panel = renderer cast Panel
			var FileListEntry entry = element cast FileListEntry
			var DisplayImage icon = panel.getWidget(0) cast DisplayImage
			var Label label = panel.getWidget(1) cast Label
			
			panel.runWhileBlockingLayout(block
				icon.setImage(entry.icon)
				label.setText(entry.text)
				
				if selected
					label.setDesignerSelector("Label.ListRenderer.Selected.FileList")
					panel.setDesignerSelector("Panel.ListRenderer.Selected.FileList")
					
				else
					label.setDesignerSelector("Label.ListRenderer.FileList")
					panel.setDesignerSelector("Panel.ListRenderer.FileList")
				end
			end)
			panel.doLayoutIfBlocked()
		end
	end
	
	/** File pattern changed listener. */
	class FilePatternChangedListener extends DefaultListModelListener
		protected var DialogFileSelect pDialog
		
		func new(DialogFileSelect dialog)
			pDialog = dialog
		end
		
		func void selectionChanged(ListModel listModel)
			if listModel.getSelected() != -1
				pDialog.updateFileListing()
			end
		end
	end
	
	/** Clicked enter directory listener. */
	class ClickedEnterDirectory extends DefaultMouseListener
		protected var DialogFileSelect pDialog
		
		func new(DialogFileSelect dialog)
			pDialog = dialog
		end
		
		func void onButtonRelease(MouseEvent event)
			var FileListEntry entry = pDialog.getSelectedFileListEntry()
			if entry == null
				return
			end
			
			if entry.type == FileType.directory
				pDialog.setDirectory(entry.path)
			end
		end
	end
	
	/** File list entry selected listener. */
	class SelectedFileListEntry extends DefaultListModelListener
		protected var DialogFileSelect pDialog
		
		func new(DialogFileSelect dialog)
			pDialog = dialog
		end
		
		func void selectionChanged(ListModel listModel)
			var FileListEntry entry = pDialog.getSelectedFileListEntry()
			if entry == null
				return
			end
			
			if entry.type == FileType.directory
				pDialog.setFilename("")
				
			else
				pDialog.setFilename(entry.text)
			end
		end
	end
	
	/** Double click accept. */
	class DoubleClickAccept extends ClickedActionListener
		protected var DialogFileSelect pDialog
		
		func new(DialogFileSelect dialog)
			pDialog = dialog
			setMultiClickCount(2)
		end
		
		func void onAction()
			pDialog.accept()
		end
	end
	
	
	
	protected var String pDirectory
	protected var DefaultListModel pModelFiles
	protected var DefaultTextModel pModelFilename
	protected var DefaultListModel pModelPattern
	protected var Panel pPanelBreadCrumbs
	protected var bool pSaving
	
	public var Image imageDirectory
	public var Image imageFile
	public var Image imageBreadCrumbSeparator
	
	
	
	/** Create window. */
	func new(Window window, String title, ResultListener listener)
		imageDirectory = Image.new("/content/gui/images/icon_directory_16.png")
		imageFile = Image.new("/content/gui/images/icon_file_16.png")
		imageBreadCrumbSeparator = Image.new("/shareddata/guithemes/modern/arrows/right_normal.png")
		
		pDirectory = "/"
		pModelFiles = DefaultListModel.new()
		pModelFiles.setAutoSelect(false)
		pModelPattern = DefaultListModel.new()
		pModelFilename = DefaultTextModel.new("")
		pModelPattern.add(patternAllFiles())
		
		runWhileBlockingLayout(block
			setGuiTheme(window.getGuiTheme())
			setTitle(title)
			setDesignerSelector("Window.Dialog.FileSelect")
			
			if PanelMain.isParentPanelInVR(window)
				setSize(window.getDesktop().getSize())
				
			else
				setSize(Point.new(800, 500))
			end
			
			createContent()
		end)
		
		pModelPattern.addListener(FilePatternChangedListener.new(this))
		pModelFiles.addListener(SelectedFileListEntry.new(this))
		
		setResultListener(listener)
	end
	
	/** Dispose of window. */
	func void dispose()
		pModelFilename = null
		pModelPattern = null
		pModelFiles = null
		pPanelBreadCrumbs = null
		
		super.dispose()
	end
	
	/** Show open file dialog for resource type. */
	public static func DialogFileSelect showOpenFile(Window window, String title,\
	ResourceLoaderType type, String path, ResultListener listener)
		return showOpenFile(window, title, FileSystem.getFileExtensions(type), path, listener)
	end
	
	/** Show open file dialog for array of FileExtension. */
	public static func DialogFileSelect showOpenFile(Window window, String title,\
	Array patterns, String path, ResultListener listener)
		var DialogFileSelect dialog = DialogFileSelect.new(window, title, listener)
		dialog.pSaving = false
		dialog.setPatterns(patterns)
		dialog.setPath(path)
		dialog.selectPatternMatchingPath()
		dialog.show(window, false, WindowModal.Placement.desktop)
		return dialog
	end
	
	/** Show save file dialog for resource type. */
	public static func DialogFileSelect showSaveFile(Window window, String title,\
	ResourceLoaderType type, String path, ResultListener listener)
		var DialogFileSelect dialog = showOpenFile(window, title, type, path, listener)
		dialog.pSaving = true
		return dialog
	end
	
	/** Show save file dialog for array of FileExtension. */
	public static func DialogFileSelect showSaveFile(Window window, String title,\
	Array patterns, String path, ResultListener listener)
		var DialogFileSelect dialog = showOpenFile(window, title, patterns, path, listener)
		dialog.pSaving = true
		return dialog
	end
	
	/** Create all files pattern. */
	public static func FileExtension patternAllFiles()
		return FileExtension.new(TranslationManager.get().translate("UI.Extensions.AllFiles").toUTF8(), Array.newWith("*"), "")
	end
	
	/** Create all supported files pattern. */
	public static func FileExtension patternAllSupported(Array patterns)
		var Set collected = Set.new()
		patterns.forEach(block FileExtension each
			collected.addAll(Set.newFrom(each.getPatterns()))
		end)
		return FileExtension.new(TranslationManager.get().translate(\
			"UI.SupportedFiles").toUTF8(), collected.toArray().sorted(), "")
	end
	
	
	
	/** Path. */
	func String getPath()
		var String filename = pModelFilename.getText()
		if filename.empty()
			return ""
		end
		return File.new(pDirectory, filename).getPath()
	end
	
	/** Set path. */
	func void setPath(String path)
		if path == null
			throw ENullPointer.new("path")
		end
		
		var File file = File.new(path)
		if not file.isAbsolute()
			throw EInvalidParam.new("path is not absolute path")
		end
		
		if FileSystem.existsFile(path) and FileSystem.getTypeOfFile(path) == FileType.directory
			setDirectory(path)
			setFilename("")
			
		else
			var File parent = file.getParent()
			if parent != null
				setDirectory(parent.getPath())
				
			else
				setDirectory("/")
			end
			setFilename(file.getName())
		end
	end
	
	/** Directory. */
	func String getDirectory()
		return pDirectory
	end
	
	/** Set directory. */
	func void setDirectory(String directory)
		if directory.equals(pDirectory)
			return
		end
		
		if not File.isAbsolute(directory)
			throw EInvalidParam.new("directory is not absolute path")
		end
		
		pDirectory = directory
		updateBreadCrumbs()
		updateFileListing()
	end
	
	/** Filename. */
	func String getFilename()
		return pModelFilename.getText()
	end
	
	/** Set filename. */
	func void setFilename(String filename)
		if filename == null
			throw ENullPointer.new("filename")
		end
		
		pModelFilename.setText(filename)
	end
	
	/** Set patterns. */
	func void setPatterns(Array patterns)
		if patterns == null
			throw ENullPointer.new("patterns")
		end
		patterns.forEach(block FileExtension each: end)  // ensure file type
		
		var Array combined = Array.new()
		combined.add(patternAllFiles())
		
		if patterns.getCount() > 0
			combined.add(patternAllSupported(patterns))
			combined.addAll(patterns)
		end
		
		pModelPattern.setContent(combined)
		pModelPattern.setSelected(DEMath.min(1, pModelPattern.getCount() - 1))
		updateFileListing()
	end
	
	/** Get selected pattern. */
	func FileExtension getSelectedPattern()
		if pModelPattern.getSelected() == -1
			return null
		end
		return pModelPattern.getAt(pModelPattern.getSelected()) cast FileExtension
	end
	
	/** Select pattern matching path. */
	func void selectPatternMatchingPath()
		var String filename = getFilename()
		if filename.empty()
			pModelPattern.setSelected(DEMath.min(1, pModelPattern.getCount() - 1))
			return
		end
		
		var FileExtension pattern = pModelPattern.getContent().slice(2).find(block FileExtension each
			return FileSystem.pathMatchesPattern(filename, each.getPatternsString())
		end) cast FileExtension
		
		if pattern != null
			pModelPattern.setSelected(pModelPattern.indexOf(pattern))
			
		else
			pModelPattern.setSelected(DEMath.min(1, pModelPattern.getCount() - 1))
		end
	end
	
	/** Get selected file list entry or null. */
	func FileListEntry getSelectedFileListEntry()
		if pModelFiles.getSelected() == -1
			return null
		end
		return pModelFiles.getAt(pModelFiles.getSelected()) cast FileListEntry
	end
	
	/** Accept dialog. */
	func void accept()
		var String path = getPath()
		if path.empty()
			return
		end
		
		if FileSystem.existsFile(path) and FileSystem.getTypeOfFile(path) == FileType.directory
			setDirectory(path)
			return
		end
		
		if pSaving
			var String defaultExtension = getSelectedPattern().getDefaultExtension()
			if not path.endsWith(defaultExtension)
				path = path + defaultExtension
			end
		end
		
		setResult(path)
		close()
	end
	
	
	
	/** Create window content. */
	protected func void createContent()
		setLayout(BorderLayout.new(20))
		
		// content
		addWidget(Panel.new(BorderLayout.new(5), block Panel p
			// button bar
			p.addWidget(Panel.new(BorderLayout.new(5), block Panel p2
				// bread crumbs
				pPanelBreadCrumbs = Panel.new(FlowLayout.new(LayoutAxis.x, 5))
				p2.addWidget(pPanelBreadCrumbs, BorderLayout.Area.content)
				
			end), BorderLayout.Area.top)
			
			// file listing
			var ListBox listFiles = ListBox.new(pModelFiles, FileListRenderer.new(this))
			listFiles.setType(ListBox.Type.horizontalWrap)
			p.addWidget(ScrollPanel.new(listFiles), BorderLayout.Area.content)
			listFiles.addMouseListener(ClickedEnterDirectory.new(this))
			listFiles.addMouseListener(DoubleClickAccept.new(this))
			
			// filename
			p.addWidget(Panel.new(FormLayout.new(true, 10, 2), block Panel p2
				// filename
				p2.addWidget(Label.new("@UI.Filename.Label", "Label.DialogFileSelect.FormCaption"))
				
				var TextField textField = TextField.new(pModelFilename, 15)
				textField.setDesignerSelector("TextField.DialogFileSelect.Filename")
				p2.addWidget(textField)
				
				// pattern
				p2.addWidget(Label.new("@UI.Extension.Label", "Label.DialogFileSelect.FormCaption"))
				
				var ComboBox comboBox = ComboBox.new(pModelPattern)
				comboBox.setDesignerSelector("ComboBox.DialogFileSelect.Pattern")
				p2.addWidget(comboBox)
			end), BorderLayout.Area.bottom)
		end), BorderLayout.Area.content)
		
		// button line
		addWidget(Panel.new(CentrizedBoxLayout.new(LayoutAxis.x), block Panel p
			var Button button = Button.new("@UI.Select", BlockActionListener.new(block ActionEvent e
				accept()
			end))
			button.setDesignerSelector("Button.DialogFileSelect.Select")
			p.addWidget(button)
			setAcceptWidget(button)
			
			button = Button.new("@UI.Cancel", CloseDialog.new(this, null))
			button.setDesignerSelector("Button.DialogFileSelect.Cancel")
			p.addWidget(button)
		end ), BorderLayout.Area.bottom )
	end
	
	/** Update bread crumbs. */
	protected func void updateBreadCrumbs()
		pPanelBreadCrumbs.runWhileBlockingLayout(block
			var File file = File.new(pDirectory)
			var File directory = File.new("/")
			
			pPanelBreadCrumbs.removeAllWidgets()
			addBreadCrumb("/", "/")
			
			var int i, count = file.getComponentCount()
			for i = 0 to count
				directory = directory + file.getComponentAt(i)
				addBreadCrumb(file.getComponentAt(i), directory.getPath())
			end
		end)
		pPanelBreadCrumbs.doLayoutIfBlocked()
	end
	
	/** Add bread crumb to bread crumbs panel. */
	protected func void addBreadCrumb(String name, String directory)
		if not directory.equals("/")
			//pPanelBreadCrumbs.addWidget(Label.new(">", "Label.DialogFileSelect.BreadCrumbs.Separator"))
			pPanelBreadCrumbs.addWidget(DisplayRotatingImage.new(imageBreadCrumbSeparator,\
				"Image.DialogFileSelect.BreadCrumbs.Separator"))
		end
		
		var Label label = Label.new(name, "Label.DialogFileSelect.BreadCrumbs.Entry")
		pPanelBreadCrumbs.addWidget(label)
		label.addMouseListener(ClickedSetDirectory.new(this, directory))
	end
	
	/** Update file listing. */
	func void updateFileListing()
		var String pattern = getSelectedPattern().getPatternsString()
		var Array directories = Array.new()
		var Array files = Array.new()
		var String filename
		
		FileSystem.searchFiles(pDirectory, false, block String path, FileType type
			filename = File.new(path).getName()
			
			if type == FileType.directory
				directories.add(FileListEntry.new(path, filename, FileType.directory, imageDirectory))
				
			elif FileSystem.pathMatchesPattern(filename, pattern)
				files.add(FileListEntry.new(path, filename, FileType.file, imageFile))
			end
			
			return true
		end)
		
		pModelFiles.setContent(directories + files)
		
		/*if files.getCount() > 0
			pModelFiles.setSelected(directories.getCount())
		end*/
	end
end
