/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Gui

pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events
pin Dragengine.Scenery


/**
 * Edit color widget.
 */
class EditColor extends Panel
	/** Edit color listener. */
	class EditColorListener extends ClickedActionListener
		protected var EditColor pEditColor
		
		func new(EditColor editColor)
			pEditColor = editColor
		end
		
		func void onAction()
			pEditColor.editColor()
		end
	end
	
	
	
	var Widget pColorWell
	var Color pColor
	var float pRoundUnit
	var Array pActionListeners
	
	
	
	/** Create widget. */
	func new()
		pActionListeners = Array.new()
		pRoundUnit = 0.001
		
		runWhileBlockingLayout(block
			createContent()
		end)
		
		pColor = Color.black
		updateColorWell()
	end
	
	/** Create widget. */
	func new(Color color) this()
		setColor(color)
	end
	
	/** Dispose of window. */
	func void dispose()
		pActionListeners = null
		pColorWell = null
		super.dispose()
	end
	
	
	
	/** Get color. */
	func Color getColor()
		return pColor
	end
	
	/** Set color. */
	func void setColor(Color color)
		if color.isEqual(pColor, pRoundUnit)
			return
		end
		
		pColor = color
		updateColorWell()
		notifyListeners()
	end
	
	/** Color is equal. */
	func bool isEqualTo(Color color)
		return color.isEqual(pColor, pRoundUnit)
	end
	
	/** Update color well. */
	protected func void updateColorWell()
		pColorWell.setColorTransformation(ColorMatrix.newScaling(pColor))
	end
	
	/** Show dialog to edit color. */
	func void editColor()
		DialogColorPicker.editColor(getWindow(), "@UI.EditColor", pColor,\
		WindowDialog.BlockResultListener.new(block Color result
			if result != null
				setColor(result)
			end
		end))
	end
	
	
	
	/** Add focus listener. */
	func void addFocusListener(FocusListener listener)
		pColorWell.addFocusListener(listener)
	end
	
	/** Remove focus listener. */
	func void removeFocusListener(FocusListener listener)
		pColorWell.removeFocusListener(listener)
	end
	
	
	
	/** Add action listener. */
	func void addActionListener(ActionListener listener)
		if listener == null
			throw ENullPointer.new("listener")
		end
		pActionListeners.add(listener)
	end
	
	/** Remove action listener. */
	func void removeActionListener(ActionListener listener)
		pActionListeners.remove(listener)
	end
	
	
	
	/** Create window content. */
	protected func void createContent()
		setLayout(BoxLayout.new(LayoutAxis.x))
		
		pColorWell = Widget.new()
		pColorWell.setDesignerSelector("ColorWell")
		addWidget(pColorWell)
		pColorWell.addMouseListener(EditColorListener.new(this))
	end
	
	/** Notify listeners. */
	protected func void notifyListeners()
		if pActionListeners == null
			return // disposed
		end
		
		var ActionEvent event = ActionEvent.new(this, ActionEvent.idAction, 0)
		pActionListeners.forEach(block ActionListener each
			each.onAction(event)
		end)
	end
end
