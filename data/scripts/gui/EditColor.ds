/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Gui

pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events
pin Dragengine.Scenery


/**
 * Edit color widget.
 */
class EditColor extends Panel
	protected class ComponentValueChanged extends DefaultTextModelListener
		private var EditColor pEditColor
		private var int pComponent
		
		public func new(EditColor editColor, int component)
			pEditColor = editColor
			pComponent = component
		end
		
		public func void textChanged(TextModel textModel)
			pEditColor.onComponentValueChanged(pComponent)
		end
	end
	
	protected class ComponentValueAccepted implements ActionListener
		private var EditColor pEditColor
		
		public func new(EditColor editColor)
			pEditColor = editColor
		end
		
		public func void onAction(ActionEvent event)
			pEditColor.onComponentValueAccepted()
		end
	end
	
	
	
	private var TextField pEditRed
	private var TextField pEditGreen
	private var TextField pEditBlue
	private var Color pColor
	private var float pRoundUnit
	private var bool pPreventUpdate
	private var Array pActionListeners
	
	
	
	/** Create widget. */
	public func new()
		pActionListeners = Array.new()
		pPreventUpdate = true
		pRoundUnit = 0.001
		
		runWhileBlockingLayout(block
			createContent()
		end)
		
		pColor = Color.black
		pPreventUpdate = false
	end
	
	/** Create widget. */
	public func new(Color color) this()
		setColor(color)
	end
	
	/** Dispose of window. */
	public func void dispose()
		pPreventUpdate = true
		pActionListeners = null
		pEditRed = null
		pEditGreen = null
		pEditBlue = null
		super.dispose()
	end
	
	
	
	/** Get color. */
	public func Color getColor()
		return pColor
	end
	
	/** Set color. */
	public func void setColor(Color color)
		if color.isEqual(pColor, pRoundUnit)
			return
		end
		
		pColor = color
		updateTextFields()
		notifyListeners()
	end
	
	/** Color is equal. */
	public func bool isEqualTo(Color color)
		return color.isEqual(pColor, pRoundUnit)
	end
	
	/** Update text fields. */
	protected func void updateTextFields()
		var float red = DEMath.floor(pColor.getRed() / pRoundUnit + 0.5) * pRoundUnit
		var float green = DEMath.floor(pColor.getGreen() / pRoundUnit + 0.5) * pRoundUnit
		var float blue = DEMath.floor(pColor.getBlue() / pRoundUnit + 0.5) * pRoundUnit
		
		pPreventUpdate = true
		pEditRed.setText(red.toString())
		pEditGreen.setText(green.toString())
		pEditBlue.setText(blue.toString())
		pPreventUpdate = false
	end
	
	
	
	/** Red component text field. */
	public func TextField getEditRed()
		return pEditRed
	end
	
	/** Green component text field. */
	public func TextField getEditGreen()
		return pEditGreen
	end
	
	/** Blue component text field. */
	public func TextField getEditBlueu()
		return pEditBlue
	end
	
	
	
	/** Add focus listener. */
	public func void addFocusListener(FocusListener listener)
		pEditRed.addFocusListener(listener)
		pEditGreen.addFocusListener(listener)
		pEditBlue.addFocusListener(listener)
	end
	
	/** Remove focus listener. */
	public func void removeFocusListener(FocusListener listener)
		pEditRed.removeFocusListener(listener)
		pEditGreen.removeFocusListener(listener)
		pEditBlue.removeFocusListener(listener)
	end
	
	
	
	/** Add action listener. */
	public func void addActionListener(ActionListener listener)
		if listener == null
			throw ENullPointer.new("listener")
		end
		pActionListeners.add(listener)
	end
	
	/** Remove action listener. */
	public func void removeActionListener(ActionListener listener)
		pActionListeners.remove(listener)
	end
	
	
	
	/** Create window content. */
	protected func void createContent()
		setLayout(BoxLayout.new(LayoutAxis.x, 5))
		
		var ComponentValueAccepted action = ComponentValueAccepted.new(this)
		
		addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 0, FlowLayout.Stretch.last), block Panel p
			p.addWidget(Label.new("R"))
			pEditRed = TextField.new(DefaultTextModel.new((0).toString()), 5)
			pEditRed.setValidator(SimpleTextValidator.new(10, SimpleTextValidator.CharacterClass.number))
			pEditRed.getModel().addListener(ComponentValueChanged.new(this, 0))
			pEditRed.addActionListener(action)
			p.addWidget(pEditRed)
		end))
		
		addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 0, FlowLayout.Stretch.last), block Panel p
			p.addWidget(Label.new("G"))
			pEditGreen = TextField.new(DefaultTextModel.new((0).toString()), 5)
			pEditGreen.setValidator(SimpleTextValidator.new(10, SimpleTextValidator.CharacterClass.number))
			pEditGreen.getModel().addListener(ComponentValueChanged.new(this, 1))
			pEditGreen.addActionListener(action)
			p.addWidget(pEditGreen)
		end))
		
		addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 0, FlowLayout.Stretch.last), block Panel p
			p.addWidget(Label.new("B"))
			pEditBlue = TextField.new(DefaultTextModel.new((0).toString()), 5)
			pEditBlue.setValidator(SimpleTextValidator.new(10, SimpleTextValidator.CharacterClass.number))
			pEditBlue.getModel().addListener(ComponentValueChanged.new(this, 2))
			pEditBlue.addActionListener(action)
			p.addWidget(pEditBlue)
		end))
	end
	
	/** Component value changed. */
	public func void onComponentValueChanged(int component)
		if pPreventUpdate
			return
		end
		
		var float red = pColor.getRed()
		var float green = pColor.getGreen()
		var float blue = pColor.getBlue()
		
		try
			select component
			case 0
				red = pEditRed.getText().toFloat()
				
			case 1
				green = pEditGreen.getText().toFloat()
				
			case 2
				blue = pEditBlue.getText().toFloat()
			end
			
		catch Exception e
			return
		end
		
		pColor = Color.new(red, green, blue)
	end
	
	/** Component value accepted. */
	public func void onComponentValueAccepted()
		notifyListeners()
	end
	
	/** Notify listeners. */
	protected func void notifyListeners()
		if pActionListeners == null
			return // disposed
		end
		
		var ActionEvent event = ActionEvent.new(this, ActionEvent.idAction, 0)
		pActionListeners.forEach(block ActionListener each
			each.onAction(event)
		end)
	end
end
