/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Gui

pin Democap.Actors
pin Democap.Actions
pin Democap.Behaviors
pin Democap.Characters
pin Democap.Worlds

pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events
pin Dragengine.Scenery



/**
 * Main window character panel.
 */
class WMPanelSession extends CollapsibleGroup
	protected var bool pInVR
	
	
	
	/** Create session panel. */
	public func new(bool inVR) super("Session", CollapsibleGroup.persistModel(prefixUIOptions(inVR)))
		pInVR = inVR
		
		getPanelContent().runWhileBlockingLayout(block
			createContent(getPanelContent())
		end)
	end
	
	/** UI options prefix. */
	static public func String prefixUIOptions(bool inVR)
		return inVR if "UI/VR/WMPanelSession" else "UI/WMPanelSession"
	end
	
	
	
	/** Shown in VR. */
	public func bool getInVR()
		return pInVR
	end
	
	
	
	/** Toggle large mirror. */
	public func void toggleLargeMirror()
		var BaseVRActor actor = GameApp.getGameApp().getWorldSpawnCharacter().getActor()
		if actor == null
			return
		end
		
		var BehaviorElement mirror = GameApp.getGameApp().getWorldSpawnCharacter().getMirrorLarge()
		if mirror == null
			return
		end
		
		var ECBToggleVisibility.Instance toggleVisibility = ECBToggleVisibility.getInstanceIn(mirror)
		if toggleVisibility == null
			return
		end
		
		if toggleVisibility.getVisible()
			toggleVisibility.setVisible(false)
			
		else
			toggleVisibility.repositionHmd(actor, Vector.new(0, 0, 0.5)) //Vector.new(0.35, 0, 0.35))
			toggleVisibility.setVisible(true)
		end
	end
	
	
	
	/** Start recording. */
	public func void startRecording()
		var BaseVRActor actor = GameApp.getGameApp().getWorldSpawnCharacter().getActor()
		if actor == null
			return
		end
		
		var AAControlCommands aacc = actor.getAIAction().getAction() cast AAControlCommands
		if aacc != null
			aacc.startRecording()
		end
	end
	
	/** Stop recording. */
	public func void stopRecording()
		var BaseVRActor actor = GameApp.getGameApp().getWorldSpawnCharacter().getActor()
		if actor == null
			return
		end
		
		var AAControlCommands aacc = actor.getAIAction().getAction() cast AAControlCommands
		if aacc != null
			aacc.stopRecording()
		end
	end
	
	/** Browse captured animations in overlay directory. */
	public func void browseCapturedAnimations()
		FileSystem.browseCapture(GameApp.getGameApp().getPathCaptureAnimations())
	end
	
	
	
	/** Create panel content. */
	protected func void createContent(Panel content)
		var CheckBox checkBox
		var Button button
		
		content.setLayout(FlowLayout.new(LayoutAxis.y, 2))
		
		content.addWidget(Panel.new(BoxLayout.new(LayoutAxis.x), block Panel p
			checkBox = CheckBox.new(GameApp.getGameApp().getModelEnableVR(), "VR")
			checkBox.setToolTip("Enable VR System")
			p.addWidget(checkBox)
			
			checkBox = CheckBox.new(GameApp.getGameApp().getModelEnableHMD(), "HMD")
			checkBox.setToolTip("Enable HMD. If disabled shows placeholder model. For only tracker use")
			p.addWidget(checkBox)
			
			checkBox = CheckBox.new(GameApp.getGameApp().getModelShowVRCamera(), "VR View")
			checkBox.setToolTip("Show VR View (HMD left eye) or Free Camera in 3D View. "\
				+ "Showing VR View is faster. Use Free Camera to set up scene.")
			p.addWidget(checkBox)
		end)) 
		
		content.addWidget(Panel.new(BoxLayout.new(LayoutAxis.x), block Panel p
			button = Button.new("Mirror", BlockActionListener.new(block ActionEvent event
				toggleLargeMirror()
			end))
			button.setToolTip("Show/hide large VR mirror")
			p.addWidget(button)
			
			button = Button.new(" ", BlockActionListener.new(block ActionEvent event
				startRecording()
			end))
			button.setDesignerSelector("Button.CaptureRecord")
			button.setToolTip("Start motion capturing")
			p.addWidget(button)
			
			button = Button.new(" ", BlockActionListener.new(block ActionEvent event
				stopRecording()
			end))
			button.setDesignerSelector("Button.CaptureStop")
			button.setToolTip("Stop motion capturing writing animation to overlay directory")
			p.addWidget(button)
			
			button = Button.new("Captured", BlockActionListener.new(block ActionEvent event
				browseCapturedAnimations()
			end))
			button.setToolTip("Browse motion captured animations")
			p.addWidget(button)
		end), BorderLayout.Area.bottom)
	end
end
