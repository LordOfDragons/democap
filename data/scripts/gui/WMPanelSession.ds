/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Gui

pin Democap.Actors
pin Democap.Actions
pin Democap.Behaviors
pin Democap.Characters
pin Democap.Worlds

pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events
pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * Main window character panel.
 */
class WMPanelSession extends Panel
	/** Game changes listener. */
	class GameChangedListener extends DefaultGameListener
		protected var WMPanelSession pPanel
		
		func new(WMPanelSession panel)
			pPanel = panel
		end
		
		func void projectChanged(GameApp app)
			pPanel.setScene(null)
		end
		
		func void sceneChanged(GameApp app)
			pPanel.setScene(app.getScene())
		end
		
		func void gameWorldChanged(GameApp app)
			pPanel.updateModelCapturables()
		end
	end
	
	/** Scene changed listener. */
	class SceneChangedListener extends DefaultSceneListener
		protected var WMPanelSession pPanel
		protected var TimerBlock pTimer
		protected var bool pUpdateModelCapturables
		protected var ECBSceneObject.Instance pUpdateModelCapturableName
		
		func new(WMPanelSession panel)
			pPanel = panel
		end
		
		func void objectAdded(Scene scene, ECBSceneObject.Instance object)
			pUpdateModelCapturables = true
			pUpdateModelCapturableName = null
			pStartTimer()
		end
		
		func void objectRemoved(Scene scene, ECBSceneObject.Instance object)
			pUpdateModelCapturables = true
			pUpdateModelCapturableName = null
			pStartTimer()
		end
		
		func void allObjectsRemoved(Scene scene)
			pUpdateModelCapturables = true
			pUpdateModelCapturableName = null
			pStartTimer()
		end
		
		func void objectNameChanged(Scene scene, ECBSceneObject.Instance object)
			if pUpdateModelCapturableName == null
				pUpdateModelCapturableName = object
			else
				pUpdateModelCapturableName = null
				pUpdateModelCapturables = true
			end
			pStartTimer()
		end
		
		protected func void pStartTimer()
			if pTimer != null
				return
			end
			
			pTimer = TimerBlock.new(0, false, block
				pRunTimer()
			end)
		end
		
		protected func void pRunTimer()
			pTimer = null
			if pUpdateModelCapturables
				pUpdateModelCapturables = false
				pPanel.updateModelCapturables()
			end
			if pUpdateModelCapturableName != null
				pPanel.updateModelCapturableName(pUpdateModelCapturableName)
				pUpdateModelCapturableName = null
			end
		end
	end
	
	/** Playback changed. */
	class PlaybackChanged extends PlaybackScene.DefaultListener
		protected var WMPanelSession pPanel
		
		func new(WMPanelSession panel)
			pPanel = panel
		end
		
		func void startPlayback(PlaybackScene playbackScene)
			pPanel.updatePlaybackState()
		end
		
		func void stopPlayback(PlaybackScene playbackScene)
			pPanel.updatePlaybackState()
		end
		
		func void pausePlayback(PlaybackScene playbackScene)
			pPanel.updatePlaybackState()
		end
		
		func void timeChanged(PlaybackScene playbackScene, float time)
			pPanel.updatePlaybackPosition()
		end
		
		func void playtimeChanged(PlaybackScene playbackScene, float playtime)
			pPanel.updatePlaybackPosition()
		end
		
		func void speedChanged(PlaybackScene playbackScene, float speed)
			pPanel.updatePlaybackSpeed()
		end
	end
	
	/** Record state changed. */
	class RecordStateChanged extends RecordScene.DefaultListener
		protected var WMPanelSession pPanel
		
		func new(WMPanelSession panel)
			pPanel = panel
		end
		
		func void prepareRecording(RecordScene recordScene)
			pPanel.updateRecordState()
		end
		
		func void startRecording(RecordScene recordScene)
			pPanel.updateRecordState()
		end
		
		func void stopRecording(RecordScene recordScene)
			pPanel.updateRecordState()
		end
	end
	
	/** Click and drag in playback bar. */
	class ClickAndDragPlaybackBar extends DefaultMouseListener
		protected var bool pDragging
		protected var Widget pWidget
		protected var WMPanelSession pPanel
		
		func new(WMPanelSession panel, Widget widget)
			pPanel = panel
			pWidget = widget
		end
		
		func float positionFromMouse(int mouse)
			var int x = mouse - pWidget.getPadding().getLeft()
			var int width = pWidget.getWidth() - pWidget.getPadding().getWidth()
			var float percentage = (x cast float) / (width cast float)
			return GameApp.getGameApp().getPlaybackScene().getPlaytime() * percentage
		end
		
		func void onButtonPress( MouseEvent event )
			if not pDragging and event.getButton() == InputEventMouseButton.left
				GameApp.getGameApp().getRecordScene().stop(false)
				pDragging = true
				pWidget.captureMouse()
				pPanel.playbackPause()
				GameApp.getGameApp().getPlaybackScene().setTime(\
					positionFromMouse(event.getPosition().getX()))
			end
		end
		
		func void onButtonRelease(MouseEvent event)
			if pDragging and event.getButton() == InputEventMouseButton.left
				pDragging = false
				pWidget.releaseMouse()
			end
		end
		
		func void onMouseMove(MouseEvent event)
			if pDragging
				GameApp.getGameApp().getPlaybackScene().setTime(\
					positionFromMouse(event.getPosition().getX()))
			end
		end
	end
	
	class SelectCapturable extends DefaultListModelListener
		protected var WMPanelSession pPanel
		
		func new(WMPanelSession panel)
			pPanel = panel
		end
		
		func void contentChanged(ListModel model, int fromIndex, int toIndex)
			selectionChanged(model)
		end
		
		func void selectionChanged(ListModel model)
			if pPanel.preventUpdateObjects
				return
			end
			
			var int index = model.getSelected()
			if index != -1
				pPanel.setCapturable(model.getAt(index) cast ECBSceneObject.Instance)
				
			else
				pPanel.setCapturable(null)
			end
		end
	end
	
	class SelectedCaptureableChanged extends ECBCapturable.Tracker.DefaultListener
		protected var WMPanelSession pPanel
		
		func new(WMPanelSession panel)
			pPanel = panel
		end
		
		func void capturedElementChanged(ECBCapturable.Tracker tracker)
			pPanel.selectCapturableFromTracker()
		end
	end
	
	
	
	protected var bool pInVR
	protected var String pPrefixUIOptions
	protected var DefaultRangeModel pModelPlaybackPosition
	protected var DefaultListModel pModelListPlaybackSpeed
	protected var DefaultTextModel pModelTextPlaybackSpeed
	protected var DefaultListModel pModelCapturables
	protected var Button pButtonPlaybackPlay
	protected var Button pButtonPlaybackPlayBackwards
	protected var Button pButtonPlaybackPause
	protected var Button pButtonPlaybackStop
	protected var Button pButtonRecordStart
	protected var Button pButtonRecordStop
	protected var PlaybackChanged pPlaybackChanged
	protected var RecordStateChanged pRecordStateChanged
	protected var SelectedCaptureableChanged pSelectedCaptureableChanged
	protected var GameChangedListener pGameChangedListener
	protected var SceneChangedListener pSceneChangedListener
	protected var Scene pScene
	
	public var bool preventUpdateObjects
	
	
	
	/** Create session panel. */
	func new(bool inVR, String prefixUIOptions)
		pInVR = inVR
		pPrefixUIOptions = prefixUIOptions + "/WMPanelSession"
		
		pModelPlaybackPosition = DefaultRangeModel.new(0, 1000, 100, 0, 1)
		
		pModelListPlaybackSpeed = DefaultListModel.new()
		pModelListPlaybackSpeed.setAutoSelect(false)
		pModelListPlaybackSpeed.setContent(Array.newWith(6, 12, 25, 50, 100, 200, 400, 800, 1600))
		
		pModelTextPlaybackSpeed = DefaultTextModel.new("100")
		
		pModelCapturables = DefaultListModel.new()
		pModelCapturables.setAutoSelect(false)
		
		runWhileBlockingLayout(block
			createContent()
			updateModelCapturables()
			updatePlaybackState()
			updateRecordState()
		end)
		
		pModelCapturables.addListener(SelectCapturable.new(this))
		
		var GameApp app = GameApp.getGameApp()
		
		pSceneChangedListener = SceneChangedListener.new(this)
		
		pPlaybackChanged = PlaybackChanged.new(this)
		app.getPlaybackScene().addListener(pPlaybackChanged)
		
		pRecordStateChanged = RecordStateChanged.new(this)
		app.getRecordScene().addListener(pRecordStateChanged)
		
		pSelectedCaptureableChanged = SelectedCaptureableChanged.new(this)
		app.getCapturableTracker().addListener(pSelectedCaptureableChanged)
		
		pGameChangedListener = GameChangedListener.new(this)
		app.addListener(pGameChangedListener)
	end
	
	/** Dispose of widget. */
	func void dispose()
		setScene(null)
		
		var GameApp app = GameApp.getGameApp()
		
		if pSelectedCaptureableChanged != null
			app.getCapturableTracker().removeListener(pSelectedCaptureableChanged)
			pSelectedCaptureableChanged = null
		end
		if pRecordStateChanged != null
			app.getRecordScene().removeListener(pRecordStateChanged)
			pRecordStateChanged = null
		end
		if pPlaybackChanged != null
			app.getPlaybackScene().removeListener(pPlaybackChanged)
			pPlaybackChanged = null
		end
		if pGameChangedListener != null
			app.removeListener(pGameChangedListener)
			pGameChangedListener = null
		end
		
		pSceneChangedListener = null
		pModelCapturables = null
		
		pButtonPlaybackPlay = null
		pButtonPlaybackPlayBackwards = null
		pButtonPlaybackPause = null
		pButtonPlaybackStop = null
		pModelPlaybackPosition = null
		pModelListPlaybackSpeed = null
		pModelTextPlaybackSpeed = null
		super.dispose()
	end
	
	
	/** Shown in VR. */
	func bool getInVR()
		return pInVR
	end
	
	/** UI prefix options. */
	func String getPrefixUIOptions()
		return pPrefixUIOptions
	end
	
	
	
	/** Active scene or null. */
	func Scene getScene()
		return pScene
	end
	
	/** Set active scene or null. */
	func void setScene(Scene scene)
		if scene == pScene
			return
		end
		
		if pScene != null
			pScene.removeListener(pSceneChangedListener)
		end
		
		pScene = scene
		
		if scene != null
			scene.addListener(pSceneChangedListener)
		end
		
		updateModelCapturables()
	end
	
	
	
	/** Capturables model. */
	func DefaultListModel getModelCapturables()
		return pModelCapturables
	end
	
	/** Selected capturable from tracker. */
	func ECBSceneObject.Instance getCapturableFromTracker()
		var ECBCapturable.Instance capturable = GameApp.getGameApp().getCapturableTracker().getElement()
		if capturable != null
			return ECBSceneObject.getInstanceIn(capturable.getElement())
		end
		return null
	end
	
	/** Select capturable from tracker. */
	func void selectCapturableFromTracker()
		preventUpdateObjects = true
		pModelCapturables.setSelectedElement(getCapturableFromTracker())
		preventUpdateObjects = false
	end
	
	/** Update capturables model. */
	func void updateModelCapturables()
		if pModelCapturables == null
			return // dispose protection
		end
		
		var ECBSceneObject.Instance selection = getCapturableFromTracker()
		var Array content = Array.new()
		
		var GameWorld gameWorld = GameApp.getGameApp().getWindowGameWorld().getGameWorld()
		if gameWorld != null
			gameWorld.forEachElement(block BehaviorElement each
				if ECBCapturable.getInstanceIn(each) != null
					content.add(ECBSceneObject.getInstanceIn(each))
				end
			end)
		end
		
		content.sort(block ECBSceneObject.Instance a, ECBSceneObject.Instance b
			return a.getDisplayName().compare(b.getDisplayName())
		end)
		
		content.insert(0, null)
		
		preventUpdateObjects = true
		pModelCapturables.setContent(content)
		
		pModelCapturables.setSelectedElement(selection)
		preventUpdateObjects = false
		setCapturable(selection)
	end
	
	func void updateModelCapturableName(ECBSceneObject.Instance object)
		if pModelCapturables == null
			return // dispose protection
		end
		
		var int index = pModelCapturables.indexOf(object)
		if index != -1
			pModelCapturables.notifyElementChanged(index)
		end
	end
	
	func void setCapturable(ECBSceneObject.Instance capturable)
		if capturable != null
			GameApp.getGameApp().getCapturableTracker().setElement(ECBCapturable.getInstanceIn(capturable.getElement()))
			
		else
			GameApp.getGameApp().getCapturableTracker().setElement(null)
		end
	end
	
	
	
	/** Update record state. */
	func void updateRecordState()
		var RecordScene record = GameApp.getGameApp().getRecordScene()
		var RecordScene.State state = record.getState()
		
		pButtonRecordStart.setEnabled(state == RecordScene.State.stopped)
		pButtonRecordStop.setEnabled(state != RecordScene.State.stopped)
	end
	
	/** Start recording. */
	func void startRecording()
		var GameApp app = GameApp.getGameApp()
		var BaseVRActor actor = app.getWorldSpawnCharacter().getActor()
		if actor == null
			return
		end
		
		var AAControlCommands aacc = actor.getAIAction().getAction() cast AAControlCommands
		if aacc == null
			return
		end
		
		var ECBCapturable.Instance capturable = app.getCapturableTracker().getElement()
		var ECBCapturedAnimations.Instance capturedAnimations
		
		if capturable != null
			capturedAnimations = ECBCapturedAnimations.getInstanceIn(capturable.getElement())
			
			if capturedAnimations != null
				if capturedAnimations.getCaptureTarget() == ECBCapturedAnimations.CaptureTarget.character
					if not capturedAnimations.getCharacterProfile().equals(\
					app.getWorldSpawnCharacter().getCharacter().getProfile().getName())
						WindowDialog.message(getWindow(), "@UI.RecordAnimation",\
							"@UI.Message.RecordNoMatch", null, null, null)
						return
					end
					
					if capturedAnimations.getAnimations().getActive() == null
						WindowDialog.message(getWindow(), "@UI.RecordAnimation",\
							"@UI.Message.RecordNoAnimation", null, null, null)
						return
					end
					
				else
					capturedAnimations = null
				end
			end
		end
		
		if capturedAnimations == null and pModelCapturables.getCount() > 0
			WindowDialog.question(getWindow(), "@UI.RecordAnimation",\
				"@UI.Message.RecordFree", null,\
				Array.newWith(WindowDialog.ButtonConfiguration.new("@UI.RecordFree", true), \
				WindowDialog.ButtonConfiguration.new("@UI.Cancel", false)),\
				WindowDialog.BlockResultListener.new(block bool result
					if result
						aacc.startRecording()
					end
				end))
			return
		end
		
		aacc.startRecording()
	end
	
	/** Stop recording. */
	func void stopRecording()
		var BaseVRActor actor = GameApp.getGameApp().getWorldSpawnCharacter().getActor()
		if actor == null
			return
		end
		
		var AAControlCommands aacc = actor.getAIAction().getAction() cast AAControlCommands
		if aacc != null
			aacc.stopRecording()
		end
	end
	
	/** Browse captured animations in overlay directory. */
	func void browseCapturedAnimations()
		FileSystem.browseCapture(GameApp.getGameApp().getPathCaptureAnimations())
	end
	
	
	
	/** Update playback state. */
	func void updatePlaybackState()
		var PlaybackScene playback = GameApp.getGameApp().getPlaybackScene()
		var PlaybackScene.State state = playback.getState()
		var bool recordStopped = GameApp.getGameApp().getRecordScene().isStopped()
		
		pButtonPlaybackPlay.setEnabled(state != PlaybackScene.State.playing\
			or playback.getBackwards())
		pButtonPlaybackPlayBackwards.setEnabled(state != PlaybackScene.State.playing\
			or not playback.getBackwards())
		pButtonPlaybackPause.setEnabled(state == PlaybackScene.State.playing)
		pButtonPlaybackStop.setEnabled(state != PlaybackScene.State.stopped)
	end
	
	/** Update playback position. */
	func void updatePlaybackPosition()
		var PlaybackScene ps = GameApp.getGameApp().getPlaybackScene()
		var float playtime = ps.getPlaytime()
		
		if playtime < 0.01
			pModelPlaybackPosition.setValue(0)
			
		else
			pModelPlaybackPosition.setValue((ps.getTime() * 1000 / playtime) cast int)
		end
	end
	
	/** Update playback speed. */
	func void updatePlaybackSpeed()
		pModelTextPlaybackSpeed.setText(((GameApp.getGameApp().getPlaybackScene().getSpeed() * 100 + 0.5) cast int).toString())
	end
	
	/** Start playback. */
	func void playbackStart(bool backwards)
		GameApp.getGameApp().getRecordScene().stop(false)
		GameApp.getGameApp().getPlaybackScene().play(backwards)
	end
	
	/** Pause playback. */
	func void playbackPause()
		GameApp.getGameApp().getRecordScene().stop(false)
		GameApp.getGameApp().getPlaybackScene().pause()
	end
	
	/** Stop playback. */
	func void playbackStop()
		GameApp.getGameApp().getRecordScene().stop(false)
		GameApp.getGameApp().getPlaybackScene().stop()
	end
	
	/** Rewind playback. */
	func void playbackRewind()
		GameApp.getGameApp().getRecordScene().stop(false)
		GameApp.getGameApp().getPlaybackScene().rewind()
	end
	
	/** Fast forward to end of playback. */
	func void playbackForwardEnd()
		GameApp.getGameApp().getRecordScene().stop(false)
		GameApp.getGameApp().getPlaybackScene().forwardEnd()
	end
	
	
	
	/** Create panel content. */
	protected func void createContent()
		var SessionSettings sessionSettings = SessionSettings.get()
		var ComboBox comboBox
		var CheckBox checkBox
		var Button button
		var TextField textField
		var Label label
		var SpinButton spinButton
		var String tooltip
		
		setLayout(FlowLayout.new(LayoutAxis.y, 2))
		
		addWidget(CollapsibleGroup.new("@UI.Session", "uipanelcapture",\
		CollapsibleGroup.persistModel(pPrefixUIOptions + "/Session"),\
		FlowLayout.new(LayoutAxis.y, 2), block Panel gp
			gp.addWidget(Panel.new(BorderLayout.new(), block Panel p
				p.addWidget(Panel.new(BoxLayout.new(LayoutAxis.x), block Panel p2
					pButtonRecordStart = Button.new(" ", BlockActionListener.new(block ActionEvent event
						startRecording()
					end))
					pButtonRecordStart.setDesignerSelector("Button.CaptureRecord")
					pButtonRecordStart.setToolTip("@UI.ToolTip.MoCapStart")
					p2.addWidget(pButtonRecordStart)
					
					pButtonRecordStop = Button.new(" ", BlockActionListener.new(block ActionEvent event
						stopRecording()
					end))
					pButtonRecordStop.setDesignerSelector("Button.CaptureStop")
					pButtonRecordStop.setToolTip("@UI.ToolTip.MoCapStop")
					p2.addWidget(pButtonRecordStop)
					
					button = Button.new("@UI.Captured", BlockActionListener.new(block ActionEvent event
						browseCapturedAnimations()
					end))
					button.setToolTip("@UI.ToolTip.MoCapCaptured")
					p2.addWidget(button)
				end), BorderLayout.Area.content)
			end)) 
			
			gp.addWidget(Panel.new(BoxLayout.new(LayoutAxis.x, 5), block Panel p
				// frame rate
				p.addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 3, FlowLayout.Stretch.last), block Panel p2
					tooltip = "@UI.ToolTip.MoCapRate"
					
					label = Label.new("@UI.Rate.Label", "Label.FormCaption.SingleLine")
					label.setToolTip(tooltip)
					p2.addWidget(label)
					
					textField = TextField.new(RangeTextModel.new(sessionSettings.getModelRecordFrameRate()), 2)
					textField.setToolTip(tooltip)
					textField.setValidator(SimpleTextValidator.new(2, SimpleTextValidator.CharacterClass.digits))
					p2.addWidget(textField)
					textField.addMouseListener(ScrollModelWheelMouseListener.new(sessionSettings.getModelRecordFrameRate()))
					
					spinButton = SpinButton.new(sessionSettings.getModelRecordFrameRate())
					spinButton.setToolTip(tooltip)
					p2.addWidget(spinButton)
				end))
				
				// smoothing
				p.addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 3, FlowLayout.Stretch.last), block Panel p2
					tooltip = "@UI.ToolTip.SlotSmooth"
					
					label = Label.new("@UI.Smooth.Label", "Label.FormCaption.SingleLine")
					label.setToolTip(tooltip)
					p2.addWidget(label)
					
					textField = TextField.new(RangeTextModel.new(sessionSettings.getModelSmoothSlotStrength()), 2)
					textField.setToolTip(tooltip)
					textField.setValidator(SimpleTextValidator.new(2, SimpleTextValidator.CharacterClass.digits))
					p2.addWidget(textField)
					textField.addMouseListener(ScrollModelWheelMouseListener.new(sessionSettings.getModelSmoothSlotStrength()))
					
					spinButton = SpinButton.new(sessionSettings.getModelSmoothSlotStrength())
					spinButton.setToolTip(tooltip)
					p2.addWidget(spinButton)
				end))
				
				p.addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 3, FlowLayout.Stretch.last), block Panel p2
					tooltip = "@UI.ToolTip.AnimationSmooth"
					
					label = Label.new("@UI.Record.Label", "Label.FormCaption.SingleLine")
					label.setToolTip(tooltip)
					p2.addWidget(label)
					
					var EnumListElementRenderer renderer = EnumListElementRenderer.new()
					renderer.setTranslationPrefix("UI.Enum.RecordDevices.")
					renderer.setDefaultObject(SessionSettings.RecordDevices.reference) // longest name
					
					comboBox  = ComboBox.new(sessionSettings.getModelRecordDevices(), renderer)
					comboBox.setToolTip("@UI.ToolTip.RecordDevices")
					p2.addWidget(comboBox)
				end))
			end))
			
			gp.addWidget(Panel.new(BoxLayout.new(LayoutAxis.x), block Panel p
				var ProgressBar progress = ProgressBar.new(Orientation.horizontal, pModelPlaybackPosition)
				progress.setDesignerSelector("ProgressBar.PlaybackTime")
				progress.addMouseListener(ClickAndDragPlaybackBar.new(this, progress))
				p.addWidget(progress)
			end))
			
			gp.addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 0, FlowLayout.Stretch.first), block Panel p
				p.addWidget(Panel.new(BoxLayout.new(LayoutAxis.x), block Panel p2
					button = Button.new(" ", BlockActionListener.new(block ActionEvent event
						playbackRewind()
					end))
					button.setDesignerSelector("Button.PlaybackRewind")
					button.setToolTip("@UI.ToolTip.PlaybackRewind")
					p2.addWidget(button)
					
					pButtonPlaybackPlayBackwards = Button.new(" ", BlockActionListener.new(block ActionEvent event
						playbackStart(true)
					end))
					pButtonPlaybackPlayBackwards.setDesignerSelector("Button.PlaybackPlayBackwards")
					pButtonPlaybackPlayBackwards.setToolTip("@UI.ToolTip.PlaybackPlayBackward")
					p2.addWidget(pButtonPlaybackPlayBackwards)
					
					pButtonPlaybackPlay = Button.new(" ", BlockActionListener.new(block ActionEvent event
						playbackStart(false)
					end))
					pButtonPlaybackPlay.setDesignerSelector("Button.PlaybackPlay")
					pButtonPlaybackPlay.setToolTip("@UI.ToolTip.PlaybackPlay")
					p2.addWidget(pButtonPlaybackPlay)
					
					pButtonPlaybackPause = Button.new(" ", BlockActionListener.new(block ActionEvent event
						playbackPause()
					end))
					pButtonPlaybackPause.setDesignerSelector("Button.PlaybackPause")
					pButtonPlaybackPause.setToolTip("@UI.ToolTip.PlaybackPause")
					p2.addWidget(pButtonPlaybackPause)
					
					pButtonPlaybackStop = Button.new(" ", BlockActionListener.new(block ActionEvent event
						playbackStop()
					end))
					pButtonPlaybackStop.setDesignerSelector("Button.PlaybackStop")
					pButtonPlaybackStop.setToolTip("@UI.ToolTip.PlaybackStop")
					p2.addWidget(pButtonPlaybackStop)
					
					button = Button.new(" ", BlockActionListener.new(block ActionEvent event
						playbackForwardEnd()
					end))
					button.setDesignerSelector("Button.PlaybackForwardEnd")
					button.setToolTip("@UI.ToolTip.PlaybackFastForward")
					p2.addWidget(button)
				end))
			end))
			
			gp.addWidget(Panel.new(BoxLayout.new(LayoutAxis.x), block Panel p
				p.addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 5, FlowLayout.Stretch.last), block Panel p2
					tooltip = "@UI.ToolTip.PlaybackSpeed"
					
					label = Label.new("@UI.Speed.Label", "Label.FormCaption.SingleLine")
					label.setToolTip(tooltip)
					p2.addWidget(label)
					
					var DefaultComboBoxEditor editor = DefaultComboBoxEditor.new(pModelTextPlaybackSpeed, 2)
					editor.setValidator(SimpleTextValidator.new(4, SimpleTextValidator.CharacterClass.digits))
					comboBox = ComboBox.new(pModelListPlaybackSpeed, editor)
					comboBox.setToolTip(tooltip)
					p2.addWidget(comboBox)
					editor.addTextActionListener(BlockActionListener.new(block ActionEvent event
						GameApp.getGameApp().getPlaybackScene().setSpeed(0.01 * pModelTextPlaybackSpeed.getText().toInt())
					end))
				end))
				
				checkBox = CheckBox.new(sessionSettings.getModelAutoStopRecord(), "@UI.AutoStopRecord")
				checkBox.setToolTip("@UI.ToolTip.AutoStopRecord")
				p.addWidget(checkBox)
			end))
			
			gp.addWidget(Panel.new(FormLayout.new(true, 5, 2), block Panel p
				tooltip = "@UI.ToolTip.Capturable"
				
				label = Label.new("@UI.Capturable.Label", "Label.FormCaption.SingleLine")
				label.setToolTip(tooltip)
				p.addWidget(label)
				
				comboBox = ComboBox.new(pModelCapturables, WMPanelProject.ObjectElementRenderer.new())
				comboBox.setToolTip(tooltip)
				p.addWidget(comboBox)
			end))
		end))
		
		addWidget(WMPPanelStageDirections.new(this))
	end
end
