/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Gui

pin Democap.Actors
pin Democap.Actions
pin Democap.Behaviors
pin Democap.Characters
pin Democap.Worlds

pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events
pin Dragengine.Scenery



/**
 * Main window character panel.
 */
class WMPanelSession extends Panel
	/** Playback changed. */
	class PlaybackChanged extends PlaybackScene.DefaultListener
		protected var WMPanelSession pPanel
		
		public func new(WMPanelSession panel)
			pPanel = panel
		end
		
		public func void startPlayback(PlaybackScene playbackScene)
			pPanel.updatePlaybackState()
		end
		
		public func void stopPlayback(PlaybackScene playbackScene)
			pPanel.updatePlaybackState()
		end
		
		public func void pausePlayback(PlaybackScene playbackScene)
			pPanel.updatePlaybackState()
		end
		
		public func void timeChanged(PlaybackScene playbackScene, float time)
			pPanel.updatePlaybackPosition()
		end
		
		public func void playtimeChanged(PlaybackScene playbackScene, float playtime)
			pPanel.updatePlaybackPosition()
		end
		
		public func void speedChanged(PlaybackScene playbackScene, float speed)
			pPanel.updatePlaybackSpeed()
		end
	end
	
	/** Click and drag in playback bar. */
	class ClickAndDragPlaybackBar extends DefaultMouseListener
		protected var bool pDragging
		protected var Widget pWidget
		protected var WMPanelSession pPanel
		
		public func new(WMPanelSession panel, Widget widget)
			pPanel = panel
			pWidget = widget
		end
		
		public func float positionFromMouse(int mouse)
			var int x = mouse - pWidget.getPadding().getLeft()
			var int width = pWidget.getWidth() - pWidget.getPadding().getWidth()
			var float percentage = (x cast float) / (width cast float)
			return GameApp.getGameApp().getPlaybackScene().getPlaytime() * percentage
		end
		
		public func void onButtonPress( MouseEvent event )
			if not pDragging and event.getButton() == InputEventMouseButton.left
				pDragging = true
				pWidget.captureMouse()
				pPanel.playbackPause()
				GameApp.getGameApp().getPlaybackScene().setTime(\
					positionFromMouse(event.getPosition().getX()))
			end
		end
		
		public func void onButtonRelease(MouseEvent event)
			if pDragging and event.getButton() == InputEventMouseButton.left
				pDragging = false
				pWidget.releaseMouse()
			end
		end
		
		public func void onMouseMove(MouseEvent event)
			if pDragging
				GameApp.getGameApp().getPlaybackScene().setTime(\
					positionFromMouse(event.getPosition().getX()))
			end
		end
	end
	
	class RecordDevicesRenderer extends DefaultListElementRenderer
		public func new()
			setDefaultObject(SessionSettings.RecordDevices.reference) // longest name
		end
		
		public func void updateRenderer(ListBox listBox, Widget renderer, Object element, bool selected, bool focused)
			super.updateRenderer(listBox, renderer, (element cast SessionSettings.RecordDevices).name(), selected, focused)
		end
	end
	
	
	
	protected var bool pInVR
	protected var String pPrefixUIOptions
	protected var DefaultRangeModel pModelPlaybackPosition
	protected var DefaultListModel pModelListPlaybackSpeed
	protected var DefaultTextModel pModelTextPlaybackSpeed
	protected var Button pButtonPlaybackPlay
	protected var Button pButtonPlaybackPlayBackwards
	protected var Button pButtonPlaybackPause
	protected var Button pButtonPlaybackStop
	protected var PlaybackChanged pPlaybackChanged
	
	
	
	/** Create session panel. */
	public func new(bool inVR, String prefixUIOptions)
		pInVR = inVR
		pPrefixUIOptions = prefixUIOptions + "/WMPanelSession"
		
		pModelPlaybackPosition = DefaultRangeModel.new(0, 1000, 100, 0, 1)
		
		pModelListPlaybackSpeed = DefaultListModel.new()
		pModelListPlaybackSpeed.setAutoSelect(false)
		pModelListPlaybackSpeed.setContent(Array.newWith(6, 12, 25, 50, 100, 200, 400, 800, 1600))
		
		pModelTextPlaybackSpeed = DefaultTextModel.new("100")
		
		runWhileBlockingLayout(block
			createContent()
			updatePlaybackState()
		end)
		
		pPlaybackChanged = PlaybackChanged.new(this)
		GameApp.getGameApp().getPlaybackScene().addListener(pPlaybackChanged)
	end
	
	/** Dispose of widget. */
	public func void dispose()
		if pPlaybackChanged != null
			GameApp.getGameApp().getPlaybackScene().removeListener(pPlaybackChanged)
			pPlaybackChanged = null
		end
		
		pButtonPlaybackPlay = null
		pButtonPlaybackPlayBackwards = null
		pButtonPlaybackPause = null
		pButtonPlaybackStop = null
		pModelPlaybackPosition = null
		pModelListPlaybackSpeed = null
		pModelTextPlaybackSpeed = null
		super.dispose()
	end
	
	
	/** Shown in VR. */
	public func bool getInVR()
		return pInVR
	end
	
	/** UI prefix options. */
	public func String getPrefixUIOptions()
		return pPrefixUIOptions
	end
	
	
	
	/** Start recording. */
	public func void startRecording()
		var GameApp app = GameApp.getGameApp()
		var BaseVRActor actor = app.getWorldSpawnCharacter().getActor()
		if actor == null
			return
		end
		
		var AAControlCommands aacc = actor.getAIAction().getAction() cast AAControlCommands
		if aacc == null
			return
		end
		
		var ECBSelectable.Instance selection = app.getSelectionTracker().getElement()
		if selection != null
			var ECBCapturedAnimations.Instance ca = ECBCapturedAnimations.getInstanceIn(selection.getElement())
			
			if ca != null
				if not ca.getCharacterProfile().equals(app.getWorldSpawnCharacter().getCharacter().getProfile().getName())
					WindowDialog.message(getWindow(), "Record Animation",\
						"Recording into selected Capture Animation Scene Object is only possible " +\
						"if the matching Character Profile is activate.", null, null, null)
					return
				end
				
				if ca.getAnimations().getActive() == null
					WindowDialog.message(getWindow(), "Record Animation",\
						"Recording into selected Capture Animation Scene Object is only possible " +\
						"if an animation is selected.", null, null, null)
					return
				end
			end
		end
		
		aacc.startRecording()
	end
	
	/** Stop recording. */
	public func void stopRecording()
		var BaseVRActor actor = GameApp.getGameApp().getWorldSpawnCharacter().getActor()
		if actor == null
			return
		end
		
		var AAControlCommands aacc = actor.getAIAction().getAction() cast AAControlCommands
		if aacc != null
			aacc.stopRecording()
		end
	end
	
	/** Browse captured animations in overlay directory. */
	public func void browseCapturedAnimations()
		FileSystem.browseCapture(GameApp.getGameApp().getPathCaptureAnimations())
	end
	
	
	
	/** Update playback state. */
	public func void updatePlaybackState()
		var PlaybackScene playback = GameApp.getGameApp().getPlaybackScene()
		var PlaybackScene.State state = playback.getState()
		
		pButtonPlaybackPlay.setEnabled(state != PlaybackScene.State.playing\
			or playback.getBackwards())
		pButtonPlaybackPlayBackwards.setEnabled(state != PlaybackScene.State.playing\
			or not playback.getBackwards())
		pButtonPlaybackPause.setEnabled(state == PlaybackScene.State.playing)
		pButtonPlaybackStop.setEnabled(state != PlaybackScene.State.stopped)
	end
	
	/** Update playback position. */
	public func void updatePlaybackPosition()
		var PlaybackScene ps = GameApp.getGameApp().getPlaybackScene()
		var float playtime = ps.getPlaytime()
		
		if playtime < 0.01
			pModelPlaybackPosition.setValue(0)
			
		else
			pModelPlaybackPosition.setValue((ps.getTime() * 1000 / playtime) cast int)
		end
	end
	
	/** Update playback speed. */
	public func void updatePlaybackSpeed()
		pModelTextPlaybackSpeed.setText(((GameApp.getGameApp().getPlaybackScene().getSpeed() * 100 + 0.5) cast int).toString())
	end
	
	/** Start playback. */
	public func void playbackStart(bool backwards)
		GameApp.getGameApp().getPlaybackScene().play(backwards)
	end
	
	/** Pause playback. */
	public func void playbackPause()
		GameApp.getGameApp().getPlaybackScene().pause()
	end
	
	/** Stop playback. */
	public func void playbackStop()
		GameApp.getGameApp().getPlaybackScene().stop()
	end
	
	/** Rewind playback. */
	public func void playbackRewind()
		GameApp.getGameApp().getPlaybackScene().rewind()
	end
	
	/** Fast forward to end of playback. */
	public func void playbackForwardEnd()
		GameApp.getGameApp().getPlaybackScene().forwardEnd()
	end
	
	
	
	/** Create panel content. */
	protected func void createContent()
		var SessionSettings sessionSettings = SessionSettings.get()
		var ComboBox comboBox
		var CheckBox checkBox
		var Button button
		var TextField textField
		var Label label
		var SpinButton spinButton
		var String tooltip
		
		setLayout(FlowLayout.new(LayoutAxis.y, 2))
		
		addWidget(Panel.new(BorderLayout.new(5), block Panel p
			p.setDesignerSelector("Panel.CollapsibleGroup.Header")
			p.addWidget(Label.new("Session", "Label.CollapsibleGroup"), BorderLayout.Area.content)
			
			p.addWidget(HelpButton.new("uipanelcapture"), BorderLayout.Area.right)
		end))
		
		addWidget(Panel.new(BorderLayout.new(), block Panel p
			p.addWidget(Panel.new(BoxLayout.new(LayoutAxis.x), block Panel p2
				button = Button.new(" ", BlockActionListener.new(block ActionEvent event
					startRecording()
				end))
				button.setDesignerSelector("Button.CaptureRecord")
				button.setToolTip("Start motion capturing")
				p2.addWidget(button)
				
				button = Button.new(" ", BlockActionListener.new(block ActionEvent event
					stopRecording()
				end))
				button.setDesignerSelector("Button.CaptureStop")
				button.setToolTip("Stop motion capturing writing animation to overlay directory")
				p2.addWidget(button)
				
				button = Button.new("Captured", BlockActionListener.new(block ActionEvent event
					browseCapturedAnimations()
				end))
				button.setToolTip("Browse motion captured animations")
				p2.addWidget(button)
			end), BorderLayout.Area.content)
		end)) 
		
		addWidget(Panel.new(BoxLayout.new(LayoutAxis.x, 5), block Panel p
			// frame rate
			p.addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 3, FlowLayout.Stretch.last), block Panel p2
				tooltip = "Frame rate to use for recording animations"
				
				label = Label.new("Rate:", "Label.FormCaption")
				label.setToolTip(tooltip)
				p2.addWidget(label)
				
				textField = TextField.new(RangeTextModel.new(sessionSettings.getModelRecordFrameRate()), 2)
				textField.setToolTip(tooltip)
				textField.setValidator(SimpleTextValidator.new(2, SimpleTextValidator.CharacterClass.digits))
				p2.addWidget(textField)
				textField.addMouseListener(ScrollModelWheelMouseListener.new(sessionSettings.getModelRecordFrameRate()))
				
				spinButton = SpinButton.new(sessionSettings.getModelRecordFrameRate())
				spinButton.setToolTip(tooltip)
				p2.addWidget(spinButton)
			end))
			
			// smoothing
			p.addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 3, FlowLayout.Stretch.last), block Panel p2
				tooltip = "Slot smoothing strength (0=none, 10=full)"
				
				label = Label.new("Smooth:", "Label.FormCaption")
				label.setToolTip(tooltip)
				p2.addWidget(label)
				
				textField = TextField.new(RangeTextModel.new(sessionSettings.getModelSmoothSlotStrength()), 2)
				textField.setToolTip(tooltip)
				textField.setValidator(SimpleTextValidator.new(2, SimpleTextValidator.CharacterClass.digits))
				p2.addWidget(textField)
				textField.addMouseListener(ScrollModelWheelMouseListener.new(sessionSettings.getModelSmoothSlotStrength()))
				
				spinButton = SpinButton.new(sessionSettings.getModelSmoothSlotStrength())
				spinButton.setToolTip(tooltip)
				p2.addWidget(spinButton)
			end))
			
			p.addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 3, FlowLayout.Stretch.last), block Panel p2
				tooltip = "Animation smoothing strength (0=none, 10=full)"
				
				label = Label.new("Record:", "Label.FormCaption")
				label.setToolTip(tooltip)
				p2.addWidget(label)
				
				comboBox  = ComboBox.new(sessionSettings.getModelRecordDevices(), RecordDevicesRenderer.new())
				comboBox.setToolTip("Record VR device positions too.\n"\
					+ "none: Not recording.\n"\
					+ "device: Original device position\n"\
					+ "reference: Reference slot position\n"\
					+ "target: Target slot position")
				p2.addWidget(comboBox)
			end))
		end))
		
		addWidget(Panel.new(BoxLayout.new(LayoutAxis.x), block Panel p
			var ProgressBar progress = ProgressBar.new(Orientation.horizontal, pModelPlaybackPosition)
			progress.setDesignerSelector("ProgressBar.PlaybackTime")
			progress.addMouseListener(ClickAndDragPlaybackBar.new(this, progress))
			p.addWidget(progress)
		end))
		
		addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 0, FlowLayout.Stretch.first), block Panel p
			p.addWidget(Panel.new(BoxLayout.new(LayoutAxis.x), block Panel p2
				button = Button.new(" ", BlockActionListener.new(block ActionEvent event
					playbackRewind()
				end))
				button.setDesignerSelector("Button.PlaybackRewind")
				button.setToolTip("Rewind to start")
				p2.addWidget(button)
				
				pButtonPlaybackPlayBackwards = Button.new(" ", BlockActionListener.new(block ActionEvent event
					playbackStart(true)
				end))
				pButtonPlaybackPlayBackwards.setDesignerSelector("Button.PlaybackPlayBackwards")
				pButtonPlaybackPlayBackwards.setToolTip("Start playing backwards")
				p2.addWidget(pButtonPlaybackPlayBackwards)
				
				pButtonPlaybackPlay = Button.new(" ", BlockActionListener.new(block ActionEvent event
					playbackStart(false)
				end))
				pButtonPlaybackPlay.setDesignerSelector("Button.PlaybackPlay")
				pButtonPlaybackPlay.setToolTip("Start playing")
				p2.addWidget(pButtonPlaybackPlay)
				
				pButtonPlaybackPause = Button.new(" ", BlockActionListener.new(block ActionEvent event
					playbackPause()
				end))
				pButtonPlaybackPause.setDesignerSelector("Button.PlaybackPause")
				pButtonPlaybackPause.setToolTip("Pause/Resume playback")
				p2.addWidget(pButtonPlaybackPause)
				
				pButtonPlaybackStop = Button.new(" ", BlockActionListener.new(block ActionEvent event
					playbackStop()
				end))
				pButtonPlaybackStop.setDesignerSelector("Button.PlaybackStop")
				pButtonPlaybackStop.setToolTip("Stop playback and rewind to start")
				p2.addWidget(pButtonPlaybackStop)
				
				button = Button.new(" ", BlockActionListener.new(block ActionEvent event
					playbackForwardEnd()
				end))
				button.setDesignerSelector("Button.PlaybackForwardEnd")
				button.setToolTip("Fast forward to end of playback")
				p2.addWidget(button)
			end))
			
			var DefaultComboBoxEditor editor = DefaultComboBoxEditor.new(pModelTextPlaybackSpeed, 2)
			editor.setValidator(SimpleTextValidator.new(4, SimpleTextValidator.CharacterClass.digits))
			comboBox = ComboBox.new(pModelListPlaybackSpeed, editor)
			comboBox.setToolTip("Playback speed in percentage (100 = normal speed)")
			p.addWidget(comboBox)
			editor.addTextActionListener(BlockActionListener.new(block ActionEvent event
				GameApp.getGameApp().getPlaybackScene().setSpeed(0.01 * pModelTextPlaybackSpeed.getText().toInt())
			end))
		end))
		
		addWidget(WMPPanelStageDirections.new(this))
	end
end
