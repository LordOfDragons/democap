/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Gui

pin Democap.Behaviors
pin Democap.Characters
pin Democap.MotionTransferSystem

pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events
pin Dragengine.Scenery


/**
 * Edit character config window motion transfer animation panel.
 */
class WCCPanelMotionTransfer extends Panel
	class NameChangedListener extends DefaultFocusListener
		var WCCPanelMotionTransfer pPanel
		var TextModel pModel
		
		func new(WCCPanelMotionTransfer panel, TextModel model)
			pPanel = panel
			pModel = model
		end
		
		func void onFocusLost(FocusEvent event)
			if pPanel.getMotionTransfer().getName().equals(pModel.getText())
				return
			end
			
			pPanel.getMotionTransfer().setName(pModel.getText())
			pPanel.getWindowCharacterConfiguration().onMotionTransferNameChanged()
		end
	end
	
	
	
	protected var WindowCharacterConfiguration pWindowCharacterConfiguration
	protected var MotionTransfer pMotionTransfer
	protected var DefaultTextModel pModelTypeName
	protected var DefaultTextModel pModelName
	protected var Panel pPanelForm
	
	
	
	/** Create window. */
	func new(WindowCharacterConfiguration window)
		pWindowCharacterConfiguration = window
		pModelTypeName = DefaultTextModel.new()
		pModelName = DefaultTextModel.new()
	end
	
	/** Dispose of window. */
	func void dispose()
		pMotionTransfer = null
		
		pModelTypeName = null
		pModelName = null
		pWindowCharacterConfiguration = null
		pPanelForm = null
		
		super.dispose()
	end
	
	
	
	/** Window character configuration. */
	func WindowCharacterConfiguration getWindowCharacterConfiguration()
		return pWindowCharacterConfiguration
	end
	
	/** Motion transfer or null. */
	func MotionTransfer getMotionTransfer()
		return pMotionTransfer
	end
	
	/** Set motion transfer or null. */
	func void setMotionTransfer(MotionTransfer motionTransfer)
		if motionTransfer == pMotionTransfer
			return
		end
		
		pMotionTransfer = motionTransfer
		onMotionTransferChanged()
		
		loadValues()
	end
	
	/** Supports motion transfer type. */
	func bool supports(MotionTransfer motionTranfer)
		return false
	end
	
	
	
	/** Load values from tracker slot object if present into edit widgets. */
	func void loadValues()
		if pMotionTransfer != null
			pModelName.setText(pMotionTransfer.getName())
			
		else
			pModelName.setText("")
		end
	end
	
	/** Save value from edit widgets to tracker slot object if present. */
	func void saveValues()
		if pMotionTransfer == null
			return
		end
		
		pMotionTransfer.setName(pModelName.getText())
	end
	
	
	
	/** Create window content. */
	protected func void createBaseContent(String helpTopic)
		setLayout(FlowLayout.new(LayoutAxis.y, 5))
		
		addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 0, FlowLayout.Stretch.first), block Panel p
			p.addWidget(Label.new(pModelTypeName, "Label.FormCaption.SingleLine"))
			
			if not helpTopic.empty()
				p.addWidget(HelpButton.new(helpTopic))
			end
		end))
		
		pPanelForm = Panel.new(FormLayout.new(true, 10, 2), block Panel p
			// name
			p.addWidget(Label.new("@UI.Name.Label", "Label.FormCaption.SingleLine"))
			
			p.addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 1, FlowLayout.Stretch.first), block Panel p2
				var TextField textField = TextField.new(pModelName, 15)
				textField.setDesignerSelector("TextField.WindowCharacterConfiguration")
				textField.setToolTip("@UI.ToolTip.MotionTransferName")
				textField.addFocusListener(NameChangedListener.new(this, pModelName))
				p2.addWidget(textField)
				
				var Button button = Button.new("...", BlockActionListener.new(block ActionEvent event
					var Widget widget = event.getSource() cast Widget
					var MenuPopup menu = MenuPopup.new()
					
					onPanelContextMenu(menu)
					
					if menu.getWidgetCount() > 0
						widget.getDesktop().addWindow(menu)
						menu.popup(widget.getDesktopPosition() + Point.new(0, widget.getHeight()))
						
					else
						menu.dispose()
					end
				end))
				button.setDesignerSelector("Button.Popup")
				p2.addWidget(button)
			end))
		end)
		addWidget(pPanelForm)
	end
	
	/** Motion transfer changed. */
	protected func void onMotionTransferChanged()
	end
	
	/** Fill panel context menu. */
	protected func void onPanelContextMenu(MenuPopup menu)
	end
end
