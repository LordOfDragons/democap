/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Gui

pin Democap.Behaviors
pin Democap.Characters
pin Democap.MotionTransferSystem

pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events
pin Dragengine.Scenery


/**
 * Edit character config window motion transfer fingers panel.
 */
class WCCPMTFingers extends WCCPanelMotionTransfer
	var SharedListModel pModelListThumbTipBone
	var DefaultTextModel pModelTextThumbTipBone
	var SharedListModel pModelListThumbBaseBone
	var DefaultTextModel pModelTextThumbBaseBone
	
	var SharedListModel pModelListIndexTipBone
	var DefaultTextModel pModelTextIndexTipBone
	var SharedListModel pModelListIndexBaseBone
	var DefaultTextModel pModelTextIndexBaseBone
	
	var SharedListModel pModelListMiddleTipBone
	var DefaultTextModel pModelTextMiddleTipBone
	var SharedListModel pModelListMiddleBaseBone
	var DefaultTextModel pModelTextMiddleBaseBone
	
	var SharedListModel pModelListRingTipBone
	var DefaultTextModel pModelTextRingTipBone
	var SharedListModel pModelListRingBaseBone
	var DefaultTextModel pModelTextRingBaseBone
	
	var SharedListModel pModelListPinkyTipBone
	var DefaultTextModel pModelTextPinkyTipBone
	var SharedListModel pModelListPinkyBaseBone
	var DefaultTextModel pModelTextPinkyBaseBone
	
	var SharedListModel pModelListTrackerSlot
	var DefaultTextModel pModelTextTrackerSlot
	var DefaultTextModel pModelBendAngle
	var SharedListModel pModelListMoveHandsClosed
	var DefaultTextModel pModelTextMoveHandsClosed
	
	var EditVector pEditThumbRotation
	var EditVector pEditIndexRotation
	var EditVector pEditMiddleRotation
	var EditVector pEditRingRotation
	var EditVector pEditPinkyRotation
	
	
	/** Create window. */
	func new(WindowCharacterConfiguration window) super(window)
		pModelTypeName.setText("@UI.Fingers")
		
		pModelListThumbTipBone = SharedListModel.new(window.getModelBones())
		pModelListThumbTipBone.setAutoSelect(false)
		pModelTextThumbTipBone = DefaultTextModel.new()
		pModelListThumbBaseBone = SharedListModel.new(window.getModelBones())
		pModelListThumbBaseBone.setAutoSelect(false)
		pModelTextThumbBaseBone = DefaultTextModel.new()
		
		pModelListIndexTipBone = SharedListModel.new(window.getModelBones())
		pModelListIndexTipBone.setAutoSelect(false)
		pModelTextIndexTipBone = DefaultTextModel.new()
		pModelListIndexBaseBone = SharedListModel.new(window.getModelBones())
		pModelListIndexBaseBone.setAutoSelect(false)
		pModelTextIndexBaseBone = DefaultTextModel.new()
		
		pModelListMiddleTipBone = SharedListModel.new(window.getModelBones())
		pModelListMiddleTipBone.setAutoSelect(false)
		pModelTextMiddleTipBone = DefaultTextModel.new()
		pModelListMiddleBaseBone = SharedListModel.new(window.getModelBones())
		pModelListMiddleBaseBone.setAutoSelect(false)
		pModelTextMiddleBaseBone = DefaultTextModel.new()
		
		pModelListRingTipBone = SharedListModel.new(window.getModelBones())
		pModelListRingTipBone.setAutoSelect(false)
		pModelTextRingTipBone = DefaultTextModel.new()
		pModelListRingBaseBone = SharedListModel.new(window.getModelBones())
		pModelListRingBaseBone.setAutoSelect(false)
		pModelTextRingBaseBone = DefaultTextModel.new()
		
		pModelListPinkyTipBone = SharedListModel.new(window.getModelBones())
		pModelListPinkyTipBone.setAutoSelect(false)
		pModelTextPinkyTipBone = DefaultTextModel.new()
		pModelListPinkyBaseBone = SharedListModel.new(window.getModelBones())
		pModelListPinkyBaseBone.setAutoSelect(false)
		pModelTextPinkyBaseBone = DefaultTextModel.new()
		
		pModelListTrackerSlot = SharedListModel.new(window.getModelTrackerSlotNames())
		pModelListTrackerSlot.setAutoSelect(false)
		pModelTextTrackerSlot = DefaultTextModel.new()
		pModelBendAngle = DefaultTextModel.new()
		pModelListMoveHandsClosed = SharedListModel.new(window.getModelMoves())
		pModelListMoveHandsClosed.setAutoSelect(false)
		pModelTextMoveHandsClosed = DefaultTextModel.new()
		
		runWhileBlockingLayout(block
			createContent()
		end)
	end
	
	/** Dispose of window. */
	func void dispose()
		pModelListThumbTipBone = null
		pModelTextThumbTipBone = null
		pModelListThumbBaseBone = null
		pModelTextThumbBaseBone = null
		
		pModelListIndexTipBone = null
		pModelTextIndexTipBone = null
		pModelListIndexBaseBone = null
		pModelTextIndexBaseBone = null
		
		pModelListMiddleTipBone = null
		pModelTextMiddleTipBone = null
		pModelListMiddleBaseBone = null
		pModelTextMiddleBaseBone = null
		
		pModelListRingTipBone = null
		pModelTextRingTipBone = null
		pModelListRingBaseBone = null
		pModelTextRingBaseBone = null
		
		pModelListPinkyTipBone = null
		pModelTextPinkyTipBone = null
		pModelListPinkyBaseBone = null
		pModelTextPinkyBaseBone = null
		
		pModelListTrackerSlot = null
		pModelTextTrackerSlot = null
		pModelBendAngle = null
		pModelListMoveHandsClosed = null
		pModelTextMoveHandsClosed = null
		
		pEditThumbRotation = null
		pEditIndexRotation = null
		pEditMiddleRotation = null
		pEditRingRotation = null
		pEditPinkyRotation = null
		
		super.dispose()
	end
	
	
	
	/** Load values from tracker slot object if present into edit widgets. */
	func void loadValues()
		runWhileBlockingLayout(block
			super.loadValues()
			
			if pMotionTransfer != null
				var MotionTransferFingers mt = pMotionTransfer cast MotionTransferFingers
				pModelTextThumbTipBone.setText(mt.getThumbTipBone())
				pModelTextThumbBaseBone.setText(mt.getThumbBaseBone())
				pModelTextIndexTipBone.setText(mt.getIndexTipBone())
				pModelTextIndexBaseBone.setText(mt.getIndexBaseBone())
				pModelTextMiddleTipBone.setText(mt.getMiddleTipBone())
				pModelTextMiddleBaseBone.setText(mt.getMiddleBaseBone())
				pModelTextRingTipBone.setText(mt.getRingTipBone())
				pModelTextRingBaseBone.setText(mt.getRingBaseBone())
				pModelTextPinkyTipBone.setText(mt.getPinkyTipBone())
				pModelTextPinkyBaseBone.setText(mt.getPinkyBaseBone())
				pModelTextTrackerSlot.setText(mt.getTracker())
				pModelBendAngle.setText(mt.getBendAngle().toString())
				pModelTextMoveHandsClosed.setText(mt.getMoveHandsClosed())
				pEditThumbRotation.setVector(mt.getThumbRotation())
				pEditIndexRotation.setVector(mt.getIndexRotation())
				pEditMiddleRotation.setVector(mt.getMiddleRotation())
				pEditRingRotation.setVector(mt.getRingRotation())
				pEditPinkyRotation.setVector(mt.getPinkyRotation())
				
			else
				pModelTextThumbTipBone.setText("")
				pModelTextThumbBaseBone.setText("")
				pModelTextIndexTipBone.setText("")
				pModelTextIndexBaseBone.setText("")
				pModelTextMiddleTipBone.setText("")
				pModelTextMiddleBaseBone.setText("")
				pModelTextRingTipBone.setText("")
				pModelTextRingBaseBone.setText("")
				pModelTextPinkyTipBone.setText("")
				pModelTextPinkyBaseBone.setText("")
				pModelTextTrackerSlot.setText("")
				pModelBendAngle.setText("")
				pModelTextMoveHandsClosed.setText("")
				pEditThumbRotation.setVector(Vector.new())
				pEditIndexRotation.setVector(Vector.new())
				pEditMiddleRotation.setVector(Vector.new())
				pEditRingRotation.setVector(Vector.new())
				pEditPinkyRotation.setVector(Vector.new())
			end
		end)
		doLayoutIfBlocked()
	end
	
	/** Save value from edit widgets to tracker slot object if present. */
	func void saveValues()
		if pMotionTransfer == null
			return
		end
		super.saveValues()
		
		var MotionTransferFingers mt = pMotionTransfer cast MotionTransferFingers
		mt.setThumbTipBone(pModelTextThumbTipBone.getText())
		mt.setThumbBaseBone(pModelTextThumbBaseBone.getText())
		mt.setIndexTipBone(pModelTextIndexTipBone.getText())
		mt.setIndexBaseBone(pModelTextIndexBaseBone.getText())
		mt.setMiddleTipBone(pModelTextMiddleTipBone.getText())
		mt.setMiddleBaseBone(pModelTextMiddleBaseBone.getText())
		mt.setRingTipBone(pModelTextRingTipBone.getText())
		mt.setRingBaseBone(pModelTextRingBaseBone.getText())
		mt.setPinkyTipBone(pModelTextPinkyTipBone.getText())
		mt.setPinkyBaseBone(pModelTextPinkyBaseBone.getText())
		mt.setTracker(pModelTextTrackerSlot.getText())
		mt.setBendAngle(pModelBendAngle.getText().toFloat())
		mt.setMoveHandsClosed(pModelTextMoveHandsClosed.getText())
		mt.setThumbRotation(pEditThumbRotation.getVector())
		mt.setIndexRotation(pEditIndexRotation.getVector())
		mt.setMiddleRotation(pEditMiddleRotation.getVector())
		mt.setRingRotation(pEditRingRotation.getVector())
		mt.setPinkyRotation(pEditPinkyRotation.getVector())
	end
	
	/** Supports motion transfer type. */
	func bool supports(MotionTransfer motionTranfer)
		return motionTranfer castable MotionTransferFingers
	end
	
	
	
	/** Init values for right/left hand use. */
	func void initValues(bool rightHand)
		var Vector v1, v2
		
		if rightHand
			v1 = Vector.new(45, -90, 30)
			v2 = Vector.new(0, -90, 90)
			
		else
			v1 = Vector.new(45, 90, -30)
			v2 = Vector.new(0, 90, -90)
		end
		
		pEditThumbRotation.setVector(v1)
		pEditIndexRotation.setVector(v2)
		pEditMiddleRotation.setVector(v2)
		pEditRingRotation.setVector(v2)
		pEditPinkyRotation.setVector(v2)
	end
	
	/** Mirror values from another motion transfer. */
	func void mirrorValues()
		var DefaultListModel model = DefaultListModel.new()
		pWindowCharacterConfiguration.getModelMotionTransfers().forEach(block MotionTransfer each
			if each castable MotionTransferFingers and each != pMotionTransfer
				model.add(each)
			end
		end)
		
		if model.getCount() == 0
			return
		end
		
		WindowDialog.chooseList(getWindow(), "@UI.MirrorHand", "@UI.Message.Fingers.SelectTransfer",\
		null, model, MotionTransferRenderer.new(), null, null, WindowDialog.BlockResultListener.new(\
			block int result
				if result != -1
					var MotionTransferFingers mt = model.getAt(result) cast MotionTransferFingers
					var Matrix matMirror = Matrix.newScaling(-1, 1, 1)
					
					pEditThumbRotation.setVector((Matrix.newRotation(mt.getThumbRotation()) * matMirror).normalize().getEulerAngles())
					pEditIndexRotation.setVector((Matrix.newRotation(mt.getIndexRotation()) * matMirror).normalize().getEulerAngles())
					pEditMiddleRotation.setVector((Matrix.newRotation(mt.getMiddleRotation()) * matMirror).normalize().getEulerAngles())
					pEditRingRotation.setVector((Matrix.newRotation(mt.getRingRotation()) * matMirror).normalize().getEulerAngles())
					pEditPinkyRotation.setVector((Matrix.newRotation(mt.getPinkyRotation()) * matMirror).normalize().getEulerAngles())
				end
			end))
	end
	
	
	
	/** Create window content. */
	protected func void createContent()
		var WidgetCharacterPreview preview = pWindowCharacterConfiguration.getCharacterPreview()
		var ComboBox comboBox, comboBoxTip, comboBoxBase
		var Label labelTip, labelBase, label
		var TextField textField
		var String toolTip
		
		createBaseContent("motiontransferfingers")
		
		// thumb bone chain
		labelTip = Label.new("@UI.ThumbTipBone.Label", "Label.FormCaption.SingleLine")
		pPanelForm.addWidget(labelTip)
		
		comboBoxTip = ComboBox.new(pModelListThumbTipBone, DefaultComboBoxEditor.new(pModelTextThumbTipBone))
		comboBoxTip.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBoxTip.setToolTip("@UI.ToolTip.ThumbTipBone")
		pPanelForm.addWidget(comboBoxTip)
		
		labelBase = Label.new("@UI.ThumbBaseBone.Label", "Label.FormCaption.SingleLine")
		pPanelForm.addWidget(labelBase)
		
		comboBoxBase = ComboBox.new(pModelListThumbBaseBone, DefaultComboBoxEditor.new(pModelTextThumbBaseBone))
		comboBoxBase.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBoxBase.setToolTip("@UI.ToolTip.ThumbBaseBone")
		pPanelForm.addWidget(comboBoxBase)
		
		CPEBoneChain.new(preview, labelTip, comboBoxTip, null, comboBoxBase, false)
		CPEBoneChain.new(preview, null, comboBoxTip, labelBase, comboBoxBase, true)
		
		// thumb rotation
		toolTip = "@UI.ToolTip.FingerRotation"
		label = Label.new("@UI.FingerRotation.Label", "Label.FormCaption.SingleLine")
		label.setToolTip(toolTip)
		pPanelForm.addWidget(label)
		
		pEditThumbRotation = EditVector.new()
		pEditThumbRotation.setToolTip(toolTip)
		pPanelForm.addWidget(pEditThumbRotation)
		
		CPECoordinateSystemAxis.new(preview, null, null, label, pEditThumbRotation, comboBoxBase, null, true)
		
		// index bone chain
		labelTip = Label.new("@UI.IndexTipBone.Label", "Label.FormCaption.SingleLine")
		pPanelForm.addWidget(labelTip)
		
		comboBoxTip = ComboBox.new(pModelListIndexTipBone, DefaultComboBoxEditor.new(pModelTextIndexTipBone))
		comboBoxTip.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBoxTip.setToolTip("@UI.ToolTip.IndexTipBone")
		pPanelForm.addWidget(comboBoxTip)
		
		labelBase = Label.new("@UI.IndexBaseBone.Label", "Label.FormCaption.SingleLine")
		pPanelForm.addWidget(labelBase)
		
		comboBoxBase = ComboBox.new(pModelListIndexBaseBone, DefaultComboBoxEditor.new(pModelTextIndexBaseBone))
		comboBoxBase.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBoxBase.setToolTip("@UI.ToolTip.IndexBaseBone")
		pPanelForm.addWidget(comboBoxBase)
		
		CPEBoneChain.new(preview, labelTip, comboBoxTip, null, comboBoxBase, false)
		CPEBoneChain.new(preview, null, comboBoxTip, labelBase, comboBoxBase, true)
		
		// index rotation
		toolTip = "@UI.ToolTip.FingerRotation"
		label = Label.new("@UI.FingerRotation.Label", "Label.FormCaption.SingleLine")
		label.setToolTip(toolTip)
		pPanelForm.addWidget(label)
		
		pEditIndexRotation = EditVector.new()
		pEditIndexRotation.setToolTip(toolTip)
		pPanelForm.addWidget(pEditIndexRotation)
		
		CPECoordinateSystemAxis.new(preview, null, null, label, pEditIndexRotation, comboBoxBase, null, true)
		
		// middle bone chain
		labelTip = Label.new("@UI.MiddleTipBone.Label", "Label.FormCaption.SingleLine")
		pPanelForm.addWidget(labelTip)
		
		comboBoxTip = ComboBox.new(pModelListMiddleTipBone, DefaultComboBoxEditor.new(pModelTextMiddleTipBone))
		comboBoxTip.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBoxTip.setToolTip("@UI.ToolTip.MiddleTipBone")
		pPanelForm.addWidget(comboBoxTip)
		
		labelBase = Label.new("@UI.MiddleBaseBone.Label", "Label.FormCaption.SingleLine")
		pPanelForm.addWidget(labelBase)
		
		comboBoxBase = ComboBox.new(pModelListMiddleBaseBone, DefaultComboBoxEditor.new(pModelTextMiddleBaseBone))
		comboBoxBase.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBoxBase.setToolTip("@UI.ToolTip.MiddleBaseBone")
		pPanelForm.addWidget(comboBoxBase)
		
		CPEBoneChain.new(preview, labelTip, comboBoxTip, null, comboBoxBase, false)
		CPEBoneChain.new(preview, null, comboBoxTip, labelBase, comboBoxBase, true)
		
		// middle rotation
		toolTip = "@UI.ToolTip.FingerRotation"
		label = Label.new("@UI.FingerRotation.Label", "Label.FormCaption.SingleLine")
		label.setToolTip(toolTip)
		pPanelForm.addWidget(label)
		
		pEditMiddleRotation = EditVector.new()
		pEditMiddleRotation.setToolTip(toolTip)
		pPanelForm.addWidget(pEditMiddleRotation)
		
		CPECoordinateSystemAxis.new(preview, null, null, label, pEditMiddleRotation, comboBoxBase, null, true)
		
		// ring bone chain
		labelTip = Label.new("@UI.RingTipBone.Label", "Label.FormCaption.SingleLine")
		pPanelForm.addWidget(labelTip)
		
		comboBoxTip = ComboBox.new(pModelListRingTipBone, DefaultComboBoxEditor.new(pModelTextRingTipBone))
		comboBoxTip.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBoxTip.setToolTip("@UI.ToolTip.RingTipBone")
		pPanelForm.addWidget(comboBoxTip)
		
		labelBase = Label.new("@UI.RingBaseBone.Label", "Label.FormCaption.SingleLine")
		pPanelForm.addWidget(labelBase)
		
		comboBoxBase = ComboBox.new(pModelListRingBaseBone, DefaultComboBoxEditor.new(pModelTextRingBaseBone))
		comboBoxBase.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBoxBase.setToolTip("@UI.ToolTip.RingBaseBone")
		pPanelForm.addWidget(comboBoxBase)
		
		CPEBoneChain.new(preview, labelTip, comboBoxTip, null, comboBoxBase, false)
		CPEBoneChain.new(preview, null, comboBoxTip, labelBase, comboBoxBase, true)
		
		// ring rotation
		toolTip = "@UI.ToolTip.FingerRotation"
		label = Label.new("@UI.FingerRotation.Label", "Label.FormCaption.SingleLine")
		label.setToolTip(toolTip)
		pPanelForm.addWidget(label)
		
		pEditRingRotation = EditVector.new()
		pEditRingRotation.setToolTip(toolTip)
		pPanelForm.addWidget(pEditRingRotation)
		
		CPECoordinateSystemAxis.new(preview, null, null, label, pEditRingRotation, comboBoxBase, null, true)
		
		// pinky bone chain
		labelTip = Label.new("@UI.PinkyTipBone.Label", "Label.FormCaption.SingleLine")
		pPanelForm.addWidget(labelTip)
		
		comboBoxTip = ComboBox.new(pModelListPinkyTipBone, DefaultComboBoxEditor.new(pModelTextPinkyTipBone))
		comboBoxTip.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBoxTip.setToolTip("@UI.ToolTip.PinkyTipBone")
		pPanelForm.addWidget(comboBoxTip)
		
		labelBase = Label.new("@UI.PinkyBaseBone.Label", "Label.FormCaption.SingleLine")
		pPanelForm.addWidget(labelBase)
		
		comboBoxBase = ComboBox.new(pModelListPinkyBaseBone, DefaultComboBoxEditor.new(pModelTextPinkyBaseBone))
		comboBoxBase.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBoxBase.setToolTip("@UI.ToolTip.PinkyBaseBone")
		pPanelForm.addWidget(comboBoxBase)
		
		CPEBoneChain.new(preview, labelTip, comboBoxTip, null, comboBoxBase, false)
		CPEBoneChain.new(preview, null, comboBoxTip, labelBase, comboBoxBase, true)
		
		// pinky rotation
		toolTip = "@UI.ToolTip.FingerRotation"
		label = Label.new("@UI.FingerRotation.Label", "Label.FormCaption.SingleLine")
		label.setToolTip(toolTip)
		pPanelForm.addWidget(label)
		
		pEditPinkyRotation = EditVector.new()
		pEditPinkyRotation.setToolTip(toolTip)
		pPanelForm.addWidget(pEditPinkyRotation)
		
		CPECoordinateSystemAxis.new(preview, null, null, label, pEditPinkyRotation, comboBoxBase, null, true)
		
		// tracker slot
		pPanelForm.addWidget(Label.new("@UI.TrackerSlot.Label", "Label.FormCaption.SingleLine"))
		
		comboBox = ComboBox.new(pModelListTrackerSlot, DefaultComboBoxEditor.new(pModelTextTrackerSlot))
		comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBox.setToolTip("@UI.ToolTip.TrackerSlot.Face")
		pPanelForm.addWidget(comboBox)
		
		// bend angle
		pPanelForm.addWidget(Label.new("@UI.BendAngle.Label", "Label.FormCaption.SingleLine"))
		
		textField = TextField.new(pModelBendAngle, 6)
		textField.setDesignerSelector("TextField.WindowCharacterConfiguration")
		textField.setValidator(SimpleTextValidator.new(10, SimpleTextValidator.CharacterClass.number))
		textField.setToolTip("@UI.ToolTip.FingerBendAngle")
		pPanelForm.addWidget(textField)
		
		// move
		pPanelForm.addWidget(Label.new("@UI.MoveHandsClosed.Label", "Label.FormCaption.SingleLine"))
		
		comboBox = ComboBox.new(pModelListMoveHandsClosed, DefaultComboBoxEditor.new(pModelTextMoveHandsClosed))
		comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBox.setToolTip("@UI.ToolTip.MoveHandsClosed")
		pPanelForm.addWidget(comboBox)
	end
	
	protected func void onPanelContextMenu(MenuPopup menu)
		var bool inVR = pWindowCharacterConfiguration.getInVR()
		
		var MenuItemCommand item = MenuItemCommand.new(Resources.handRight.get(inVR), "@UI.InitRightHand",\
			BlockActionListener.new(block ActionEvent event
				initValues(true)
			end))
		menu.addWidget(item)
		
		item = MenuItemCommand.new(Resources.handLeft.get(inVR), "@UI.InitLeftHand",\
			BlockActionListener.new(block ActionEvent event
				initValues(false)
			end))
		menu.addWidget(item)
		
		item = MenuItemCommand.new(Resources.mirror.get(inVR), "@UI.MirrorHand.Dialog",\
			BlockActionListener.new(block ActionEvent event
				mirrorValues()
			end))
		menu.addWidget(item)
	end
end
