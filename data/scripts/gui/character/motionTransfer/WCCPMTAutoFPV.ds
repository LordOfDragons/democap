/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Gui

pin Democap.Behaviors
pin Democap.Characters
pin Democap.MotionTransferSystem

pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events
pin Dragengine.Scenery


/**
 * Edit character config window motion transfer auto human panel.
 */
class WCCPMTAutoFPV extends WCCPanelMotionTransfer
	var SharedListModel pModelListBoneHead
	var DefaultTextModel pModelTextBoneHead
	var SharedListModel pModelListBoneChest
	var DefaultTextModel pModelTextBoneChest
	var SharedListModel pModelListBoneHandRight
	var DefaultTextModel pModelTextBoneHandRight
	var SharedListModel pModelListBoneHandLeft
	var DefaultTextModel pModelTextBoneHandLeft
	var SharedListModel pModelListMoveBaseIK
	var DefaultTextModel pModelTextMoveBaseIK
	var EditVector pEditReachScalingArmRight
	var EditVector pEditReachScalingArmRightBack
	var EditVector pEditReachScalingArmLeft
	var EditVector pEditReachScalingArmLeftBack
	
	
	
	/** Create window. */
	func new(WindowCharacterConfiguration window, String optionPrefix) super(window)
		pModelTypeName.setText("Automatic First Person View")
		
		pModelListBoneHead = SharedListModel.new(window.getModelBones())
		pModelListBoneHead.setAutoSelect(false)
		pModelTextBoneHead = DefaultTextModel.new()
		
		pModelListBoneChest = SharedListModel.new(window.getModelBones())
		pModelListBoneChest.setAutoSelect(false)
		pModelTextBoneChest = DefaultTextModel.new()
		
		pModelListBoneHandRight = SharedListModel.new(window.getModelBones())
		pModelListBoneHandRight.setAutoSelect(false)
		pModelTextBoneHandRight = DefaultTextModel.new()
		
		pModelListBoneHandLeft = SharedListModel.new(window.getModelBones())
		pModelListBoneHandLeft.setAutoSelect(false)
		pModelTextBoneHandLeft= DefaultTextModel.new()
		
		pModelListMoveBaseIK = SharedListModel.new(window.getModelMoves())
		pModelListMoveBaseIK.setAutoSelect(false)
		pModelTextMoveBaseIK = DefaultTextModel.new()
		
		runWhileBlockingLayout(block
			createContent(optionPrefix)
		end)
	end
	
	/** Dispose of window. */
	func void dispose()
		pModelListBoneHead = null
		pModelTextBoneHead = null
		
		pModelListBoneChest = null
		pModelTextBoneChest = null
		
		pModelListBoneHandRight = null
		pModelTextBoneHandRight = null
		
		pModelListBoneHandLeft = null
		pModelTextBoneHandLeft = null
		
		pModelListMoveBaseIK = null
		pModelTextMoveBaseIK = null
		
		pEditReachScalingArmRight = null
		pEditReachScalingArmRightBack = null
		pEditReachScalingArmLeft = null
		pEditReachScalingArmLeftBack = null
		super.dispose()
	end
	
	
	
	/** Load values from tracker slot object if present into edit widgets. */
	func void loadValues()
		runWhileBlockingLayout(block
			super.loadValues()
			
			if pMotionTransfer != null
				var MotionTransferAutoFPV mt = pMotionTransfer cast MotionTransferAutoFPV
				pModelTextBoneHead.setText(mt.getBoneHead())
				pModelTextBoneChest.setText(mt.getBoneChest())
				pModelTextBoneHandRight.setText(mt.getBoneHandRight())
				pModelTextBoneHandLeft.setText(mt.getBoneHandLeft())
				pModelTextMoveBaseIK.setText(mt.getMoveBaseIK())
				pEditReachScalingArmRight.setVector(mt.getReachScalingArmRight())
				pEditReachScalingArmRightBack.setVector(mt.getReachScalingArmRightBack())
				pEditReachScalingArmLeft.setVector(mt.getReachScalingArmLeft())
				pEditReachScalingArmLeftBack.setVector(mt.getReachScalingArmLeftBack())
				
			else
				pModelTextBoneHead.setText("")
				pModelTextBoneChest.setText("")
				pModelTextBoneHandRight.setText("")
				pModelTextBoneHandLeft.setText("")
				pModelTextMoveBaseIK.setText("")
				pEditReachScalingArmRight.setVector(Vector.new(1, 1, 1))
				pEditReachScalingArmRightBack.setVector(Vector.new(1, 1, 1))
				pEditReachScalingArmLeft.setVector(Vector.new(1, 1, 1))
				pEditReachScalingArmLeftBack.setVector(Vector.new(1, 1, 1))
			end
		end)
		doLayoutIfBlocked()
	end
	
	/** Save value from edit widgets to tracker slot object if present. */
	func void saveValues()
		if pMotionTransfer == null
			return
		end
		super.saveValues()
		
		var MotionTransferAutoFPV mt = pMotionTransfer cast MotionTransferAutoFPV
		mt.setBoneHead(pModelTextBoneHead.getText())
		mt.setBoneChest(pModelTextBoneChest.getText())
		mt.setBoneHandRight(pModelTextBoneHandRight.getText())
		mt.setBoneHandLeft(pModelTextBoneHandLeft.getText())
		mt.setMoveBaseIK(pModelTextMoveBaseIK.getText())
		mt.setReachScalingArmRight(pEditReachScalingArmRight.getVector())
		mt.setReachScalingArmRightBack(pEditReachScalingArmRightBack.getVector())
		mt.setReachScalingArmLeft(pEditReachScalingArmLeft.getVector())
		mt.setReachScalingArmLeftBack(pEditReachScalingArmLeftBack.getVector())
	end
	
	/** Supports motion transfer type. */
	func bool supports(MotionTransfer motionTranfer)
		return motionTranfer castable MotionTransferAutoFPV
	end
	
	
	
	/** Create window content. */
	protected func void createContent(String optionPrefix)
		var WidgetCharacterPreview preview = pWindowCharacterConfiguration.getCharacterPreview()
		var TextField textField
		var ComboBox comboBox
		var Button button
		var ListBox listBox
		var Label label
		var String toolTip
		var ScrollBar scrollBar
		
		createBaseContent("motiontransferautofpv")
		
		// head bone
		label = Label.new("Head:", "Label.FormCaption")
		pPanelForm.addWidget(label)
		
		comboBox = ComboBox.new(pModelListBoneHead, DefaultComboBoxEditor.new(pModelTextBoneHead))
		comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBox.setToolTip("Head bone.")
		pPanelForm.addWidget(comboBox)
		
		CPEBone.new(preview, label, comboBox)
		
		// chest bone
		label = Label.new("Chest:", "Label.FormCaption")
		pPanelForm.addWidget(label)
		
		comboBox = ComboBox.new(pModelListBoneChest, DefaultComboBoxEditor.new(pModelTextBoneChest))
		comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBox.setToolTip("Chest bone where neck and arms are attached to.")
		pPanelForm.addWidget(comboBox)
		
		CPEBone.new(preview, label, comboBox)
		
		// right hand bone
		label = Label.new("Right Hand:", "Label.FormCaption")
		pPanelForm.addWidget(label)
		
		comboBox = ComboBox.new(pModelListBoneHandRight, DefaultComboBoxEditor.new(pModelTextBoneHandRight))
		comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBox.setToolTip("Right hand bone.")
		pPanelForm.addWidget(comboBox)
		
		CPEBone.new(preview, label, comboBox)
		
		// left hand bone
		label = Label.new("Left Hand:", "Label.FormCaption")
		pPanelForm.addWidget(label)
		
		comboBox = ComboBox.new(pModelListBoneHandLeft, DefaultComboBoxEditor.new(pModelTextBoneHandLeft))
		comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBox.setToolTip("Left hand bone.")
		pPanelForm.addWidget(comboBox)
		
		CPEBone.new(preview, label, comboBox)
		
		// base ik move
		pPanelForm.addWidget(Label.new("Move Base IK:", "Label.FormCaption"))
		
		comboBox = ComboBox.new(pModelListMoveBaseIK, DefaultComboBoxEditor.new(pModelTextMoveBaseIK))
		comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBox.setToolTip("Animation move to use to init base IK state for better results. "\
			+ "Applied before applying inverse kinematic")
		pPanelForm.addWidget(comboBox)
		
		// fine tuning parameters
		addWidget(CollapsibleGroup.new("Fine Tuning", "", CollapsibleGroup.persistModel(\
		optionPrefix + "/GroupFineTuning"), FormLayout.new(true, 10, 2), block Panel p
			// right arm reach scaling
			toolTip = "Right arm reach scaling: right, down, forward"
			
			label = Label.new("Reach Scaling RA:", "Label.FormCaption")
			label.setToolTip(toolTip)
			p.addWidget(label)
			
			pEditReachScalingArmRight = EditVector.new()
			pEditReachScalingArmRight.setToolTip(toolTip)
			p.addWidget(pEditReachScalingArmRight)
			
			// right arm reach scaling backwards
			toolTip = "Right arm reach scaling: left, up, backwards"
			
			label = Label.new("Backwards:", "Label.FormCaption")
			label.setToolTip(toolTip)
			p.addWidget(label)
			
			pEditReachScalingArmRightBack = EditVector.new()
			pEditReachScalingArmRightBack.setToolTip(toolTip)
			p.addWidget(pEditReachScalingArmRightBack)
			
			// left arm reach scaling
			toolTip = "Left arm reach scaling: left, down, forward"
			
			label = Label.new("Reach Scaling LA:", "Label.FormCaption")
			label.setToolTip(toolTip)
			p.addWidget(label)
			
			pEditReachScalingArmLeft = EditVector.new()
			pEditReachScalingArmLeft.setToolTip(toolTip)
			p.addWidget(pEditReachScalingArmLeft)
			
			// left arm reach scaling backwards
			toolTip = "Left arm reach scaling: right, up, backwards"
			
			label = Label.new("Backwards:", "Label.FormCaption")
			label.setToolTip(toolTip)
			p.addWidget(label)
			
			pEditReachScalingArmLeftBack = EditVector.new()
			pEditReachScalingArmLeftBack.setToolTip(toolTip)
			p.addWidget(pEditReachScalingArmLeftBack)
		end))
	end
end
