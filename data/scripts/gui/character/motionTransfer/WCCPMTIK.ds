/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Gui

pin Democap.Behaviors
pin Democap.Characters
pin Democap.MotionTransferSystem

pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events
pin Dragengine.Scenery


/**
 * Edit character config window motion transfer ik panel.
 */
class WCCPMTIK extends WCCPanelMotionTransfer
	private var DefaultListModel pModelListTipBone
	private var DefaultTextModel pModelTextTipBone
	private var DefaultListModel pModelListBaseBone
	private var DefaultTextModel pModelTextBaseBone
	private var DefaultListModel pModelListGuideBone
	private var DefaultTextModel pModelTextGuideBone
	private var WCCPMTTracker pEditTrackerTip
	private var WCCPMTTracker pEditTrackerGuide
	private var WCCPMTTracker pEditTrackerBase
	private var DefaultListModel pModelActorReach
	private var DefaultTextModel pModelReachLimit
	private var EditVector pEditReachScaling
	private var DefaultToggleModel pModelAdjustPosition
	private var DefaultListModel pModelListMoveBaseIK
	private var DefaultTextModel pModelTextMoveBaseIK
	private var DefaultListModel pModelListMoveRetracted
	private var DefaultTextModel pModelTextMoveRetracted
	private var DefaultTextModel pModelTwistPropagation
	private var DefaultTextModel pModelTwistBoneCount
	private var EditVector pEditTwistAxisRotation
	
	
	
	/** Create window. */
	public func new(WindowCharacterConfiguration window, String optionPrefix) super(window)
		pModelTypeName.setText("Inverse Kinematic")
		
		pModelListTipBone = DefaultListModel.new()
		pModelListTipBone.setAutoSelect(false)
		pModelTextTipBone = DefaultTextModel.new()
		
		pModelListBaseBone = DefaultListModel.new()
		pModelListBaseBone.setAutoSelect(false)
		pModelTextBaseBone = DefaultTextModel.new()
		
		pModelListGuideBone = DefaultListModel.new()
		pModelListGuideBone.setAutoSelect(false)
		pModelTextGuideBone = DefaultTextModel.new()
		
		pModelActorReach = DefaultListModel.new(MotionTransferIK.ActorReach.all().toArray())
		pModelReachLimit = DefaultTextModel.new()
		pModelAdjustPosition = DefaultToggleModel.new()
		pModelListMoveBaseIK = DefaultListModel.new()
		pModelListMoveBaseIK.setAutoSelect(false)
		pModelTextMoveBaseIK = DefaultTextModel.new()
		pModelListMoveRetracted = DefaultListModel.new()
		pModelListMoveRetracted.setAutoSelect(false)
		pModelTextMoveRetracted = DefaultTextModel.new()
		pModelTwistPropagation = DefaultTextModel.new()
		pModelTwistBoneCount = DefaultTextModel.new()
		
		runWhileBlockingLayout(block
			createContent(optionPrefix)
		end)
	end
	
	/** Dispose of window. */
	public func void dispose()
		pModelListTipBone = null
		pModelTextTipBone = null
		pModelListBaseBone = null
		pModelTextBaseBone = null
		pModelListGuideBone = null
		pModelTextGuideBone = null
		pEditTrackerTip.setTracker(null)
		pEditTrackerTip = null
		pEditTrackerGuide.setTracker(null)
		pEditTrackerGuide = null
		pEditTrackerBase.setTracker(null)
		pEditTrackerBase = null
		pModelActorReach = null
		pModelReachLimit = null
		pEditReachScaling = null
		pModelAdjustPosition = null
		pModelListMoveBaseIK = null
		pModelTextMoveBaseIK = null
		pModelListMoveRetracted = null
		pModelTextMoveRetracted = null
		pModelTwistPropagation = null
		pModelTwistBoneCount = null
		pEditTwistAxisRotation = null
		super.dispose()
	end
	
	
	
	/** Load values from tracker slot object if present into edit widgets. */
	public func void loadValues()
		runWhileBlockingLayout(block
			super.loadValues()
			
			if pMotionTransfer != null
				var MotionTransferIK mt = pMotionTransfer cast MotionTransferIK
				pModelTextTipBone.setText(mt.getTipBone())
				pModelTextBaseBone.setText(mt.getBaseBone())
				pModelTextGuideBone.setText(mt.getGuideBone())
				pEditTrackerTip.setTracker(mt.getTipTracker())
				pEditTrackerTip.loadValues()
				pEditTrackerGuide.setTracker(mt.getGuideTracker())
				pEditTrackerGuide.loadValues()
				pEditTrackerBase.setTracker(mt.getBaseTracker())
				pEditTrackerBase.loadValues()
				pModelActorReach.setSelected(pModelActorReach.indexOf(mt.getActorReach()))
				pModelReachLimit.setText(mt.getReachLimit().toString())
				pEditReachScaling.setVector(mt.getReachScaling())
				pModelAdjustPosition.setToggled(mt.getAdjustPosition())
				pModelTextMoveBaseIK.setText(mt.getMoveBaseIK())
				pModelTextMoveRetracted.setText(mt.getMoveRetracted())
				pModelTwistPropagation.setText(mt.getTwistPropagation().toString())
				pModelTwistBoneCount.setText(mt.getTwistBoneCount().toString())
				pEditTwistAxisRotation.setVector(mt.getTwistAxisRotation())
				
			else
				pModelTextTipBone.setText("")
				pModelTextBaseBone.setText("")
				pModelTextGuideBone.setText("")
				pEditTrackerTip.setTracker(null)
				pEditTrackerGuide.setTracker(null)
				pEditTrackerBase.setTracker(null)
				pModelActorReach.setSelected(pModelActorReach.indexOf(MotionTransferIK.ActorReach.none))
				pModelReachLimit.setText("")
				pEditReachScaling.setVector(Vector.new(1, 1, 1))
				pModelAdjustPosition.setToggled(false)
				pModelTextMoveBaseIK.setText("")
				pModelTextMoveRetracted.setText("")
				pModelTwistPropagation.setText("")
				pModelTwistBoneCount.setText("")
				pEditTwistAxisRotation.setVector(Vector.new())
			end
		end)
		doLayoutIfBlocked()
	end
	
	/** Save value from edit widgets to tracker slot object if present. */
	public func void saveValues()
		if pMotionTransfer == null
			return
		end
		super.saveValues()
		
		var MotionTransferIK mt = pMotionTransfer cast MotionTransferIK
		mt.setTipBone(pModelTextTipBone.getText())
		mt.setBaseBone(pModelTextBaseBone.getText())
		mt.setGuideBone(pModelTextGuideBone.getText())
		pEditTrackerTip.saveValues()
		pEditTrackerGuide.saveValues()
		pEditTrackerBase.saveValues()
		mt.setActorReach(pModelActorReach.getAt(pModelActorReach.getSelected()) cast MotionTransferIK.ActorReach)
		mt.setReachLimit(pModelReachLimit.getText().toFloat())
		mt.setReachScaling(pEditReachScaling.getVector())
		mt.setAdjustPosition(pModelAdjustPosition.getToggled())
		mt.setMoveBaseIK(pModelTextMoveBaseIK.getText())
		mt.setMoveRetracted(pModelTextMoveRetracted.getText())
		mt.setTwistPropagation(pModelTwistPropagation.getText().toFloat())
		mt.setTwistBoneCount(pModelTwistBoneCount.getText().toInt())
		mt.setTwistAxisRotation(pEditTwistAxisRotation.getVector())
	end
	
	/** Supports motion transfer type. */
	public func bool supports(MotionTransfer motionTranfer)
		return motionTranfer castable MotionTransferIK
	end
	
	
	
	/** Create window content. */
	protected func void createContent(String optionPrefix)
		var WidgetCharacterPreview preview = pWindowCharacterConfiguration.getCharacterPreview()
		var ComboBox comboBox, comboBoxTip, comboBoxBase
		var Label label, labelTip, labelBase
		var TextField textField
		var Button button
		var ListBox listBox
		var CheckBox checkBox
		var String toolTip
		
		super.createContent()
		
		// bone chain
		labelTip = Label.new("Tip Bone:", "Label.FormCaption")
		pPanelForm.addWidget(labelTip)
		
		comboBoxTip = ComboBox.new(pModelListTipBone, DefaultComboBoxEditor.new(pModelTextTipBone))
		comboBoxTip.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBoxTip.setToolTip("Tip of bone chain.")
		pPanelForm.addWidget(comboBoxTip)
		
		labelBase = Label.new("Base Bone:", "Label.FormCaption")
		pPanelForm.addWidget(labelBase)
		
		comboBoxBase = ComboBox.new(pModelListBaseBone, DefaultComboBoxEditor.new(pModelTextBaseBone))
		comboBoxBase.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBoxBase.setToolTip("Base bone not part of the chain. Bending angle is calculate between target and base bone.")
		pPanelForm.addWidget(comboBoxBase)
		
		CPEBoneChain.new(preview, labelTip, comboBoxTip, null, comboBoxBase, false)
		CPEBoneChain.new(preview, null, comboBoxTip, labelBase, comboBoxBase, true)
		
		// guide bone
		label = Label.new("Guide Bone:", "Label.FormCaption")
		pPanelForm.addWidget(label)
		
		comboBox = ComboBox.new(pModelListGuideBone, DefaultComboBoxEditor.new(pModelTextGuideBone))
		comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBox.setToolTip("Guide of bone chain. This is the bone near the base of the chain to point at the guide tracker.")
		pPanelForm.addWidget(comboBox)
		
		CPEBone.new(preview, label, comboBox)
		
		// trackers
		pEditTrackerTip = WCCPMTTracker.new(optionPrefix + "/TipTracker", this, "Tip Tracker", false)
		addWidget(pEditTrackerTip)
		
		pEditTrackerGuide = WCCPMTTracker.new(optionPrefix + "/GuideTracker", this, "Guide Tracker", false)
		addWidget(pEditTrackerGuide)
		
		pEditTrackerBase = WCCPMTTracker.new(optionPrefix + "/BaseTracker", this, "Base Tracker", false)
		addWidget(pEditTrackerBase)
		
		// actor reach
		pPanelForm.addWidget(Label.new("Actor Reach:", "Label.FormCaption"))
		
		comboBox = ComboBox.new(pModelActorReach)
		comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBox.setToolTip("What actor profile parameter to use to scale reach length. "\
			+ " Scales the reach in actor space (VR device location) to match bone chain reach.")
		pPanelForm.addWidget(comboBox)
		
		// reach limit
		pPanelForm.addWidget(Label.new("Reach Limit:", "Label.FormCaption"))
		
		textField = TextField.new(pModelReachLimit, 6)
		textField.setDesignerSelector("TextField.WindowCharacterConfiguration")
		textField.setValidator(SimpleTextValidator.new(10, SimpleTextValidator.CharacterClass.positiveNumber))
		textField.setToolTip("Limit reach to percentage of bone chain reach. Avoids overstretching.")
		pPanelForm.addWidget(textField)
		
		// reach scaling
		toolTip = "Scale reach along axis"
		
		label = Label.new("Reach Scaling:", "Label.FormCaption")
		label.setToolTip(toolTip)
		pPanelForm.addWidget(label)
		
		pEditReachScaling = EditVector.new()
		pEditReachScaling.setToolTip(toolTip)
		pPanelForm.addWidget(pEditReachScaling)
		
		// adjust position
		pPanelForm.addWidget(Label.new(""))
		
		checkBox = CheckBox.new(pModelAdjustPosition, "Adjust Position")
		checkBox.setToolTip("Adjust position of Base Bone if Bone Count is 1")
		pPanelForm.addWidget(checkBox)
		
		// move base ik
		pPanelForm.addWidget(Label.new("Move Base IK:", "Label.FormCaption"))
		
		comboBox = ComboBox.new(pModelListMoveBaseIK, DefaultComboBoxEditor.new(pModelTextMoveBaseIK))
		comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBox.setToolTip("Animation move to use to init base IK state for better results. "\
			+ "Applied before applying inverse kinematic.")
		pPanelForm.addWidget(comboBox)
		
		// move retracted
		pPanelForm.addWidget(Label.new("Move Retracted:", "Label.FormCaption"))
		
		comboBox = ComboBox.new(pModelListMoveRetracted, DefaultComboBoxEditor.new(pModelTextMoveRetracted))
		comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBox.setToolTip("Animation move to use to init retracted pose for better results. "\
			+ "Applied after Move Base IK and before inverse kinematic. "\
			+ "Percentage of capture bone chain length to original bone chain length is used "\
			+ "to blend move (start=relaxed, end=retracted).")
		pPanelForm.addWidget(comboBox)
		
		// twist propagation
		pPanelForm.addWidget(Label.new("Twist Propagation:", "Label.FormCaption"))
		
		textField = TextField.new(pModelTwistPropagation, 6)
		textField.setDesignerSelector("TextField.WindowCharacterConfiguration")
		textField.setValidator(SimpleTextValidator.new(10, SimpleTextValidator.CharacterClass.positiveNumber))
		textField.setToolTip("Percentage of Tip Bone twist relative to Base Bone to propagate along bone chain.")
		pPanelForm.addWidget(textField)
		
		// twist bone count
		pPanelForm.addWidget(Label.new("Twist Bone Count:", "Label.FormCaption"))
		
		textField = TextField.new(pModelTwistBoneCount, 4)
		textField.setDesignerSelector("TextField.WindowCharacterConfiguration")
		textField.setValidator(SimpleTextValidator.new(4, SimpleTextValidator.CharacterClass.digits))
		textField.setToolTip("Count of bones along chain to apply twist to starting at first bone after Tip Bone.")
		pPanelForm.addWidget(textField)
		
		// twist axis rotation
		label = Label.new("Twist Axis Rotation:", "Label.FormCaption")
		pPanelForm.addWidget(label)
		
		pEditTwistAxisRotation = EditVector.new()
		pEditTwistAxisRotation.setToolTip("Rotation of twist axis relative to Tip Bone")
		pPanelForm.addWidget(pEditTwistAxisRotation)
		
		CPECoordinateSystem.new(preview, null, null, label, pEditTwistAxisRotation, null, null)
	end
	
	/** Update bone lists. */
	public func void updateBoneLists(Array bones)
		pModelListTipBone.setContent(bones)
		pModelListGuideBone.setContent(bones)
		pModelListBaseBone.setContent(bones)
	end
	
	/** Update slot lists. */
	public func void updateSlotLists(Array slots)
		pEditTrackerTip.updateSlotLists(slots)
		pEditTrackerGuide.updateSlotLists(slots)
		pEditTrackerBase.updateSlotLists(slots)
	end
	
	/** Update move lists. */
	public func void updateMoveLists(Array moves)
		pModelListMoveBaseIK.setContent(moves)
		pModelListMoveRetracted.setContent(moves)
	end
	
	/** Motion transfer changed. */
	protected func void onMotionTransferChanged()
		if pEditTrackerTip != null
			pEditTrackerTip.setTracker(null)
		end
		if pEditTrackerGuide != null
			pEditTrackerGuide.setTracker(null)
		end
		if pEditTrackerBase != null
			pEditTrackerBase.setTracker(null)
		end
	end
end
