/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Gui

pin Democap.Behaviors
pin Democap.Characters
pin Democap.MotionTransferSystem

pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events
pin Dragengine.Scenery


/**
 * Edit character config window motion transfer ik panel.
 */
class WCCPMTIK extends WCCPanelMotionTransfer
	var SharedListModel pModelListTipBone
	var DefaultTextModel pModelTextTipBone
	var SharedListModel pModelListBaseBone
	var DefaultTextModel pModelTextBaseBone
	var SharedListModel pModelListGuideBone
	var DefaultTextModel pModelTextGuideBone
	var WCCPMTTracker pEditTrackerTip
	var WCCPMTTracker pEditTrackerGuide
	var WCCPMTTracker pEditTrackerBase
	var WCCPMTTracker pEditTrackerRelocate
	var DefaultListModel pModelActorReach
	var DefaultTextModel pModelReachLimit
	var EditVector pEditReachScaling
	var EditVector pEditReachScalingBack
	var DefaultToggleModel pModelAdjustPosition
	var SharedListModel pModelListMoveBaseIK
	var DefaultTextModel pModelTextMoveBaseIK
	var SharedListModel pModelListMoveRetracted
	var DefaultTextModel pModelTextMoveRetracted
	var DefaultTextModel pModelTwistPropagation
	var DefaultTextModel pModelTwistBoneCount
	var EditVector pEditTwistAxisRotation
	var DefaultTextModel pModelGuideTwistStrength
	var DefaultToggleModel pModelRelocateTip
	var EditVector2 pEditBaseRotateRangeCenter
	var EditVector2 pEditBaseRotateRangeMinimum
	var EditVector2 pEditBaseRotateRangeMaximum
	var EditVector2 pEditBaseRotateAngleMinimum
	var EditVector2 pEditBaseRotateAngleMaximum
	var EditVector pEditGuideBendAxisRotation
	
	
	
	/** Create window. */
	func new(WindowCharacterConfiguration window, String optionPrefix) super(window)
		pModelTypeName.setText("@UI.InverseKinematic")
		
		pModelListTipBone = SharedListModel.new(window.getModelBones())
		pModelListTipBone.setAutoSelect(false)
		pModelTextTipBone = DefaultTextModel.new()
		
		pModelListBaseBone = SharedListModel.new(window.getModelBones())
		pModelListBaseBone.setAutoSelect(false)
		pModelTextBaseBone = DefaultTextModel.new()
		
		pModelListGuideBone = SharedListModel.new(window.getModelBones())
		pModelListGuideBone.setAutoSelect(false)
		pModelTextGuideBone = DefaultTextModel.new()
		
		pModelActorReach = DefaultListModel.new(MotionTransferIK.ActorReach.all().toArray())
		pModelReachLimit = DefaultTextModel.new()
		pModelAdjustPosition = DefaultToggleModel.new()
		pModelListMoveBaseIK = SharedListModel.new(window.getModelMoves())
		pModelListMoveBaseIK.setAutoSelect(false)
		pModelTextMoveBaseIK = DefaultTextModel.new()
		pModelListMoveRetracted = SharedListModel.new(window.getModelMoves())
		pModelListMoveRetracted.setAutoSelect(false)
		pModelTextMoveRetracted = DefaultTextModel.new()
		pModelTwistPropagation = DefaultTextModel.new()
		pModelTwistBoneCount = DefaultTextModel.new()
		pModelGuideTwistStrength = DefaultTextModel.new()
		pModelRelocateTip = DefaultToggleModel.new()
		
		runWhileBlockingLayout(block
			createContent(window.getModelTrackerSlotNames(), optionPrefix)
		end)
	end
	
	/** Dispose of window. */
	func void dispose()
		pModelListTipBone = null
		pModelTextTipBone = null
		pModelListBaseBone = null
		pModelTextBaseBone = null
		pModelListGuideBone = null
		pModelTextGuideBone = null
		pEditTrackerTip.setTracker(null)
		pEditTrackerTip = null
		pEditTrackerGuide.setTracker(null)
		pEditTrackerGuide = null
		pEditTrackerBase.setTracker(null)
		pEditTrackerBase = null
		pEditTrackerRelocate = null
		pModelActorReach = null
		pModelReachLimit = null
		pEditReachScaling = null
		pModelAdjustPosition = null
		pModelListMoveBaseIK = null
		pModelTextMoveBaseIK = null
		pModelListMoveRetracted = null
		pModelTextMoveRetracted = null
		pModelTwistPropagation = null
		pModelTwistBoneCount = null
		pModelGuideTwistStrength = null
		pModelRelocateTip = null
		pEditTwistAxisRotation = null
		pEditBaseRotateRangeCenter = null
		pEditBaseRotateRangeMinimum = null
		pEditBaseRotateRangeMaximum = null
		pEditBaseRotateAngleMinimum = null
		pEditBaseRotateAngleMaximum = null
		pEditGuideBendAxisRotation = null
		super.dispose()
	end
	
	
	
	/** Load values from tracker slot object if present into edit widgets. */
	func void loadValues()
		runWhileBlockingLayout(block
			super.loadValues()
			
			if pMotionTransfer != null
				var MotionTransferIK mt = pMotionTransfer cast MotionTransferIK
				pModelTextTipBone.setText(mt.getTipBone())
				pModelTextBaseBone.setText(mt.getBaseBone())
				pModelTextGuideBone.setText(mt.getGuideBone())
				pEditTrackerTip.setTracker(mt.getTipTracker())
				pEditTrackerTip.loadValues()
				pEditTrackerGuide.setTracker(mt.getGuideTracker())
				pEditTrackerGuide.loadValues()
				pEditTrackerBase.setTracker(mt.getBaseTracker())
				pEditTrackerBase.loadValues()
				pEditTrackerRelocate.setTracker(mt.getRelocateTracker())
				pEditTrackerRelocate.loadValues()
				pModelActorReach.setSelected(pModelActorReach.indexOf(mt.getActorReach()))
				pModelReachLimit.setText(mt.getReachLimit().toString())
				pEditReachScaling.setVector(mt.getReachScaling())
				pEditReachScalingBack.setVector(mt.getReachScalingBack())
				pModelAdjustPosition.setToggled(mt.getAdjustPosition())
				pModelTextMoveBaseIK.setText(mt.getMoveBaseIK())
				pModelTextMoveRetracted.setText(mt.getMoveRetracted())
				pModelTwistPropagation.setText(mt.getTwistPropagation().toString())
				pModelTwistBoneCount.setText(mt.getTwistBoneCount().toString())
				pEditTwistAxisRotation.setVector(mt.getTwistAxisRotation())
				pModelGuideTwistStrength.setText(mt.getGuideTwistStrength().toString())
				pModelRelocateTip.setToggled(mt.getRelocateTip())
				pEditBaseRotateRangeCenter.setVector2(mt.getBaseRotateRangeCenter())
				pEditBaseRotateRangeMinimum.setVector2(mt.getBaseRotateRangeMinimum())
				pEditBaseRotateRangeMaximum.setVector2(mt.getBaseRotateRangeMaximum())
				pEditBaseRotateAngleMinimum.setVector2(mt.getBaseRotateAngleMinimum())
				pEditBaseRotateAngleMaximum.setVector2(mt.getBaseRotateAngleMaximum())
				pEditGuideBendAxisRotation.setVector(mt.getGuideBendAxisRotation())
				
			else
				pModelTextTipBone.setText("")
				pModelTextBaseBone.setText("")
				pModelTextGuideBone.setText("")
				pEditTrackerTip.setTracker(null)
				pEditTrackerGuide.setTracker(null)
				pEditTrackerBase.setTracker(null)
				pEditTrackerRelocate.setTracker(null)
				pModelActorReach.setSelected(pModelActorReach.indexOf(MotionTransferIK.ActorReach.none))
				pModelReachLimit.setText("")
				pEditReachScaling.setVector(Vector.new(1, 1, 1))
				pEditReachScalingBack.setVector(Vector.new(1, 1, 1))
				pModelAdjustPosition.setToggled(false)
				pModelTextMoveBaseIK.setText("")
				pModelTextMoveRetracted.setText("")
				pModelTwistPropagation.setText("")
				pModelTwistBoneCount.setText("")
				pEditTwistAxisRotation.setVector(Vector.new())
				pModelGuideTwistStrength.setText("")
				pModelRelocateTip.setToggled(false)
				pEditBaseRotateRangeCenter.setVector2(Vector2.new())
				pEditBaseRotateRangeMinimum.setVector2(Vector2.new())
				pEditBaseRotateRangeMaximum.setVector2(Vector2.new())
				pEditBaseRotateAngleMinimum.setVector2(Vector2.new())
				pEditBaseRotateAngleMaximum.setVector2(Vector2.new())
				pEditGuideBendAxisRotation.setVector(Vector.new())
			end
		end)
		doLayoutIfBlocked()
	end
	
	/** Save value from edit widgets to tracker slot object if present. */
	func void saveValues()
		if pMotionTransfer == null
			return
		end
		super.saveValues()
		
		var MotionTransferIK mt = pMotionTransfer cast MotionTransferIK
		mt.setTipBone(pModelTextTipBone.getText())
		mt.setBaseBone(pModelTextBaseBone.getText())
		mt.setGuideBone(pModelTextGuideBone.getText())
		pEditTrackerTip.saveValues()
		pEditTrackerGuide.saveValues()
		pEditTrackerBase.saveValues()
		pEditTrackerRelocate.saveValues()
		mt.setActorReach(pModelActorReach.getAt(pModelActorReach.getSelected()) cast MotionTransferIK.ActorReach)
		mt.setReachLimit(pModelReachLimit.getText().toFloat())
		mt.setReachScaling(pEditReachScaling.getVector())
		mt.setReachScalingBack(pEditReachScalingBack.getVector())
		mt.setAdjustPosition(pModelAdjustPosition.getToggled())
		mt.setMoveBaseIK(pModelTextMoveBaseIK.getText())
		mt.setMoveRetracted(pModelTextMoveRetracted.getText())
		mt.setTwistPropagation(pModelTwistPropagation.getText().toFloat())
		mt.setTwistBoneCount(pModelTwistBoneCount.getText().toInt())
		mt.setTwistAxisRotation(pEditTwistAxisRotation.getVector())
		mt.setGuideTwistStrength(pModelGuideTwistStrength.getText().toFloat())
		mt.setRelocateTip(pModelRelocateTip.getToggled())
		mt.setBaseRotateRangeCenter(pEditBaseRotateRangeCenter.getVector2())
		mt.setBaseRotateRangeMinimum(pEditBaseRotateRangeMinimum.getVector2())
		mt.setBaseRotateRangeMaximum(pEditBaseRotateRangeMaximum.getVector2())
		mt.setBaseRotateAngleMinimum(pEditBaseRotateAngleMinimum.getVector2())
		mt.setBaseRotateAngleMaximum(pEditBaseRotateAngleMaximum.getVector2())
		mt.setGuideBendAxisRotation(pEditGuideBendAxisRotation.getVector())
	end
	
	/** Supports motion transfer type. */
	func bool supports(MotionTransfer motionTranfer)
		return motionTranfer castable MotionTransferIK
	end
	
	
	
	/** Create window content. */
	protected func void createContent(DefaultListModel modelTrackerSlotNames, String optionPrefix)
		var WidgetCharacterPreview preview = pWindowCharacterConfiguration.getCharacterPreview()
		var ComboBox comboBox, comboBoxTip, comboBoxBase, comboBoxGuide
		var Label label, labelTip, labelBase
		var TextField textField
		var CheckBox checkBox
		var String toolTip
		
		createBaseContent("motiontransferik")
		
		// bone chain
		labelTip = Label.new("@UI.TipBone.Label", "Label.FormCaption.SingleLine")
		pPanelForm.addWidget(labelTip)
		
		comboBoxTip = ComboBox.new(pModelListTipBone, DefaultComboBoxEditor.new(pModelTextTipBone))
		comboBoxTip.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBoxTip.setToolTip("@UI.ToolTip.TipBone.Chain")
		pPanelForm.addWidget(comboBoxTip)
		
		labelBase = Label.new("@UI.BaseBone.Label", "Label.FormCaption.SingleLine")
		pPanelForm.addWidget(labelBase)
		
		comboBoxBase = ComboBox.new(pModelListBaseBone, DefaultComboBoxEditor.new(pModelTextBaseBone))
		comboBoxBase.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBoxBase.setToolTip("@UI.ToolTip.BaseBone.Chain")
		pPanelForm.addWidget(comboBoxBase)
		
		CPEBoneChain.new(preview, labelTip, comboBoxTip, null, comboBoxBase, false)
		CPEBoneChain.new(preview, null, comboBoxTip, labelBase, comboBoxBase, true)
		
		// guide bone
		label = Label.new("@UI.GuideBone.Label", "Label.FormCaption.SingleLine")
		pPanelForm.addWidget(label)
		
		comboBoxGuide = ComboBox.new(pModelListGuideBone, DefaultComboBoxEditor.new(pModelTextGuideBone))
		comboBoxGuide.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBoxGuide.setToolTip("@UI.ToolTip.GuideBone.Chain")
		pPanelForm.addWidget(comboBoxGuide)
		
		CPEBone.new(preview, label, comboBoxGuide)
		
		// trackers
		pEditTrackerTip = WCCPMTTracker.new(modelTrackerSlotNames, optionPrefix + "/TipTracker", this, "@UI.TipTracker", false)
		addWidget(pEditTrackerTip)
		
		pEditTrackerGuide = WCCPMTTracker.new(modelTrackerSlotNames, optionPrefix + "/GuideTracker", this, "@UI.GuideTracker", false)
		addWidget(pEditTrackerGuide)
		
		pEditTrackerBase = WCCPMTTracker.new(modelTrackerSlotNames, optionPrefix + "/BaseTracker", this, "@UI.BaseTracker", false)
		addWidget(pEditTrackerBase)
		
		pEditTrackerRelocate = WCCPMTTracker.new(modelTrackerSlotNames, optionPrefix + "/RelocateTracker", this, "@UI.RelocateTracker", false)
		addWidget(pEditTrackerRelocate)
		
		// actor reach
		pPanelForm.addWidget(Label.new("@UI.ActorReach.Label", "Label.FormCaption.SingleLine"))
		
		comboBox = ComboBox.new(pModelActorReach)
		comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBox.setToolTip("@UI.ToolTip.ActorReach")
		pPanelForm.addWidget(comboBox)
		
		// reach limit
		pPanelForm.addWidget(Label.new("@UI.ReachLimit.Label", "Label.FormCaption.SingleLine"))
		
		textField = TextField.new(pModelReachLimit, 6)
		textField.setDesignerSelector("TextField.WindowCharacterConfiguration")
		textField.setValidator(SimpleTextValidator.new(10, SimpleTextValidator.CharacterClass.positiveNumber))
		textField.setToolTip("@UI.ToolTip.ReachLimit")
		pPanelForm.addWidget(textField)
		
		// reach scaling
		toolTip = "@UI.ToolTip.ReachScalingTwistAxis"
		
		label = Label.new("@UI.ReachScaling.Label", "Label.FormCaption.SingleLine")
		label.setToolTip(toolTip)
		pPanelForm.addWidget(label)
		
		pEditReachScaling = EditVector.new()
		pEditReachScaling.setToolTip(toolTip)
		pPanelForm.addWidget(pEditReachScaling)
		
		// reach scaling backwards
		toolTip = "@UI.ToolTip.ReachScalingTwistAxisBack"
		
		label = Label.new("@UI.ReachScalingBack.Label", "Label.FormCaption.SingleLine")
		label.setToolTip(toolTip)
		pPanelForm.addWidget(label)
		
		pEditReachScalingBack = EditVector.new()
		pEditReachScalingBack.setToolTip(toolTip)
		pPanelForm.addWidget(pEditReachScalingBack)
		
		// adjust position
		pPanelForm.addWidget(Label.new(""))
		
		checkBox = CheckBox.new(pModelAdjustPosition, "@UI.AdjustPosition")
		checkBox.setToolTip("@UI.ToolTip.AdjustPositionBaseBone")
		pPanelForm.addWidget(checkBox)
		
		// move base ik
		pPanelForm.addWidget(Label.new("@UI.MoveBaseIK.Label", "Label.FormCaption.SingleLine"))
		
		comboBox = ComboBox.new(pModelListMoveBaseIK, DefaultComboBoxEditor.new(pModelTextMoveBaseIK))
		comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBox.setToolTip("@UI.ToolTip.MoveBaseIK")
		pPanelForm.addWidget(comboBox)
		
		// move retracted
		pPanelForm.addWidget(Label.new("@UI.MoveRetracted.Label", "Label.FormCaption.SingleLine"))
		
		comboBox = ComboBox.new(pModelListMoveRetracted, DefaultComboBoxEditor.new(pModelTextMoveRetracted))
		comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBox.setToolTip("@UI.ToolTip.MoveRetracted")
		pPanelForm.addWidget(comboBox)
		
		// twist propagation
		pPanelForm.addWidget(Label.new("@UI.TwistPropagation.Label", "Label.FormCaption.SingleLine"))
		
		textField = TextField.new(pModelTwistPropagation, 6)
		textField.setDesignerSelector("TextField.WindowCharacterConfiguration")
		textField.setValidator(SimpleTextValidator.new(10, SimpleTextValidator.CharacterClass.number))
		textField.setToolTip("@UI.ToolTip.TwistPropagation")
		pPanelForm.addWidget(textField)
		
		// twist bone count
		pPanelForm.addWidget(Label.new("@UI.TwistBoneCount.Label", "Label.FormCaption.SingleLine"))
		
		textField = TextField.new(pModelTwistBoneCount, 4)
		textField.setDesignerSelector("TextField.WindowCharacterConfiguration")
		textField.setValidator(SimpleTextValidator.new(4, SimpleTextValidator.CharacterClass.digits))
		textField.setToolTip("@UI.ToolTip.TwistBoneCount")
		pPanelForm.addWidget(textField)
		
		// twist axis rotation
		label = Label.new("@UI.TwistAxisRotation.Label", "Label.FormCaption.SingleLine")
		pPanelForm.addWidget(label)
		
		pEditTwistAxisRotation = EditVector.new()
		pEditTwistAxisRotation.setToolTip("@UI.ToolTip.TwistAxisRotation")
		pPanelForm.addWidget(pEditTwistAxisRotation)
		
		CPECoordinateSystemAxis.new(preview, null, null, label, pEditTwistAxisRotation, comboBoxTip, null, true)
		
		// guide twist
		pPanelForm.addWidget(Label.new("@UI.GuideTwistStrength.Label", "Label.FormCaption.SingleLine"))
		
		textField = TextField.new(pModelGuideTwistStrength, 6)
		textField.setDesignerSelector("TextField.WindowCharacterConfiguration")
		textField.setValidator(SimpleTextValidator.new(10, SimpleTextValidator.CharacterClass.number))
		textField.setToolTip("@UI.ToolTip.GuideTwistStrength")
		pPanelForm.addWidget(textField)
		
		// guide bend axis rotation
		label = Label.new("@UI.GuideBendAxisRotation.Label", "Label.FormCaption.SingleLine")
		pPanelForm.addWidget(label)
		
		pEditGuideBendAxisRotation = EditVector.new()
		pEditGuideBendAxisRotation.setToolTip("@UI.ToolTip.GuideBendAxisRotation")
		pPanelForm.addWidget(pEditGuideBendAxisRotation)
		
		CPECoordinateSystemAxis.new(preview, null, null, label, pEditGuideBendAxisRotation, comboBoxGuide, null, true)
		
		// relocate tip
		pPanelForm.addWidget(Label.new(""))
		
		checkBox = CheckBox.new(pModelAdjustPosition, "@UI.RelocateTip")
		checkBox.setToolTip("@UI.ToolTip.RelocateTip")
		pPanelForm.addWidget(checkBox)
		
		// base bone rotation
		addWidget(CollapsibleGroup.new("@UI.BaseBoneRotation", "", CollapsibleGroup.persistModel(optionPrefix + "/BaseRotate", false),\
		FormLayout.new(true, 10, 2), block Panel p
			// range center
			toolTip = "@UI.ToolTip.BaseBoneRotation"
			
			label = Label.new("@UI.RangeCenter.Label", "Label.FormCaption.SingleLine")
			label.setToolTip(toolTip)
			p.addWidget(label)
			
			pEditBaseRotateRangeCenter = EditVector2.new()
			pEditBaseRotateRangeCenter.setToolTip(toolTip)
			p.addWidget(pEditBaseRotateRangeCenter)
			
			// range minimum
			toolTip = "@UI.ToolTip.RangeMinimumRotation"
			
			label = Label.new("@UI.RangeMinimum.Label", "Label.FormCaption.SingleLine")
			label.setToolTip(toolTip)
			p.addWidget(label)
			
			pEditBaseRotateRangeMinimum = EditVector2.new()
			pEditBaseRotateRangeMinimum.setToolTip(toolTip)
			p.addWidget(pEditBaseRotateRangeMinimum)
			
			// range maximum
			toolTip = "@UI.ToolTip.RangeMaximumRotation"
			
			label = Label.new("@UI.RangeMaximum.Label", "Label.FormCaption.SingleLine")
			label.setToolTip(toolTip)
			p.addWidget(label)
			
			pEditBaseRotateRangeMaximum = EditVector2.new()
			pEditBaseRotateRangeMaximum.setToolTip(toolTip)
			p.addWidget(pEditBaseRotateRangeMaximum)
			
			// angle minimum
			toolTip = "@UI.ToolTip.AngleMinimum"
			
			label = Label.new("@UI.AngleMinimum.Label", "Label.FormCaption.SingleLine")
			label.setToolTip(toolTip)
			p.addWidget(label)
			
			pEditBaseRotateAngleMinimum = EditVector2.new()
			pEditBaseRotateAngleMinimum.setToolTip(toolTip)
			p.addWidget(pEditBaseRotateAngleMinimum)
			
			// angle maximum
			toolTip = "@UI.ToolTip.AngleMaximum"
			
			label = Label.new("@UI.AngleMaximum.Label", "Label.FormCaption.SingleLine")
			label.setToolTip(toolTip)
			p.addWidget(label)
			
			pEditBaseRotateAngleMaximum = EditVector2.new()
			pEditBaseRotateAngleMaximum.setToolTip(toolTip)
			p.addWidget(pEditBaseRotateAngleMaximum)
		end))
	end
	
	/** Motion transfer changed. */
	protected func void onMotionTransferChanged()
		if pEditTrackerTip != null
			pEditTrackerTip.setTracker(null)
		end
		if pEditTrackerGuide != null
			pEditTrackerGuide.setTracker(null)
		end
		if pEditTrackerBase != null
			pEditTrackerBase.setTracker(null)
		end
		if pEditTrackerRelocate != null
			pEditTrackerRelocate.setTracker(null)
		end
	end
end
