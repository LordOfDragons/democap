/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Gui

pin Democap.Behaviors
pin Democap.Characters
pin Democap.MotionTransferSystem

pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events
pin Dragengine.Scenery


/**
 * Edit character config window motion transfer copy panel.
 */
class WCCPMTCopy extends WCCPanelMotionTransfer
	var SharedListModel pModelListSourceBone
	var DefaultTextModel pModelTextSourceBone
	var DefaultListModel pModelTargetBones
	var DefaultTextModel pModelScalePosition
	var DefaultTextModel pModelScaleRotation
	var DefaultToggleModel pModelCopyPosition
	var DefaultToggleModel pModelCopyRotation
	var DefaultListModel pModelCopyMode
	var DefaultToggleModel pModelLockX
	var DefaultToggleModel pModelLockY
	var DefaultToggleModel pModelLockZ
	
	
	
	/** Create window. */
	func new(WindowCharacterConfiguration window) super(window)
		pModelTypeName.setText("@UI.CopyBoneStates")
		
		pModelListSourceBone = SharedListModel.new(window.getModelBones())
		pModelListSourceBone.setAutoSelect(false)
		pModelTextSourceBone = DefaultTextModel.new()
		pModelTargetBones = DefaultListModel.new()
		pModelTargetBones.setAutoSelect(false)
		pModelScalePosition = DefaultTextModel.new()
		pModelScaleRotation = DefaultTextModel.new()
		pModelCopyPosition = DefaultToggleModel.new()
		pModelCopyRotation = DefaultToggleModel.new()
		pModelCopyMode = DefaultListModel.new(MotionTransferCopy.CopyMode.all().toArray())
		pModelLockX = DefaultToggleModel.new()
		pModelLockY = DefaultToggleModel.new()
		pModelLockZ = DefaultToggleModel.new()
		
		runWhileBlockingLayout(block
			createContent()
		end)
	end
	
	/** Dispose of window. */
	func void dispose()
		pModelListSourceBone = null
		pModelTextSourceBone = null
		pModelTargetBones = null
		pModelScalePosition = null
		pModelScaleRotation = null
		pModelCopyPosition = null
		pModelCopyRotation = null
		pModelCopyMode = null
		pModelLockX = null
		pModelLockY = null
		pModelLockZ = null
		super.dispose()
	end
	
	
	
	/** Load values from tracker slot object if present into edit widgets. */
	func void loadValues()
		runWhileBlockingLayout(block
			super.loadValues()
			
			if pMotionTransfer != null
				var MotionTransferCopy mt = pMotionTransfer cast MotionTransferCopy
				pModelTextSourceBone.setText(mt.getSourceBone())
				pModelTargetBones.setContent(mt.getTargetBones())
				pModelScalePosition.setText(mt.getScalePosition().toString())
				pModelScaleRotation.setText(mt.getScaleRotation().toString())
				pModelCopyPosition.setToggled(mt.getCopyPosition())
				pModelCopyRotation.setToggled(mt.getCopyRotation())
				pModelCopyMode.setSelected(pModelCopyMode.indexOf(mt.getCopyMode()))
				pModelLockX.setToggled(mt.getLockX())
				pModelLockY.setToggled(mt.getLockY())
				pModelLockZ.setToggled(mt.getLockZ())
				
			else
				pModelTextSourceBone.setText("")
				pModelTargetBones.removeAll()
				pModelScalePosition.setText("")
				pModelScaleRotation.setText("")
				pModelCopyPosition.setToggled(false)
				pModelCopyRotation.setToggled(false)
				pModelCopyMode.setSelected(pModelCopyMode.indexOf(MotionTransferCopy.CopyMode.component))
				pModelLockX.setToggled(false)
				pModelLockY.setToggled(false)
				pModelLockZ.setToggled(false)
			end
		end)
		doLayoutIfBlocked()
	end
	
	/** Save value from edit widgets to tracker slot object if present. */
	func void saveValues()
		if pMotionTransfer == null
			return
		end
		super.saveValues()
		
		var MotionTransferCopy mt = pMotionTransfer cast MotionTransferCopy
		mt.setSourceBone(pModelTextSourceBone.getText())
		mt.getTargetBones().removeAll()
		mt.getTargetBones().addAll(pModelTargetBones.getContent())
		mt.setScalePosition(pModelScalePosition.getText().toFloat())
		mt.setScaleRotation(pModelScaleRotation.getText().toFloat())
		mt.setCopyPosition(pModelCopyPosition.getToggled())
		mt.setCopyRotation(pModelCopyRotation.getToggled())
		mt.setCopyMode(pModelCopyMode.getAt(pModelCopyMode.getSelected()) cast MotionTransferCopy.CopyMode)
		mt.setLockX(pModelLockX.getToggled())
		mt.setLockY(pModelLockY.getToggled())
		mt.setLockZ(pModelLockZ.getToggled())
	end
	
	/** Supports motion transfer type. */
	func bool supports(MotionTransfer motionTranfer)
		return motionTranfer castable MotionTransferCopy
	end
	
	
	
	/** Create window content. */
	protected func void createContent()
		var WidgetCharacterPreview preview = pWindowCharacterConfiguration.getCharacterPreview()
		var EnumListElementRenderer renderer
		var TextField textField
		var ComboBox comboBox
		var ListBox listBox
		var Label label
		var CheckBox checkBox
		
		createBaseContent("motiontransfercopy")
		
		// source bone
		label = Label.new("@UI.SourceBone.Label", "Label.FormCaption.SingleLine")
		pPanelForm.addWidget(label)
		
		comboBox = ComboBox.new(pModelListSourceBone, DefaultComboBoxEditor.new(pModelTextSourceBone))
		comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBox.setToolTip("@UI.ToolTip.SourceBone.CopyBoneStates")
		pPanelForm.addWidget(comboBox)
		
		CPEBone.new(preview, label, comboBox)
		
		// target bones
		label = Label.new("@UI.TargetBones.Label", "Label.FormCaption.SingleLine")
		pPanelForm.addWidget(label)
		
		listBox = ListBox.new(pModelTargetBones)
		listBox.setDesignerSelector("ListBox.WindowCharacterConfiguration")
		listBox.setToolTip("@UI.ToolTip.TargetBones.CopyBoneStates")
		listBox.setNumberDisplayLines(3)
		pPanelForm.addWidget(ScrollPanel.new(listBox))
		
		CPEBoneList.new(preview, label, listBox)
		
		// scale
		pPanelForm.addWidget(Label.new("@UI.Scale.Label", "Label.FormCaption.SingleLine"))
		
		pPanelForm.addWidget(Panel.new(GridLayout.new(0, 1, 5), block Panel p
			p.addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 0, FlowLayout.Stretch.last), block Panel p2
				p2.addWidget(Label.new("@UI.Position"))
				
				textField = TextField.new(pModelScalePosition, 6)
				textField.setDesignerSelector("TextField.WindowCharacterConfiguration")
				textField.setValidator(SimpleTextValidator.new(10, SimpleTextValidator.CharacterClass.number))
				textField.setToolTip("@UI.ToolTip.ScalePosition.CopyBoneStates")
				p2.addWidget(textField)
			end))
			
			p.addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 0, FlowLayout.Stretch.last), block Panel p2
				p2.addWidget(Label.new("@UI.Rotation"))
				
				textField = TextField.new(pModelScaleRotation, 6)
				textField.setDesignerSelector("TextField.WindowCharacterConfiguration")
				textField.setValidator(SimpleTextValidator.new(10, SimpleTextValidator.CharacterClass.number))
				textField.setToolTip("@UI.ToolTip.ScaleRotation.CopyBoneStates")
				p2.addWidget(textField)
			end))
		end))
		
		// mode
		pPanelForm.addWidget(Label.new("@UI.CopyMode.Label", "Label.FormCaption.SingleLine"))
		
		renderer = EnumListElementRenderer.new()
		renderer.setTranslationPrefix("UI.Enum.MotionTransferCopyMode.")
		comboBox = ComboBox.new(pModelCopyMode, renderer)
		comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBox.setToolTip("@UI.ToolTip.CopyMode.CopyBoneStates")
		pPanelForm.addWidget(comboBox)
		
		// restrictions
		pPanelForm.addWidget(Label.new("@UI.Copy.Label", "Label.FormCaption.SingleLine"))
		
		pPanelForm.addWidget(Panel.new(GridLayout.new(0, 1), block Panel p
			checkBox = CheckBox.new(pModelCopyPosition, "@UI.Position")
			checkBox.setToolTip("@UI.ToolTip.CopyPosition")
			p.addWidget(checkBox)
			
			checkBox = CheckBox.new(pModelCopyRotation, "@UI.Rotation")
			checkBox.setToolTip("@UI.ToolTip.CopyRotation")
			p.addWidget(checkBox)
		end))
		
		pPanelForm.addWidget(Label.new("@UI.Lock.Label", "Label.FormCaption.SingleLine"))
		
		pPanelForm.addWidget(Panel.new(GridLayout.new(0, 1), block Panel p
			checkBox = CheckBox.new(pModelLockX, "@UI.X")
			checkBox.setToolTip("@UI.ToolTip.NoModifyXCoord")
			p.addWidget(checkBox)
			
			checkBox = CheckBox.new(pModelLockY, "@UI.Y")
			checkBox.setToolTip("@UI.ToolTip.NoModifyYCoord")
			p.addWidget(checkBox)
			
			checkBox = CheckBox.new(pModelLockZ, "@UI.Z")
			checkBox.setToolTip("@UI.ToolTip.NoModifyZCoord")
			p.addWidget(checkBox)
		end))
	end
end
