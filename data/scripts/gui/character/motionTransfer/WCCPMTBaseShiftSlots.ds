/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2025, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Gui

pin Democap.Behaviors
pin Democap.Characters
pin Democap.MotionTransferSystem

pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events
pin Dragengine.Scenery


/**
 * Edit character config window motion transfer base shift slot panel.
 */
class WCCPMTBaseShiftSlots extends WCCPanelMotionTransfer
	/** Add shift slot action. */
	class ActionAddShiftSlot implements ActionListener
		var DefaultListModel pModel
		var ListModel pModelAdd
		
		func new(DefaultListModel model, ListModel modelAdd)
			pModel = model
			pModelAdd = modelAdd
		end
		
		func void onAction(ActionEvent event)
			if pModelAdd.getSelected() == -1
				return
			end
			
			var String name = pModelAdd.getAt(pModelAdd.getSelected()) cast String
			if not name.empty() and not pModel.has(name)
				pModel.add(name)
				pModel.sort()
			end
		end
	end
	
	/** Remove shift slot action. */
	class ActionRemoveShiftSlot implements ActionListener
		var DefaultListModel pModel
		
		func new(DefaultListModel model)
			pModel = model
		end
		
		func void onAction(ActionEvent event)
			if pModel.getSelected() != -1
				pModel.removeFrom(pModel.getSelected())
			end
		end
	end
	
	/** Clear shift slots action. */
	class ActionClearShiftSlots implements ActionListener
		var DefaultListModel pModel
		
		func new(DefaultListModel model)
			pModel = model
		end
		
		func void onAction(ActionEvent event)
			pModel.removeAll()
		end
	end
	
	
	var WCCPMTTracker pEditReferenceTracker, pEditBase1Tracker, pEditBase2Tracker
	var SharedListModel pModelListBaseBone1
	var DefaultTextModel pModelTextBaseBone1
	var SharedListModel pModelListTipBone1
	var DefaultTextModel pModelTextTipBone1
	var SharedListModel pModelListBaseBone2
	var DefaultTextModel pModelTextBaseBone2
	var SharedListModel pModelListTipBone2
	var DefaultTextModel pModelTextTipBone2
	var DefaultListModel pModelShiftSlots
	var SharedListModel pModelAddShiftSlot
	var DefaultTextModel pModelScaleShift
	var DefaultToggleModel pModelShiftReferenceOffset
	
	
	/** Create window. */
	func new(WindowCharacterConfiguration window, String optionPrefix) super(window)
		pModelTypeName.setText("@UI.BaseShiftSlots")
		
		pModelListBaseBone1 = SharedListModel.new(window.getModelBones())
		pModelListBaseBone1.setAutoSelect(false)
		pModelTextBaseBone1 = DefaultTextModel.new()
		
		pModelListTipBone1 = SharedListModel.new(window.getModelBones())
		pModelListTipBone1.setAutoSelect(false)
		pModelTextTipBone1 = DefaultTextModel.new()
		
		pModelListBaseBone2 = SharedListModel.new(window.getModelBones())
		pModelListBaseBone2.setAutoSelect(false)
		pModelTextBaseBone2 = DefaultTextModel.new()
		
		pModelListTipBone2 = SharedListModel.new(window.getModelBones())
		pModelListTipBone2.setAutoSelect(false)
		pModelTextTipBone2 = DefaultTextModel.new()
		
		pModelShiftSlots = DefaultListModel.new()
		pModelShiftSlots.setAutoSelect(false)
		pModelAddShiftSlot = SharedListModel.new(window.getModelTrackerSlotNames())
		pModelAddShiftSlot.setAutoSelect(false)
		pModelScaleShift = DefaultTextModel.new()
		
		pModelShiftReferenceOffset = DefaultToggleModel.new()
		
		runWhileBlockingLayout(block
			createContent(window.getModelTrackerSlotNames(), optionPrefix)
		end)
	end
	
	/** Dispose of window. */
	func void dispose()
		pModelListBaseBone1 = null
		pModelTextBaseBone1 = null
		pModelListTipBone1 = null
		pModelTextTipBone1 = null
		pModelListBaseBone2 = null
		pModelTextBaseBone2 = null
		pModelListTipBone2 = null
		pModelTextTipBone2 = null
		pModelShiftSlots = null
		pModelAddShiftSlot = null
		pEditReferenceTracker.setTracker(null)
		pEditReferenceTracker = null
		pEditBase1Tracker.setTracker(null)
		pEditBase1Tracker = null
		pEditBase2Tracker.setTracker(null)
		pEditBase2Tracker = null
		pModelScaleShift = null
		pModelShiftReferenceOffset = null
		super.dispose()
	end
	
	
	/** Load values from tracker slot object if present into edit widgets. */
	func void loadValues()
		runWhileBlockingLayout(block
			super.loadValues()
			
			if pMotionTransfer != null
				var MotionTransferBaseShiftSlots mt = pMotionTransfer cast MotionTransferBaseShiftSlots
				pModelShiftSlots.setContent(mt.getShiftSlots().sorted())
				pEditReferenceTracker.setTracker(mt.getReference())
				pEditReferenceTracker.loadValues()
				pEditBase1Tracker.setTracker(mt.getBase1())
				pEditBase1Tracker.loadValues()
				pEditBase2Tracker.setTracker(mt.getBase2())
				pEditBase2Tracker.loadValues()
				pModelTextTipBone1.setText(mt.getTipBone1())
				pModelTextBaseBone1.setText(mt.getBaseBone1())
				pModelTextTipBone2.setText(mt.getTipBone2())
				pModelTextBaseBone2.setText(mt.getBaseBone2())
				pModelScaleShift.setText(mt.getScaleShift().toString())
				pModelShiftReferenceOffset.setToggled(mt.getShiftReferenceOffset())
				
			else
				pModelShiftSlots.removeAll()
				pEditReferenceTracker.setTracker(null)
				pEditBase1Tracker.setTracker(null)
				pEditBase2Tracker.setTracker(null)
				pModelScaleShift.setText("")
				pModelShiftReferenceOffset.setToggled(false)
			end
		end)
		doLayoutIfBlocked()
	end
	
	/** Save value from edit widgets to tracker slot object if present. */
	func void saveValues()
		if pMotionTransfer == null
			return
		end
		super.saveValues()
		
		var MotionTransferBaseShiftSlots mt = pMotionTransfer cast MotionTransferBaseShiftSlots
		mt.getShiftSlots().addAll(pModelShiftSlots.getContent())
		mt.setScaleShift(pModelScaleShift.getText().toFloat())
		mt.setShiftReferenceOffset(pModelShiftReferenceOffset.getToggled())
		pEditReferenceTracker.saveValues()
		pEditBase1Tracker.saveValues()
		pEditBase2Tracker.saveValues()
	end
	
	/** Supports motion transfer type. */
	func bool supports(MotionTransfer motionTranfer)
		return motionTranfer castable MotionTransferBaseShiftSlots
	end
	
	
	/** Create window content. */
	protected func void createContent(DefaultListModel modelTrackerSlotNames, String optionPrefix)
		var WidgetCharacterPreview preview = pWindowCharacterConfiguration.getCharacterPreview()
		var ComboBox comboBox, comboBoxTip, comboBoxBase
		var Label label, labelTip, labelBase
		var TextField textField
		var CheckBox checkBox
		var ListBox listBox
		var Button button
		
		createBaseContent("MotionTransferBaseShiftSlots")
		
		// shift slots
		label = Label.new("@UI.ShiftSlots.Label", "Label.FormCaption.SingleLine")
		pPanelForm.addWidget(label)
		
		pPanelForm.addWidget(Panel.new(FlowLayout.new(LayoutAxis.y), block Panel p
			comboBox = ComboBox.new(pModelAddShiftSlot)
			comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
			comboBox.setToolTip("@UI.ToolTip.ShiftSlot.BaseShiftSlots")
			p.addWidget(comboBox)
			
			p.addWidget(Panel.new(BoxLayout.new(LayoutAxis.x), block Panel p2
				button = Button.new("@UI.Add", ActionAddShiftSlot.new(pModelShiftSlots, pModelAddShiftSlot))
				button.setDesignerSelector("Button.Popup")
				p2.addWidget(button)
				
				button = Button.new("@UI.Remove", ActionRemoveShiftSlot.new(pModelShiftSlots))
				button.setDesignerSelector("Button.Popup")
				p2.addWidget(button)
				
				button = Button.new("@UI.Clear", ActionClearShiftSlots.new(pModelShiftSlots))
				button.setDesignerSelector("Button.Popup")
				p2.addWidget(button)
			end))
			
			listBox = ListBox.new(pModelShiftSlots)
			listBox.setDesignerSelector("ListBox.WindowCharacterConfiguration")
			listBox.setToolTip("@UI.ToolTip.ShiftSlots")
			listBox.setNumberDisplayLines(4)
			p.addWidget(ScrollPanel.new(listBox))
		end))
		
		// base 1 chain
		labelBase = Label.new("@UI.Base1Bone.Label", "Label.FormCaption.SingleLine")
		pPanelForm.addWidget(labelBase)
		
		comboBoxBase = ComboBox.new(pModelListBaseBone1, DefaultComboBoxEditor.new(pModelTextBaseBone1))
		comboBoxBase.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBoxBase.setToolTip("@UI.ToolTip.Base1Bone")
		pPanelForm.addWidget(comboBoxBase)
		
		labelTip = Label.new("@UI.Tip1Bone.Label", "Label.FormCaption.SingleLine")
		pPanelForm.addWidget(labelTip)
		
		comboBoxTip = ComboBox.new(pModelListTipBone1, DefaultComboBoxEditor.new(pModelTextTipBone1))
		comboBoxTip.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBoxTip.setToolTip("@UI.ToolTip.Tip1Bone")
		pPanelForm.addWidget(comboBoxTip)
		
		CPEBoneChain.new(preview, labelTip, comboBoxTip, null, comboBoxBase, false)
		CPEBoneChain.new(preview, null, comboBoxTip, labelBase, comboBoxBase, true)
		
		// base 2 chain
		labelBase = Label.new("@UI.Base2Bone.Label", "Label.FormCaption.SingleLine")
		pPanelForm.addWidget(labelBase)
		
		comboBoxBase = ComboBox.new(pModelListBaseBone2, DefaultComboBoxEditor.new(pModelTextBaseBone2))
		comboBoxBase.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBoxBase.setToolTip("@UI.ToolTip.Base2Bone")
		pPanelForm.addWidget(comboBoxBase)
		
		labelTip = Label.new("@UI.Tip2Bone.Label", "Label.FormCaption.SingleLine")
		pPanelForm.addWidget(labelTip)
		
		comboBoxTip = ComboBox.new(pModelListTipBone2, DefaultComboBoxEditor.new(pModelTextTipBone2))
		comboBoxTip.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBoxTip.setToolTip("@UI.ToolTip.Tip2Bone")
		pPanelForm.addWidget(comboBoxTip)
		
		CPEBoneChain.new(preview, labelTip, comboBoxTip, null, comboBoxBase, false)
		CPEBoneChain.new(preview, null, comboBoxTip, labelBase, comboBoxBase, true)
		
		// shift scale
		pPanelForm.addWidget(Label.new("@UI.ShiftScale.Label", "Label.FormCaption.SingleLine"))
		
		textField = TextField.new(pModelScaleShift, 6)
		textField.setDesignerSelector("TextField.WindowCharacterConfiguration")
		textField.setValidator(SimpleTextValidator.new(10, SimpleTextValidator.CharacterClass.number))
		textField.setToolTip("@UI.ToolTip.ShiftScale")
		pPanelForm.addWidget(textField)
		
		// shift reference offset
		pPanelForm.addWidget(Label.new(""))
		
		checkBox = CheckBox.new(pModelShiftReferenceOffset, "@UI.ShiftReferenceOffset")
		checkBox.setToolTip("@UI.ToolTip.ShiftReferenceOffset")
		pPanelForm.addWidget(checkBox)
		
		// reference and base slots
		pEditReferenceTracker = WCCPMTTracker.new(modelTrackerSlotNames,\
			optionPrefix + "/ReferenceTracker", this, "@UI.ReferenceTracker", false)
		addWidget(pEditReferenceTracker)
		
		pEditBase1Tracker = WCCPMTTracker.new(modelTrackerSlotNames,\
			optionPrefix + "/Base1Tracker", this, "@UI.Base1Tracker", false)
		addWidget(pEditBase1Tracker)
		
		pEditBase2Tracker = WCCPMTTracker.new(modelTrackerSlotNames,\
			optionPrefix + "/Base2Tracker", this, "@UI.Base2Tracker", false)
		addWidget(pEditBase2Tracker)
	end
	
	/** Motion transfer changed. */
	protected func void onMotionTransferChanged()
		if pEditReferenceTracker != null
			pEditReferenceTracker.setTracker(null)
		end
		if pEditBase1Tracker != null
			pEditBase1Tracker.setTracker(null)
		end
		if pEditBase2Tracker != null
			pEditBase2Tracker.setTracker(null)
		end
	end
end
