/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Gui

pin Democap.Behaviors
pin Democap.Characters
pin Democap.MotionTransferSystem

pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events
pin Dragengine.Scenery


/**
 * Edit character config window motion transfer tracker panel.
 */
class WCCPMTTracker extends CollapsibleGroup
	var WCCPanelMotionTransfer pPanelMotionTransfer
	var MotionTransferTracker pTracker
	
	var SharedListModel pModelListSlot
	var DefaultTextModel pModelTextSlot
	var EditVector pEditOffsetPosition
	var EditVector pEditOffsetRotation
	var DefaultListModel pModelAutoTransform
	
	
	
	/** Create window. */
	func new(DefaultListModel modelTrackerSlotNames, String optionPrefix, WCCPanelMotionTransfer panelMotionTransfer,\
	String label, bool toggled) super(label, "motiontransfertracker", CollapsibleGroup.persistModel(optionPrefix, toggled))
		pPanelMotionTransfer = panelMotionTransfer
		
		pModelListSlot = SharedListModel.new(modelTrackerSlotNames)
		pModelListSlot.setAutoSelect(false)
		pModelTextSlot = DefaultTextModel.new()
		pModelAutoTransform = DefaultListModel.new(MotionTransferTracker.AutoTransform.all().toArray())
		
		getPanelContent().runWhileBlockingLayout(block
			createContent(getPanelContent())
		end)
	end
	
	/** Dispose of window. */
	func void dispose()
		pTracker = null
		
		pModelListSlot = null
		pModelTextSlot = null
		pEditOffsetPosition = null
		pEditOffsetRotation = null
		pModelAutoTransform = null
		
		pPanelMotionTransfer = null
		
		super.dispose()
	end
	
	
	
	/** Tracker or null. */
	func MotionTransferTracker getTracker()
		return pTracker
	end
	
	/** Set tracker or null. */
	func void setTracker(MotionTransferTracker tracker)
		if tracker == pTracker
			return
		end
		
		pTracker = tracker
		loadValues()
	end
	
	
	
	/** Load values from tracker object if present into edit widgets. */
	func void loadValues()
		runWhileBlockingLayout(block
			if pTracker != null
				pModelTextSlot.setText(pTracker.getSlot())
				pEditOffsetPosition.setVector(pTracker.getOffsetPosition())
				pEditOffsetRotation.setVector(pTracker.getOffsetRotation())
				pModelAutoTransform.setSelected(pModelAutoTransform.indexOf(pTracker.getAutoTransform()))
				
			else
				pModelTextSlot.setText("")
				pEditOffsetPosition.setVector(Vector.new())
				pEditOffsetRotation.setVector(Vector.new())
				pModelAutoTransform.setSelected(pModelAutoTransform.indexOf(MotionTransferTracker.AutoTransform.full))
			end
		end)
		doLayoutIfBlocked()
	end
	
	/** Save value from edit widgets to tracker slot object if present. */
	func void saveValues()
		if pTracker == null
			return
		end
		
		pTracker.setSlot(pModelTextSlot.getText())
		pTracker.setOffsetPosition(pEditOffsetPosition.getVector())
		pTracker.setOffsetRotation(pEditOffsetRotation.getVector())
		pTracker.setAutoTransform(pModelAutoTransform.getAt(pModelAutoTransform.getSelected())\
			cast MotionTransferTracker.AutoTransform)
	end
	
	
	
	/** Create window content. */
	protected func void createContent(Panel content)
		var WidgetCharacterPreview preview = pPanelMotionTransfer.getWindowCharacterConfiguration().getCharacterPreview()
		var EnumListElementRenderer renderer
		var ComboBox comboBox
		
		content.setLayout(FormLayout.new(true, 10, 2))
		
		// slot
		content.addWidget(Label.new("@UI.Slot.Label", "Label.FormCaption.SingleLine"))
		
		comboBox = ComboBox.new(pModelListSlot, DefaultComboBoxEditor.new(pModelTextSlot))
		comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBox.setToolTip("@UI.ToolTip.TrackerSlot")
		content.addWidget(comboBox)
		
		// position
		var Label labelPosition = Label.new("@UI.Position", "Label.FormCaption.SingleLine")
		content.addWidget(labelPosition)
		
		pEditOffsetPosition = EditVector.new()
		pEditOffsetPosition.setToolTip("@UI.ToolTip.Position.Slot")
		content.addWidget(pEditOffsetPosition)
		
		// rotation
		var Label labelRotation = Label.new("@UI.Rotation", "Label.FormCaption.SingleLine")
		content.addWidget(labelRotation)
		
		pEditOffsetRotation = EditVector.new()
		pEditOffsetRotation.setToolTip("@UI.ToolTip.Rotation.Slot")
		content.addWidget(pEditOffsetRotation)
		
		CPECoordinateSystem.new(preview, labelPosition, pEditOffsetPosition, \
			labelRotation, pEditOffsetRotation, null, comboBox, false)
		
		// auto transform
		content.addWidget(Label.new("@UI.AutoTransform.Label", "Label.FormCaption.SingleLine"))
		
		renderer = EnumListElementRenderer.new()
		renderer.setTranslationPrefix("UI.Enum.MotionTransferTrackerAutoTransform.")
		comboBox = ComboBox.new(pModelAutoTransform, renderer)
		comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBox.setToolTip("@UI.ToolTip.AutoTransform")
		content.addWidget(comboBox)
	end
end
