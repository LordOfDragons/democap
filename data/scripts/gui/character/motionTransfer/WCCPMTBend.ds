/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Gui

pin Democap.Behaviors
pin Democap.Characters
pin Democap.MotionTransferSystem

pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events
pin Dragengine.Scenery


/**
 * Edit character config window motion transfer bend panel.
 */
class WCCPMTBend extends WCCPanelMotionTransfer
	var SharedListModel pModelListTargetBone
	var DefaultTextModel pModelTextTargetBone
	var SharedListModel pModelListTargetBaseBone
	var DefaultTextModel pModelTextTargetBaseBone
	var SharedListModel pModelListTipBone
	var DefaultTextModel pModelTextTipBone
	var SharedListModel pModelListBaseBone
	var DefaultTextModel pModelTextBaseBone
	var WCCPMTTracker pEditTargetTracker
	var WCCPMTTracker pEditBaseTracker
	var EditVector2 pEditScaleRotation
	var DefaultRangeModel pModelBendShape
	var EditVector pEditBendAxisRotation
	var DefaultToggleModel pModelFitCurveToTarget
	var DefaultToggleModel pModelUseRotation
	var DefaultTextModel pModelTwistPropagation
	var DefaultTextModel pModelTwistScale
	var DefaultTextModel pModelTwistBoneCount
	
	
	
	/** Create window. */
	func new(WindowCharacterConfiguration window, String optionPrefix) super(window)
		pModelTypeName.setText("@UI.BendBoneChain")
		
		pModelListTargetBone = SharedListModel.new(window.getModelBones())
		pModelListTargetBone.setAutoSelect(false)
		pModelTextTargetBone = DefaultTextModel.new()
		
		pModelListTargetBaseBone = SharedListModel.new(window.getModelBones())
		pModelListTargetBaseBone.setAutoSelect(false)
		pModelTextTargetBaseBone = DefaultTextModel.new()
		
		pModelListTipBone = SharedListModel.new(window.getModelBones())
		pModelListTipBone.setAutoSelect(false)
		pModelTextTipBone = DefaultTextModel.new()
		
		pModelListBaseBone = SharedListModel.new(window.getModelBones())
		pModelListBaseBone.setAutoSelect(false)
		pModelTextBaseBone = DefaultTextModel.new()
		
		pModelBendShape = DefaultRangeModel.new(0, 20, 5, 10, 1)
		pModelFitCurveToTarget = DefaultToggleModel.new(false)
		pModelUseRotation = DefaultToggleModel.new(false)
		
		pModelTwistPropagation = DefaultTextModel.new()
		pModelTwistScale = DefaultTextModel.new()
		pModelTwistBoneCount = DefaultTextModel.new()
		
		runWhileBlockingLayout(block
			createContent(window.getModelTrackerSlotNames(), optionPrefix)
		end)
	end
	
	/** Dispose of window. */
	func void dispose()
		pModelListTargetBone = null
		pModelTextTargetBone = null
		
		pModelListTargetBaseBone = null
		pModelTextTargetBaseBone = null
		
		pModelListTipBone = null
		pModelTextTipBone = null
		
		pModelListBaseBone = null
		pModelTextBaseBone = null
		
		pModelBendShape = null
		pModelFitCurveToTarget = null
		pModelUseRotation = null
		
		pEditTargetTracker.setTracker(null)
		pEditTargetTracker = null
		
		pEditBaseTracker.setTracker(null)
		pEditBaseTracker = null
		
		pModelTwistPropagation = null
		pModelTwistScale = null
		pModelTwistBoneCount = null
		
		pEditScaleRotation = null
		pEditBendAxisRotation = null
		super.dispose()
	end
	
	
	
	/** Load values from tracker slot object if present into edit widgets. */
	func void loadValues()
		runWhileBlockingLayout(block
			super.loadValues()
			
			if pMotionTransfer != null
				var MotionTransferBend mt = pMotionTransfer cast MotionTransferBend
				pModelTextTargetBone.setText(mt.getTargetBone())
				pModelTextTargetBaseBone.setText(mt.getTargetBaseBone())
				pModelTextTipBone.setText(mt.getTipBone())
				pModelTextBaseBone.setText(mt.getBaseBone())
				pEditTargetTracker.setTracker(mt.getTargetTracker())
				pEditTargetTracker.loadValues()
				pEditBaseTracker.setTracker(mt.getBaseTracker())
				pEditBaseTracker.loadValues()
				pEditScaleRotation.setVector2(mt.getScaleRotation())
				pModelBendShape.setValue((mt.getBendShape() * 20 + 0.5) cast int)
				pEditBendAxisRotation.setVector(mt.getBendAxisRotation())
				pModelFitCurveToTarget.setToggled(mt.getFitCurveToTarget())
				pModelUseRotation.setToggled(mt.getUseRotation())
				pModelTwistPropagation.setText(mt.getTwistPropagation().toString())
				pModelTwistScale.setText(mt.getTwistScale().toString())
				pModelTwistBoneCount.setText(mt.getTwistBoneCount().toString())
				
			else
				pModelTextTargetBone.setText("")
				pModelTextTargetBaseBone.setText("")
				pModelTextTipBone.setText("")
				pModelTextBaseBone.setText("")
				pEditTargetTracker.setTracker(null)
				pEditBaseTracker.setTracker(null)
				pEditScaleRotation.setVector2(Vector2.new(1, 1))
				pModelBendShape.setValue(10)
				pEditBendAxisRotation.setVector(Vector.new())
				pModelFitCurveToTarget.setToggled(false)
				pModelUseRotation.setToggled(false)
				pModelTwistPropagation.setText("")
				pModelTwistScale.setText("")
				pModelTwistBoneCount.setText("")
			end
		end)
		doLayoutIfBlocked()
	end
	
	/** Save value from edit widgets to tracker slot object if present. */
	func void saveValues()
		if pMotionTransfer == null
			return
		end
		super.saveValues()
		
		var MotionTransferBend mt = pMotionTransfer cast MotionTransferBend
		
		mt.setTargetBone(pModelTextTargetBone.getText())
		mt.setTargetBaseBone(pModelTextTargetBaseBone.getText())
		mt.setTipBone(pModelTextTipBone.getText())
		mt.setBaseBone(pModelTextBaseBone.getText())
		pEditTargetTracker.saveValues()
		pEditBaseTracker.saveValues()
		mt.setScaleRotation(pEditScaleRotation.getVector2())
		mt.setBendShape(0.05 * pModelBendShape.getValue())
		mt.setBendAxisRotation(pEditBendAxisRotation.getVector())
		mt.setFitCurveToTarget(pModelFitCurveToTarget.getToggled())
		mt.setUseRotation(pModelUseRotation.getToggled())
		mt.setTwistPropagation(pModelTwistPropagation.getText().toFloat())
		mt.setTwistScale(pModelTwistScale.getText().toFloat())
		mt.setTwistBoneCount(pModelTwistBoneCount.getText().toInt())
	end
	
	/** Supports motion transfer type. */
	func bool supports(MotionTransfer motionTranfer)
		return motionTranfer castable MotionTransferBend
	end
	
	
	
	/** Create window content. */
	protected func void createContent(DefaultListModel modelTrackerSlotNames, String optionPrefix)
		var WidgetCharacterPreview preview = pWindowCharacterConfiguration.getCharacterPreview()
		var ComboBox comboBox, comboBoxTip, comboBoxBase
		var Label label, labelTip, labelBase
		var TextField textField
		var Button button
		var ListBox listBox
		var String toolTip
		var Slider slider
		var CheckBox checkBox
		
		createBaseContent("motiontransferbend")
		
		// target bone
		label = Label.new("@UI.TargetBone.Label", "Label.FormCaption")
		pPanelForm.addWidget(label)
		
		comboBox = ComboBox.new(pModelListTargetBone, DefaultComboBoxEditor.new(pModelTextTargetBone))
		comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBox.setToolTip("@UI.ToolTip.TargetBone.BendBoneChain")
		pPanelForm.addWidget(comboBox)
		
		CPEBone.new(preview, label, comboBox)
		
		// target base bone
		label = Label.new("@UI.TargetBaseBone.Label", "Label.FormCaption")
		pPanelForm.addWidget(label)
		
		comboBox = ComboBox.new(pModelListTargetBaseBone, DefaultComboBoxEditor.new(pModelTextTargetBaseBone))
		comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBox.setToolTip("@UI.ToolTip.TargetBaseBone.BendBoneChain")
		pPanelForm.addWidget(comboBox)
		
		CPEBone.new(preview, label, comboBox)
		
		// bone chain
		labelTip = Label.new("@UI.TipBone.Label", "Label.FormCaption")
		pPanelForm.addWidget(labelTip)
		
		comboBoxTip = ComboBox.new(pModelListTipBone, DefaultComboBoxEditor.new(pModelTextTipBone))
		comboBoxTip.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBoxTip.setToolTip("@UI.ToolTip.TipBone.Chain")
		pPanelForm.addWidget(comboBoxTip)
		
		labelBase = Label.new("@UI.BaseBone.Label", "Label.FormCaption")
		pPanelForm.addWidget(labelBase)
		
		comboBoxBase = ComboBox.new(pModelListBaseBone, DefaultComboBoxEditor.new(pModelTextBaseBone))
		comboBoxBase.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBoxBase.setToolTip("@UI.ToolTip.BaseBone.Chain")
		pPanelForm.addWidget(comboBoxBase)
		
		CPEBoneChain.new(preview, labelTip, comboBoxTip, null, comboBoxBase, false)
		CPEBoneChain.new(preview, null, comboBoxTip, labelBase, comboBoxBase, true)
		
		// scale rotation
		pPanelForm.addWidget(Label.new("@UI.ScaleRotation.Label", "Label.FormCaption"))
		
		pEditScaleRotation = EditVector2.new()
		pEditScaleRotation.setToolTip("@UI.ToolTip.ScaleRotation.BendBoneChain")
		pPanelForm.addWidget(pEditScaleRotation)
		
		// bend shape
		toolTip = "@UI.ToolTip.BendShape"
		
		label = Label.new("@UI.BendShape.Label", "Label.FormCaption")
		label.setToolTip(toolTip)
		pPanelForm.addWidget(label)
		
		pPanelForm.addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 1, FlowLayout.Stretch.first), block Panel p
			slider = Slider.new(Orientation.horizontal, pModelBendShape)
			slider.setToolTip(toolTip)
			p.addWidget(slider)
			
			textField = TextField.new(RangeTextModel.new(pModelBendShape), 2)
			textField.setToolTip(toolTip)
			textField.setValidator(SimpleTextValidator.new(2, SimpleTextValidator.CharacterClass.digits))
			p.addWidget(textField)
			textField.addMouseListener(ScrollModelWheelMouseListener.new(pModelBendShape))
		end))
		
		// bend axis rotation
		toolTip = "@UI.ToolTip.BendAxis"
		label = Label.new("@UI.BendAxis.Label", "Label.FormCaption")
		label.setToolTip(toolTip)
		pPanelForm.addWidget(label)
		
		pEditBendAxisRotation = EditVector.new()
		pEditBendAxisRotation.setToolTip(toolTip)
		pPanelForm.addWidget(pEditBendAxisRotation)
		
		CPECoordinateSystemAxis.new(preview, null, null, label, pEditBendAxisRotation, comboBoxBase, null, true)
		
		// fit curve to target
		pPanelForm.addWidget(Label.new("", "Label.FormCaption"))
		
		checkBox = CheckBox.new(pModelFitCurveToTarget, "@UI.FitCurveToTarget")
		checkBox.setToolTip("@UI.ToolTip.FitCurveToTarget.BendBoneChain")
		pPanelForm.addWidget(checkBox)
		
		// use rotation of target relative to base instead of position to calculate bending angle
		pPanelForm.addWidget(Label.new("", "Label.FormCaption"))
		
		checkBox = CheckBox.new(pModelUseRotation, "@UI.UseRotationToBend")
		checkBox.setToolTip("@UI.ToolTip.UseRotationToBend")
		pPanelForm.addWidget(checkBox)
		
		// twist propagation
		pPanelForm.addWidget(Label.new("@UI.TwistPropagation.Label", "Label.FormCaption"))
		
		textField = TextField.new(pModelTwistPropagation, 6)
		textField.setDesignerSelector("TextField.WindowCharacterConfiguration")
		textField.setValidator(SimpleTextValidator.new(10, SimpleTextValidator.CharacterClass.number))
		textField.setToolTip("@UI.ToolTip.TwistPropagation")
		pPanelForm.addWidget(textField)
		
		// twist scale
		pPanelForm.addWidget(Label.new("@UI.TwistScale.Label", "Label.FormCaption"))
		
		textField = TextField.new(pModelTwistScale, 6)
		textField.setDesignerSelector("TextField.WindowCharacterConfiguration")
		textField.setValidator(SimpleTextValidator.new(10, SimpleTextValidator.CharacterClass.number))
		textField.setToolTip("@UI.ToolTip.TwistScale")
		pPanelForm.addWidget(textField)
		
		// twist bone count
		pPanelForm.addWidget(Label.new("@UI.TwistBoneCount.Label", "Label.FormCaption"))
		
		textField = TextField.new(pModelTwistBoneCount, 4)
		textField.setDesignerSelector("TextField.WindowCharacterConfiguration")
		textField.setValidator(SimpleTextValidator.new(4, SimpleTextValidator.CharacterClass.digits))
		textField.setToolTip("@UI.ToolTip.TwistBoneCount")
		pPanelForm.addWidget(textField)
		
		// trackers
		pEditTargetTracker = WCCPMTTracker.new(modelTrackerSlotNames, optionPrefix + "/TargetTracker", this, "@UI.TargetTracker", false)
		addWidget(pEditTargetTracker)
		
		pEditBaseTracker = WCCPMTTracker.new(modelTrackerSlotNames, optionPrefix + "/BaseTracker", this, "@UI.BaseTracker", false)
		addWidget(pEditBaseTracker)
	end
	
	/** Motion transfer changed. */
	protected func void onMotionTransferChanged()
		if pEditTargetTracker != null
			pEditTargetTracker.setTracker(null)
		end
		if pEditBaseTracker != null
			pEditBaseTracker.setTracker(null)
		end
	end
end
