/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Gui

pin Democap.Behaviors
pin Democap.Characters
pin Democap.MotionTransferSystem

pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events
pin Dragengine.Scenery


/**
 * Edit character config window motion transfer bend panel.
 */
class WCCPMTBend extends WCCPanelMotionTransfer
	private var SharedListModel pModelListTargetBone
	private var DefaultTextModel pModelTextTargetBone
	private var SharedListModel pModelListTargetBaseBone
	private var DefaultTextModel pModelTextTargetBaseBone
	private var SharedListModel pModelListTipBone
	private var DefaultTextModel pModelTextTipBone
	private var SharedListModel pModelListBaseBone
	private var DefaultTextModel pModelTextBaseBone
	private var WCCPMTTracker pEditTargetTracker
	private var WCCPMTTracker pEditBaseTracker
	private var EditVector2 pEditScaleRotation
	private var DefaultRangeModel pModelBendShape
	private var EditVector pEditBendAxisRotation
	private var DefaultToggleModel pModelFitCurveToTarget
	private var DefaultToggleModel pModelUseRotation
	private var DefaultTextModel pModelTwistPropagation
	private var DefaultTextModel pModelTwistScale
	private var DefaultTextModel pModelTwistBoneCount
	
	
	
	/** Create window. */
	public func new(WindowCharacterConfiguration window, String optionPrefix) super(window)
		pModelTypeName.setText("Bend Bone Chain")
		
		pModelListTargetBone = SharedListModel.new(window.getModelBones())
		pModelListTargetBone.setAutoSelect(false)
		pModelTextTargetBone = DefaultTextModel.new()
		
		pModelListTargetBaseBone = SharedListModel.new(window.getModelBones())
		pModelListTargetBaseBone.setAutoSelect(false)
		pModelTextTargetBaseBone = DefaultTextModel.new()
		
		pModelListTipBone = SharedListModel.new(window.getModelBones())
		pModelListTipBone.setAutoSelect(false)
		pModelTextTipBone = DefaultTextModel.new()
		
		pModelListBaseBone = SharedListModel.new(window.getModelBones())
		pModelListBaseBone.setAutoSelect(false)
		pModelTextBaseBone = DefaultTextModel.new()
		
		pModelBendShape = DefaultRangeModel.new(0, 20, 5, 10, 1)
		pModelFitCurveToTarget = DefaultToggleModel.new(false)
		pModelUseRotation = DefaultToggleModel.new(false)
		
		pModelTwistPropagation = DefaultTextModel.new()
		pModelTwistScale = DefaultTextModel.new()
		pModelTwistBoneCount = DefaultTextModel.new()
		
		runWhileBlockingLayout(block
			createContent(window.getModelTrackerSlotNames(), optionPrefix)
		end)
	end
	
	/** Dispose of window. */
	public func void dispose()
		pModelListTargetBone = null
		pModelTextTargetBone = null
		
		pModelListTargetBaseBone = null
		pModelTextTargetBaseBone = null
		
		pModelListTipBone = null
		pModelTextTipBone = null
		
		pModelListBaseBone = null
		pModelTextBaseBone = null
		
		pModelBendShape = null
		pModelFitCurveToTarget = null
		pModelUseRotation = null
		
		pEditTargetTracker.setTracker(null)
		pEditTargetTracker = null
		
		pEditBaseTracker.setTracker(null)
		pEditBaseTracker = null
		
		pModelTwistPropagation = null
		pModelTwistScale = null
		pModelTwistBoneCount = null
		
		pEditScaleRotation = null
		pEditBendAxisRotation = null
		super.dispose()
	end
	
	
	
	/** Load values from tracker slot object if present into edit widgets. */
	public func void loadValues()
		runWhileBlockingLayout(block
			super.loadValues()
			
			if pMotionTransfer != null
				var MotionTransferBend mt = pMotionTransfer cast MotionTransferBend
				pModelTextTargetBone.setText(mt.getTargetBone())
				pModelTextTargetBaseBone.setText(mt.getTargetBaseBone())
				pModelTextTipBone.setText(mt.getTipBone())
				pModelTextBaseBone.setText(mt.getBaseBone())
				pEditTargetTracker.setTracker(mt.getTargetTracker())
				pEditTargetTracker.loadValues()
				pEditBaseTracker.setTracker(mt.getBaseTracker())
				pEditBaseTracker.loadValues()
				pEditScaleRotation.setVector2(mt.getScaleRotation())
				pModelBendShape.setValue((mt.getBendShape() * 20 + 0.5) cast int)
				pEditBendAxisRotation.setVector(mt.getBendAxisRotation())
				pModelFitCurveToTarget.setToggled(mt.getFitCurveToTarget())
				pModelUseRotation.setToggled(mt.getUseRotation())
				pModelTwistPropagation.setText(mt.getTwistPropagation().toString())
				pModelTwistScale.setText(mt.getTwistScale().toString())
				pModelTwistBoneCount.setText(mt.getTwistBoneCount().toString())
				
			else
				pModelTextTargetBone.setText("")
				pModelTextTargetBaseBone.setText("")
				pModelTextTipBone.setText("")
				pModelTextBaseBone.setText("")
				pEditTargetTracker.setTracker(null)
				pEditBaseTracker.setTracker(null)
				pEditScaleRotation.setVector2(Vector2.new(1, 1))
				pModelBendShape.setValue(10)
				pEditBendAxisRotation.setVector(Vector.new())
				pModelFitCurveToTarget.setToggled(false)
				pModelUseRotation.setToggled(false)
				pModelTwistPropagation.setText("")
				pModelTwistScale.setText("")
				pModelTwistBoneCount.setText("")
			end
		end)
		doLayoutIfBlocked()
	end
	
	/** Save value from edit widgets to tracker slot object if present. */
	public func void saveValues()
		if pMotionTransfer == null
			return
		end
		super.saveValues()
		
		var MotionTransferBend mt = pMotionTransfer cast MotionTransferBend
		
		mt.setTargetBone(pModelTextTargetBone.getText())
		mt.setTargetBaseBone(pModelTextTargetBaseBone.getText())
		mt.setTipBone(pModelTextTipBone.getText())
		mt.setBaseBone(pModelTextBaseBone.getText())
		pEditTargetTracker.saveValues()
		pEditBaseTracker.saveValues()
		mt.setScaleRotation(pEditScaleRotation.getVector2())
		mt.setBendShape(0.05 * pModelBendShape.getValue())
		mt.setBendAxisRotation(pEditBendAxisRotation.getVector())
		mt.setFitCurveToTarget(pModelFitCurveToTarget.getToggled())
		mt.setUseRotation(pModelUseRotation.getToggled())
		mt.setTwistPropagation(pModelTwistPropagation.getText().toFloat())
		mt.setTwistScale(pModelTwistScale.getText().toFloat())
		mt.setTwistBoneCount(pModelTwistBoneCount.getText().toInt())
	end
	
	/** Supports motion transfer type. */
	public func bool supports(MotionTransfer motionTranfer)
		return motionTranfer castable MotionTransferBend
	end
	
	
	
	/** Create window content. */
	protected func void createContent(DefaultListModel modelTrackerSlotNames, String optionPrefix)
		var WidgetCharacterPreview preview = pWindowCharacterConfiguration.getCharacterPreview()
		var ComboBox comboBox, comboBoxTip, comboBoxBase
		var Label label, labelTip, labelBase
		var TextField textField
		var Button button
		var ListBox listBox
		var String toolTip
		var Slider slider
		var CheckBox checkBox
		
		createBaseContent("motiontransferbend")
		
		// target bone
		label = Label.new("Target Bone:", "Label.FormCaption")
		pPanelForm.addWidget(label)
		
		comboBox = ComboBox.new(pModelListTargetBone, DefaultComboBoxEditor.new(pModelTextTargetBone))
		comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBox.setToolTip("Target bone not part of chain. Bending angle is calculate between target and base bone.")
		pPanelForm.addWidget(comboBox)
		
		CPEBone.new(preview, label, comboBox)
		
		// target base bone
		label = Label.new("Target Base Bone:", "Label.FormCaption")
		pPanelForm.addWidget(label)
		
		comboBox = ComboBox.new(pModelListTargetBaseBone, DefaultComboBoxEditor.new(pModelTextTargetBaseBone))
		comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBox.setToolTip("Target base bone not part of chain. Bending angle is calculate between target and base bone.")
		pPanelForm.addWidget(comboBox)
		
		CPEBone.new(preview, label, comboBox)
		
		// bone chain
		labelTip = Label.new("Tip Bone:", "Label.FormCaption")
		pPanelForm.addWidget(labelTip)
		
		comboBoxTip = ComboBox.new(pModelListTipBone, DefaultComboBoxEditor.new(pModelTextTipBone))
		comboBoxTip.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBoxTip.setToolTip("Tip of bone chain.")
		pPanelForm.addWidget(comboBoxTip)
		
		labelBase = Label.new("Base Bone:", "Label.FormCaption")
		pPanelForm.addWidget(labelBase)
		
		comboBoxBase = ComboBox.new(pModelListBaseBone, DefaultComboBoxEditor.new(pModelTextBaseBone))
		comboBoxBase.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBoxBase.setToolTip("Base of bone chain.")
		pPanelForm.addWidget(comboBoxBase)
		
		CPEBoneChain.new(preview, labelTip, comboBoxTip, null, comboBoxBase, false)
		CPEBoneChain.new(preview, null, comboBoxTip, labelBase, comboBoxBase, true)
		
		// scale rotation
		pPanelForm.addWidget(Label.new("Scale Rotation:", "Label.FormCaption"))
		
		pEditScaleRotation = EditVector2.new()
		pEditScaleRotation.setToolTip("Scaling to apply to bending before modifying chain")
		pPanelForm.addWidget(pEditScaleRotation)
		
		// bend shape
		toolTip = "Weight distribution across bones. 0=base, 10=equal, 20=tip"
		
		label = Label.new("Bend Shape:", "Label.FormCaption")
		label.setToolTip(toolTip)
		pPanelForm.addWidget(label)
		
		pPanelForm.addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 1, FlowLayout.Stretch.first), block Panel p
			slider = Slider.new(Orientation.horizontal, pModelBendShape)
			slider.setToolTip(toolTip)
			p.addWidget(slider)
			
			textField = TextField.new(RangeTextModel.new(pModelBendShape), 2)
			textField.setToolTip(toolTip)
			textField.setValidator(SimpleTextValidator.new(2, SimpleTextValidator.CharacterClass.digits))
			p.addWidget(textField)
			textField.addMouseListener(ScrollModelWheelMouseListener.new(pModelBendShape))
		end))
		
		// bend axis rotation
		toolTip = "Bend coordinate system. Bends along X (red) and Y (green) axis and twists along Z (blue) axis."
		label = Label.new("Bend Axis:", "Label.FormCaption")
		label.setToolTip(toolTip)
		pPanelForm.addWidget(label)
		
		pEditBendAxisRotation = EditVector.new()
		pEditBendAxisRotation.setToolTip(toolTip)
		pPanelForm.addWidget(pEditBendAxisRotation)
		
		CPECoordinateSystemAxis.new(preview, null, null, label, pEditBendAxisRotation, comboBoxBase, null, true)
		
		// fit curve to target
		pPanelForm.addWidget(Label.new("", "Label.FormCaption"))
		
		checkBox = CheckBox.new(pModelFitCurveToTarget, "Fit curve to target")
		checkBox.setToolTip("Calculate bending angles for curve to touch target. "\
			+ "Use only if target is at or beyond tip bone.")
		pPanelForm.addWidget(checkBox)
		
		// use rotation of target relative to base instead of position to calculate bending angle
		pPanelForm.addWidget(Label.new("", "Label.FormCaption"))
		
		checkBox = CheckBox.new(pModelUseRotation, "Use rotation to bend")
		checkBox.setToolTip("Use rotation of target relative to base instead of position to calculate bending angle.")
		pPanelForm.addWidget(checkBox)
		
		// twist propagation
		pPanelForm.addWidget(Label.new("Twist Propagation:", "Label.FormCaption"))
		
		textField = TextField.new(pModelTwistPropagation, 6)
		textField.setDesignerSelector("TextField.WindowCharacterConfiguration")
		textField.setValidator(SimpleTextValidator.new(10, SimpleTextValidator.CharacterClass.number))
		textField.setToolTip("Percentage of Tip Bone twist relative to Base Bone to propagate along bone chain.")
		pPanelForm.addWidget(textField)
		
		// twist scale
		pPanelForm.addWidget(Label.new("Twist Scale:", "Label.FormCaption"))
		
		textField = TextField.new(pModelTwistScale, 6)
		textField.setDesignerSelector("TextField.WindowCharacterConfiguration")
		textField.setValidator(SimpleTextValidator.new(10, SimpleTextValidator.CharacterClass.number))
		textField.setToolTip("Scaling of twist angle before application.")
		pPanelForm.addWidget(textField)
		
		// twist bone count
		pPanelForm.addWidget(Label.new("Twist Bone Count:", "Label.FormCaption"))
		
		textField = TextField.new(pModelTwistBoneCount, 4)
		textField.setDesignerSelector("TextField.WindowCharacterConfiguration")
		textField.setValidator(SimpleTextValidator.new(4, SimpleTextValidator.CharacterClass.digits))
		textField.setToolTip("Count of bones along chain to apply twist to starting at first bone after Tip Bone.")
		pPanelForm.addWidget(textField)
		
		// trackers
		pEditTargetTracker = WCCPMTTracker.new(modelTrackerSlotNames, optionPrefix + "/TargetTracker", this, "Target Tracker", false)
		addWidget(pEditTargetTracker)
		
		pEditBaseTracker = WCCPMTTracker.new(modelTrackerSlotNames, optionPrefix + "/BaseTracker", this, "Base Tracker", false)
		addWidget(pEditBaseTracker)
	end
	
	/** Motion transfer changed. */
	protected func void onMotionTransferChanged()
		if pEditTargetTracker != null
			pEditTargetTracker.setTracker(null)
		end
		if pEditBaseTracker != null
			pEditBaseTracker.setTracker(null)
		end
	end
end
