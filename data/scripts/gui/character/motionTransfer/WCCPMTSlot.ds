/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Gui

pin Democap.Behaviors
pin Democap.Characters
pin Democap.MotionTransferSystem

pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events
pin Dragengine.Scenery


/**
 * Edit character config window motion transfer slot panel.
 */
class WCCPMTSlot extends WCCPanelMotionTransfer
	var SharedListModel pModelListTarget
	var DefaultTextModel pModelTextTarget
	var WCCPMTTracker pEditSourceTracker
	var EditVector pEditScaleRotation
	
	
	
	/** Create window. */
	func new(WindowCharacterConfiguration window, String optionPrefix) super(window)
		pModelTypeName.setText("@UI.CopySlotState")
		
		pModelListTarget = SharedListModel.new(window.getModelTrackerSlotNames())
		pModelListTarget.setAutoSelect(false)
		pModelTextTarget = DefaultTextModel.new()
		
		runWhileBlockingLayout(block
			createContent(window.getModelTrackerSlotNames(), optionPrefix)
		end)
	end
	
	/** Dispose of window. */
	func void dispose()
		pModelListTarget = null
		pModelTextTarget = null
		pEditSourceTracker.setTracker(null)
		pEditSourceTracker = null
		pEditScaleRotation = null
		super.dispose()
	end
	
	
	
	/** Load values from tracker slot object if present into edit widgets. */
	func void loadValues()
		runWhileBlockingLayout(block
			super.loadValues()
			
			if pMotionTransfer != null
				var MotionTransferSlot mt = pMotionTransfer cast MotionTransferSlot
				pModelTextTarget.setText(mt.getTarget())
				pEditSourceTracker.setTracker(mt.getSource())
				pEditSourceTracker.loadValues()
				pEditScaleRotation.setVector(mt.getScaleRotation())
				
			else
				pModelTextTarget.setText("")
				pEditSourceTracker.setTracker(null)
				pEditScaleRotation.setVector(Vector.new())
			end
		end)
		doLayoutIfBlocked()
	end
	
	/** Save value from edit widgets to tracker slot object if present. */
	func void saveValues()
		if pMotionTransfer == null
			return
		end
		super.saveValues()
		
		var MotionTransferSlot mt = pMotionTransfer cast MotionTransferSlot
		
		mt.setTarget(pModelTextTarget.getText())
		pEditSourceTracker.saveValues()
		mt.setScaleRotation(pEditScaleRotation.getVector())
	end
	
	/** Supports motion transfer type. */
	func bool supports(MotionTransfer motionTranfer)
		return motionTranfer castable MotionTransferSlot
	end
	
	
	
	/** Create window content. */
	protected func void createContent(DefaultListModel modelTrackerSlotNames, String optionPrefix)
		var WidgetCharacterPreview preview = pWindowCharacterConfiguration.getCharacterPreview()
		var TextField textField
		var ComboBox comboBox
		var Button button
		var ListBox listBox
		var Label label
		
		createBaseContent("motiontransferslot")
		
		// targe
		label = Label.new("@UI.Target.Label", "Label.FormCaption")
		pPanelForm.addWidget(label)
		
		comboBox = ComboBox.new(pModelListTarget, DefaultComboBoxEditor.new(pModelTextTarget))
		comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBox.setToolTip("@UI.ToolTip.Target.CopySlotState")
		pPanelForm.addWidget(comboBox)
		
		// scale rotation
		pPanelForm.addWidget(Label.new("@UI.ScaleRotation.Label", "Label.FormCaption"))
		
		pEditScaleRotation = EditVector.new()
		pEditScaleRotation.setToolTip("@UI.ToolTip.ScaleRotation.CopySlotState")
		pPanelForm.addWidget(pEditScaleRotation)
		
		// tracker
		pEditSourceTracker = WCCPMTTracker.new(modelTrackerSlotNames, optionPrefix + "/SourceTracker", this, "@UI.SourceTracker", false)
		addWidget(pEditSourceTracker)
	end
	
	/** Motion transfer changed. */
	protected func void onMotionTransferChanged()
		if pEditSourceTracker != null
			pEditSourceTracker.setTracker(null)
		end
	end
end
