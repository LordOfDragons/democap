/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Gui

pin Democap.Behaviors
pin Democap.Characters
pin Democap.MotionTransferSystem

pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events
pin Dragengine.Scenery


/**
 * Edit character config window motion transfer secondary panel.
 */
class WCCPMTSecondary extends WCCPanelMotionTransfer
	var SharedListModel pModelListSourceBone
	var DefaultTextModel pModelTextSourceBone
	var DefaultListModel pModelParameter
	var DefaultTextModel pModelMinimum
	var DefaultTextModel pModelMaximum
	var DefaultListModel pModelTargetBones
	var DefaultListModel pModelMode
	var SharedListModel pModelListMove
	var DefaultTextModel pModelTextMove
	var DefaultTextModel pModelReferenceTime
	var DefaultToggleModel pModelFlip
	
	
	
	/** Create window. */
	func new(WindowCharacterConfiguration window) super(window)
		pModelTypeName.setText("@UI.SecondaryMotion")
		
		pModelListSourceBone = SharedListModel.new(window.getModelBones())
		pModelListSourceBone.setAutoSelect(false)
		pModelTextSourceBone = DefaultTextModel.new()
		pModelParameter = DefaultListModel.new(MotionTransferSecondary.Parameter.all().toArray())
		pModelMinimum = DefaultTextModel.new()
		pModelMaximum = DefaultTextModel.new()
		pModelTargetBones = DefaultListModel.new()
		pModelTargetBones.setAutoSelect(false)
		pModelMode = DefaultListModel.new(MotionTransferSecondary.Mode.all().toArray())
		pModelListMove = SharedListModel.new(window.getModelMoves())
		pModelListMove.setAutoSelect(false)
		pModelTextMove = DefaultTextModel.new()
		pModelReferenceTime = DefaultTextModel.new()
		pModelFlip = DefaultToggleModel.new()
		
		runWhileBlockingLayout(block
			createContent()
		end)
	end
	
	/** Dispose of window. */
	func void dispose()
		pModelListSourceBone = null
		pModelTextSourceBone = null
		pModelParameter = null
		pModelMinimum = null
		pModelMaximum = null
		pModelTargetBones = null
		pModelMode = null
		pModelListMove = null
		pModelTextMove = null
		pModelReferenceTime = null
		pModelFlip = null
		super.dispose()
	end
	
	
	
	/** Load values from tracker slot object if present into edit widgets. */
	func void loadValues()
		runWhileBlockingLayout(block
			super.loadValues()
			
			if pMotionTransfer != null
				var MotionTransferSecondary mt = pMotionTransfer cast MotionTransferSecondary
				pModelTextSourceBone.setText(mt.getSourceBone())
				pModelParameter.setSelected(pModelParameter.indexOf(mt.getParameter()))
				pModelMinimum.setText(mt.getMinimum().toString())
				pModelMaximum.setText(mt.getMaximum().toString())
				pModelTargetBones.setContent(mt.getTargetBones())
				pModelMode.setSelected(pModelMode.indexOf(mt.getMode()))
				pModelTextMove.setText(mt.getMove())
				pModelReferenceTime.setText(mt.getReferenceTime().toString())
				pModelFlip.setToggled(mt.getFlip())
				
			else
				pModelTextSourceBone.setText("")
				pModelParameter.setSelected(pModelParameter.indexOf(MotionTransferSecondary.Parameter.rotationX))
				pModelMinimum.setText("")
				pModelMaximum.setText("")
				pModelTargetBones.removeAll()
				pModelMode.setSelected(pModelMode.indexOf(MotionTransferSecondary.Mode.replace))
				pModelTextMove.setText("")
				pModelReferenceTime.setText("")
				pModelFlip.setToggled(false)
			end
		end)
		doLayoutIfBlocked()
	end
	
	/** Save value from edit widgets to tracker slot object if present. */
	func void saveValues()
		if pMotionTransfer == null
			return
		end
		super.saveValues()
		
		var MotionTransferSecondary mt = pMotionTransfer cast MotionTransferSecondary
		mt.setSourceBone(pModelTextSourceBone.getText())
		mt.setParameter(pModelParameter.getAt(pModelParameter.getSelected()) cast MotionTransferSecondary.Parameter)
		mt.setMinimum(pModelMinimum.getText().toFloat())
		mt.setMaximum(pModelMaximum.getText().toFloat())
		mt.getTargetBones().removeAll()
		mt.getTargetBones().addAll(pModelTargetBones.getContent())
		mt.setMode(pModelMode.getAt(pModelMode.getSelected()) cast MotionTransferSecondary.Mode)
		mt.setMove(pModelTextMove.getText())
		mt.setReferenceTime(pModelReferenceTime.getText().toFloat())
		mt.setFlip(pModelFlip.getToggled())
	end
	
	/** Supports motion transfer type. */
	func bool supports(MotionTransfer motionTranfer)
		return motionTranfer castable MotionTransferSecondary
	end
	
	
	
	/** Create window content. */
	protected func void createContent()
		var WidgetCharacterPreview preview = pWindowCharacterConfiguration.getCharacterPreview()
		var EnumListElementRenderer renderer
		var TextField textField
		var ComboBox comboBox
		var CheckBox checkBox
		var ListBox listBox
		var Label label
		
		createBaseContent("motiontransfersecondary")
		
		// source bone
		label = Label.new("@UI.SourceBone.Label", "Label.FormCaption.SingleLine")
		pPanelForm.addWidget(label)
		
		comboBox = ComboBox.new(pModelListSourceBone, DefaultComboBoxEditor.new(pModelTextSourceBone))
		comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBox.setToolTip("@UI.ToolTip.SourceBone.SecondaryMotion")
		pPanelForm.addWidget(comboBox)
		
		CPEBone.new(preview, label, comboBox)
		
		// parameter
		pPanelForm.addWidget(Label.new("@UI.Parameter.Label", "Label.FormCaption.SingleLine"))
		
		renderer = EnumListElementRenderer.new()
		renderer.setTranslationPrefix("UI.Enum.MotionTransferSecondaryParameter.")
		comboBox = ComboBox.new(pModelParameter, renderer)
		comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBox.setToolTip("@UI.ToolTip.Parameter.SecondaryMotion")
		pPanelForm.addWidget(comboBox)
		
		// minimum
		pPanelForm.addWidget(Label.new("@UI.Minimum.Label", "Label.FormCaption.SingleLine"))
		
		textField = TextField.new(pModelMinimum, 6)
		textField.setDesignerSelector("TextField.WindowCharacterConfiguration")
		textField.setValidator(SimpleTextValidator.new(10, SimpleTextValidator.CharacterClass.positiveNumber))
		textField.setToolTip("@UI.ToolTip.Minimum.SecondaryMotion")
		pPanelForm.addWidget(textField)
		
		// maximum
		pPanelForm.addWidget(Label.new("@UI.Maximum.Label", "Label.FormCaption.SingleLine"))
		
		textField = TextField.new(pModelMaximum, 6)
		textField.setDesignerSelector("TextField.WindowCharacterConfiguration")
		textField.setValidator(SimpleTextValidator.new(10, SimpleTextValidator.CharacterClass.positiveNumber))
		textField.setToolTip("@UI.ToolTip.Maximum.SecondaryMotion")
		pPanelForm.addWidget(textField)
		
		// target bones
		label = Label.new("@UI.TargetBones.Label", "Label.FormCaption.SingleLine")
		pPanelForm.addWidget(label)
		
		listBox = ListBox.new(pModelTargetBones)
		listBox.setDesignerSelector("ListBox.WindowCharacterConfiguration")
		listBox.setToolTip("@UI.ToolTip.TargetBones")
		listBox.setNumberDisplayLines(5)
		pPanelForm.addWidget(ScrollPanel.new(listBox))
		
		CPEBoneList.new(preview, label, listBox)
		
		// mode
		pPanelForm.addWidget(Label.new("@UI.Mode.Label", "Label.FormCaption.SingleLine"))
		
		renderer = EnumListElementRenderer.new()
		renderer.setTranslationPrefix("UI.Enum.MotionTransferSecondaryMode.")
		comboBox = ComboBox.new(pModelMode, renderer)
		comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBox.setToolTip("@UI.ToolTip.ApplicationMode.SecondaryMotion")
		pPanelForm.addWidget(comboBox)
		
		// move
		pPanelForm.addWidget(Label.new("@UI.Move.Label", "Label.FormCaption.SingleLine"))
		
		comboBox = ComboBox.new(pModelListMove, DefaultComboBoxEditor.new(pModelTextMove))
		comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBox.setToolTip("@UI.ToolTip.Move.SecondaryMotion")
		pPanelForm.addWidget(comboBox)
		
		// reference time
		pPanelForm.addWidget(Label.new("@UI.ReferenceTime.Label", "Label.FormCaption.SingleLine"))
		
		textField = TextField.new(pModelReferenceTime, 6)
		textField.setDesignerSelector("TextField.WindowCharacterConfiguration")
		textField.setValidator(SimpleTextValidator.new(10, SimpleTextValidator.CharacterClass.positiveNumber))
		textField.setToolTip("@UI.ToolTip.ReferenceTime")
		pPanelForm.addWidget(textField)
		
		// flip
		pPanelForm.addWidget(Label.new(""))
		
		checkBox = CheckBox.new(pModelFlip, "@UI.ReverseMapping")
		checkBox.setDesignerSelector("CheckBox.WindowCharacterConfiguration")
		checkBox.setToolTip("@UI.ToolTip.ReverseMapping")
		pPanelForm.addWidget(checkBox)
	end
end
