/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Gui

pin Democap.Behaviors
pin Democap.Characters
pin Democap.MotionTransferSystem

pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events
pin Dragengine.Scenery


/**
 * Edit character config window motion transfer animation panel.
 */
class WCCPMTAnimation extends WCCPanelMotionTransfer
	private var SharedListModel pModelListMove
	private var DefaultTextModel pModelTextMove
	private var DefaultListModel pModelTargetBones
	private var DefaultListModel pModelMode
	private var DefaultTextModel pModelPlaytime
	
	
	
	/** Create window. */
	public func new(WindowCharacterConfiguration window) super(window)
		pModelTypeName.setText("Animation")
		
		pModelListMove = SharedListModel.new(window.getModelMoves())
		pModelListMove.setAutoSelect(false)
		pModelTextMove = DefaultTextModel.new()
		pModelTargetBones = DefaultListModel.new()
		pModelTargetBones.setAutoSelect(false)
		pModelMode = DefaultListModel.new(MotionTransferAnimation.Mode.all().toArray())
		pModelPlaytime = DefaultTextModel.new()
		
		runWhileBlockingLayout(block
			createContent()
		end)
	end
	
	/** Dispose of window. */
	public func void dispose()
		pModelListMove = null
		pModelTextMove = null
		pModelTargetBones = null
		pModelMode = null
		pModelPlaytime = null
		super.dispose()
	end
	
	
	
	/** Load values from tracker slot object if present into edit widgets. */
	public func void loadValues()
		runWhileBlockingLayout(block
			super.loadValues()
			
			if pMotionTransfer != null
				var MotionTransferAnimation mt = pMotionTransfer cast MotionTransferAnimation
				pModelTextMove.setText(mt.getMove())
				pModelTargetBones.setContent(mt.getTargetBones())
				pModelMode.setSelected(pModelMode.indexOf(mt.getMode()))
				pModelPlaytime.setText(mt.getPlaytime().toString())
				
			else
				pModelTextMove.setText("")
				pModelTargetBones.removeAll()
				pModelMode.setSelected(pModelMode.indexOf(MotionTransferAnimation.Mode.replace))
				pModelPlaytime.setText("")
			end
		end)
		doLayoutIfBlocked()
	end
	
	/** Save value from edit widgets to tracker slot object if present. */
	public func void saveValues()
		if pMotionTransfer == null
			return
		end
		super.saveValues()
		
		var MotionTransferAnimation mt = pMotionTransfer cast MotionTransferAnimation
		mt.setName(pModelName.getText())
		mt.setMove(pModelTextMove.getText())
		mt.getTargetBones().removeAll()
		mt.getTargetBones().addAll(pModelTargetBones.getContent())
		mt.setMode(pModelMode.getAt(pModelMode.getSelected()) cast MotionTransferAnimation.Mode)
		mt.setPlaytime(pModelPlaytime.getText().toFloat())
	end
	
	/** Supports motion transfer type. */
	public func bool supports(MotionTransfer motionTranfer)
		return motionTranfer castable MotionTransferAnimation
	end
	
	
	
	/** Create window content. */
	protected func void createContent()
		var WidgetCharacterPreview preview = pWindowCharacterConfiguration.getCharacterPreview()
		var TextField textField
		var ComboBox comboBox
		var Button button
		var ListBox listBox
		var Label label
		
		createBaseContent("motiontransferanimation")
		
		// move
		pPanelForm.addWidget(Label.new("Move:", "Label.FormCaption"))
		
		comboBox = ComboBox.new(pModelListMove, DefaultComboBoxEditor.new(pModelTextMove))
		comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBox.setToolTip("Animation move to use.")
		pPanelForm.addWidget(comboBox)
		
		// target bones
		label = Label.new("Target Bones:", "Label.FormCaption")
		pPanelForm.addWidget(label)
		
		listBox = ListBox.new(pModelTargetBones)
		listBox.setDesignerSelector("ListBox.WindowCharacterConfiguration")
		listBox.setToolTip("Bones to affect by the animation.")
		listBox.setNumberDisplayLines(5)
		pPanelForm.addWidget(listBox)
		
		CPEBoneList.new(preview, label, listBox)
		
		// mode
		pPanelForm.addWidget(Label.new("Mode:", "Label.FormCaption"))
		
		comboBox = ComboBox.new(pModelMode)
		comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBox.setToolTip("Animation application mode.")
		pPanelForm.addWidget(comboBox)
		
		// playtime
		pPanelForm.addWidget(Label.new("Playtime:", "Label.FormCaption"))
		
		textField = TextField.new(pModelPlaytime, 6)
		textField.setDesignerSelector("TextField.WindowCharacterConfiguration")
		textField.setValidator(SimpleTextValidator.new(10, SimpleTextValidator.CharacterClass.positiveNumber))
		textField.setToolTip("Playtime of animation in seconds before looping back to the beginning.")
		pPanelForm.addWidget(textField)
	end
end
