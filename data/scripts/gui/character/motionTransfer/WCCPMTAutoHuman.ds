/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Gui

pin Democap.Behaviors
pin Democap.Characters
pin Democap.MotionTransferSystem

pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events
pin Dragengine.Scenery


/**
 * Edit character config window motion transfer auto human panel.
 */
class WCCPMTAutoHuman extends WCCPanelMotionTransfer
	var SharedListModel pModelListBoneHead, pModelListBoneChest, pModelListBoneHip
	var DefaultTextModel pModelTextBoneHead, pModelTextBoneChest, pModelTextBoneHip
	var SharedListModel pModelListBoneHandRight, pModelListBoneHandLeft
	var DefaultTextModel pModelTextBoneHandRight, pModelTextBoneHandLeft
	var SharedListModel pModelListBoneFootRight, pModelListBoneFootLeft
	var DefaultTextModel pModelTextBoneFootRight, pModelTextBoneFootLeft
	var DefaultRangeModel pModelBendShapeSpine, pModelBendShapeNeck
	var SharedListModel pModelListMoveBaseIK, pModelListMoveCrouch
	var DefaultTextModel pModelTextMoveBaseIK, pModelTextMoveCrouch
	var DefaultToggleModel pModelRelocateArms, pModelPullFeetToGround, pModelSimulateWaist, pModelUseSpineTwist
	var EditVector pEditReachScalingArmRight, pEditReachScalingArmRightBack
	var EditVector pEditReachScalingArmLeft, pEditReachScalingArmLeftBack
	var EditVector pEditScaleHeadRotation, pEditScaleSpineBending
	var EditVector pEditNeckBendAxisRotation, pEditSpineBendAxisRotation
	var SharedListModel pModelListNeckBendMoveX, pModelListNeckBendMoveY
	var DefaultTextModel pModelTextNeckBendMoveX, pModelTextNeckBendMoveY
	var SharedListModel pModelListNeckShiftMoveX, pModelListNeckShiftMoveY
	var DefaultTextModel pModelTextNeckShiftMoveX, pModelTextNeckShiftMoveY
	var EditVector2 pEditNeckBendMoveRange, pEditNeckShiftMoveRange
	var DefaultListModel pModelWaistMode
	
	
	
	/** Create window. */
	func new(WindowCharacterConfiguration window, String optionPrefix) super(window)
		pModelTypeName.setText("@UI.AutomaticHuman")
		
		pModelListBoneHead = SharedListModel.new(window.getModelBones())
		pModelListBoneHead.setAutoSelect(false)
		pModelTextBoneHead = DefaultTextModel.new()
		
		pModelListBoneChest = SharedListModel.new(window.getModelBones())
		pModelListBoneChest.setAutoSelect(false)
		pModelTextBoneChest = DefaultTextModel.new()
		
		pModelListBoneHandRight = SharedListModel.new(window.getModelBones())
		pModelListBoneHandRight.setAutoSelect(false)
		pModelTextBoneHandRight = DefaultTextModel.new()
		
		pModelListBoneHandLeft = SharedListModel.new(window.getModelBones())
		pModelListBoneHandLeft.setAutoSelect(false)
		pModelTextBoneHandLeft= DefaultTextModel.new()
		
		pModelListBoneHip = SharedListModel.new(window.getModelBones())
		pModelListBoneHip.setAutoSelect(false)
		pModelTextBoneHip = DefaultTextModel.new()
		
		pModelListBoneFootRight = SharedListModel.new(window.getModelBones())
		pModelListBoneFootRight.setAutoSelect(false)
		pModelTextBoneFootRight = DefaultTextModel.new()
		
		pModelListBoneFootLeft = SharedListModel.new(window.getModelBones())
		pModelListBoneFootLeft.setAutoSelect(false)
		pModelTextBoneFootLeft = DefaultTextModel.new()
		
		pModelBendShapeSpine = DefaultRangeModel.new(0, 20, 5, 10, 1)
		pModelBendShapeNeck = DefaultRangeModel.new(0, 20, 5, 10, 1)
		
		pModelListMoveBaseIK = SharedListModel.new(window.getModelMoves())
		pModelListMoveBaseIK.setAutoSelect(false)
		pModelTextMoveBaseIK = DefaultTextModel.new()
		
		pModelListMoveCrouch = SharedListModel.new(window.getModelMoves())
		pModelListMoveCrouch.setAutoSelect(false)
		pModelTextMoveCrouch = DefaultTextModel.new()
		
		pModelRelocateArms = DefaultToggleModel.new()
		pModelPullFeetToGround = DefaultToggleModel.new()
		pModelSimulateWaist = DefaultToggleModel.new()
		pModelUseSpineTwist = DefaultToggleModel.new()
		
		pModelListNeckBendMoveX = SharedListModel.new(window.getModelMoves())
		pModelListNeckBendMoveX.setAutoSelect(false)
		pModelTextNeckBendMoveX = DefaultTextModel.new()
		
		pModelListNeckBendMoveY = SharedListModel.new(window.getModelMoves())
		pModelListNeckBendMoveY.setAutoSelect(false)
		pModelTextNeckBendMoveY = DefaultTextModel.new()
		
		pModelListNeckShiftMoveX = SharedListModel.new(window.getModelMoves())
		pModelListNeckShiftMoveX.setAutoSelect(false)
		pModelTextNeckShiftMoveX = DefaultTextModel.new()
		
		pModelListNeckShiftMoveY = SharedListModel.new(window.getModelMoves())
		pModelListNeckShiftMoveY.setAutoSelect(false)
		pModelTextNeckShiftMoveY = DefaultTextModel.new()
		
		pModelWaistMode = DefaultListModel.new(MotionTransferAutoHuman.WaistMode.all().toArray())
		
		runWhileBlockingLayout(block
			createContent(optionPrefix)
		end)
	end
	
	/** Dispose of window. */
	func void dispose()
		pModelListBoneHead = pModelListBoneChest = pModelListBoneHandRight =\
			pModelListBoneHandLeft = pModelListBoneHip = pModelListBoneFootRight =\
			pModelListBoneFootLeft = pModelListMoveBaseIK = pModelListMoveCrouch =\
			pModelListNeckBendMoveX = pModelListNeckBendMoveY = pModelListNeckShiftMoveX =\
			pModelListNeckShiftMoveY = null
		
		pModelTextBoneHead = pModelTextBoneChest = pModelTextBoneHandRight =\
			pModelTextBoneHandLeft = pModelTextBoneHip = pModelTextBoneFootRight =\
			pModelTextBoneFootLeft = pModelTextMoveBaseIK = pModelTextMoveCrouch =\
			pModelTextNeckBendMoveX = pModelTextNeckBendMoveY = pModelTextNeckShiftMoveX =\
			pModelTextNeckShiftMoveY = null
		
		pModelBendShapeSpine = pModelBendShapeNeck = null
		
		pModelRelocateArms = pModelPullFeetToGround = pModelSimulateWaist = pModelUseSpineTwist = null
		pModelWaistMode = null
		
		pEditReachScalingArmRight = pEditReachScalingArmRightBack = pEditReachScalingArmLeft =\
			pEditReachScalingArmLeftBack = pEditScaleHeadRotation = pEditScaleSpineBending =\
			pEditNeckBendAxisRotation = pEditSpineBendAxisRotation = null
		
		pEditNeckShiftMoveRange = pEditNeckBendMoveRange = null
		
		super.dispose()
	end
	
	
	
	/** Load values from tracker slot object if present into edit widgets. */
	func void loadValues()
		runWhileBlockingLayout(block
			super.loadValues()
			
			if pMotionTransfer != null
				var MotionTransferAutoHuman mt = pMotionTransfer cast MotionTransferAutoHuman
				pModelTextBoneHead.setText(mt.getBoneHead())
				pModelTextBoneChest.setText(mt.getBoneChest())
				pModelTextBoneHandRight.setText(mt.getBoneHandRight())
				pModelTextBoneHandLeft.setText(mt.getBoneHandLeft())
				pModelTextBoneHip.setText(mt.getBoneHip())
				pModelTextBoneFootRight.setText(mt.getBoneFootRight())
				pModelTextBoneFootLeft.setText(mt.getBoneFootLeft())
				pModelBendShapeSpine.setValue((mt.getBendShapeSpine() * 20 + 0.5) cast int)
				pModelBendShapeNeck.setValue((mt.getBendShapeNeck() * 20 + 0.5) cast int)
				pModelTextMoveBaseIK.setText(mt.getMoveBaseIK())
				pModelTextMoveCrouch.setText(mt.getMoveCrouch())
				pModelRelocateArms.setToggled(mt.getRelocateArms())
				pModelPullFeetToGround.setToggled(mt.getPullFeetToGround())
				pModelSimulateWaist.setToggled(mt.getSimulateWaist())
				pModelUseSpineTwist.setToggled(mt.getUseSpineTwist())
				pModelWaistMode.setSelectedElement(mt.getWaistMode())
				pEditReachScalingArmRight.setVector(mt.getReachScalingArmRight())
				pEditReachScalingArmRightBack.setVector(mt.getReachScalingArmRightBack())
				pEditReachScalingArmLeft.setVector(mt.getReachScalingArmLeft())
				pEditReachScalingArmLeftBack.setVector(mt.getReachScalingArmLeftBack())
				pEditScaleHeadRotation.setVector(mt.getScaleHeadRotation())
				pEditScaleSpineBending.setVector(mt.getScaleSpineBending())
				pEditNeckBendAxisRotation.setVector(mt.getNeckBendAxisRotation())
				pEditSpineBendAxisRotation.setVector(mt.getSpineBendAxisRotation())
				pModelTextNeckBendMoveX.setText(mt.getNeckBendMoveX())
				pModelTextNeckBendMoveY.setText(mt.getNeckBendMoveY())
				pEditNeckBendMoveRange.setVector2(mt.getNeckBendMoveRange())
				pModelTextNeckShiftMoveX.setText(mt.getNeckShiftMoveX())
				pModelTextNeckShiftMoveY.setText(mt.getNeckShiftMoveY())
				pEditNeckShiftMoveRange.setVector2(mt.getNeckShiftMoveRange())
				
			else
				pModelTextBoneHead.setText("")
				pModelTextBoneChest.setText("")
				pModelTextBoneHandRight.setText("")
				pModelTextBoneHandLeft.setText("")
				pModelTextBoneHip.setText("")
				pModelTextBoneFootRight.setText("")
				pModelTextBoneFootLeft.setText("")
				pModelBendShapeSpine.setValue(10)
				pModelBendShapeNeck.setValue(10)
				pModelTextMoveBaseIK.setText("")
				pModelTextMoveCrouch.setText("")
				pModelRelocateArms.setToggled(false)
				pModelPullFeetToGround.setToggled(false)
				pModelSimulateWaist.setToggled(false)
				pModelUseSpineTwist.setToggled(false)
				pModelWaistMode.setSelectedElement(MotionTransferAutoHuman.WaistMode.direct)
				pEditReachScalingArmRight.setVector(Vector.new(1, 1, 1))
				pEditReachScalingArmRightBack.setVector(Vector.new(1, 1, 1))
				pEditReachScalingArmLeft.setVector(Vector.new(1, 1, 1))
				pEditReachScalingArmLeftBack.setVector(Vector.new(1, 1, 1))
				pEditScaleHeadRotation.setVector(Vector.new(1, 1, 1))
				pEditScaleSpineBending.setVector(Vector.new(1, 1, 1))
				pEditNeckBendAxisRotation.setVector(Vector.new(90, 0, 0))
				pEditSpineBendAxisRotation.setVector(Vector.new(90, 0, 0))
				pModelTextNeckBendMoveX.setText("")
				pModelTextNeckBendMoveY.setText("")
				pEditNeckBendMoveRange.setVector2(Vector2.new(90, 90))
				pModelTextNeckShiftMoveX.setText("")
				pModelTextNeckShiftMoveY.setText("")
				pEditNeckShiftMoveRange.setVector2(Vector2.new(45, 30))
			end
		end)
		doLayoutIfBlocked()
	end
	
	/** Save value from edit widgets to tracker slot object if present. */
	func void saveValues()
		if pMotionTransfer == null
			return
		end
		super.saveValues()
		
		var MotionTransferAutoHuman mt = pMotionTransfer cast MotionTransferAutoHuman
		mt.setBoneHead(pModelTextBoneHead.getText())
		mt.setBoneChest(pModelTextBoneChest.getText())
		mt.setBoneHandRight(pModelTextBoneHandRight.getText())
		mt.setBoneHandLeft(pModelTextBoneHandLeft.getText())
		mt.setBoneHip(pModelTextBoneHip.getText())
		mt.setBoneFootRight(pModelTextBoneFootRight.getText())
		mt.setBoneFootLeft(pModelTextBoneFootLeft.getText())
		mt.setBendShapeSpine(0.05 * pModelBendShapeSpine.getValue())
		mt.setBendShapeNeck(0.05 * pModelBendShapeNeck.getValue())
		mt.setMoveBaseIK(pModelTextMoveBaseIK.getText())
		mt.setMoveCrouch(pModelTextMoveCrouch.getText())
		mt.setRelocateArms(pModelRelocateArms.getToggled())
		mt.setPullFeetToGround(pModelPullFeetToGround.getToggled())
		mt.setSimulateWaist(pModelSimulateWaist.getToggled())
		mt.setUseSpineTwist(pModelUseSpineTwist.getToggled())
		mt.setWaistMode(pModelWaistMode.getSelectedElement() cast MotionTransferAutoHuman.WaistMode)
		mt.setReachScalingArmRight(pEditReachScalingArmRight.getVector())
		mt.setReachScalingArmRightBack(pEditReachScalingArmRightBack.getVector())
		mt.setReachScalingArmLeft(pEditReachScalingArmLeft.getVector())
		mt.setReachScalingArmLeftBack(pEditReachScalingArmLeftBack.getVector())
		mt.setScaleHeadRotation(pEditScaleHeadRotation.getVector())
		mt.setScaleSpineBending(pEditScaleSpineBending.getVector())
		mt.setNeckBendAxisRotation(pEditNeckBendAxisRotation.getVector())
		mt.setSpineBendAxisRotation(pEditSpineBendAxisRotation.getVector())
		mt.setNeckBendMoveX(pModelTextNeckBendMoveX.getText())
		mt.setNeckBendMoveY(pModelTextNeckBendMoveY.getText())
		mt.setNeckBendMoveRange(pEditNeckBendMoveRange.getVector2())
		mt.setNeckShiftMoveX(pModelTextNeckShiftMoveX.getText())
		mt.setNeckShiftMoveY(pModelTextNeckShiftMoveY.getText())
		mt.setNeckShiftMoveRange(pEditNeckShiftMoveRange.getVector2())
	end
	
	/** Supports motion transfer type. */
	func bool supports(MotionTransfer motionTranfer)
		return motionTranfer castable MotionTransferAutoHuman
	end
	
	
	
	/** Create window content. */
	protected func void createContent(String optionPrefix)
		var WidgetCharacterPreview preview = pWindowCharacterConfiguration.getCharacterPreview()
		var TextField textField
		var ComboBox comboBox
		var Label label
		var String toolTip
		var Slider slider
		var CheckBox checkBox
		
		createBaseContent("motiontransferautohuman")
		
		// head bone
		label = Label.new("@UI.Head.Label", "Label.FormCaption.SingleLine")
		pPanelForm.addWidget(label)
		
		comboBox = ComboBox.new(pModelListBoneHead, DefaultComboBoxEditor.new(pModelTextBoneHead))
		comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBox.setToolTip("@UI.ToolTip.HeadBone")
		pPanelForm.addWidget(comboBox)
		
		CPEBone.new(preview, label, comboBox)
		
		// chest bone
		label = Label.new("@UI.Chest.Label", "Label.FormCaption.SingleLine")
		pPanelForm.addWidget(label)
		
		var ComboBox comboBoxChest = ComboBox.new(pModelListBoneChest, DefaultComboBoxEditor.new(pModelTextBoneChest))
		comboBoxChest.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBoxChest.setToolTip("@UI.ToolTip.ChestBone")
		pPanelForm.addWidget(comboBoxChest)
		
		CPEBone.new(preview, label, comboBoxChest)
		
		// right hand bone
		label = Label.new("@UI.RightHand.Label", "Label.FormCaption.SingleLine")
		pPanelForm.addWidget(label)
		
		comboBox = ComboBox.new(pModelListBoneHandRight, DefaultComboBoxEditor.new(pModelTextBoneHandRight))
		comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBox.setToolTip("@UI.ToolTip.RightHandBone")
		pPanelForm.addWidget(comboBox)
		
		CPEBone.new(preview, label, comboBox)
		
		// left hand bone
		label = Label.new("@UI.LeftHand.Label", "Label.FormCaption.SingleLine")
		pPanelForm.addWidget(label)
		
		comboBox = ComboBox.new(pModelListBoneHandLeft, DefaultComboBoxEditor.new(pModelTextBoneHandLeft))
		comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBox.setToolTip("@UI.ToolTip.LeftHandBone")
		pPanelForm.addWidget(comboBox)
		
		CPEBone.new(preview, label, comboBox)
		
		// hip bone
		label = Label.new("@UI.Hip.Label", "Label.FormCaption.SingleLine")
		pPanelForm.addWidget(label)
		
		var ComboBox comboBoxHip = ComboBox.new(pModelListBoneHip, DefaultComboBoxEditor.new(pModelTextBoneHip))
		comboBoxHip.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBoxHip.setToolTip("@UI.ToolTip.HipBone")
		pPanelForm.addWidget(comboBoxHip)
		
		CPEBone.new(preview, label, comboBoxHip)
		
		// right foot bone
		label = Label.new("@UI.RightFoot.Label", "Label.FormCaption.SingleLine")
		pPanelForm.addWidget(label)
		
		comboBox = ComboBox.new(pModelListBoneFootRight, DefaultComboBoxEditor.new(pModelTextBoneFootRight))
		comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBox.setToolTip("@UI.ToolTip.RightFootBone")
		pPanelForm.addWidget(comboBox)
		
		CPEBone.new(preview, label, comboBox)
		
		// left foot bone
		label = Label.new("@UI.LeftFoot.Label", "Label.FormCaption.SingleLine")
		pPanelForm.addWidget(label)
		
		comboBox = ComboBox.new(pModelListBoneFootLeft, DefaultComboBoxEditor.new(pModelTextBoneFootLeft))
		comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBox.setToolTip("@UI.ToolTip.LeftFootBone")
		pPanelForm.addWidget(comboBox)
		
		CPEBone.new(preview, label, comboBox)
		
		// base ik move
		pPanelForm.addWidget(Label.new("@UI.MoveBaseIK.Label", "Label.FormCaption.SingleLine"))
		
		comboBox = ComboBox.new(pModelListMoveBaseIK, DefaultComboBoxEditor.new(pModelTextMoveBaseIK))
		comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBox.setToolTip("@UI.ToolTip.MoveBaseIK")
		pPanelForm.addWidget(comboBox)
		
		// crouch move
		pPanelForm.addWidget(Label.new("@UI.MoveCrouch.Label", "Label.FormCaption.SingleLine"))
		
		comboBox = ComboBox.new(pModelListMoveCrouch, DefaultComboBoxEditor.new(pModelTextMoveCrouch))
		comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBox.setToolTip("@UI.ToolTip.MoveCrouch")
		pPanelForm.addWidget(comboBox)
		
		// neck bend move x
		pPanelForm.addWidget(Label.new("@UI.NeckBendXMove.Label", "Label.FormCaption.SingleLine"))
		
		comboBox = ComboBox.new(pModelListNeckBendMoveX, DefaultComboBoxEditor.new(pModelTextNeckBendMoveX))
		comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBox.setToolTip("@UI.ToolTip.BendXMove")
		pPanelForm.addWidget(comboBox)
		
		// neck bend move y
		pPanelForm.addWidget(Label.new("@UI.NeckBendYMove.Label", "Label.FormCaption.SingleLine"))
		
		comboBox = ComboBox.new(pModelListNeckBendMoveY, DefaultComboBoxEditor.new(pModelTextNeckBendMoveY))
		comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBox.setToolTip("@UI.ToolTip.BendYMove")
		pPanelForm.addWidget(comboBox)
		
		// neck shift move x
		pPanelForm.addWidget(Label.new("@UI.NeckShiftXMove.Label", "Label.FormCaption.SingleLine"))
		
		comboBox = ComboBox.new(pModelListNeckShiftMoveX, DefaultComboBoxEditor.new(pModelTextNeckShiftMoveX))
		comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBox.setToolTip("@UI.ToolTip.BendXMove")
		pPanelForm.addWidget(comboBox)
		
		// neck shift move y
		pPanelForm.addWidget(Label.new("@UI.NeckShiftYMove.Label", "Label.FormCaption.SingleLine"))
		
		comboBox = ComboBox.new(pModelListNeckShiftMoveY, DefaultComboBoxEditor.new(pModelTextNeckShiftMoveY))
		comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBox.setToolTip("@UI.ToolTip.BendYMove")
		pPanelForm.addWidget(comboBox)
		
		// fine tuning parameters
		addWidget(CollapsibleGroup.new("@UI.FineTuning", "motiontransferautohuman#fine_tuning", CollapsibleGroup.persistModel(\
		optionPrefix + "/GroupFineTuning", false), FormLayout.new(true, 10, 2), block Panel p
			// bend shape neck
			toolTip = "@UI.ToolTip.NeckBendShape"
			
			label = Label.new("@UI.NeckBendShape.Label", "Label.FormCaption.SingleLine")
			label.setToolTip(toolTip)
			p.addWidget(label)
			
			p.addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 1, FlowLayout.Stretch.first), block Panel p2
				slider = Slider.new(Orientation.horizontal, pModelBendShapeNeck)
				slider.setToolTip(toolTip)
				p2.addWidget(slider)
				
				textField = TextField.new(RangeTextModel.new(pModelBendShapeNeck), 2)
				textField.setToolTip(toolTip)
				textField.setValidator(SimpleTextValidator.new(2, SimpleTextValidator.CharacterClass.digits))
				p2.addWidget(textField)
				textField.addMouseListener(ScrollModelWheelMouseListener.new(pModelBendShapeNeck))
			end))
			
			// neck bend move range
			toolTip = "@UI.ToolTip.BendMoveRange"
			
			label = Label.new("@UI.NeckBendMoveRange.Label", "Label.FormCaption.SingleLine")
			label.setToolTip(toolTip)
			p.addWidget(label)
			
			pEditNeckBendMoveRange = EditVector2.new()
			pEditNeckBendMoveRange.setToolTip(toolTip)
			p.addWidget(pEditNeckBendMoveRange)
			
			// neck bend shift range
			toolTip = "@UI.ToolTip.BendMoveRange"
			
			label = Label.new("@UI.NeckShiftMoveRange.Label", "Label.FormCaption.SingleLine")
			label.setToolTip(toolTip)
			p.addWidget(label)
			
			pEditNeckShiftMoveRange = EditVector2.new()
			pEditNeckShiftMoveRange.setToolTip(toolTip)
			p.addWidget(pEditNeckShiftMoveRange)
			
			// bend shape spine
			toolTip = "@UI.ToolTip.SpineBendShape"
			
			label = Label.new("@UI.SpineBendShape.Label", "Label.FormCaption.SingleLine")
			label.setToolTip(toolTip)
			p.addWidget(label)
			
			p.addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 1, FlowLayout.Stretch.first), block Panel p2
				slider = Slider.new(Orientation.horizontal, pModelBendShapeSpine)
				slider.setToolTip(toolTip)
				p2.addWidget(slider)
				
				textField = TextField.new(RangeTextModel.new(pModelBendShapeSpine), 2)
				textField.setToolTip(toolTip)
				textField.setValidator(SimpleTextValidator.new(2, SimpleTextValidator.CharacterClass.digits))
				p2.addWidget(textField)
				textField.addMouseListener(ScrollModelWheelMouseListener.new(pModelBendShapeSpine))
			end))
			
			// right arm reach scaling
			toolTip = "@UI.ToolTip.RAReachScalingRDF"
			
			label = Label.new("@UI.ReachScalingRA.Label", "Label.FormCaption.SingleLine")
			label.setToolTip(toolTip)
			p.addWidget(label)
			
			pEditReachScalingArmRight = EditVector.new()
			pEditReachScalingArmRight.setToolTip(toolTip)
			p.addWidget(pEditReachScalingArmRight)
			
			// right arm reach scaling backwards
			toolTip = "@UI.ToolTip.RAReachScalingLUB"
			
			label = Label.new("@UI.Backward.Label", "Label.FormCaption.SingleLine")
			label.setToolTip(toolTip)
			p.addWidget(label)
			
			pEditReachScalingArmRightBack = EditVector.new()
			pEditReachScalingArmRightBack.setToolTip(toolTip)
			p.addWidget(pEditReachScalingArmRightBack)
			
			// left arm reach scaling
			toolTip = "@UI.ToolTip.LAReachScalingLDF"
			
			label = Label.new("@UI.ReachScalingLA.Label", "Label.FormCaption.SingleLine")
			label.setToolTip(toolTip)
			p.addWidget(label)
			
			pEditReachScalingArmLeft = EditVector.new()
			pEditReachScalingArmLeft.setToolTip(toolTip)
			p.addWidget(pEditReachScalingArmLeft)
			
			// left arm reach scaling backwards
			toolTip = "@UI.ToolTip.LAReachScalingRUB"
			
			label = Label.new("@UI.Backward.Label", "Label.FormCaption.SingleLine")
			label.setToolTip(toolTip)
			p.addWidget(label)
			
			pEditReachScalingArmLeftBack = EditVector.new()
			pEditReachScalingArmLeftBack.setToolTip(toolTip)
			p.addWidget(pEditReachScalingArmLeftBack)
		end))
		
		// advanced parameters
		addWidget(CollapsibleGroup.new("@UI.Advanced", "motiontransferautohuman#advanced", CollapsibleGroup.persistModel(\
		optionPrefix + "/GroupAdvanced", false), FormLayout.new(true, 10, 2), block Panel p
			// head rotation scaling
			toolTip = "@UI.ToolTip.ScaleHeadRotation"
			
			label = Label.new("@UI.ScaleHeadRotation.Label", "Label.FormCaption.SingleLine")
			label.setToolTip(toolTip)
			p.addWidget(label)
			
			pEditScaleHeadRotation = EditVector.new()
			pEditScaleHeadRotation.setToolTip(toolTip)
			p.addWidget(pEditScaleHeadRotation)
			
			// spine bending scaling
			toolTip = "@UI.ToolTip.ScaleSpineBending"
			
			label = Label.new("@UI.ScaleSpineBending.Label", "Label.FormCaption.SingleLine")
			label.setToolTip(toolTip)
			p.addWidget(label)
			
			pEditScaleSpineBending = EditVector.new()
			pEditScaleSpineBending.setToolTip(toolTip)
			p.addWidget(pEditScaleSpineBending)
			
			// neck bend axis rotation
			toolTip = "@UI.ToolTip.NeckBendAxis"
			
			label = Label.new("@UI.NeckBendAxis.Label", "Label.FormCaption.SingleLine")
			label.setToolTip(toolTip)
			p.addWidget(label)
			
			pEditNeckBendAxisRotation = EditVector.new()
			pEditNeckBendAxisRotation.setToolTip(toolTip)
			p.addWidget(pEditNeckBendAxisRotation)
			
			CPECoordinateSystemAxis.new(preview, null, null, label, pEditNeckBendAxisRotation, comboBoxChest, null, true)
			
			// spine bend axis rotation
			toolTip = "@UI.ToolTip.SpineBendAxis"
			
			label = Label.new("@UI.SpineBendAxis.Label", "Label.FormCaption.SingleLine")
			label.setToolTip(toolTip)
			p.addWidget(label)
			
			pEditSpineBendAxisRotation = EditVector.new()
			pEditSpineBendAxisRotation.setToolTip(toolTip)
			p.addWidget(pEditSpineBendAxisRotation)
			
			CPECoordinateSystemAxis.new(preview, null, null, label, pEditSpineBendAxisRotation, comboBoxHip, null, true)
			
			// waist mode
			p.addWidget(Label.new("@UI.WaistMode.Label", "Label.FormCaption.SingleLine"))
			
			var EnumListElementRenderer renderer = EnumListElementRenderer.new()
			renderer.setTranslationPrefix("UI.Enum.AutoTransferWaistMode.")
			comboBox = ComboBox.new(pModelWaistMode, renderer)
			comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
			comboBox.setToolTip("@UI.ToolTip.WaistMode")
			p.addWidget(comboBox)
			
			// relocate arms
			p.addWidget(Label.new(""))
			
			checkBox = CheckBox.new(pModelRelocateArms, "@UI.RelocateArms")
			checkBox.setToolTip("@UI.ToolTip.RelocateArms")
			p.addWidget(checkBox)
			
			// pull feet to ground
			p.addWidget(Label.new(""))
			
			checkBox = CheckBox.new(pModelPullFeetToGround, "@UI.PullFeetToGround")
			checkBox.setToolTip("@UI.ToolTip.PullFeetToGround")
			p.addWidget(checkBox)
			
			// use spine twist
			p.addWidget(Label.new(""))
			
			checkBox = CheckBox.new(pModelUseSpineTwist, "@UI.UseSpineTwist")
			checkBox.setToolTip("@UI.ToolTip.UseSpineTwist")
			p.addWidget(checkBox)
			
			// simulate waist
			p.addWidget(Label.new(""))
			
			checkBox = CheckBox.new(pModelSimulateWaist, "@UI.SimulateWaist")
			checkBox.setToolTip("@UI.ToolTip.SimulateWaist")
			p.addWidget(checkBox)
		end))
	end
end
