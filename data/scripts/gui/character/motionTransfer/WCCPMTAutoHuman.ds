/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Gui

pin Democap.Behaviors
pin Democap.Characters
pin Democap.MotionTransferSystem

pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events
pin Dragengine.Scenery


/**
 * Edit character config window motion transfer auto human panel.
 */
class WCCPMTAutoHuman extends WCCPanelMotionTransfer
	private var SharedListModel pModelListBoneHead
	private var DefaultTextModel pModelTextBoneHead
	private var SharedListModel pModelListBoneChest
	private var DefaultTextModel pModelTextBoneChest
	private var SharedListModel pModelListBoneHandRight
	private var DefaultTextModel pModelTextBoneHandRight
	private var SharedListModel pModelListBoneHandLeft
	private var DefaultTextModel pModelTextBoneHandLeft
	private var SharedListModel pModelListBoneHip
	private var DefaultTextModel pModelTextBoneHip
	private var SharedListModel pModelListBoneFootRight
	private var DefaultTextModel pModelTextBoneFootRight
	private var SharedListModel pModelListBoneFootLeft
	private var DefaultTextModel pModelTextBoneFootLeft
	private var DefaultRangeModel pModelBendShapeSpine
	private var DefaultRangeModel pModelBendShapeNeck
	private var SharedListModel pModelListMoveBaseIK
	private var DefaultTextModel pModelTextMoveBaseIK
	private var SharedListModel pModelListMoveCrouch
	private var DefaultTextModel pModelTextMoveCrouch
	private var EditVector pEditReachScalingArmRight
	private var EditVector pEditReachScalingArmRightBack
	private var EditVector pEditReachScalingArmLeft
	private var EditVector pEditReachScalingArmLeftBack
	
	
	
	/** Create window. */
	public func new(WindowCharacterConfiguration window, String optionPrefix) super(window)
		pModelTypeName.setText("Automatic Human")
		
		pModelListBoneHead = SharedListModel.new(window.getModelBones())
		pModelListBoneHead.setAutoSelect(false)
		pModelTextBoneHead = DefaultTextModel.new()
		
		pModelListBoneChest = SharedListModel.new(window.getModelBones())
		pModelListBoneChest.setAutoSelect(false)
		pModelTextBoneChest = DefaultTextModel.new()
		
		pModelListBoneHandRight = SharedListModel.new(window.getModelBones())
		pModelListBoneHandRight.setAutoSelect(false)
		pModelTextBoneHandRight = DefaultTextModel.new()
		
		pModelListBoneHandLeft = SharedListModel.new(window.getModelBones())
		pModelListBoneHandLeft.setAutoSelect(false)
		pModelTextBoneHandLeft= DefaultTextModel.new()
		
		pModelListBoneHip = SharedListModel.new(window.getModelBones())
		pModelListBoneHip.setAutoSelect(false)
		pModelTextBoneHip = DefaultTextModel.new()
		
		pModelListBoneFootRight = SharedListModel.new(window.getModelBones())
		pModelListBoneFootRight.setAutoSelect(false)
		pModelTextBoneFootRight = DefaultTextModel.new()
		
		pModelListBoneFootLeft = SharedListModel.new(window.getModelBones())
		pModelListBoneFootLeft.setAutoSelect(false)
		pModelTextBoneFootLeft = DefaultTextModel.new()
		
		pModelBendShapeSpine = DefaultRangeModel.new(0, 20, 5, 10, 1)
		pModelBendShapeNeck = DefaultRangeModel.new(0, 20, 5, 10, 1)
		
		pModelListMoveBaseIK = SharedListModel.new(window.getModelMoves())
		pModelListMoveBaseIK.setAutoSelect(false)
		pModelTextMoveBaseIK = DefaultTextModel.new()
		
		pModelListMoveCrouch = SharedListModel.new(window.getModelMoves())
		pModelListMoveCrouch.setAutoSelect(false)
		pModelTextMoveCrouch = DefaultTextModel.new()
		
		runWhileBlockingLayout(block
			createContent(optionPrefix)
		end)
	end
	
	/** Dispose of window. */
	public func void dispose()
		pModelListBoneHead = null
		pModelTextBoneHead = null
		
		pModelListBoneChest = null
		pModelTextBoneChest = null
		
		pModelListBoneHandRight = null
		pModelTextBoneHandRight = null
		
		pModelListBoneHandLeft = null
		pModelTextBoneHandLeft = null
		
		pModelListBoneHip = null
		pModelTextBoneHip = null
		
		pModelListBoneFootRight = null
		pModelTextBoneFootRight = null
		
		pModelListBoneFootLeft = null
		pModelTextBoneFootLeft = null
		
		pModelBendShapeSpine = null
		pModelBendShapeNeck = null
		
		pModelListMoveBaseIK = null
		pModelTextMoveBaseIK = null
		
		pModelListMoveCrouch = null
		pModelTextMoveCrouch = null
		
		pEditReachScalingArmRight = null
		pEditReachScalingArmRightBack = null
		pEditReachScalingArmLeft = null
		pEditReachScalingArmLeftBack = null
		super.dispose()
	end
	
	
	
	/** Load values from tracker slot object if present into edit widgets. */
	public func void loadValues()
		runWhileBlockingLayout(block
			super.loadValues()
			
			if pMotionTransfer != null
				var MotionTransferAutoHuman mt = pMotionTransfer cast MotionTransferAutoHuman
				pModelTextBoneHead.setText(mt.getBoneHead())
				pModelTextBoneChest.setText(mt.getBoneChest())
				pModelTextBoneHandRight.setText(mt.getBoneHandRight())
				pModelTextBoneHandLeft.setText(mt.getBoneHandLeft())
				pModelTextBoneHip.setText(mt.getBoneHip())
				pModelTextBoneFootRight.setText(mt.getBoneFootRight())
				pModelTextBoneFootLeft.setText(mt.getBoneFootLeft())
				pModelBendShapeSpine.setValue((mt.getBendShapeSpine() * 20 + 0.5) cast int)
				pModelBendShapeNeck.setValue((mt.getBendShapeNeck() * 20 + 0.5) cast int)
				pModelTextMoveBaseIK.setText(mt.getMoveBaseIK())
				pModelTextMoveCrouch.setText(mt.getMoveCrouch())
				pEditReachScalingArmRight.setVector(mt.getReachScalingArmRight())
				pEditReachScalingArmRightBack.setVector(mt.getReachScalingArmRightBack())
				pEditReachScalingArmLeft.setVector(mt.getReachScalingArmLeft())
				pEditReachScalingArmLeftBack.setVector(mt.getReachScalingArmLeftBack())
				
			else
				pModelTextBoneHead.setText("")
				pModelTextBoneChest.setText("")
				pModelTextBoneHandRight.setText("")
				pModelTextBoneHandLeft.setText("")
				pModelTextBoneHip.setText("")
				pModelTextBoneFootRight.setText("")
				pModelTextBoneFootLeft.setText("")
				pModelBendShapeSpine.setValue(10)
				pModelBendShapeNeck.setValue(10)
				pModelTextMoveBaseIK.setText("")
				pModelTextMoveCrouch.setText("")
				pEditReachScalingArmRight.setVector(Vector.new(1, 1, 1))
				pEditReachScalingArmRightBack.setVector(Vector.new(1, 1, 1))
				pEditReachScalingArmLeft.setVector(Vector.new(1, 1, 1))
				pEditReachScalingArmLeftBack.setVector(Vector.new(1, 1, 1))
			end
		end)
		doLayoutIfBlocked()
	end
	
	/** Save value from edit widgets to tracker slot object if present. */
	public func void saveValues()
		if pMotionTransfer == null
			return
		end
		super.saveValues()
		
		var MotionTransferAutoHuman mt = pMotionTransfer cast MotionTransferAutoHuman
		mt.setBoneHead(pModelTextBoneHead.getText())
		mt.setBoneChest(pModelTextBoneChest.getText())
		mt.setBoneHandRight(pModelTextBoneHandRight.getText())
		mt.setBoneHandLeft(pModelTextBoneHandLeft.getText())
		mt.setBoneHip(pModelTextBoneHip.getText())
		mt.setBoneFootRight(pModelTextBoneFootRight.getText())
		mt.setBoneFootLeft(pModelTextBoneFootLeft.getText())
		mt.setBendShapeSpine(0.05 * pModelBendShapeSpine.getValue())
		mt.setBendShapeNeck(0.05 * pModelBendShapeNeck.getValue())
		mt.setMoveBaseIK(pModelTextMoveBaseIK.getText())
		mt.setMoveCrouch(pModelTextMoveCrouch.getText())
		mt.setReachScalingArmRight(pEditReachScalingArmRight.getVector())
		mt.setReachScalingArmRightBack(pEditReachScalingArmRightBack.getVector())
		mt.setReachScalingArmLeft(pEditReachScalingArmLeft.getVector())
		mt.setReachScalingArmLeftBack(pEditReachScalingArmLeftBack.getVector())
	end
	
	/** Supports motion transfer type. */
	public func bool supports(MotionTransfer motionTranfer)
		return motionTranfer castable MotionTransferAutoHuman
	end
	
	
	
	/** Create window content. */
	protected func void createContent(String optionPrefix)
		var WidgetCharacterPreview preview = pWindowCharacterConfiguration.getCharacterPreview()
		var TextField textField
		var ComboBox comboBox
		var Button button
		var ListBox listBox
		var Label label
		var String toolTip
		var Slider slider
		
		createBaseContent("motiontransferautohuman")
		
		// head bone
		label = Label.new("Head:", "Label.FormCaption")
		pPanelForm.addWidget(label)
		
		comboBox = ComboBox.new(pModelListBoneHead, DefaultComboBoxEditor.new(pModelTextBoneHead))
		comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBox.setToolTip("Head bone.")
		pPanelForm.addWidget(comboBox)
		
		CPEBone.new(preview, label, comboBox)
		
		// chest bone
		label = Label.new("Chest:", "Label.FormCaption")
		pPanelForm.addWidget(label)
		
		comboBox = ComboBox.new(pModelListBoneChest, DefaultComboBoxEditor.new(pModelTextBoneChest))
		comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBox.setToolTip("Chest bone where neck and arms are attached to.")
		pPanelForm.addWidget(comboBox)
		
		CPEBone.new(preview, label, comboBox)
		
		// right hand bone
		label = Label.new("Right Hand:", "Label.FormCaption")
		pPanelForm.addWidget(label)
		
		comboBox = ComboBox.new(pModelListBoneHandRight, DefaultComboBoxEditor.new(pModelTextBoneHandRight))
		comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBox.setToolTip("Right hand bone.")
		pPanelForm.addWidget(comboBox)
		
		CPEBone.new(preview, label, comboBox)
		
		// left hand bone
		label = Label.new("Left Hand:", "Label.FormCaption")
		pPanelForm.addWidget(label)
		
		comboBox = ComboBox.new(pModelListBoneHandLeft, DefaultComboBoxEditor.new(pModelTextBoneHandLeft))
		comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBox.setToolTip("Left hand bone.")
		pPanelForm.addWidget(comboBox)
		
		CPEBone.new(preview, label, comboBox)
		
		// hip bone
		label = Label.new("Hip:", "Label.FormCaption")
		pPanelForm.addWidget(label)
		
		comboBox = ComboBox.new(pModelListBoneHip, DefaultComboBoxEditor.new(pModelTextBoneHip))
		comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBox.setToolTip("Hip bone where spine and legs are attached to.")
		pPanelForm.addWidget(comboBox)
		
		CPEBone.new(preview, label, comboBox)
		
		// right foot bone
		label = Label.new("Right Foot:", "Label.FormCaption")
		pPanelForm.addWidget(label)
		
		comboBox = ComboBox.new(pModelListBoneFootRight, DefaultComboBoxEditor.new(pModelTextBoneFootRight))
		comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBox.setToolTip("Right foot bone.")
		pPanelForm.addWidget(comboBox)
		
		CPEBone.new(preview, label, comboBox)
		
		// left foot bone
		label = Label.new("Left Foot:", "Label.FormCaption")
		pPanelForm.addWidget(label)
		
		comboBox = ComboBox.new(pModelListBoneFootLeft, DefaultComboBoxEditor.new(pModelTextBoneFootLeft))
		comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBox.setToolTip("Left foot bone.")
		pPanelForm.addWidget(comboBox)
		
		CPEBone.new(preview, label, comboBox)
		
		// base ik move
		pPanelForm.addWidget(Label.new("Move Base IK:", "Label.FormCaption"))
		
		comboBox = ComboBox.new(pModelListMoveBaseIK, DefaultComboBoxEditor.new(pModelTextMoveBaseIK))
		comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBox.setToolTip("Animation move to use to init base IK state for better results. "\
			+ "Applied before applying inverse kinematic")
		pPanelForm.addWidget(comboBox)
		
		// crouch move
		pPanelForm.addWidget(Label.new("Move Crouch:", "Label.FormCaption"))
		
		comboBox = ComboBox.new(pModelListMoveCrouch, DefaultComboBoxEditor.new(pModelTextMoveCrouch))
		comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBox.setToolTip("Animation move to use to init crouch pose for better results. "\
			+ "Applied after Move Base IK and before inverse kinematics. "\
			+ "Percentage of capture bone chain length to original bone chain length is used "\
			+ "to blend move (start=relaxed, end=retracted).")
		pPanelForm.addWidget(comboBox)
		
		// fine tuning parameters
		addWidget(CollapsibleGroup.new("Fine Tuning", "", CollapsibleGroup.persistModel(\
		optionPrefix + "/GroupFineTuning"), FormLayout.new(true, 10, 2), block Panel p
			// bend shape neck
			toolTip = "Weight distribution across neck bones. 0=base, 10=equal, 20=tip"
			
			label = Label.new("Neck Bend Shape:", "Label.FormCaption")
			label.setToolTip(toolTip)
			p.addWidget(label)
			
			p.addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 1, FlowLayout.Stretch.first), block Panel p
				slider = Slider.new(Orientation.horizontal, pModelBendShapeNeck)
				slider.setToolTip(toolTip)
				p.addWidget(slider)
				
				textField = TextField.new(RangeTextModel.new(pModelBendShapeNeck), 2)
				textField.setToolTip(toolTip)
				textField.setValidator(SimpleTextValidator.new(2, SimpleTextValidator.CharacterClass.digits))
				p.addWidget(textField)
				textField.addMouseListener(ScrollModelWheelMouseListener.new(pModelBendShapeNeck))
			end))
			
			// bend shape spine
			toolTip = "Weight distribution across spine bones. 0=base, 10=equal, 20=tip"
			
			label = Label.new("Spine Bend Shape:", "Label.FormCaption")
			label.setToolTip(toolTip)
			p.addWidget(label)
			
			p.addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 1, FlowLayout.Stretch.first), block Panel p
				slider = Slider.new(Orientation.horizontal, pModelBendShapeSpine)
				slider.setToolTip(toolTip)
				p.addWidget(slider)
				
				textField = TextField.new(RangeTextModel.new(pModelBendShapeSpine), 2)
				textField.setToolTip(toolTip)
				textField.setValidator(SimpleTextValidator.new(2, SimpleTextValidator.CharacterClass.digits))
				p.addWidget(textField)
				textField.addMouseListener(ScrollModelWheelMouseListener.new(pModelBendShapeSpine))
			end))
			
			// right arm reach scaling
			toolTip = "Right arm reach scaling: right, down, forward"
			
			label = Label.new("Reach Scaling RA:", "Label.FormCaption")
			label.setToolTip(toolTip)
			p.addWidget(label)
			
			pEditReachScalingArmRight = EditVector.new()
			pEditReachScalingArmRight.setToolTip(toolTip)
			p.addWidget(pEditReachScalingArmRight)
			
			// right arm reach scaling backwards
			toolTip = "Right arm reach scaling: left, up, backwards"
			
			label = Label.new("Backwards:", "Label.FormCaption")
			label.setToolTip(toolTip)
			p.addWidget(label)
			
			pEditReachScalingArmRightBack = EditVector.new()
			pEditReachScalingArmRightBack.setToolTip(toolTip)
			p.addWidget(pEditReachScalingArmRightBack)
			
			// left arm reach scaling
			toolTip = "Left arm reach scaling: left, down, forward"
			
			label = Label.new("Reach Scaling LA:", "Label.FormCaption")
			label.setToolTip(toolTip)
			p.addWidget(label)
			
			pEditReachScalingArmLeft = EditVector.new()
			pEditReachScalingArmLeft.setToolTip(toolTip)
			p.addWidget(pEditReachScalingArmLeft)
			
			// left arm reach scaling backwards
			toolTip = "Left arm reach scaling: right, up, backwards"
			
			label = Label.new("Backwards:", "Label.FormCaption")
			label.setToolTip(toolTip)
			p.addWidget(label)
			
			pEditReachScalingArmLeftBack = EditVector.new()
			pEditReachScalingArmLeftBack.setToolTip(toolTip)
			p.addWidget(pEditReachScalingArmLeftBack)
		end))
	end
end
