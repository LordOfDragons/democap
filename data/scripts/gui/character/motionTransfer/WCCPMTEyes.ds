/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2023, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Gui

pin Democap.Behaviors
pin Democap.Characters
pin Democap.MotionTransferSystem

pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events
pin Dragengine.Scenery


/**
 * Edit character config window motion transfer eyes panel.
 */
class WCCPMTEyes extends WCCPanelMotionTransfer
	var SharedListModel pModelListTrackerSlot
	var DefaultTextModel pModelTextTrackerSlot
	var SharedListModel pModelListRightBone
	var DefaultTextModel pModelTextRightBone
	var SharedListModel pModelListLeftBone
	var DefaultTextModel pModelTextLeftBone
	var SharedListModel pModelListViewBone
	var DefaultTextModel pModelTextViewBone
	var SharedListModel pModelListLookAtBone
	var DefaultTextModel pModelTextLookAtBone
	var DefaultTextModel pModelLookAtDistance
	var EditVector pEditRightRotation
	var EditVector pEditLeftRotation
	var EditVector pEditViewRotation
	var DefaultTextModel pModelLimitIn
	var DefaultTextModel pModelLimitOut
	var DefaultTextModel pModelLimitUp
	var DefaultTextModel pModelLimitDown
	var DefaultRangeModel pModelAdjustRotationHorizontal
	var DefaultRangeModel pModelAdjustRotationVertical
	
	
	
	/** Create window. */
	func new(WindowCharacterConfiguration window) super(window)
		pModelTypeName.setText("@UI.Eyes")
		
		pModelListTrackerSlot = SharedListModel.new(window.getModelTrackerSlotNames())
		pModelListTrackerSlot.setAutoSelect(false)
		pModelTextTrackerSlot = DefaultTextModel.new()
		
		pModelListRightBone = SharedListModel.new(window.getModelBones())
		pModelListRightBone.setAutoSelect(false)
		pModelTextRightBone = DefaultTextModel.new()
		
		pModelListLeftBone = SharedListModel.new(window.getModelBones())
		pModelListLeftBone.setAutoSelect(false)
		pModelTextLeftBone = DefaultTextModel.new()
		
		pModelListViewBone = SharedListModel.new(window.getModelBones())
		pModelListViewBone.setAutoSelect(false)
		pModelTextViewBone = DefaultTextModel.new()
		
		pModelListLookAtBone = SharedListModel.new(window.getModelBones())
		pModelListLookAtBone.setAutoSelect(false)
		pModelTextLookAtBone = DefaultTextModel.new()
		pModelLookAtDistance = DefaultTextModel.new()
		
		pModelLimitIn = DefaultTextModel.new()
		pModelLimitOut = DefaultTextModel.new()
		pModelLimitUp = DefaultTextModel.new()
		pModelLimitDown = DefaultTextModel.new()
		
		pModelAdjustRotationHorizontal = DefaultRangeModel.new(-20, 20, 5, 10, 1)
		pModelAdjustRotationVertical = DefaultRangeModel.new(-20, 20, 5, 10, 1)
		
		runWhileBlockingLayout(block
			createContent()
		end)
	end
	
	/** Dispose of window. */
	func void dispose()
		pModelListTrackerSlot = null
		pModelTextTrackerSlot = null
		
		pModelListRightBone = null
		pModelTextRightBone = null
		
		pModelListLeftBone = null
		pModelTextLeftBone = null
		
		pModelListViewBone = null
		pModelTextViewBone = null
		
		pModelListLookAtBone = null
		pModelTextLookAtBone = null
		pModelLookAtDistance = null
		
		pEditRightRotation = null
		pEditLeftRotation = null
		pEditViewRotation = null
		
		pModelLimitIn = null
		pModelLimitOut = null
		pModelLimitUp = null
		pModelLimitDown = null
		pModelAdjustRotationHorizontal = null
		pModelAdjustRotationVertical = null
		super.dispose()
	end
	
	
	
	/** Load values from tracker slot object if present into edit widgets. */
	func void loadValues()
		runWhileBlockingLayout(block
			super.loadValues()
			
			if pMotionTransfer != null
				var MotionTransferEyes mt = pMotionTransfer cast MotionTransferEyes
				pModelTextTrackerSlot.setText(mt.getTracker())
				pModelTextRightBone.setText(mt.getRightBone())
				pModelTextLeftBone.setText(mt.getLeftBone())
				pModelTextViewBone.setText(mt.getViewBone())
				pModelTextLookAtBone.setText(mt.getLookAtBone())
				pModelLookAtDistance.setText(mt.getLookAtDistance().toString())
				pEditRightRotation.setVector(mt.getRightRotation())
				pEditLeftRotation.setVector(mt.getLeftRotation())
				pEditViewRotation.setVector(mt.getViewRotation())
				pModelLimitIn.setText(mt.getLimitIn().toString())
				pModelLimitOut.setText(mt.getLimitOut().toString())
				pModelLimitUp.setText(mt.getLimitUp().toString())
				pModelLimitDown.setText(mt.getLimitDown().toString())
				pModelAdjustRotationHorizontal.setValue((mt.getAdjustRotationHorizontal() + 0.5) cast int)
				pModelAdjustRotationVertical.setValue((mt.getAdjustRotationVertical() + 0.5) cast int)
				
			else
				pModelTextTrackerSlot.setText("")
				pModelTextRightBone.setText("")
				pModelTextLeftBone.setText("")
				pModelTextViewBone.setText("")
				pModelTextLookAtBone.setText("")
				pModelLookAtDistance.setText("")
				pEditRightRotation.setVector(Vector.new())
				pEditLeftRotation.setVector(Vector.new())
				pEditViewRotation.setVector(Vector.new())
				pModelLimitIn.setText("")
				pModelLimitOut.setText("")
				pModelLimitUp.setText("")
				pModelLimitDown.setText("")
				pModelAdjustRotationHorizontal.setValue(20)
				pModelAdjustRotationVertical.setValue(20)
			end
		end)
		doLayoutIfBlocked()
	end
	
	/** Save value from edit widgets to tracker slot object if present. */
	func void saveValues()
		if pMotionTransfer == null
			return
		end
		super.saveValues()
		
		var MotionTransferEyes mt = pMotionTransfer cast MotionTransferEyes
		mt.setTracker(pModelTextTrackerSlot.getText())
		mt.setRightBone(pModelTextRightBone.getText())
		mt.setLeftBone(pModelTextLeftBone.getText())
		mt.setViewBone(pModelTextViewBone.getText())
		mt.setLookAtBone(pModelTextLookAtBone.getText())
		mt.setLookAtDistance(pModelLookAtDistance.getText().toFloat())
		mt.setRightRotation(pEditRightRotation.getVector())
		mt.setLeftRotation(pEditLeftRotation.getVector())
		mt.setViewRotation(pEditViewRotation.getVector())
		mt.setLimitIn(pModelLimitIn.getText().toFloat())
		mt.setLimitOut(pModelLimitOut.getText().toFloat())
		mt.setLimitUp(pModelLimitUp.getText().toFloat())
		mt.setLimitDown(pModelLimitDown.getText().toFloat())
		mt.setAdjustRotationHorizontal(pModelAdjustRotationHorizontal.getValue())
		mt.setAdjustRotationVertical(pModelAdjustRotationVertical.getValue())
	end
	
	/** Supports motion transfer type. */
	func bool supports(MotionTransfer motionTranfer)
		return motionTranfer castable MotionTransferEyes
	end
	
	
	
	/** Create window content. */
	protected func void createContent()
		var WidgetCharacterPreview preview = pWindowCharacterConfiguration.getCharacterPreview()
		var ComboBox comboBox
		var Label label, labelBone
		var TextField textField
		var Slider slider
		
		createBaseContent("motiontransfereyes")
		
		// tracker slot
		pPanelForm.addWidget(Label.new("@UI.TrackerSlot.Label", "Label.FormCaption"))
		
		comboBox = ComboBox.new(pModelListTrackerSlot, DefaultComboBoxEditor.new(pModelTextTrackerSlot))
		comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBox.setToolTip("@UI.ToolTip.TrackerSlot.Eyes")
		pPanelForm.addWidget(comboBox)
		
		// right bone
		labelBone = Label.new("@UI.RightBone.Label", "Label.FormCaption")
		pPanelForm.addWidget(labelBone)
		
		comboBox = ComboBox.new(pModelListRightBone, DefaultComboBoxEditor.new(pModelTextRightBone))
		comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBox.setToolTip("@UI.ToolTip.RightEyeBone")
		pPanelForm.addWidget(comboBox)
		
		CPEBone.new(preview, labelBone, comboBox)
		
		// right rotation
		var String toolTip = "@UI.ToolTip.RightEyeAxis"
		label = Label.new("@UI.RightAxis.Label", "Label.FormCaption")
		label.setToolTip(toolTip)
		pPanelForm.addWidget(label)
		
		pEditRightRotation = EditVector.new()
		pEditRightRotation.setToolTip(toolTip)
		pPanelForm.addWidget(pEditRightRotation)
		
		CPECoordinateSystem.new(preview, null, null, label, pEditRightRotation, comboBox, null, false)
		
		// left bone
		labelBone = Label.new("@UI.LeftBone.Label", "Label.FormCaption")
		pPanelForm.addWidget(labelBone)
		
		comboBox = ComboBox.new(pModelListLeftBone, DefaultComboBoxEditor.new(pModelTextLeftBone))
		comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBox.setToolTip("@UI.ToolTip.LeftEyeBone")
		pPanelForm.addWidget(comboBox)
		
		CPEBone.new(preview, labelBone, comboBox)
		
		// left rotation
		toolTip = "@UI.ToolTip.LeftEyeAxis"
		label = Label.new("@UI.LeftAxis.Label", "Label.FormCaption")
		label.setToolTip(toolTip)
		pPanelForm.addWidget(label)
		
		pEditLeftRotation = EditVector.new()
		pEditLeftRotation.setToolTip(toolTip)
		pPanelForm.addWidget(pEditLeftRotation)
		
		CPECoordinateSystem.new(preview, null, null, label, pEditLeftRotation, comboBox, null, false)
		
		// view bone
		labelBone = Label.new("@UI.ViewBone.Label", "Label.FormCaption")
		pPanelForm.addWidget(labelBone)
		
		comboBox = ComboBox.new(pModelListViewBone, DefaultComboBoxEditor.new(pModelTextViewBone))
		comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBox.setToolTip("@UI.ToolTip.ViewBone")
		pPanelForm.addWidget(comboBox)
		
		CPEBone.new(preview, labelBone, comboBox)
		
		// view rotation
		toolTip = "@UI.ToolTip.ViewBoneAxis"
		label = Label.new("@UI.ViewAxis.Label", "Label.FormCaption")
		label.setToolTip(toolTip)
		pPanelForm.addWidget(label)
		
		pEditViewRotation = EditVector.new()
		pEditViewRotation.setToolTip(toolTip)
		pPanelForm.addWidget(pEditViewRotation)
		
		CPECoordinateSystem.new(preview, null, null, label, pEditViewRotation, comboBox, null, false)
		
		// look-at bone
		labelBone = Label.new("@UI.LookAtBone.Label", "Label.FormCaption")
		pPanelForm.addWidget(labelBone)
		
		comboBox = ComboBox.new(pModelListLookAtBone, DefaultComboBoxEditor.new(pModelTextLookAtBone))
		comboBox.setDesignerSelector("ComboBox.WindowCharacterConfiguration")
		comboBox.setToolTip("@UI.ToolTip.LookAtBone")
		pPanelForm.addWidget(comboBox)
		
		CPEBone.new(preview, labelBone, comboBox)
		
		// look-at distance
		pPanelForm.addWidget(Label.new("@UI.LookAtDistance.Label", "Label.FormCaption"))
		
		textField = TextField.new(pModelLookAtDistance, 6)
		textField.setDesignerSelector("TextField.WindowCharacterConfiguration")
		textField.setValidator(SimpleTextValidator.new(10, SimpleTextValidator.CharacterClass.number))
		textField.setToolTip("@UI.ToolTip.LookAtDistance")
		pPanelForm.addWidget(textField)
		
		// limit in
		pPanelForm.addWidget(Label.new("@UI.LimitInAngle.Label", "Label.FormCaption"))
		
		textField = TextField.new(pModelLimitIn, 6)
		textField.setDesignerSelector("TextField.WindowCharacterConfiguration")
		textField.setValidator(SimpleTextValidator.new(10, SimpleTextValidator.CharacterClass.number))
		textField.setToolTip("@UI.ToolTip.EyeLimitAngleIn")
		pPanelForm.addWidget(textField)
		
		// limit out
		pPanelForm.addWidget(Label.new("@UI.LimitOutAngle.Label", "Label.FormCaption"))
		
		textField = TextField.new(pModelLimitOut, 6)
		textField.setDesignerSelector("TextField.WindowCharacterConfiguration")
		textField.setValidator(SimpleTextValidator.new(10, SimpleTextValidator.CharacterClass.number))
		textField.setToolTip("@UI.ToolTip.EyeLimitAngleOut")
		pPanelForm.addWidget(textField)
		
		// limit up
		pPanelForm.addWidget(Label.new("@UI.LimitUpAngle.Label", "Label.FormCaption"))
		
		textField = TextField.new(pModelLimitUp, 6)
		textField.setDesignerSelector("TextField.WindowCharacterConfiguration")
		textField.setValidator(SimpleTextValidator.new(10, SimpleTextValidator.CharacterClass.number))
		textField.setToolTip("@UI.ToolTip.EyeLimitAngleUp")
		pPanelForm.addWidget(textField)
		
		// limit down
		pPanelForm.addWidget(Label.new("@UI.LimitDownAngle.Label", "Label.FormCaption"))
		
		textField = TextField.new(pModelLimitDown, 6)
		textField.setDesignerSelector("TextField.WindowCharacterConfiguration")
		textField.setValidator(SimpleTextValidator.new(10, SimpleTextValidator.CharacterClass.number))
		textField.setToolTip("@UI.ToolTip.EyeLimitAngleDown")
		pPanelForm.addWidget(textField)
		
		// adjust horizontal rotation
		toolTip = "@UI.ToolTip.AdjustHorzEyeRotation"
		
		label = Label.new("@UI.AdjustHorzRot.Label", "Label.FormCaption")
		label.setToolTip(toolTip)
		pPanelForm.addWidget(label)
		
		pPanelForm.addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 1, FlowLayout.Stretch.first), block Panel p
			slider = Slider.new(Orientation.horizontal, pModelAdjustRotationHorizontal)
			slider.setToolTip(toolTip)
			p.addWidget(slider)
			
			textField = TextField.new(RangeTextModel.new(pModelAdjustRotationHorizontal), 2)
			textField.setToolTip(toolTip)
			textField.setValidator(SimpleTextValidator.new(2, SimpleTextValidator.CharacterClass.digits))
			p.addWidget(textField)
			textField.addMouseListener(ScrollModelWheelMouseListener.new(pModelAdjustRotationHorizontal))
		end))
		
		// adjust verticaal rotation
		toolTip = "@UI.ToolTip.AdjustVertEyeRotation"
		
		label = Label.new("@UI.AdjustVertRot.Label", "Label.FormCaption")
		label.setToolTip(toolTip)
		pPanelForm.addWidget(label)
		
		pPanelForm.addWidget(Panel.new(FlowLayout.new(LayoutAxis.x, 1, FlowLayout.Stretch.first), block Panel p
			slider = Slider.new(Orientation.horizontal, pModelAdjustRotationVertical)
			slider.setToolTip(toolTip)
			p.addWidget(slider)
			
			textField = TextField.new(RangeTextModel.new(pModelAdjustRotationVertical), 2)
			textField.setToolTip(toolTip)
			textField.setValidator(SimpleTextValidator.new(2, SimpleTextValidator.CharacterClass.digits))
			p.addWidget(textField)
			textField.addMouseListener(ScrollModelWheelMouseListener.new(pModelAdjustRotationVertical))
		end))
	end
end
