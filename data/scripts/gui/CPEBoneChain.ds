/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Gui

pin Democap.Behaviors

pin Dragengine.Gui.Events
pin Dragengine.Gui.Layouts
pin Dragengine.Scenery
pin Dragengine.Utils.StyledText.Definition
pin Dragengine.Utils.StyledText.Definition.Nodes


/**
 * Character preview editor to select a bone chain. Same as CPEBone but uses also the bone
 * count to mark the length of the chain. The chain length can not be edited directly.
 */
class CPEBoneChain extends CPEBone
	protected var Label pLabelBoneBase
	protected var ComboBox pCBBoneBase
	protected var bool pUpdateBase
	
	
	
	/** Create character preview editor. */
	func new(WidgetCharacterPreview preview, Label labelBone, ComboBox cbBone,\
	Label labelBoneBase, ComboBox cbBoneBase, bool updateBase)\
	super(preview, labelBone, cbBone, not updateBase)
		if cbBoneBase == null
			throw ENullPointer.new("cbBoneBase")
		end
		
		pLabelBoneBase = labelBoneBase
		pCBBoneBase = cbBoneBase
		pUpdateBase = updateBase
		
		if updateBase
			if labelBoneBase != null
				labelBoneBase.addMouseListener(ClickedActivateEditor.new(this, cbBoneBase))
				labelBoneBase.addMouseListener(ParentWheelActionListener.new(labelBoneBase.getParent()))
			end
			
			if cbBoneBase.getEditor() != null
				cbBoneBase.getEditor().getWidget().addFocusListener(ReceiveFocusActivateEditor.new(this))
				cbBoneBase.getEditor().addActionListener(UpdateOnAction.new(this))
				
			else
				cbBoneBase.addFocusListener(ReceiveFocusActivateEditor.new(this))
			end
			cbBoneBase.getModel().addListener(UpdateOnListChanged.new(this))
		end
	end
	
	func new(WidgetCharacterPreview preview, LabelledComboBox cbBone,\
	LabelledComboBox cbBoneBase, bool updateBase) super(preview, cbBone, not updateBase)
		if cbBoneBase == null
			throw ENullPointer.new("cbBoneBase")
		end
		
		if updateBase
			pLabelBone = null
			pLabelBoneBase = cbBoneBase.getLabel()
		end
		
		pCBBoneBase = cbBoneBase
		pUpdateBase = updateBase
		
		if updateBase
			if cbBoneBase.getEditor() != null
				cbBoneBase.getEditor().getWidget().addFocusListener(ReceiveFocusActivateEditor.new(this))
				cbBoneBase.getEditor().addActionListener(UpdateOnAction.new(this))
				
			else
				cbBoneBase.addFocusListener(ReceiveFocusActivateEditor.new(this))
			end
			cbBoneBase.getModel().addListener(UpdateOnListChanged.new(this))
		end
	end
	
	
	
	/** Combo box bone base. */
	func ComboBox getComboBoxBoneBase()
		return pCBBoneBase
	end
	
	
	
	/** Editor has been activated. */
	func void onActivate()
		super.onActivate()
		
		if pLabelBoneBase != null
			pLabelBoneBase.setDesignerSelector("Label.FormCaption.Hilight")
		end
	end
	
	/** Editor has been deactivated. */
	func void onDeactivate()
		super.onDeactivate()
		
		if pLabelBoneBase != null
			pLabelBoneBase.setDesignerSelector("Label.FormCaption")
		end
	end
	
	
	
	/** Update preview bone colors. */
	protected func void updateBoneColors()
		var ECBPreviewBones.Instance bones = getPreviewBones()
		if bones == null
			return
		end
		
		bones.setAllBoneColor(previewBoneColorDefault)
		
		if pCBBone.getEditor() == null or pCBBoneBase.getEditor() == null
			return
		end
		
		var String selected = pCBBone.getEditor().getEditorValue() cast String
		var String selectedBase = pCBBoneBase.getEditor().getEditorValue() cast String
		if selected == null or selectedBase == null
			return
		end
		
		bones.setBoneColor(selected, pUpdateBase if previewBoneColorEnd else previewBoneColorSelected)
		bones.setBoneColor(selectedBase, pUpdateBase if previewBoneColorSelected else previewBoneColorEnd)
		
		var Rig rig = bones.getComponent().getComponent().getRig()
		var int indexTarget = rig.indexOfBoneNamed(selected)
		var int indexBase = rig.indexOfBoneNamed(selectedBase)
		if indexTarget == -1 or indexBase == -1
			return
		end
		
		var int boneCount = 1
		var int indexBone = indexTarget
		while indexBone != -1 and indexBone != indexBase
			indexBone = rig.boneGetParent(indexBone)
			boneCount++
		end
		
		if indexBone != indexBase
			return // invalid chain. color error chain?
		end
		
		if boneCount < 3
			return // further coloring only needed for bone in between
		end
		
		indexBone = rig.boneGetParent(indexTarget) // chain tip is already colored
		boneCount -= 2 // chain tip and chain base already colored
		
		while boneCount > 0 and indexBone != -1
			bones.setBoneColor(rig.boneGetName(indexBone), previewBoneColorChain)
			indexBone = rig.boneGetParent(indexBone)
			boneCount--
		end
	end
	
	/** Edit combo box. */
	protected func ComboBox getEditComboBox()
		return pUpdateBase if pCBBoneBase else getComboBoxBone()
	end
end
