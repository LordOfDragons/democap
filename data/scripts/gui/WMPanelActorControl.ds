/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2022, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Gui

pin Democap.Actors
pin Democap.Actions
pin Democap.Behaviors
pin Democap.Characters
pin Democap.Worlds

pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events
pin Dragengine.Scenery



/**
 * Main window character panel.
 */
class WMPanelActorControl extends Panel
	class RemoteCameraElementRenderer extends DefaultListElementRenderer
		func new()
			setDefaultMinimumSize(Point.new(80, 20))
		end
		
		func void updateRenderer(ListBox listBox, Widget renderer, Object element, bool selected, bool focused)
			var String text = ""
			
			if element != null
				text = (element cast ECBRemoteCamera.Instance).getName()
				
			else
				text = "< None >"
			end
			
			super.updateRenderer(listBox, renderer, text, selected, focused)
		end
	end
	
	
	protected var bool pInVR
	protected var String pPrefixUIOptions
	
	
	
	/** Create session panel. */
	func new(bool inVR, String prefixUIOptions)
		pInVR = inVR
		pPrefixUIOptions = prefixUIOptions + "/WMPanelActorControl"
		
		runWhileBlockingLayout(block
			createContent()
		end)
	end
	
	/** Dispose of widget. */
	func void dispose()
		super.dispose()
	end
	
	
	
	/** Shown in VR. */
	func bool getInVR()
		return pInVR
	end
	
	
	
	/** Toggle large mirror. */
	func void toggleLargeMirror()
		var BaseVRActor actor = GameApp.getGameApp().getWorldSpawnCharacter().getActor()
		if actor == null
			return
		end
		
		var BehaviorElement mirror = GameApp.getGameApp().getWorldSpawnCharacter().getMirrorLarge()
		if mirror == null
			return
		end
		
		var ECBToggleVisibility.Instance toggleVisibility = ECBToggleVisibility.getInstanceIn(mirror)
		if toggleVisibility == null
			return
		end
		
		if toggleVisibility.getVisible()
			toggleVisibility.setVisible(false)
			
		else
			toggleVisibility.repositionHmd(actor, Vector.new(0, 0, 0.5)) //Vector.new(0.35, 0, 0.35))
			toggleVisibility.setVisible(true)
		end
	end
	
	/** Move actor. */
	func void moveActor(DVector direction)
		var BaseVRActor actor = GameApp.getGameApp().getWorldSpawnCharacter().getActor()
		if actor != null
			ECBAMovementHelper.getInstanceIn(actor).move(direction * SessionSettings.get().getManualMovementStep())
		end
	end
	
	/** Rotate actor. */
	func void rotateActor(Vector axis)
		var BaseVRActor actor = GameApp.getGameApp().getWorldSpawnCharacter().getActor()
		if actor != null
			ECBAMovementHelper.getInstanceIn(actor).rotate(axis, -SessionSettings.get().getManualRotationStep())
		end
	end
	
	
	
	/** Create panel content. */
	protected func void createContent()
		var SessionSettings sessionSettings = SessionSettings.get()
		var EnumListElementRenderer enumRenderer
		var DefaultListModel comboBoxListModel
		var ComboBox comboBox
		var CheckBox checkBox
		var Label label
		var String toolTip
		var Button button
		
		setLayout(FlowLayout.new(LayoutAxis.y, 2))
		
		addWidget(Panel.new(BorderLayout.new(5), block Panel p
			p.setDesignerSelector("Panel.CollapsibleGroup.Header")
			p.addWidget(Label.new("Actor Controls", "Label.CollapsibleGroup"), BorderLayout.Area.content)
			
			p.addWidget(HelpButton.new("uipanelactorcontrol"), BorderLayout.Area.right)
		end))
		
		addWidget(Panel.new(GridLayout.new(1, 0), block Panel p
			// show/hide mirror
			button = Button.new("Toggle VR Mirror", BlockActionListener.new(block ActionEvent event
				toggleLargeMirror()
			end))
			button.setToolTip("Show/hide large VR mirror")
			p.addWidget(button)
		end))
		
		addWidget(Panel.new(GridLayout.new(2, 0), block Panel p
			checkBox = CheckBox.new(sessionSettings.getModelShowVRControllers(), "Show VR Controllers")
			checkBox.setToolTip("Show VR Controllers if character is active")
			p.addWidget(checkBox)
			
			checkBox = CheckBox.new(sessionSettings.getModelProjectToGround(), "Project to ground")
			checkBox.setToolTip("Project to ground if close enough")
			p.addWidget(checkBox)
			
			checkBox = CheckBox.new(sessionSettings.getModelTeleportMovement(), "Teleport movement")
			checkBox.setToolTip("Use teleport instead of continuous movement")
			p.addWidget(checkBox)
		end))
		
		addWidget(Panel.new(FormLayout.new(true, 5, 2), block Panel p
			// wrist menu panels
			label = Label.new("Wrist Menu:", "Label.FormCaption")
			label.setToolTip("Panel to show for left/right wrist menu.")
			p.addWidget(label)
			
			p.addWidget(Panel.new(BoxLayout.new(LayoutAxis.x, 3), block Panel p2
				enumRenderer = EnumListElementRenderer.new()
				enumRenderer.setNameFor(SessionSettings.WristMenuPanel.none, "None")
				enumRenderer.setNameFor(SessionSettings.WristMenuPanel.settings, "Settings")
				enumRenderer.setNameFor(SessionSettings.WristMenuPanel.character, "Character")
				enumRenderer.setNameFor(SessionSettings.WristMenuPanel.project, "Project, Object")
				enumRenderer.setNameFor(SessionSettings.WristMenuPanel.actorControl, "Actor Control")
				enumRenderer.setNameFor(SessionSettings.WristMenuPanel.session, "Session, Playback")
				
				comboBox = ComboBox.new(sessionSettings.getModelLeftWristMenuPanel(), enumRenderer)
				comboBox.setToolTip("Left wrist menu panel to show.")
				p2.addWidget(comboBox)
				
				comboBox = ComboBox.new(sessionSettings.getModelRightWristMenuPanel(), enumRenderer)
				comboBox.setToolTip("Right wrist menu panel to show.")
				p2.addWidget(comboBox)
			end))
			
			// remote camera
			toolTip = "Remote camera to show in HUD."
			label = Label.new("Remote Camera:", "Label.FormCaption")
			label.setToolTip(toolTip)
			p.addWidget(label)
			
			comboBox = ComboBox.new(sessionSettings.getModelHudCamera(), RemoteCameraElementRenderer.new())
			comboBox.setToolTip(toolTip)
			p.addWidget(comboBox)
			
			// manual movement
			label = Label.new("Manual Move:", "Label.FormCaption")
			label.setToolTip("Manually move actor by step width")
			p.addWidget(label)
			
			p.addWidget(Panel.new(CentrizedBoxLayout.new(LayoutAxis.x, 2), block Panel p2
				button = Button.new(" ", BlockActionListener.new(block ActionEvent event
					moveActor(DVector.new(-1, 0, 0))
				end))
				button.setDesignerSelector("Button.MovementLeft")
				button.setToolTip("Move actor left by step width")
				p2.addWidget(button)
				
				button = Button.new(" ", BlockActionListener.new(block ActionEvent event
					moveActor(DVector.new(0, 1, 0))
				end))
				button.setDesignerSelector("Button.MovementUp")
				button.setToolTip("Move actor up by step width")
				p2.addWidget(button)
				
				button = Button.new(" ", BlockActionListener.new(block ActionEvent event
					moveActor(DVector.new(0, 0, 1))
				end))
				button.setDesignerSelector("Button.MovementForward")
				button.setToolTip("Move actor forward by step width")
				p2.addWidget(button)
				
				button = Button.new(" ", BlockActionListener.new(block ActionEvent event
					moveActor(DVector.new(0, 0, -1))
				end))
				button.setDesignerSelector("Button.MovementBackwards")
				button.setToolTip("Move actor backwards by step width")
				p2.addWidget(button)
				
				button = Button.new(" ", BlockActionListener.new(block ActionEvent event
					moveActor(DVector.new(0, -1, 0))
				end))
				button.setDesignerSelector("Button.MovementDown")
				button.setToolTip("Move actor down by step width")
				p2.addWidget(button)
				
				button = Button.new(" ", BlockActionListener.new(block ActionEvent event
					moveActor(DVector.new(1, 0, 0))
				end))
				button.setDesignerSelector("Button.MovementRight")
				button.setToolTip("Move actor right by step width")
				p2.addWidget(button)
				
				comboBoxListModel = DefaultListModel.new()
				comboBoxListModel.setAutoSelect(false)
				comboBoxListModel.add("10")
				comboBoxListModel.add("1")
				comboBoxListModel.add("0.1")
				comboBoxListModel.add("0.01")
				comboBoxListModel.add("0.001")
				
				comboBox = ComboBox.new(comboBoxListModel, DefaultComboBoxEditor.new(\
					sessionSettings.getModelManualMovementStep(), 4))
				comboBox.setToolTip("Step width in meters for manual movement")
				p2.addWidget(comboBox)
			end))
			
			// manual rotation
			label = Label.new("Manual Rotate:", "Label.FormCaption")
			label.setToolTip("Manually rotate actor by step angle")
			p.addWidget(label)
			
			p.addWidget(Panel.new(CentrizedBoxLayout.new(LayoutAxis.x, 2), block Panel p2
				/*
				button = Button.new(" ", BlockActionListener.new(block ActionEvent event
					rotateActor(Vector.new(1, 0, 0))
				end))
				button.setDesignerSelector("Button.RotationXPositive")
				button.setToolTip("Rotate actor around positive X axis")
				p2.addWidget(button)
				
				button = Button.new(" ", BlockActionListener.new(block ActionEvent event
					rotateActor(Vector.new(-1, 0, 0))
				end))
				button.setDesignerSelector("Button.RotationXNegative")
				button.setToolTip("Rotate actor around negative X axis")
				p2.addWidget(button)
				*/
				
				button = Button.new(" ", BlockActionListener.new(block ActionEvent event
					rotateActor(Vector.new(0, 1, 0))
				end))
				button.setDesignerSelector("Button.RotationYPositive")
				button.setToolTip("Rotate actor around positive Y axis")
				p2.addWidget(button)
				
				button = Button.new(" ", BlockActionListener.new(block ActionEvent event
					rotateActor(Vector.new(0, -1, 0))
				end))
				button.setDesignerSelector("Button.RotationYNegative")
				button.setToolTip("Rotate actor around negative Y axis")
				p2.addWidget(button)
				
				/*
				button = Button.new(" ", BlockActionListener.new(block ActionEvent event
					rotateActor(Vector.new(0, 0, 1))
				end))
				button.setDesignerSelector("Button.RotationZPositive")
				button.setToolTip("Rotate actor around positive Z axis")
				p2.addWidget(button)
				
				button = Button.new(" ", BlockActionListener.new(block ActionEvent event
					rotateActor(Vector.new(0, 0, -1))
				end))
				button.setDesignerSelector("Button.RotationZNegative")
				button.setToolTip("Rotate around negative Z axis")
				p2.addWidget(button)
				*/
				
				comboBoxListModel = DefaultListModel.new()
				comboBoxListModel.setAutoSelect(false)
				comboBoxListModel.add("90")
				comboBoxListModel.add("45")
				comboBoxListModel.add("30")
				comboBoxListModel.add("15")
				comboBoxListModel.add("10")
				comboBoxListModel.add("5")
				comboBoxListModel.add("1")
				comboBoxListModel.add("0.1")
				
				comboBox = ComboBox.new(comboBoxListModel, DefaultComboBoxEditor.new(\
					sessionSettings.getModelManualRotationStep(), 4))
				comboBox.setToolTip("Step width in meters for manual rotation")
				p2.addWidget(comboBox)
			end))
		end))
	end
end
