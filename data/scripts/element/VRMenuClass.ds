/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Elements

pin Democap.Behaviors

pin Dragengine.Commands
pin Dragengine.Gui
pin Dragengine.Scenery
pin Dragengine.Utils



/**
 * VR Menu element class.
 */
class VRMenuClass extends BehaviorElementClass
	class VRMenuScaleSettingsChanged extends DefaultRangeModelListener
		class ApplySettingsTimer extends Timer
			func new() super(0.5, true)
			end
			
			func void fire()
				var BehaviorElement vrmenu = GameApp.getGameApp().getWorldSpawnCharacter().getVRMenu()
				if vrmenu == null
					giveUp()
					return
				end
				
				var ECBToggleVisibility.Instance toggleVisibility = ECBToggleVisibility.getInstanceIn(vrmenu)
				if toggleVisibility == null or not toggleVisibility.getVisible()
					giveUp()
					return
				end
				
				var MoCapActor actor = GameApp.getGameApp().getWorldSpawnCharacter().getActor()
				if actor == null
					giveUp()
					return
				end
				
				var ECBehaviorRenderableDesktop.Instance renderableDesktop = ECBehaviorRenderableDesktop.getInstanceIn(vrmenu)
				if renderableDesktop == null
					giveUp()
					return
				end
				
				if renderableDesktop.getDesktop().getMouseCaptureWidget() != null
					return // retry later
				end
				
				giveUp()
				toggleVisibility.resize(actor)
			end
		end
		
		var ApplySettingsTimer pApplySettingsTimer
		
		func new()
		end
		
		func void toggledChanged(ToggleModel model)
			if pApplySettingsTimer != null and pApplySettingsTimer.hasElapsed()
				pApplySettingsTimer = null
			end
			
			if pApplySettingsTimer == null
				pApplySettingsTimer = ApplySettingsTimer.new()
			end
		end
	end
	
	
	public var ECBehaviorComponent component
	public var ECBehaviorCollider collider
	public var ECBehaviorDynamicSkin dynamicSkin
	public var ECBehaviorRenderableDesktop renderableDesktop
	public var ECBVRWindowMain windowMain
	public var ECBehaviorVRHandPointedAt vrHandPointedAt
	public var ECBehaviorControlDesktop controlDesktop
	public var ECBToggleVisibility toggleVisibility
	public var ECBHideWhileRecording hideWhileRecording
	
	
	/** Create element class. */
	func new(String name, bool wide) super(name)
		setPersistable(false)
		
		component = ECBehaviorComponent.new(this, null)
		if wide
			component.setCommonPath("/content/models/vrmenu", "vrmenu_wide.demodel", "vrmenu.deskin", "vrmenu_wide.derig")
			
		else
			component.setCommonPath("/content/models/vrmenu", "vrmenu.demodel", "vrmenu.deskin", "vrmenu.derig")
		end
		component.getComponent().setLayerMask(LayerMask.newWith(GameApp.WorldLayerBit.remoteView))
		component.getComponent().getEnableGI().setValue(false)
		
		collider = ECBehaviorCollider.new(this, component)
		collider.getCollider().getPhysicsType().setEnumeration(CollisionResponse.kinematic)
		collider.getCollider().getLocalGravity().setVector(Vector.new())
		
		collider.getCollider().setCollisionFilter(CollisionFilter.new(\
			LayerMask.newWith(GameApp.CollisionFilterBit.interaction)))
		
		dynamicSkin = ECBehaviorDynamicSkin.new(this, component)
		
		renderableDesktop = ECBehaviorRenderableDesktop.new(this, dynamicSkin)
		renderableDesktop.getGuiTheme().setPath("/content/gui/vrmain.guitheme.xml")
		renderableDesktop.getRenderable().setValue("screen.content")
		renderableDesktop.getRenderableSolidity().setValue("screen.solidity")
		if wide
			renderableDesktop.getSize().setPoint(Point.new(1024, 1024))
			
		else
			renderableDesktop.getSize().setPoint(Point.new(512, 1024))
		end
		
		windowMain = ECBVRWindowMain.new(this, renderableDesktop)
		
		vrHandPointedAt = ECBehaviorVRHandPointedAt.new(this)
		
		var float scaleX = wide if 1.0 else 0.5
		controlDesktop = ECBehaviorControlDesktop.new(this, renderableDesktop)
		controlDesktop.getLowerLeft().setVector(Vector.new(0.484 * scaleX, -0.484, 0))
		controlDesktop.getLowerRight().setVector(Vector.new(-0.484 * scaleX, -0.484, 0))
		controlDesktop.getUpperLeft().setVector(Vector.new(0.484 * scaleX, 0.484, 0))
		
		toggleVisibility = ECBToggleVisibility.new(this)
		toggleVisibility.getDistance().setValue(0.2)
		toggleVisibility.getLockZRotation().setValue(true)
		toggleVisibility.getRotation().setVector(Vector.new(20, 0, 0))
		toggleVisibility.getScaleWithActor().setValue(true)
		
		toggleVisibility.blockSettingsScale = block
			return SessionSettings.get().getVRMenuScale()
		end
		
		if not wide
			SessionSettings.get().getModelVRMenuScale().addListener(VRMenuScaleSettingsChanged.new())
		end
		
		hideWhileRecording = ECBHideWhileRecording.new(this, null)
		
		ECBDesktopLanguageChanged.new(this, renderableDesktop)
	end
end
