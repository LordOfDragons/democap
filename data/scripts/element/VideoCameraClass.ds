/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Elements

pin Democap.Behaviors

pin Dragengine.Commands
pin Dragengine.Gui
pin Dragengine.Scenery



/**
 * Video camera element class.
 */
class VideoCameraClass extends DynamicPropClass
	public var ECBehaviorCamera camera
	public var ECBehaviorDynamicSkin dynamicSkin
	public var ECBehaviorRenderablePanel renderablePanel
	public var ECBRenderableCamera renderableCamera
	public var ECBCameraFeedView cameraFeedView
	public var ECBRemoteCamera remoteCamera
	public var ECBehaviorGrabSpot grabSpotHand
	public var ECBGrabAttach grabAttachHand
	public var ECBGrabbedEnableCamera grabbedEnableCamera
	
	
	/** Create element class. */
	func new() this("VideoCamera")
	end
	
	func new(String name) super(name)
		component.setCommonPath("/content/models/videocamera",\
			"videocamera.demodel", "videocamera.deskin", "videocamera.derig")
		component.getComponent().setLayerMask(LayerMask.newWith(GameApp.WorldLayerBit.remoteView))
		component.getComponent().getEnableGI().setValue(false)
		
		collider.getCollider().setCollisionFilter(CollisionFilter.new(\
			LayerMask.newWith(GameApp.CollisionFilterBit.interaction)))
		
		showInteractHandles.getHandleSize().setValue(0.1)
		
		helpTopic.getHelpTopic().setValue("ocls_videocamera")
		
		capturedAnimations.record.setValue(false)
		
		camera = ECBehaviorCamera.new(this, collider)
		camera.getAttach().getBone().setValue("attach camera")
		camera.setLayerMask(LayerMask.newWith(BaseGameApp.WorldLayerBit.default))
		camera.getPathParameters().setValue("/content/camera/videocamera.decamera")
		camera.getEnableGI().setValue(SessionSettings.get().getModelCameraEnableGI().getToggled())
		
		dynamicSkin = ECBehaviorDynamicSkin.new(this, component)
		
		renderablePanel = ECBehaviorRenderablePanel.new(this, dynamicSkin, "display")
		renderablePanel.getRenderable().setValue("display")
		renderablePanel.getSize().setPoint(Point.new(600, 364))
		renderablePanel.getGuiTheme().setPath("/content/models/videocamera/videocamera.guitheme.xml")
		
		renderableCamera = ECBRenderableCamera.new(this, renderablePanel, camera, "")
		cameraFeedView = ECBCameraFeedView.new(this, camera)
		remoteCamera = ECBRemoteCamera.new(this, behaviorGuiPanels, camera, "")
		
		grabSpotHand = ECBehaviorGrabSpot.new(this, collider, "hand")
		grabSpotHand.getAttachTouchCollider().getBone().setValue("grab hand")
		
		var ShapeList shape = ShapeList.new()
		shape.addSphere(Vector.new(), 0.05)
		grabSpotHand.getTouchCollider().getShape().setShapeList(shape)
		
		grabAttachHand = ECBGrabAttach.new(this, behaviorGuiPanels, grabSpotHand, collider, attachable, null, "hand")
		grabbedEnableCamera = ECBGrabbedEnableCamera.new(this, grabSpotHand, renderableCamera, "hand")
	end
	
	
	/** Create copy of element class with new name. Required for XML subclassing. */
	func ElementClass duplicateNamed(String classname)
		return VideoCameraClass.new(classname)
	end
end
