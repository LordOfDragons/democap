/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2022, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Elements

pin Democap.Behaviors

pin Dragengine.Commands
pin Dragengine.Gui
pin Dragengine.Scenery



/**
 * Grab object element class. Interactive element the user can place near objects to indicate
 * a grab object location. The object is then parented to the object to affect it.
 */
class GrabObjectClass extends BehaviorElementClass
	public var ECBehaviorComponent component
	public var ECBehaviorCollider collider
	public var ECBehaviorAnimated animated
	public var ECBehaviorVRHandPointedAt vrHandPointedAt
	public var ECBHighlightPointedAt highlightPointedAt
	public var ECBSceneObject sceneObject
	public var ECBSelectable selectable
	public var ECBShowInteractHandles showInteractHandles
	public var ECBShowInteractionBubble showInteractionBubble
	public var ECBHelpTopic helpTopic
	public var ECBHideCondition hideCondition
	public var ECBehaviorGrabSpot grabSpot
	public var ECBGrabAttach grabAttach
	
	
	/** Create element class. */
	public func new() this("GrabObject")
	end
	
	public func new(String name) super(name)
		setPersistable(false)
		
		component = ECBehaviorComponent.new(this, null)
		component.setCommonPath("/content/models/hands", "right.demodel", "hand.deskin", "right.derig")
		component.getComponent().setLayerMask(LayerMask.newWith(GameApp.WorldLayerBit.remoteView))
		
		collider = ECBehaviorCollider.new(this, component)
		collider.getCollider().getPhysicsType().setEnumeration(CollisionResponse.kinematic)
		collider.getCollider().getLocalGravity().setVector(Vector.new())
		
		collider.getCollider().setCollisionFilter(CollisionFilter.new(\
			LayerMask.newWith(GameApp.CollisionFilterBit.interaction)))
		
		animated = ECBehaviorAnimated.new(this, component)
		animated.getAnimator().getAnimator().setPath("/content/models/hands/animator/grab_grip_right.deanimator")
		animated.getAnimator().getPlaying().setValue(true)
		
		vrHandPointedAt = ECBehaviorVRHandPointedAt.new(this)
		highlightPointedAt = ECBHighlightPointedAt.new(this, component, collider, vrHandPointedAt)
		
		sceneObject = ECBSceneObject.new(this)
		sceneObject.addActorOffset.setVector(Vector.new(0, 1, 0.5))
		sceneObject.canRemove.setValue(true)
		
		selectable = ECBSelectable.new(this)
		
		showInteractHandles = ECBShowInteractHandles.new(this, selectable)
		showInteractHandles.getHandleClasses().addElementClassName("InteractHandleMoveX")
		showInteractHandles.getHandleClasses().addElementClassName("InteractHandleMoveY")
		showInteractHandles.getHandleClasses().addElementClassName("InteractHandleMoveZ")
		showInteractHandles.getHandleClasses().addElementClassName("InteractHandleMoveXNeg")
		showInteractHandles.getHandleClasses().addElementClassName("InteractHandleMoveYNeg")
		showInteractHandles.getHandleClasses().addElementClassName("InteractHandleMoveZNeg")
		showInteractHandles.getHandleClasses().addElementClassName("InteractHandleRotateX")
		showInteractHandles.getHandleClasses().addElementClassName("InteractHandleRotateY")
		showInteractHandles.getHandleClasses().addElementClassName("InteractHandleRotateZ")
		showInteractHandles.getHandleSize().setValue(0.05)
		
		showInteractionBubble = ECBShowInteractionBubble.new(this)
		showInteractionBubble.buttons.add("duplicate")
		showInteractionBubble.buttons.add("remove")
		
		helpTopic = ECBHelpTopic.new(this)
		helpTopic.getHelpTopic().setValue("ocls_grabobject")
		
		hideCondition = ECBHideCondition.new(this)
		
		grabSpot = ECBehaviorGrabSpot.new(this, collider)
		
		var ShapeList shape = ShapeList.new()
		shape.addSphere(Vector.new(), 0.05)
		grabSpot.getTouchCollider().getShape().setShapeList(shape)
		
		grabAttach = ECBGrabAttach.new(this, grabSpot, collider, null, "")
	end
	
	
	/** Create copy of element class with new name. Required for XML subclassing. */
	public func ElementClass duplicateNamed(String classname)
		return GrabObjectClass.new(classname)
	end
end
