/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Elements

pin Democap.Behaviors

pin Dragengine.Commands
pin Dragengine.Gui
pin Dragengine.Scenery



/**
 * Dynamic prop element class.
 * 
 * XML element equivalent definition:
 * \code{.xml}
 * <?xml version='1.0' encoding='UTF-8'?>
 * <elementClass name='MyClass' class='GenericBehaviorElement'>
 *   <behavior type='ECBBehaviorGuiPanels'/>
 *   <behavior type='ECBehaviorComponent'>
 *     <string name='.model'>/content/models/unknownObject/object.demodel</string>
 *     <string name='.skin'>/content/models/unknownObject/object.deskin</string>
 *     <string name='.rig'>/content/models/unknownObject/object.derig</string>
 *   </behavior>
 *   <behavior type='ECBComponent'/>
 *   <behavior type='ECBehaviorCollider'>
 *     <!-- collision filter:
 *          category: BaseGameApp.CollisionFilterBit.geometry (0)
 *          filter: BaseGameApp.CollisionFilterBit.dynamic (1)
 *                  BaseGameApp.CollisionFilterBit.actor (2)
 *                  BaseGameApp.CollisionFilterBit.particle (5)
 *                  GameApp.CollisionFilterBit.interaction (7) -->
 *     <string name='collisionFilter'>0:1 2 5 7</string>
 *     <string name='.physicsType'>dynamic</string>
 *   </behavior>
 *   <behavior type='ECBTemporaryGhost'/>
 *   <behavior type='ECBehaviorNavigationBlocker'/>
 *   <behavior type='ECBehaviorVRHandPointedAt'/>
 *   <behavior type='ECBHighlightPointedAt'/>
 *   <behavior type='ECBehaviorAttachable'/>
 *   <behavior type='ECBSceneObject'>
 *     <vector name='.addActorOffset' x='0' y='1' z='0.5'/>
 *     <boolean name='.canRemove'>true</boolean>
 *   </behavior>
 *   <behavior type='ECBSelectable'/>
 *   <behavior type='ECBShowInteractHandles'>
 *     <list name='handleSets'>
 *       <string>move</string>
 *       <string>rotate</string>
 *     </list>
 *   </behavior>
 *   <behavior type='ECBShowInteractionBubble'>
 *     <list name='.buttons'>
 *       <string>record</string>
 *       <string>ghost</string>
 *       <string>duplicate</string>
 *       <string>remove</string>
 *     </list>
 *   </behavior>
 *   <behavior type='ECBHelpTopic'>
 *     <string name='.topic'>ocls_dynamicprop</string>
 *   </behavior>
 *   <behavior type='ECBCapturedAnimations'/>
 *   <behavior type='ECBColliderPhysics'/>
 *   <behavior type='ECBRecordAnimation'/>
 *   <behavior type='ECBehaviorAttachments'/>
 *   <behavior type='ECBCopyObject'/>
 * </elementClass>
 * \endcode
 */
class DynamicPropClass extends BehaviorElementClass
	public var ECBBehaviorGuiPanels behaviorGuiPanels
	public var ECBehaviorComponent component
	public var ECBComponent component2
	public var ECBehaviorCollider collider
	public var ECBTemporaryGhost temporaryGhost
	public var ECBehaviorVRHandPointedAt vrHandPointedAt
	public var ECBHighlightPointedAt highlightPointedAt
	public var ECBehaviorAttachable attachable
	public var ECBSceneObject sceneObject
	public var ECBSelectable selectable
	public var ECBShowInteractHandles showInteractHandles
	public var ECBShowInteractionBubble showInteractionBubble
	public var ECBHelpTopic helpTopic
	public var ECBColliderPhysics colliderPhysics
	public var ECBCapturedAnimations capturedAnimations
	public var ECBRecordAnimation recordAnimation
	public var ECBehaviorAttachments attachments
	public var ECBCopyObject copyObject
	
	
	/** Create element class. */
	func new() this("DynamicProp")
	end
	
	func new(String name) super(name)
		behaviorGuiPanels = ECBBehaviorGuiPanels.new(this)
		
		component = ECBehaviorComponent.new(this, null)
		component.setCommonPath("/content/models/unknownObject",\
			"object.demodel", "object.deskin", "object.derig")
		
		component2 = ECBComponent.new(this, behaviorGuiPanels, component)
		
		collider = ECBehaviorCollider.new(this, component)
		
		var LayerMask cfcategory = LayerMask.newWith(BaseGameApp.CollisionFilterBit.dynamic)
		
		var LayerMask cffilter = LayerMask.new()
		cffilter.setBit(BaseGameApp.CollisionFilterBit.actor)
		//cffilter.setBit(BaseGameApp.CollisionFilterBit.actorAI)
		cffilter.setBit(BaseGameApp.CollisionFilterBit.dynamic)
		cffilter.setBit(BaseGameApp.CollisionFilterBit.geometry)
		cffilter.setBit(BaseGameApp.CollisionFilterBit.particle)
		cffilter.setBit(GameApp.CollisionFilterBit.interaction)
		
		collider.getCollider().setCollisionFilter(CollisionFilter.new(cfcategory, cffilter))
		
		temporaryGhost = ECBTemporaryGhost.new(this, behaviorGuiPanels, component)
		
		vrHandPointedAt = ECBehaviorVRHandPointedAt.new(this)
		highlightPointedAt = ECBHighlightPointedAt.new(this, component, collider, vrHandPointedAt)
		
		attachable = ECBehaviorAttachable.new(this, collider)
		
		sceneObject = ECBSceneObject.new(this)
		sceneObject.addActorOffset.setVector(Vector.new(0, 1, 0.5))
		sceneObject.canRemove.setValue(true)
		
		selectable = ECBSelectable.new(this)
		
		showInteractHandles = ECBShowInteractHandles.new(this, behaviorGuiPanels, selectable)
		showInteractHandles.getHandleClasses().addElementClassName("InteractHandleMoveX")
		showInteractHandles.getHandleClasses().addElementClassName("InteractHandleMoveY")
		showInteractHandles.getHandleClasses().addElementClassName("InteractHandleMoveZ")
		showInteractHandles.getHandleClasses().addElementClassName("InteractHandleMoveXNeg")
		showInteractHandles.getHandleClasses().addElementClassName("InteractHandleMoveYNeg")
		showInteractHandles.getHandleClasses().addElementClassName("InteractHandleMoveZNeg")
		showInteractHandles.getHandleClasses().addElementClassName("InteractHandleRotateX")
		showInteractHandles.getHandleClasses().addElementClassName("InteractHandleRotateY")
		showInteractHandles.getHandleClasses().addElementClassName("InteractHandleRotateZ")
		
		showInteractionBubble = ECBShowInteractionBubble.new(this)
		showInteractionBubble.buttons.add("record")
		showInteractionBubble.buttons.add("ghost")
		showInteractionBubble.buttons.add("duplicate")
		showInteractionBubble.buttons.add("remove")
		
		helpTopic = ECBHelpTopic.new(this)
		helpTopic.getHelpTopic().setValue("ocls_dynamicprop")
		
		colliderPhysics = ECBColliderPhysics.new(this, behaviorGuiPanels, collider)
		
		capturedAnimations = ECBCapturedAnimations.new(this, behaviorGuiPanels, component, collider)
		colliderPhysics.capturedAnimations = capturedAnimations
		
		recordAnimation = ECBRecordAnimation.new(this, component, capturedAnimations)
		
		attachments = ECBehaviorAttachments.new(this)
		
		copyObject = ECBCopyObject.new(this)
	end
	
	
	/** Create copy of element class with new name. Required for XML subclassing. */
	func ElementClass duplicateNamed(String classname)
		return DynamicPropClass.new(classname)
	end
end
