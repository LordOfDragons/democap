/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Elements

pin Democap.Behaviors

pin Dragengine.Scenery


/**
 * Base element class for motion capture actor.
 */
class MoCapActorClass extends BaseVRActorClass
	public var ECBehaviorVRHandPointAt teleportPointAt
	public var ECBehaviorVRHandLaserPointer teleportLasterPointer
	public var ECBAPhysicsToucher physicsToucherRight
	public var ECBAPhysicsToucher physicsToucherLeft
	public var ECBATeleportDestination teleportDestination
	public var ECBAControlDesktop controlDesktop
	public var ECBAInteractHandle interactHandle
	public var ECBAGrab grabRightHand
	public var ECBAGrab grabLeftHand
	public var ECBASelectable actorSelectable
	public var ECBVRHudInfo vrHudInfo
	public var ECBAHudShowCamera hudShowCamera
	public var ECBVRAttachWristPanel attachWristMenuRight
	public var ECBVRAttachWristPanel attachWristMenuLeft
	public var ECBAResetCalibrationWatcher resetCalibrationWatcher
	public var ECBSceneObject sceneObject
	public var ECBSelectable selectable
	public var ECBShowInteractHandles showInteractHandles
	public var ECBShowInteractionBubble showInteractionBubble
	
	
	/** Create element class. */
	public func new() this("MoCapActor")
	end
	
	public func new(String name) super(name)
		setPersistable(false)
		
		getCollider().getCollider().collisionFilterSetBit(GameApp.CollisionFilterBit.interaction)
		
		getVRRightHand().getUseVendorModel().setValue(false)
		getVRRightHand().getComponent().setCommonPath("/content/models/hands",\
			"right.demodel", "hand.deskin", "right.derig")
		
		getVRLeftHand().getUseVendorModel().setValue(false)
		getVRLeftHand().getComponent().setCommonPath("/content/models/hands",\
			"left.demodel", "hand.deskin", "left.derig")
		
		getVRRightHandPointAt().getRange().setValue(10)
		getVRLeftHandPointAt().getRange().setValue(10)
		
		getVRRightHandPose().setHandBoneNames(true)
		getVRRightHandPose().getFingerTipDistance().setValue(0.1667)
		//getVRRightHandPose().getOnlyRotation().setValue(true)
		
		getVRLeftHandPose().setHandBoneNames(false)
		getVRLeftHandPose().getFingerTipDistance().setValue(0.1667)
		//getVRLeftHandPose().getOnlyRotation().setValue(true)
		
		var LayerMask cfcategory = LayerMask.newWith(GameApp.CollisionFilterBit.interaction)
		
		var LayerMask cffilter = LayerMask.new()
		cffilter.setBit(GameApp.CollisionFilterBit.interaction)
		cffilter.setBit(GameApp.CollisionFilterBit.geometry)
		cffilter.setBit(GameApp.CollisionFilterBit.dynamic)
		cffilter.setBit(GameApp.CollisionFilterBit.actor)
		
		var CollisionFilter cfPointAt = CollisionFilter.new(cfcategory, cffilter)
		
		getVRLeftHandPointAt().getCollisionFilter().setCollisionFilter(cfPointAt)
		getVRRightHandPointAt().getCollisionFilter().setCollisionFilter(cfPointAt)
		
		getAIAction().setActionFactory(Actions.AADefault.Factory.new())
		
		// add behaviors
		teleportPointAt = ECBehaviorVRHandPointAt.new(this, getVRLeftHand(), "teleport")
		teleportPointAt.getRange().setValue(20)
		
		cfcategory = LayerMask.newWith(BaseGameApp.CollisionFilterBit.actorAI)
		
		cffilter = LayerMask.new()
		cffilter.setBit(BaseGameApp.CollisionFilterBit.geometry)
		cffilter.setBit(BaseGameApp.CollisionFilterBit.dynamic)
		
		teleportPointAt.getCollisionFilter().setCollisionFilter(CollisionFilter.new(cfcategory, cffilter))
		
		physicsToucherRight = ECBAPhysicsToucher.new(this, getVRRightHand(), idVRRightHand)
		physicsToucherRight.shape.setShapeList(getVRRightHandGrabber().getShape().getShapeList())
		physicsToucherRight.attach.getPosition().setVector(getVRRightHandGrabber().getAttach().getPosition().getVector())
		physicsToucherRight.attach.getOrientation().setVector(getVRRightHandGrabber().getAttach().getOrientation().getVector())
		
		physicsToucherLeft = ECBAPhysicsToucher.new(this, getVRLeftHand(), idVRLeftHand)
		physicsToucherLeft.shape.setShapeList(getVRLeftHandGrabber().getShape().getShapeList())
		physicsToucherLeft.attach.getPosition().setVector(getVRLeftHandGrabber().getAttach().getPosition().getVector())
		physicsToucherLeft.attach.getOrientation().setVector(getVRLeftHandGrabber().getAttach().getOrientation().getVector())
		
		teleportLasterPointer = ECBehaviorVRHandLaserPointer.new(this, teleportPointAt, "teleport")
		teleportDestination = ECBATeleportDestination.new(this, getComponent())
		
		ECBShowVRHandController.new(this, getVRRightHand(), idVRRightHand)
		ECBShowVRHandController.new(this, getVRLeftHand(), idVRLeftHand)
		
		controlDesktop = ECBAControlDesktop.new(this)
		interactHandle = ECBAInteractHandle.new(this)
		grabRightHand = ECBAGrab.new(this, getVRRightHandGrabber(), getVRRightHandAttachSlot(), physicsToucherRight, idVRRightHand)
		grabLeftHand = ECBAGrab.new(this, getVRLeftHandGrabber(), getVRLeftHandAttachSlot(), physicsToucherLeft, idVRLeftHand)
		
		actorSelectable = ECBASelectable.new(this)
		
		vrHudInfo = ECBVRHudInfo.new(this)
		
		hudShowCamera = ECBAHudShowCamera.new(this, vrHudInfo)
		
		attachWristMenuRight = ECBVRAttachWristPanel.new(this, getVRRightHand(), true)
		attachWristMenuLeft = ECBVRAttachWristPanel.new(this, getVRLeftHand(), false)
		
		resetCalibrationWatcher = ECBAResetCalibrationWatcher.new(this)
		
		sceneObject = ECBSceneObject.new(this)
		sceneObject.editPanelNoBehaviors.setValue(true)
		
		selectable = ECBSelectable.new(this)
		
		showInteractHandles = ECBShowInteractHandles.new(this, selectable)
		showInteractHandles.getHandleClasses().addElementClassName("InteractHandleMoveX")
		showInteractHandles.getHandleClasses().addElementClassName("InteractHandleMoveY")
		showInteractHandles.getHandleClasses().addElementClassName("InteractHandleMoveZ")
		showInteractHandles.getHandleClasses().addElementClassName("InteractHandleMoveXNeg")
		showInteractHandles.getHandleClasses().addElementClassName("InteractHandleMoveYNeg")
		showInteractHandles.getHandleClasses().addElementClassName("InteractHandleMoveZNeg")
		showInteractHandles.getHandleClasses().addElementClassName("InteractHandleRotateX")
		showInteractHandles.getHandleClasses().addElementClassName("InteractHandleRotateY")
		showInteractHandles.getHandleClasses().addElementClassName("InteractHandleRotateZ")
		
		showInteractionBubble = ECBShowInteractionBubble.new(this)
		showInteractionBubble.buttons.add("ghost")
	end
	
	/** Create element. */
	protected func Element createElement()
		return MoCapActor.new(this)
	end
end
