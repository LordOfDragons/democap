/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap

pin Democap.Characters
pin Democap.Behaviors
pin Democap.Elements

pin Dragengine.Networking
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * DEMoCap Network server.
 */
class DNServer implements ServerListener
	/** Actor ready listener. */
	class ActorReadyListener extends WorldSpawnCharacter.DefaultListener
		var DNServer pServer
		
		func new(DNServer server)
			pServer = server
		end
		
		func void characterChanged(WorldSpawnCharacter wsc)
			pServer.updateCaptureBoneLayout()
		end
		
		func void actorReady(WorldSpawnCharacter wsc)
			pServer.updateCaptureBoneLayout()
		end
		
		func void actorNotReady(WorldSpawnCharacter wsc)
			pServer.updateCaptureBoneLayout()
		end
		
		func void gameWorldChanged(WorldSpawnCharacter wsc)
			pServer.updateCaptureBoneLayout()
		end
	end
	
	/** Frame updater. */
	class UpdateStates extends FrameUpdateListener
		var DNServer pServer
		
		func new(DNServer server)
			pServer = server
		end
		
		func void frameUpdate(float elapsed)
			pServer.update()
		end
	end
	
	/** Listener. */
	public interface Listener
		func void connectionAdded(DNServer server, DNConnection connection)
		func void connectionRemoved(DNServer server, DNConnection connection)
		func void allConnectionsRemoved(DNServer server)
		func void connectionChanged(DNServer server, DNConnection connection)
	end
	
	/** Default listener. */
	class DefaultListener implements Listener
		func new()
		end
		
		func void connectionAdded(DNServer server, DNConnection connection)
		end
		
		func void connectionRemoved(DNServer server, DNConnection connection)
		end
		
		func void allConnectionsRemoved(DNServer server)
		end
		
		func void connectionChanged(DNServer server, DNConnection connection)
		end
	end
	
	
	var Server pServer
	var Array pConnections
	var int pNextCaptureBoneLayoutRevision
	var DNCaptureBoneLayout pCaptureBoneLayout
	var DNCaptureFrame pCaptureFrame
	var DNStateRecordPlayback pStateRecordPlayback
	var ActorReadyListener pActorReadyListener
	var UpdateStates pUpdateStates
	var Array pListeners
	
	
	/** Create server. */
	func new()
		pConnections = Array.new()
		pCaptureBoneLayout = DNCaptureBoneLayout.new(nextCaptureBoneLayoutRevision())
		pCaptureFrame = DNCaptureFrame.new(pCaptureBoneLayout)
		pStateRecordPlayback = DNStateRecordPlayback.new()
		pListeners = Array.new()
	end
	
	/** Dispose. */
	func void dispose()
		stopListening()
		pListeners.removeAll()
	end
	
	
	/** Server is listening. */
	func bool isListening()
		return pServer != null
	end
	
	/** Start listening. */
	func void listenOn(String address)
		if pServer != null
			return
		end
		
		pServer = Server.new()
		pServer.setServerListener(this)
		
		if not pServer.listenOn(address)
			pServer.setServerListener(null)
			pServer = null
			return
		end
		
		pActorReadyListener = ActorReadyListener.new(this)
		GameApp.getGameApp().getWorldSpawnCharacter().addListener(pActorReadyListener)
		
		updateCaptureBoneLayout()
		
		pUpdateStates = UpdateStates.new(this)
	end
	
	/** Stop listening. */
	func void stopListening()
		if pServer == null
			return
		end
		
		if pActorReadyListener != null
			GameApp.getGameApp().getWorldSpawnCharacter().removeListener(pActorReadyListener)
			pActorReadyListener = null
		end
		
		if pUpdateStates != null
			pUpdateStates.giveUp()
			pUpdateStates = null
		end
		
		pServer.setServerListener(null)
		pServer.stopListening()
		pServer = null
		
		pConnections.removeAll()
		
		pListeners.forEach(block Listener each
			each.allConnectionsRemoved(this)
		end)
	end
	
	
	/** Visit connections with block. */
	func void forEachConnection(Block ablock)
		pConnections.forEach(ablock)
	end
	
	/** Remove connection. */
	func void removeConnection(DNConnection connection)
		if not pConnections.has(connection)
			return
		end
		
		pConnections.remove(connection)
		
		pListeners.forEach(block Listener each
			each.connectionRemoved(this, connection)
		end)
	end
	
	
	/** Add listener. */
	func void addListener(Listener listener)
		pListeners.add(listener)
	end
	
	/** Remove listener. */
	func void removeListener(Listener listener)
		pListeners.remove(listener)
	end
	
	/** Notify listeners connection changed. */
	func void notifyConnectionChanged(DNConnection connection)
		pListeners.forEach(block Listener each
			each.connectionChanged(this, connection)
		end)
	end
	
	
	/** Capture bone layout. */
	func DNCaptureBoneLayout getCaptureBoneLayout()
		return pCaptureBoneLayout
	end
	
	/** Capture frame. */
	func DNCaptureFrame getCaptureFrame()
		return pCaptureFrame
	end
	
	/** State record/playback. */
	func DNStateRecordPlayback getStateRecordPlayback()
		return pStateRecordPlayback
	end
	
	/** Update. */
	func void update()
		if pServer == null
			return
		end
		
		pStateRecordPlayback.update()
	end
	
	
	/** Update capture bone layout from active actor if ready otherwise set empty. */
	func void updateCaptureBoneLayout()
		if pServer == null
			return
		end
		
		pCaptureBoneLayout = DNCaptureBoneLayout.new(nextCaptureBoneLayoutRevision())
		
		var MoCapActor actor = GameApp.getGameApp().getWorldSpawnCharacter().getActor()
		if actor != null
			pCaptureBoneLayout.initCaptureBoneLayout(actor)
		end
		pCaptureBoneLayout.updateMessageData()
		
		pCaptureFrame = DNCaptureFrame.new(pCaptureBoneLayout)
		if actor != null
			pCaptureFrame.update(actor)
		end
		pCaptureFrame.updateMessageData()
		
		pConnections.forEach(block DNConnection each
			each.sendCaptureBoneLayout(pCaptureBoneLayout)
			each.sendCaptureFrame(pCaptureFrame)
		end)
	end
	
	/** Update capture frame. */
	func void updateCaptureFrame()
		if pServer == null
			return
		end
		
		var MoCapActor actor = GameApp.getGameApp().getWorldSpawnCharacter().getActor()
		if actor == null
			return
		end
		
		pCaptureFrame.update(actor)
		pCaptureFrame.updateMessageData()
		
		pConnections.forEach(block DNConnection each
			each.sendCaptureFrame(pCaptureFrame)
		end)
	end
	
	
	/** Client connected. */
	func void clientConnected(Connection connection)
		var DNConnection dncon = DNConnection.new(this, connection)
		pConnections.add(dncon)
		
		pListeners.forEach(block Listener each
			each.connectionAdded(this, dncon)
		end)
	end
	
	
	protected func int nextCaptureBoneLayoutRevision()
		var int revision = pNextCaptureBoneLayoutRevision
		pNextCaptureBoneLayoutRevision = (pNextCaptureBoneLayoutRevision + 1) % 0hff
		return revision
	end
end
