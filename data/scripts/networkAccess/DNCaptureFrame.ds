/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2022, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap

pin Democap.Characters
pin Democap.Behaviors
pin Democap.Elements

pin Dragengine.Networking
pin Dragengine.Scenery


/**
 * DEMoCap Networking capture frame.
 */
public class DNCaptureFrame
	public class Bone
		private var Vector pPosition
		private var Quaternion pOrientation
		
		
		public func new()
		end
		
		
		/** Position of the bone relative to local space. */
		public func Vector getPosition()
			return pPosition
		end
		
		public func void setPosition(Vector position)
			pPosition = position
		end
		
		/** Orientation of the bone relative to local space. */
		public func Quaternion getOrientation()
			return pOrientation
		end
		
		public func void setOrientation(Quaternion orientation)
			pOrientation = orientation
		end
	end
	
	
	private var DNCaptureBoneLayout pLayout
	private var Vector pPosition
	private var Quaternion pOrientation
	private var float pScale
	private var Array pBones
	private var MemoryFile pMessageData
	
	
	/** Create capture frame. */
	public func new(DNCaptureBoneLayout layout)
		pLayout = layout
		pScale = 1
		
		var int i, count = layout.getBoneCount()
		pBones = Array.new(count)
		for i = 0 to count
			pBones.add(Bone.new())
		end
		
		pMessageData = MemoryFile.new("")
	end
	
	
	/**
	 * Position of actor. This is either the actor position relative to the scene
	 * or the selected capture object.
	 */
	public func Vector getPosition()
		return pPosition
	end
	
	public func void setPosition(Vector position)
		pPosition = position
	end
	
	/**
	 * Orientation of actor. This is either the actor position relative to the scene
	 * or the selected capture object.
	 */
	public func Quaternion getOrientation()
		return pOrientation
	end
	
	public func void setOrientation(Quaternion orientation)
		pOrientation = orientation
	end
	
	/** Scale of actor. */
	public func float getScale()
		return pScale
	end
	
	public func void setScale(float scale)
		pScale = scale
	end
	
	/**
	 * BoneCount bone states as described below. BoneCount matches BoneCount from
	 * the most recent Actor Capture Bone Layout message. Array of DNCaptureFrame.Bone.
	 */
	public func Bone getBoneAt(int index)
		return pBones.getAt(index) cast Bone
	end
	
	public func void forEachBone(Block ablock)
		pBones.forEach(ablock)
	end
	
	
	/** Update from motion capture actor. */
	public func void update(MoCapActor actor)
		var Component component = actor.getComponent().getComponent()
		var int boneIndex
		var Bone bone
		
		pPosition = actor.getPosition().toVector()
		pOrientation = actor.getOrientation()
		pScale = actor.getScaling().getY() // uniform scaling only
		
		pLayout.forEachBone(block int index, DNCaptureBoneLayout.Bone each
			bone = pBones.getAt(index) cast Bone
			boneIndex = each.getIndex()
			
			bone.setPosition(component.boneGetPosition(boneIndex))
			bone.setOrientation(component.boneGetRotation(boneIndex))
		end)
	end
	
	
	/** Message data. */
	public func MemoryFile getMessageData()
		return pMessageData
	end
	
	/** Update message data. */
	public func void updateMessageData()
		var FileWriter writer = pMessageData.getWriter(false)
		pPosition.writeToFile(writer)
		pOrientation.writeToFile(writer)
		writer.writeFloat(pScale)
		pBones.forEach(block Bone each
			each.getPosition().writeToFile(writer)
			each.getOrientation().writeToFile(writer)
		end)
	end
end
