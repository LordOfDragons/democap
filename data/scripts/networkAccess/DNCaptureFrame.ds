/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2022, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap

pin Democap.Characters
pin Democap.Behaviors
pin Democap.Elements

pin Dragengine.Networking
pin Dragengine.Scenery


/**
 * DEMoCap Networking capture frame.
 */
class DNCaptureFrame
	class Bone
		public var Vector position
		public var Quaternion orientation
		
		func new()
		end
	end
	
	class VertexPositionSet
		public var float weight
		
		func new()
		end
	end
	
	
	var DNCaptureBoneLayout pLayout
	var Vector pPosition
	var Quaternion pOrientation
	var float pScale
	var Array pBones
	var Array pVPS
	var MemoryFile pMessageData
	var MemoryFile pMessageDataVPS
	
	
	/** Create capture frame. */
	func new(DNCaptureBoneLayout layout)
		var Quaternion zeroOrientation = Quaternion.new()
		var Vector zeroPosition = Vector.new()
		
		pLayout = layout
		pPosition = zeroPosition
		pOrientation = zeroOrientation
		pScale = 1
		
		var int i, count = layout.getBoneCount()
		var Bone bone
		
		pBones = Array.new(count)
		for i = 0 to count
			bone = Bone.new()
			bone.position = zeroPosition
			bone.orientation = zeroOrientation
			pBones.add(bone)
		end
		
		count = layout.getVPSCount()
		var VertexPositionSet vps
		
		pVPS = Array.new(count)
		for i = 0 to count
			vps = VertexPositionSet.new()
			vps.weight = 0
			pVPS.add(vps)
		end
		
		pMessageData = MemoryFile.new("")
		pMessageDataVPS = MemoryFile.new("")
	end
	
	
	/**
	 * Position of actor. This is either the actor position relative to the scene
	 * or the selected capture object.
	 */
	func Vector getPosition()
		return pPosition
	end
	
	func void setPosition(Vector position)
		pPosition = position
	end
	
	/**
	 * Orientation of actor. This is either the actor position relative to the scene
	 * or the selected capture object.
	 */
	func Quaternion getOrientation()
		return pOrientation
	end
	
	func void setOrientation(Quaternion orientation)
		pOrientation = orientation
	end
	
	/** Scale of actor. */
	func float getScale()
		return pScale
	end
	
	func void setScale(float scale)
		pScale = scale
	end
	
	/**
	 * BoneCount bone states as described below. BoneCount matches BoneCount from
	 * the most recent Actor Capture Bone Layout message. Array of DNCaptureFrame.Bone.
	 */
	func Bone getBoneAt(int index)
		return pBones.getAt(index) cast Bone
	end
	
	func void forEachBone(Block ablock)
		pBones.forEach(ablock)
	end
	
	/**
	 * VertexPositionSetCount vertex position set states as described below.
	 * VertexPositionSetCount matches VertexPositionSetCount from the most recent Actor
	 * Capture Bone Layout message. Array of DNCaptureFrame.VertexPositionSet.
	 */
	func VertexPositionSet getVPSAt(int index)
		return pVPS.getAt(index) cast VertexPositionSet
	end
	
	func void forEachVPS(Block ablock)
		pVPS.forEach(ablock)
	end
	
	
	/** Update from motion capture actor. */
	func void update(MoCapActor actor)
		var Component component = actor.getComponent().getComponent()
		if component == null
			return
		end
		
		pPosition = actor.getPosition().toVector()
		pOrientation = actor.getOrientation()
		pScale = actor.getScaling().getY() // uniform scaling only
		
		//var Matrix matrix
		
		pBones.forEach(block int index, Bone bone
			bone.position = component.boneGetPosition(index)
			bone.orientation = component.boneGetRotation(index)
			
			/*
			matrix = component.boneGetMatrix(index).normalize()
			bone.position = matrix.getPosition()
			bone.orientation = matrix.toQuaternion()
			*/
		end)
		
		pVPS.forEach(block int index, VertexPositionSet vps
			vps.weight = component.vertexPositionSetGetWeightAt(index)
		end)
	end
	
	
	/** Message data. */
	func MemoryFile getMessageData()
		return pMessageData
	end
	
	func MemoryFile getMessageDataVPS()
		return pMessageDataVPS
	end
	
	/** Update message data. */
	func void updateMessageData()
		var FileWriter writer = pMessageData.getWriter(false)
		
		writer.writeByte(pLayout.getRevision())
		
		pPosition.writeToFile(writer)
		pOrientation.writeToFile(writer)
		writer.writeFloat(pScale)
		
		pBones.forEach(block Bone each
			each.position.writeToFile(writer)
			each.orientation.writeToFile(writer)
		end)
		
		// vps specific
		writer = pMessageDataVPS.getWriter(false)
		writer.writeData(pMessageData.getReader())
		
		pVPS.forEach(block VertexPositionSet each
			writer.writeFloat(each.weight)
		end)
	end
end
