/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2022, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap

pin Democap.Characters
pin Democap.Behaviors
pin Democap.Elements

pin Dragengine.Networking
pin Dragengine.Scenery


/**
 * DEMoCap Networking capture bone layout.
 */
public class DNCaptureBoneLayout
	class Bone
		public var int index
		public var String name
		public var int parent
		public var Vector position
		public var Quaternion orientation
		
		public func new()
		end
	end
	
	
	private var int pRevision
	private var Array pBones
	private var MemoryFile pMessageData
	
	
	/** Create capture bone layout. */
	public func new(int revision)
		pRevision = revision
		pBones = Array.new()
		pMessageData = MemoryFile.new("")
	end
	
	
	/** Revision. */
	public func int getRevision()
		return pRevision
	end
	
	
	/** Bones. */
	public func int getBoneCount()
		return pBones.getCount()
	end
	
	public func Bone getBoneAt(int index)
		return pBones.getAt(index) cast Bone
	end
	
	public func void addBone(Bone bone)
		pBones.add(bone)
	end
	
	public func void removeAllBones()
		pBones.removeAll()
	end
	
	public func void forEachBone(Block ablock)
		pBones.forEach(ablock)
	end
	
	
	/** Init from motion capture actor. */
	public func void initCaptureBoneLayout(MoCapActor actor)
		pBones.removeAll()
		
		if actor.recordAnimation == null
			return
		end
		
		var Component component = actor.getComponent().getComponent()
		if component == null
			return
		end
		
		var Rig rig = component.getRig()
		if rig == null
			return
		end
		
		var int i, boneCount = rig.getBoneCount()
		var Bone bone
		
		for i = 0 to boneCount
			bone = Bone.new()
			bone.name = rig.boneGetName(i)
			bone.parent = rig.boneGetParent(i)
			bone.position = rig.boneGetPosition(i)
			bone.orientation = rig.boneGetOrientation(i)
			pBones.add(bone)
		end
	end
	
	/** Message data. */
	public func MemoryFile getMessageData()
		return pMessageData
	end
	
	/** Update message data. */
	public func void updateMessageData()
		var FileWriter writer = pMessageData.getWriter(false)
		
		writer.writeByte(pRevision)
		writer.writeUShort(pBones.getCount())
		
		pBones.forEach(block Bone each
			writer.writeString8(each.name)
			writer.writeShort(each.parent)
			each.position.writeToFile(writer)
			each.orientation.writeToFile(writer)
		end)
	end
end
