/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2022, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap

pin Democap.Characters
pin Democap.Behaviors
pin Democap.Elements

pin Dragengine.Networking
pin Dragengine.Scenery


/**
 * DEMoCap Networking capture bone layout.
 */
class DNCaptureBoneLayout
	class Bone
		public var int index
		public var String name
		public var int parent
		public var Vector position
		public var Quaternion orientation
		
		func new()
		end
	end
	
	class VertexPositionSet
		public var int index
		public var String name
		
		func new()
		end
	end
	
	
	var int pRevision
	var Array pBones
	var Array pVPS
	var MemoryFile pMessageData
	var MemoryFile pMessageDataVPS
	
	
	/** Create capture bone layout. */
	func new(int revision)
		pRevision = revision
		pBones = Array.new()
		pVPS = Array.new()
		pMessageData = MemoryFile.new("")
		pMessageDataVPS = MemoryFile.new("")
	end
	
	
	/** Revision. */
	func int getRevision()
		return pRevision
	end
	
	
	/** Bones. */
	func int getBoneCount()
		return pBones.getCount()
	end
	
	func Bone getBoneAt(int index)
		return pBones.getAt(index) cast Bone
	end
	
	func void addBone(Bone bone)
		pBones.add(bone)
	end
	
	func void removeAllBones()
		pBones.removeAll()
	end
	
	func void forEachBone(Block ablock)
		pBones.forEach(ablock)
	end
	
	
	/** Vertex position sets. */
	func int getVPSCount()
		return pVPS.getCount()
	end
	
	func VertexPositionSet getVPSAt(int index)
		return pVPS.getAt(index) cast VertexPositionSet
	end
	
	func void addVPSSet(VertexPositionSet vps)
		pVPS.add(vps)
	end
	
	func void removeAllVPS()
		pVPS.removeAll()
	end
	
	func void forEachVPS(Block ablock)
		pVPS.forEach(ablock)
	end
	
	
	/** Init from motion capture actor. */
	func void initCaptureBoneLayout(MoCapActor actor)
		pBones.removeAll()
		
		if actor.recordAnimation == null
			return
		end
		
		var Component component = actor.getComponent().getComponent()
		if component == null
			return
		end
		
		var Rig rig = component.getRig()
		if rig == null
			return
		end
		
		var int i, boneCount = rig.getBoneCount()
		var Bone bone
		
		for i = 0 to boneCount
			bone = Bone.new()
			bone.index = i
			bone.name = rig.boneGetName(i)
			bone.parent = rig.boneGetParent(i)
			bone.position = rig.boneGetPosition(i)
			bone.orientation = rig.boneGetOrientation(i)
			pBones.add(bone)
		end
		
		var int vpsCount = component.getVertexPositionSetCount()
		var VertexPositionSet vps
		
		for i = 0 to vpsCount
			vps = VertexPositionSet.new()
			vps.index = i
			vps.name = component.vertexPositionSetGetNameAt(i)
			pVPS.add(vps)
		end
	end
	
	/** Message data. */
	func MemoryFile getMessageData()
		return pMessageData
	end
	
	func MemoryFile getMessageDataVPS()
		return pMessageDataVPS
	end
	
	/** Update message data. */
	func void updateMessageData()
		var FileWriter writer = pMessageData.getWriter(false)
		
		writer.writeByte(pRevision)
		writer.writeUShort(pBones.getCount())
		
		pBones.forEach(block Bone each
			writer.writeString8(each.name)
			writer.writeShort(each.parent)
			each.position.writeToFile(writer)
			each.orientation.writeToFile(writer)
		end)
		
		// vps specific
		writer = pMessageDataVPS.getWriter(false)
		writer.writeData(pMessageData.getReader())
		
		writer.writeUShort(pVPS.getCount())
		
		pVPS.forEach(block VertexPositionSet each
			writer.writeString8(each.name)
		end)
	end
end
