/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.MotionTransferSystem

pin Democap.Actors
pin Democap.Behaviors
pin Democap.Characters

pin Dragengine.Animators
pin Dragengine.LoadSave
pin Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.XML


/**
 * Motion transfer affecting fingers.
 * 
 * Supports different methods of motion transfer to fingers:
 * - Fully articulated fingers (TODO)
 * - Individual finger bending
 * - Uniform finger bending (TODO)
 * 
 * This is the most simple motion transfer.
 */
class MotionTransferFingers extends DefaultMotionTransfer
	/** Factory. */
	class Factory implements MotionTransferFactory
		func new()
		end
		
		func String factoryID()
			return "fingers"
		end
		
		func MotionTransfer createMotionTransfer()
			return MotionTransferFingers.new(factoryID())
		end
		
		func String displayName()
			return "@UI.Fingers"
		end
	end
	
	
	
	var String pThumbTipBone
	var String pThumbBaseBone
	var String pIndexTipBone
	var String pIndexBaseBone
	var String pMiddleTipBone
	var String pMiddleBaseBone
	var String pRingTipBone
	var String pRingBaseBone
	var String pPinkyTipBone
	var String pPinkyBaseBone
	var String pTracker
	var CharacterTrackerSlot pTrackerSlot
	var float pBendAngle
	var String pMoveHandsClosed
	
	var ADController pADControllerThumb
	var ADController pADControllerIndex
	var ADController pADControllerMiddle
	var ADController pADControllerRing
	var ADController pADControllerPinky
	
	var ADRule pADRuleThumb
	var ADRule pADRuleIndex
	var ADRule pADRuleMiddle
	var ADRule pADRuleRing
	var ADRule pADRulePinky
	
	var Array pCalibrateBonesThumb
	var Array pCalibrateBonesIndex
	var Array pCalibrateBonesMiddle
	var Array pCalibrateBonesRing
	var Array pCalibrateBonesPinky
	
	
	
	/** Create motion transfer. */
	func new(String factoryID) super(factoryID)
		pThumbTipBone = ""
		pThumbBaseBone = ""
		pIndexTipBone = ""
		pIndexBaseBone = ""
		pMiddleTipBone = ""
		pMiddleBaseBone = ""
		pRingTipBone = ""
		pRingBaseBone = ""
		pPinkyTipBone = ""
		pPinkyBaseBone = ""
		pTracker = ""
		pBendAngle = 85
		pMoveHandsClosed = ""
		pCalibrateBonesThumb = Array.new()
		pCalibrateBonesIndex = Array.new()
		pCalibrateBonesMiddle = Array.new()
		pCalibrateBonesRing = Array.new()
		pCalibrateBonesPinky = Array.new()
	end
	
	/** Create copy of motion transfer. */
	func new(MotionTransferFingers transfer) super(transfer)
		pThumbTipBone = transfer.pThumbTipBone
		pThumbBaseBone = transfer.pThumbBaseBone
		pIndexTipBone = transfer.pIndexTipBone
		pIndexBaseBone = transfer.pIndexBaseBone
		pMiddleTipBone = transfer.pMiddleTipBone
		pMiddleBaseBone = transfer.pMiddleBaseBone
		pRingTipBone = transfer.pRingTipBone
		pRingBaseBone = transfer.pRingBaseBone
		pPinkyTipBone = transfer.pPinkyTipBone
		pPinkyBaseBone = transfer.pPinkyBaseBone
		pTracker = transfer.pTracker
		pBendAngle = transfer.pBendAngle
		pMoveHandsClosed = transfer.pMoveHandsClosed
		pCalibrateBonesThumb = Array.new(transfer.pCalibrateBonesThumb)
		pCalibrateBonesIndex = Array.new(transfer.pCalibrateBonesIndex)
		pCalibrateBonesMiddle = Array.new(transfer.pCalibrateBonesMiddle)
		pCalibrateBonesRing = Array.new(transfer.pCalibrateBonesRing)
		pCalibrateBonesPinky = Array.new(transfer.pCalibrateBonesPinky)
	end
	
	
	
	/** Tip thumb bone name. */
	func String getThumbTipBone()
		return pThumbTipBone
	end
	
	/** Set tip thumb bone name. */
	func void setThumbTipBone(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pThumbTipBone = bone
	end
	
	/** Base thumb bone name. */
	func String getThumbBaseBone()
		return pThumbBaseBone
	end
	
	/** Set basebone name. */
	func void setThumbBaseBone(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pThumbBaseBone = bone
	end
	
	/** Tip index bone name. */
	func String getIndexTipBone()
		return pIndexTipBone
	end
	
	/** Set tip index bone name. */
	func void setIndexTipBone(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pIndexTipBone = bone
	end
	
	/** Base index bone name. */
	func String getIndexBaseBone()
		return pIndexBaseBone
	end
	
	/** Set base index bone name. */
	func void setIndexBaseBone(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pIndexBaseBone = bone
	end
	
	/** Tip Middle bone name. */
	func String getMiddleTipBone()
		return pMiddleTipBone
	end
	
	/** Set tip middle bone name. */
	func void setMiddleTipBone(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pMiddleTipBone = bone
	end
	
	/** Middle base bone name. */
	func String getMiddleBaseBone()
		return pMiddleBaseBone
	end
	
	/** Set middle base bone name. */
	func void setMiddleBaseBone(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pMiddleBaseBone = bone
	end
	
	/** Tip ring bone name. */
	func String getRingTipBone()
		return pRingTipBone
	end
	
	/** Set tip ring bone name. */
	func void setRingTipBone(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pRingTipBone = bone
	end
	
	/** Ring base bone name. */
	func String getRingBaseBone()
		return pRingBaseBone
	end
	
	/** Set ring base bone name. */
	func void setRingBaseBone(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pRingBaseBone = bone
	end
	
	/** Tip pinky bone name. */
	func String getPinkyTipBone()
		return pPinkyTipBone
	end
	
	/** Set tip pinky bone name. */
	func void setPinkyTipBone(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pPinkyTipBone = bone
	end
	
	/** Pinky base bone name. */
	func String getPinkyBaseBone()
		return pPinkyBaseBone
	end
	
	/** Set pinky base bone name. */
	func void setPinkyBaseBone(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pPinkyBaseBone = bone
	end
	
	/** Tracker slot name. */
	func String getTracker()
		return pTracker
	end
	
	/** Set tracker slot name. */
	func void setTracker(String tracker)
		if tracker == null
			throw ENullPointer.new("tracker")
		end
		pTracker = tracker
	end
	
	/** Tracker slot or null. */
	func CharacterTrackerSlot getTrackerSlot()
		return pTrackerSlot
	end
	
	/** Finger bending angle. Applied to each individual finger segment. */
	func float getBendAngle()
		return pBendAngle
	end
	
	/** Set finger bending angle. Applied to each individual finger segment. */
	func void setBendAngle(float angle)
		pBendAngle = angle
	end
	
	/** Hands closed animation move or empty string to use none. */
	func String getMoveHandsClosed()
		return pMoveHandsClosed
	end
	
	/** Set hands closed animation move or empty string to use none. */
	func void setMoveHandsClosed(String move)
		if move == null
			throw ENullPointer.new("move")
		end
		pMoveHandsClosed = move
	end
	
	
	
	/** Thumb animator definition rule or null. Can be bone transformator or animation. */
	func ADRule getADRuleThumb()
		return pADRuleThumb
	end
	
	/** Index animator definition rule or null. Can be bone transformator or animation. */
	func ADRule getADRuleIndex()
		return pADRuleIndex
	end
	
	/** Middle animator definition rule or null. Can be bone transformator or animation. */
	func ADRule getADRuleMiddle()
		return pADRuleMiddle
	end
	
	/** Ring animator definition rule or null. Can be bone transformator or animation. */
	func ADRule getADRuleRing()
		return pADRuleRing
	end
	
	/** Pinky animator definition rule or null. Can be bone transformator or animation. */
	func ADRule getADRulePinky()
		return pADRulePinky
	end
	
	
	
	/** Init element clas. */
	func void initElementClass(CharacterConfiguration config, BaseVRActorClass eclass, ModifiedRig modifyRig)
		pADControllerThumb = null
		pADControllerIndex = null
		pADControllerMiddle = null
		pADControllerRing = null
		pADControllerPinky = null
		
		pADRuleThumb = null
		pADRuleIndex = null
		pADRuleMiddle = null
		pADRuleRing = null
		pADRulePinky = null
		
		if pTrackerSlot == null
			return
		end
		
		// add behavior
		var ECBMotionTransferFingers behavior = ECBMotionTransferFingers.new(eclass, this)
		
		// add controller, link and rule for each defined finger
		var ECBRecordAnimation recordAnimation = ECBRecordAnimation.getBehaviorIn(eclass)
		var AnimatorDefinition adef = config.getAnimatorDefinition()
		
		if pCalibrateBonesThumb.getCount() > 0
			pADControllerThumb = addADController(adef, behavior.getControllerNameThumb())
			pADRuleThumb = addADRule(adef, addADLink(adef, pADControllerThumb), pCalibrateBonesThumb)
			if recordAnimation != null
				recordAnimation.addBones(pCalibrateBonesThumb)
			end
		end
		
		if pCalibrateBonesIndex.getCount() > 0
			pADControllerIndex = addADController(adef, behavior.getControllerNameIndex())
			pADRuleIndex = addADRule(adef, addADLink(adef, pADControllerIndex), pCalibrateBonesIndex)
			if recordAnimation != null
				recordAnimation.addBones(pCalibrateBonesIndex)
			end
		end
		
		if pCalibrateBonesMiddle.getCount() > 0
			pADControllerMiddle = addADController(adef, behavior.getControllerNameMiddle())
			pADRuleMiddle = addADRule(adef, addADLink(adef, pADControllerMiddle), pCalibrateBonesMiddle)
			if recordAnimation != null
				recordAnimation.addBones(pCalibrateBonesMiddle)
			end
		end
		
		if pCalibrateBonesRing.getCount() > 0
			pADControllerRing = addADController(adef, behavior.getControllerNameRing())
			pADRuleRing = addADRule(adef, addADLink(adef, pADControllerRing), pCalibrateBonesRing)
			if recordAnimation != null
				recordAnimation.addBones(pCalibrateBonesRing)
			end
		end
		
		if pCalibrateBonesPinky.getCount() > 0
			pADControllerPinky = addADController(adef, behavior.getControllerNamePinky())
			pADRulePinky = addADRule(adef, addADLink(adef, pADControllerPinky), pCalibrateBonesPinky)
			if recordAnimation != null
				recordAnimation.addBones(pCalibrateBonesPinky)
			end
		end
	end
	
	/** Add animator definition controller. */
	protected func ADController addADController(AnimatorDefinition adef, String name)
		var ADController controller = ADController.new()
		controller.setName(name)
		controller.setMinimum(-1)
		controller.setMaximum(1)
		controller.setClamp(true)
		adef.addController(controller)
		return controller
	end
	
	/** Add animator definition link. */
	protected func ADLink addADLink(AnimatorDefinition adef, ADController controller)
		var ADLink link = ADLink.new()
		link.setController(controller)
		link.setCurve(CurveBezier.newDefaultLinear()) // TODO set curve from calibrated finger bending
		adef.addLink(link)
		return link
	end
	
	/** Add animator rule. */
	protected func ADRule addADRule(AnimatorDefinition adef, ADLink link, Array bones)
		var ADRule adrule
		
		if pMoveHandsClosed.empty()
			var ADRuleBoneTransformator rule = ADRuleBoneTransformator.new()
			rule.setName(link.getController().getName())
			rule.setCoordinateFrame(ARBoneTransformatorCFrame.local)
			rule.setMinimumRotation(Vector.new(0, 0, 0))
			rule.setMaximumRotation(Vector.new(-pBendAngle, 0, 0))
			rule.addTargetLink(ADRuleTargetLink.new(ARBoneTransformatorTarget.rotation, link))
			adrule = rule
			
		else
			var ADRuleAnimation rule = ADRuleAnimation.new()
			rule.setName(link.getController().getName())
			rule.setMoveName(pMoveHandsClosed)
			rule.addTargetLink(ADRuleTargetLink.new(ARAnimationTarget.blendFactor, link))
			adrule = rule
		end
		
		bones.forEach(block String each
			adrule.addBone(each)
		end)
		adef.addRule(adrule)
		return adrule
	end
	
	/** Reset calibration. */
	func void resetCalibration()
		pTrackerSlot = null
		
		pCalibrateBonesThumb.removeAll()
		pCalibrateBonesIndex.removeAll()
		pCalibrateBonesMiddle.removeAll()
		pCalibrateBonesRing.removeAll()
		pCalibrateBonesPinky.removeAll()
		
		pADControllerThumb = null
		pADControllerIndex = null
		pADControllerMiddle = null
		pADControllerRing = null
		pADControllerPinky = null
		
		pADRuleThumb = null
		pADRuleIndex = null
		pADRuleMiddle = null
		pADRuleRing = null
		pADRulePinky = null
	end
	
	/** Calibrate character. */
	func void calibrate(CharacterConfiguration config, ActorProfile actorProfile, \
	BaseVRActor actor, Component component)
		var Rig rig = component.getRig()
		findBoneChain(rig, pThumbTipBone, pThumbBaseBone, pCalibrateBonesThumb)
		findBoneChain(rig, pIndexTipBone, pIndexBaseBone, pCalibrateBonesIndex)
		findBoneChain(rig, pMiddleTipBone, pMiddleBaseBone, pCalibrateBonesMiddle)
		findBoneChain(rig, pRingTipBone, pRingBaseBone, pCalibrateBonesRing)
		findBoneChain(rig, pPinkyTipBone, pPinkyBaseBone, pCalibrateBonesPinky)
		
		pTrackerSlot = config.getTrackerSlots().getNamed(pTracker)
	end
	
	/** Create copy of motion transfer. */
	func MotionTransfer createCopy()
		return MotionTransferFingers.new(this)
	end
	
	/** Load from XML. */
	func void load(BaseXmlLoader loader, EasyXMLElement root)
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("name")
				setName(element.getFirstCData())
				
			elif tagName.equals("thumbTipBone")
				setThumbTipBone(element.getFirstCData())
				
			elif tagName.equals("thumbBaseBone")
				setThumbBaseBone(element.getFirstCData())
				
			elif tagName.equals("indexTipBone")
				setIndexTipBone(element.getFirstCData())
				
			elif tagName.equals("indexBaseBone")
				setIndexBaseBone(element.getFirstCData())
				
			elif tagName.equals("middleTipBone")
				setMiddleTipBone(element.getFirstCData())
				
			elif tagName.equals("middleBaseBone")
				setMiddleBaseBone(element.getFirstCData())
				
			elif tagName.equals("ringTipBone")
				setRingTipBone(element.getFirstCData())
				
			elif tagName.equals("ringBaseBone")
				setRingBaseBone(element.getFirstCData())
				
			elif tagName.equals("pinkyTipBone")
				setPinkyTipBone(element.getFirstCData())
				
			elif tagName.equals("pinkyBaseBone")
				setPinkyBaseBone(element.getFirstCData())
				
			elif tagName.equals("tracker")
				pTracker = element.getFirstCData()
				
			elif tagName.equals("bendAngle")
				pBendAngle = element.getFirstCDataFloat()
				
			elif tagName.equals("moveHandsClosed")
				pMoveHandsClosed = element.getFirstCData()
				
			elif tagName.equals("calibrated")
				loadCalibrated(loader, element)
			end
		end)
	end
	
	protected func void loadCalibrated(BaseXmlLoader loader, EasyXMLElement root)
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("thumbBone")
				pCalibrateBonesThumb.add(element.getFirstCData())
				
			elif tagName.equals("indexBone")
				pCalibrateBonesIndex.add(element.getFirstCData())
				
			elif tagName.equals("middleBone")
				pCalibrateBonesMiddle.add(element.getFirstCData())
				
			elif tagName.equals("ringBone")
				pCalibrateBonesRing.add(element.getFirstCData())
				
			elif tagName.equals("pinkyBone")
				pCalibrateBonesPinky.add(element.getFirstCData())
			end
		end)
	end
	
	/** Post load initialize. */
	func void postLoadInit(CharacterConfiguration config)
		pTrackerSlot = config.getTrackerSlots().getNamed(pTracker)
	end
	
	/** Save to XML. */
	func void save(BaseXmlLoader loader, EasyXMLElement tag, bool calibrated)
		tag.addDataTag("name", getName())
		tag.addDataTag("thumbTipBone", pThumbTipBone)
		tag.addDataTag("thumbBaseBone", pThumbBaseBone)
		tag.addDataTag("indexTipBone", pIndexTipBone)
		tag.addDataTag("indexBaseBone", pIndexBaseBone)
		tag.addDataTag("middleTipBone", pMiddleTipBone)
		tag.addDataTag("middleBaseBone", pMiddleBaseBone)
		tag.addDataTag("ringTipBone", pRingTipBone)
		tag.addDataTag("ringBaseBone", pRingBaseBone)
		tag.addDataTag("pinkyTipBone", pPinkyTipBone)
		tag.addDataTag("pinkyBaseBone", pPinkyBaseBone)
		tag.addDataTag("tracker", pTracker)
		tag.addDataTag("bendAngle", pBendAngle)
		tag.addDataTag("moveHandsClosed", pMoveHandsClosed)
		
		if calibrated
			saveCalibrated(loader, tag.addTag("calibrated"))
		end
	end
	
	protected func void saveCalibrated(BaseXmlLoader loader, EasyXMLElement tag)
		pCalibrateBonesThumb.forEach(block String each
			tag.addDataTag("thumbBone", each)
		end)
		pCalibrateBonesIndex.forEach(block String each
			tag.addDataTag("indexBone", each)
		end)
		pCalibrateBonesMiddle.forEach(block String each
			tag.addDataTag("middleBone", each)
		end)
		pCalibrateBonesRing.forEach(block String each
			tag.addDataTag("ringBone", each)
		end)
		pCalibrateBonesPinky.forEach(block String each
			tag.addDataTag("pinkyBone", each)
		end)
	end
end
