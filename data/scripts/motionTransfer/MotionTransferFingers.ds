/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.MotionTransferSystem

pin Democap.Actors
pin Democap.Behaviors
pin Democap.Characters

pin Dragengine.Animators
pin Dragengine.LoadSave
pin Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.XML


/**
 * Motion transfer affecting fingers.
 * 
 * Supports different methods of motion transfer to fingers:
 * - Fully articulated fingers
 * - Uniform finger bending
 * 
 * If a hands closed move is set uniform finger bending is used. Otherwise
 * fully articulated fingers are used.
 * 
 * This is the most simple motion transfer.
 */
class MotionTransferFingers extends DefaultMotionTransfer
	/** Factory. */
	class Factory implements MotionTransferFactory
		func new()
		end
		
		func String factoryID()
			return "fingers"
		end
		
		func MotionTransfer createMotionTransfer()
			return MotionTransferFingers.new(factoryID())
		end
		
		func String displayName()
			return "@UI.Fingers"
		end
	end
	
	
	
	var String pThumbTipBone, pThumbBaseBone
	var String pIndexTipBone, pIndexBaseBone
	var String pMiddleTipBone, pMiddleBaseBone
	var String pRingTipBone, pRingBaseBone
	var String pPinkyTipBone, pPinkyBaseBone
	var String pTracker
	var CharacterTrackerSlot pTrackerSlot
	var float pBendAngle
	var String pMoveHandsClosed
	var Vector pThumbRotation, pIndexRotation, pMiddleRotation, pRingRotation, pPinkyRotation
	
	var Array pCalibrateBonesThumb, pCalibrateBonesIndex, pCalibrateBonesMiddle, pCalibrateBonesRing, pCalibrateBonesPinky
	var Array pCalibrateRotationThumb, pCalibrateRotationIndex, pCalibrateRotationMiddle, pCalibrateRotationRing, pCalibrateRotationPinky
	
	
	/** Create motion transfer. */
	func new(String factoryID) super(factoryID)
		pThumbTipBone = pThumbBaseBone = ""
		pIndexTipBone = pIndexBaseBone = ""
		pMiddleTipBone = pMiddleBaseBone = ""
		pRingTipBone = pRingBaseBone = ""
		pPinkyTipBone = pPinkyBaseBone = ""
		pTracker = ""
		pBendAngle = 85
		pMoveHandsClosed = ""
		pThumbRotation = Vector.new(0, 45, 45)
		pIndexRotation = Vector.new()
		pMiddleRotation = Vector.new()
		pRingRotation = Vector.new()
		pPinkyRotation = Vector.new()
		pCalibrateBonesThumb = Array.new()
		pCalibrateBonesIndex = Array.new()
		pCalibrateBonesMiddle = Array.new()
		pCalibrateBonesRing = Array.new()
		pCalibrateBonesPinky = Array.new()
		pCalibrateRotationThumb = Array.new()
		pCalibrateRotationIndex = Array.new()
		pCalibrateRotationMiddle = Array.new()
		pCalibrateRotationRing = Array.new()
		pCalibrateRotationPinky = Array.new()
	end
	
	/** Create copy of motion transfer. */
	func new(MotionTransferFingers transfer) super(transfer)
		pThumbTipBone = transfer.pThumbTipBone
		pThumbBaseBone = transfer.pThumbBaseBone
		pIndexTipBone = transfer.pIndexTipBone
		pIndexBaseBone = transfer.pIndexBaseBone
		pMiddleTipBone = transfer.pMiddleTipBone
		pMiddleBaseBone = transfer.pMiddleBaseBone
		pRingTipBone = transfer.pRingTipBone
		pRingBaseBone = transfer.pRingBaseBone
		pPinkyTipBone = transfer.pPinkyTipBone
		pPinkyBaseBone = transfer.pPinkyBaseBone
		pTracker = transfer.pTracker
		pBendAngle = transfer.pBendAngle
		pMoveHandsClosed = transfer.pMoveHandsClosed
		pThumbRotation = transfer.pThumbRotation
		pIndexRotation = transfer.pIndexRotation
		pMiddleRotation = transfer.pMiddleRotation
		pRingRotation = transfer.pRingRotation
		pPinkyRotation = transfer.pPinkyRotation
		pCalibrateBonesThumb = Array.new(transfer.pCalibrateBonesThumb)
		pCalibrateBonesIndex = Array.new(transfer.pCalibrateBonesIndex)
		pCalibrateBonesMiddle = Array.new(transfer.pCalibrateBonesMiddle)
		pCalibrateBonesRing = Array.new(transfer.pCalibrateBonesRing)
		pCalibrateBonesPinky = Array.new(transfer.pCalibrateBonesPinky)
		pCalibrateRotationThumb = Array.new(transfer.pCalibrateRotationThumb)
		pCalibrateRotationIndex = Array.new(transfer.pCalibrateRotationIndex)
		pCalibrateRotationMiddle = Array.new(transfer.pCalibrateRotationMiddle)
		pCalibrateRotationRing = Array.new(transfer.pCalibrateRotationRing)
		pCalibrateRotationPinky = Array.new(transfer.pCalibrateRotationPinky)
	end
	
	
	
	/** Tip thumb bone name. */
	func String getThumbTipBone()
		return pThumbTipBone
	end
	
	/** Set tip thumb bone name. */
	func void setThumbTipBone(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pThumbTipBone = bone
	end
	
	/** Base thumb bone name. */
	func String getThumbBaseBone()
		return pThumbBaseBone
	end
	
	/** Set basebone name. */
	func void setThumbBaseBone(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pThumbBaseBone = bone
	end
	
	/** Tip index bone name. */
	func String getIndexTipBone()
		return pIndexTipBone
	end
	
	/** Set tip index bone name. */
	func void setIndexTipBone(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pIndexTipBone = bone
	end
	
	/** Base index bone name. */
	func String getIndexBaseBone()
		return pIndexBaseBone
	end
	
	/** Set base index bone name. */
	func void setIndexBaseBone(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pIndexBaseBone = bone
	end
	
	/** Tip Middle bone name. */
	func String getMiddleTipBone()
		return pMiddleTipBone
	end
	
	/** Set tip middle bone name. */
	func void setMiddleTipBone(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pMiddleTipBone = bone
	end
	
	/** Middle base bone name. */
	func String getMiddleBaseBone()
		return pMiddleBaseBone
	end
	
	/** Set middle base bone name. */
	func void setMiddleBaseBone(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pMiddleBaseBone = bone
	end
	
	/** Tip ring bone name. */
	func String getRingTipBone()
		return pRingTipBone
	end
	
	/** Set tip ring bone name. */
	func void setRingTipBone(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pRingTipBone = bone
	end
	
	/** Ring base bone name. */
	func String getRingBaseBone()
		return pRingBaseBone
	end
	
	/** Set ring base bone name. */
	func void setRingBaseBone(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pRingBaseBone = bone
	end
	
	/** Tip pinky bone name. */
	func String getPinkyTipBone()
		return pPinkyTipBone
	end
	
	/** Set tip pinky bone name. */
	func void setPinkyTipBone(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pPinkyTipBone = bone
	end
	
	/** Pinky base bone name. */
	func String getPinkyBaseBone()
		return pPinkyBaseBone
	end
	
	/** Set pinky base bone name. */
	func void setPinkyBaseBone(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pPinkyBaseBone = bone
	end
	
	/** Tracker slot name. */
	func String getTracker()
		return pTracker
	end
	
	/** Set tracker slot name. */
	func void setTracker(String tracker)
		if tracker == null
			throw ENullPointer.new("tracker")
		end
		pTracker = tracker
	end
	
	/** Tracker slot or null. */
	func CharacterTrackerSlot getTrackerSlot()
		return pTrackerSlot
	end
	
	/** Finger bending angle. Applied to each individual finger segment. */
	func float getBendAngle()
		return pBendAngle
	end
	
	/** Set finger bending angle. Applied to each individual finger segment. */
	func void setBendAngle(float angle)
		pBendAngle = angle
	end
	
	/** Hands closed animation move or empty string to use none. */
	func String getMoveHandsClosed()
		return pMoveHandsClosed
	end
	
	/** Set hands closed animation move or empty string to use none. */
	func void setMoveHandsClosed(String move)
		if move == null
			throw ENullPointer.new("move")
		end
		pMoveHandsClosed = move
	end
	
	/** Thumb bone rotation. */
	func Vector getThumbRotation()
		return pThumbRotation
	end
	
	/** Set thumb bone rotation. */
	func void setThumbRotation(Vector rotation)
		if rotation == null
			throw ENullPointer.new("rotation")
		end
		pThumbRotation = rotation
	end
	
	/** Index bone rotation. */
	func Vector getIndexRotation()
		return pIndexRotation
	end
	
	/** Set index bone rotation. */
	func void setIndexRotation(Vector rotation)
		if rotation == null
			throw ENullPointer.new("rotation")
		end
		pIndexRotation = rotation
	end
	
	/** Middle bone rotation. */
	func Vector getMiddleRotation()
		return pMiddleRotation
	end
	
	/** Set middle bone rotation. */
	func void setMiddleRotation(Vector rotation)
		if rotation == null
			throw ENullPointer.new("rotation")
		end
		pMiddleRotation = rotation
	end
	
	/** Ring bone rotation. */
	func Vector getRingRotation()
		return pRingRotation
	end
	
	/** Set ring bone rotation. */
	func void setRingRotation(Vector rotation)
		if rotation == null
			throw ENullPointer.new("rotation")
		end
		pRingRotation = rotation
	end
	
	/** Pinky bone rotation. */
	func Vector getPinkyRotation()
		return pPinkyRotation
	end
	
	/** Set pinky bone rotation. */
	func void setPinkyRotation(Vector rotation)
		if rotation == null
			throw ENullPointer.new("rotation")
		end
		pPinkyRotation = rotation
	end
	
	
	
	/** Init element clas. */
	func void initElementClass(CharacterConfiguration config, BaseVRActorClass eclass, ModifiedRig modifyRig)
		if pTrackerSlot == null
			return
		end
		
		// add behavior
		var ECBMotionTransferFingers behavior = ECBMotionTransferFingers.new(eclass, this)
		
		// add controller, link and rule for each defined finger
		var ECBRecordAnimation recordAnimation = ECBRecordAnimation.getBehaviorIn(eclass)
		var AnimatorDefinition adef = config.getAnimatorDefinition()
		
		if pMoveHandsClosed.empty()
			if pCalibrateBonesThumb.getCount() > 0
				if pMoveHandsClosed.empty()
					addRules(adef, behavior.getControllerNameThumb(), behavior.getControllerNameThumb2(),\
						behavior.getControllerNameThumb3(), pCalibrateBonesThumb, pCalibrateRotationThumb)
					
				else
					addRules(adef, behavior.getControllerNameThumb(), pCalibrateBonesThumb)
				end
				if recordAnimation != null
					recordAnimation.addBones(pCalibrateBonesThumb)
				end
			end
			
			if pCalibrateBonesIndex.getCount() > 0
				if pMoveHandsClosed.empty()
					addRules(adef, behavior.getControllerNameIndex(), behavior.getControllerNameIndex2(),\
						null, pCalibrateBonesIndex, pCalibrateRotationIndex)
					
				else
					addRules(adef, behavior.getControllerNameIndex(), pCalibrateBonesThumb)
				end
				if recordAnimation != null
					recordAnimation.addBones(pCalibrateBonesIndex)
				end
			end
			
			if pCalibrateBonesMiddle.getCount() > 0
				if pMoveHandsClosed.empty()
					addRules(adef, behavior.getControllerNameMiddle(), behavior.getControllerNameIndex2(),\
						null, pCalibrateBonesMiddle, pCalibrateRotationMiddle)
					
				else
					addRules(adef, behavior.getControllerNameMiddle(), pCalibrateBonesThumb)
				end
				if recordAnimation != null
					recordAnimation.addBones(pCalibrateBonesMiddle)
				end
			end
			
			if pCalibrateBonesRing.getCount() > 0
				if pMoveHandsClosed.empty()
					addRules(adef, behavior.getControllerNameRing(), behavior.getControllerNameRing2(),\
						null, pCalibrateBonesRing, pCalibrateRotationRing)
					
				else
					addRules(adef, behavior.getControllerNameRing(), pCalibrateBonesThumb)
				end
				if recordAnimation != null
					recordAnimation.addBones(pCalibrateBonesRing)
				end
			end
			
			if pCalibrateBonesPinky.getCount() > 0
				if pMoveHandsClosed.empty()
					addRules(adef, behavior.getControllerNamePinky(), behavior.getControllerNamePinky2(),\
						null, pCalibrateBonesPinky, pCalibrateRotationPinky)
					
				else
					addRules(adef, behavior.getControllerNamePinky(), pCalibrateBonesThumb)
				end
				if recordAnimation != null
					recordAnimation.addBones(pCalibrateBonesPinky)
				end
			end
			
		else
			
		end
	end
	
	/** Add animator definition controller. */
	protected func ADController addADController(AnimatorDefinition adef, String name, float minimum, float maximum)
		var ADController controller = ADController.new()
		controller.setName(name)
		controller.setMinimum(minimum)
		controller.setMaximum(maximum)
		controller.setClamp(true)
		adef.addController(controller)
		return controller
	end
	
	/** Add animator definition link. */
	protected func ADLink addADLink(AnimatorDefinition adef, ADController controller)
		var ADLink link = ADLink.new()
		link.setController(controller)
		link.setCurve(CurveBezier.newDefaultLinear()) // TODO set curve from calibrated finger bending
		adef.addLink(link)
		return link
	end
	
	protected func void addRules(AnimatorDefinition adef, String controllerName, Array bones)
		var ADController controller = addADController(adef, controllerName, -1, 1)
		var ADLink link = addADLink(adef, controller)
		
		var ADRuleAnimation rule = ADRuleAnimation.new()
		rule.setName(controllerName)
		rule.setMoveName(pMoveHandsClosed)
		rule.addTargetLink(ADRuleTargetLink.new(ARAnimationTarget.blendFactor, link))
		
		bones.forEach(block String each
			rule.addBone(each)
		end)
		adef.addRule(rule)
	end
	
	protected func void addRules(AnimatorDefinition adef, String controllerName1,\
	String controllerName2, String controllerName3, Array bones, Array rotations)
		/*
		var ADRuleBoneTransformator rule = ADRuleBoneTransformator.new()
		rule.setName(link.getController().getName())
		rule.setCoordinateFrame(ARBoneTransformatorCFrame.local)
		rule.setMinimumRotation(Vector.new(0, 0, 0))
		rule.setMaximumRotation(Vector.new(-pBendAngle, 0, 0))
		rule.addTargetLink(ADRuleTargetLink.new(ARBoneTransformatorTarget.rotation, link))
		adrule = rule
		*/
		
		// segment 1
		if controllerName1 == null
			return
		end
		
		var ADController controller = addADController(adef, controllerName1, 0, 1)
		var ADLink link = addADLink(adef, controller)
		
		var ADRuleInverseKinematic rule = ADRuleInverseKinematic.new()
		rule.setName(controllerName1)
		rule.setAdjustOrientation(true)
		rule.setAdjustPosition(false)
		rule.setLocalOrientation(rotations.getAt(0) cast Vector)
		rule.addTargetLink(ADRuleTargetLink.new(ARInverseKinematicTarget.goalOrientation, link))
		
		rule.addBone(bones.getAt(0) cast String)
		if controllerName2 == null
			bones.forEach(1, bones.getCount(), block String each
				rule.addBone(each)
			end)
		end
		
		adef.addRule(rule)
		
		// segment 2
		if controllerName2 == null
			return
		end
		
		controller = addADController(adef, controllerName2, 0, 1)
		link = addADLink(adef, controller)
		
		rule = ADRuleInverseKinematic.new()
		rule.setName(controllerName2)
		rule.setAdjustOrientation(true)
		rule.setAdjustPosition(false)
		rule.setLocalOrientation(rotations.getAt(1) cast Vector)
		rule.addTargetLink(ADRuleTargetLink.new(ARInverseKinematicTarget.goalOrientation, link))
		
		rule.addBone(bones.getAt(1) cast String)
		if controllerName3 == null
			bones.forEach(2, bones.getCount(), block String each
				rule.addBone(each)
			end)
		end
		
		adef.addRule(rule)
		
		// segment 3
		if controllerName3 == null
			return
		end
		
		controller = addADController(adef, controllerName3, 0, 1)
		link = addADLink(adef, controller)
		
		rule = ADRuleInverseKinematic.new()
		rule.setName(controllerName3)
		rule.setAdjustOrientation(true)
		rule.setAdjustPosition(false)
		rule.setLocalOrientation(rotations.getAt(2) cast Vector)
		rule.addTargetLink(ADRuleTargetLink.new(ARInverseKinematicTarget.goalOrientation, link))
		
		rule.addBone(bones.getAt(2) cast String)
		bones.forEach(3, bones.getCount(), block String each
			rule.addBone(each)
		end)
		
		adef.addRule(rule)
	end
	
	/** Reset calibration. */
	func void resetCalibration()
		pTrackerSlot = null
		
		pCalibrateBonesThumb.removeAll()
		pCalibrateBonesIndex.removeAll()
		pCalibrateBonesMiddle.removeAll()
		pCalibrateBonesRing.removeAll()
		pCalibrateBonesPinky.removeAll()
		pCalibrateRotationThumb.removeAll()
		pCalibrateRotationIndex.removeAll()
		pCalibrateRotationMiddle.removeAll()
		pCalibrateRotationRing.removeAll()
		pCalibrateRotationPinky.removeAll()
	end
	
	/** Calibrate character. */
	func void calibrate(CharacterConfiguration config, ActorProfile actorProfile, \
	BaseVRActor actor, Component component)
		var Rig rig = component.getRig()
		findBoneChain(rig, pThumbTipBone, pThumbBaseBone, pCalibrateBonesThumb)
		findBoneChain(rig, pIndexTipBone, pIndexBaseBone, pCalibrateBonesIndex)
		findBoneChain(rig, pMiddleTipBone, pMiddleBaseBone, pCalibrateBonesMiddle)
		findBoneChain(rig, pRingTipBone, pRingBaseBone, pCalibrateBonesRing)
		findBoneChain(rig, pPinkyTipBone, pPinkyBaseBone, pCalibrateBonesPinky)
		
		pTrackerSlot = config.getTrackerSlots().getNamed(pTracker)
		
		if pMoveHandsClosed.empty()
			var int count, indexBone
			var Matrix invMat
			var String bone
			
			// thumb
			invMat = Matrix.newRotation(pThumbRotation).getInverse()
			
			count = pCalibrateBonesThumb.getCount()
			if count > 0
				bone = pCalibrateBonesThumb.getAt(count - 1) cast String
				indexBone = component.indexOfBoneNamed(bone)
				if indexBone != -1
					pCalibrateRotationThumb.add((component.boneGetMatrix(indexBone) * invMat).normalize().getEulerAngles())
					
				else
					pCalibrateRotationThumb.add(Vector.new())
				end
			end
			
			if count > 1
				bone = pCalibrateBonesThumb.getAt(count - 2) cast String
				indexBone = component.indexOfBoneNamed(bone)
				if indexBone != -1
					pCalibrateRotationThumb.add((component.boneGetMatrix(indexBone) * invMat).normalize().getEulerAngles())
					
				else
					pCalibrateRotationThumb.add(Vector.new())
				end
			end
			
			if count > 2
				bone = pCalibrateBonesThumb.getAt(count - 3) cast String
				indexBone = component.indexOfBoneNamed(bone)
				if indexBone != -1
					pCalibrateRotationThumb.add((component.boneGetMatrix(indexBone) * invMat).normalize().getEulerAngles())
					
				else
					pCalibrateRotationThumb.add(Vector.new())
				end
			end
			
			// index
			invMat = Matrix.newRotation(pIndexRotation).getInverse()
			
			count = pCalibrateBonesIndex.getCount()
			if count > 0
				bone = pCalibrateBonesIndex.getAt(count - 1) cast String
				indexBone = component.indexOfBoneNamed(bone)
				if indexBone != -1
					pCalibrateRotationIndex.add((component.boneGetMatrix(indexBone) * invMat).normalize().getEulerAngles())
					
				else
					pCalibrateRotationIndex.add(Vector.new())
				end
			end
			
			if count > 1
				bone = pCalibrateBonesIndex.getAt(count - 2) cast String
				indexBone = component.indexOfBoneNamed(bone)
				if indexBone != -1
					pCalibrateRotationIndex.add((component.boneGetMatrix(indexBone) * invMat).normalize().getEulerAngles())
					
				else
					pCalibrateRotationIndex.add(Vector.new())
				end
			end
			
			// middle
			invMat = Matrix.newRotation(pMiddleRotation).getInverse()
			
			count = pCalibrateBonesMiddle.getCount()
			if count > 0
				bone = pCalibrateBonesMiddle.getAt(count - 1) cast String
				indexBone = component.indexOfBoneNamed(bone)
				if indexBone != -1
					pCalibrateRotationMiddle.add((component.boneGetMatrix(indexBone) * invMat).normalize().getEulerAngles())
					
				else
					pCalibrateRotationMiddle.add(Vector.new())
				end
			end
			
			if count > 1
				bone = pCalibrateBonesMiddle.getAt(count - 2) cast String
				indexBone = component.indexOfBoneNamed(bone)
				if indexBone != -1
					pCalibrateRotationMiddle.add((component.boneGetMatrix(indexBone) * invMat).normalize().getEulerAngles())
					
				else
					pCalibrateRotationMiddle.add(Vector.new())
				end
			end
			
			// ring
			invMat = Matrix.newRotation(pRingRotation).getInverse()
			
			count = pCalibrateBonesRing.getCount()
			if count > 0
				bone = pCalibrateBonesRing.getAt(count - 1) cast String
				indexBone = component.indexOfBoneNamed(bone)
				if indexBone != -1
					pCalibrateRotationRing.add((component.boneGetMatrix(indexBone) * invMat).normalize().getEulerAngles())
					
				else
					pCalibrateRotationRing.add(Vector.new())
				end
			end
			
			if count > 1
				bone = pCalibrateBonesRing.getAt(count - 2) cast String
				indexBone = component.indexOfBoneNamed(bone)
				if indexBone != -1
					pCalibrateRotationRing.add((component.boneGetMatrix(indexBone) * invMat).normalize().getEulerAngles())
					
				else
					pCalibrateRotationRing.add(Vector.new())
				end
			end
			
			// pinky
			invMat = Matrix.newRotation(pPinkyRotation).getInverse()
			
			count = pCalibrateBonesPinky.getCount()
			if count > 0
				bone = pCalibrateBonesPinky.getAt(count - 1) cast String
				indexBone = component.indexOfBoneNamed(bone)
				if indexBone != -1
					pCalibrateRotationPinky.add((component.boneGetMatrix(indexBone) * invMat).normalize().getEulerAngles())
					
				else
					pCalibrateRotationPinky.add(Vector.new())
				end
			end
			
			if count > 1
				bone = pCalibrateBonesPinky.getAt(count - 2) cast String
				indexBone = component.indexOfBoneNamed(bone)
				if indexBone != -1
					pCalibrateRotationPinky.add((component.boneGetMatrix(indexBone) * invMat).normalize().getEulerAngles())
					
				else
					pCalibrateRotationPinky.add(Vector.new())
				end
			end
		end
	end
	
	/** Create copy of motion transfer. */
	func MotionTransfer createCopy()
		return MotionTransferFingers.new(this)
	end
	
	/** Load from XML. */
	func void load(BaseXmlLoader loader, EasyXMLElement root)
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("name")
				setName(element.getFirstCData())
				
			elif tagName.equals("thumbTipBone")
				setThumbTipBone(element.getFirstCData())
				
			elif tagName.equals("thumbBaseBone")
				setThumbBaseBone(element.getFirstCData())
				
			elif tagName.equals("indexTipBone")
				setIndexTipBone(element.getFirstCData())
				
			elif tagName.equals("indexBaseBone")
				setIndexBaseBone(element.getFirstCData())
				
			elif tagName.equals("middleTipBone")
				setMiddleTipBone(element.getFirstCData())
				
			elif tagName.equals("middleBaseBone")
				setMiddleBaseBone(element.getFirstCData())
				
			elif tagName.equals("ringTipBone")
				setRingTipBone(element.getFirstCData())
				
			elif tagName.equals("ringBaseBone")
				setRingBaseBone(element.getFirstCData())
				
			elif tagName.equals("pinkyTipBone")
				setPinkyTipBone(element.getFirstCData())
				
			elif tagName.equals("pinkyBaseBone")
				setPinkyBaseBone(element.getFirstCData())
				
			elif tagName.equals("tracker")
				pTracker = element.getFirstCData()
				
			elif tagName.equals("bendAngle")
				pBendAngle = element.getFirstCDataFloat()
				
			elif tagName.equals("moveHandsClosed")
				pMoveHandsClosed = element.getFirstCData()
				
			elif tagName.equals("thumbRotation")
				setThumbRotation(loader.readVector(element))
				
			elif tagName.equals("indexRotation")
				setIndexRotation(loader.readVector(element))
				
			elif tagName.equals("middleRotation")
				setMiddleRotation(loader.readVector(element))
				
			elif tagName.equals("ringRotation")
				setRingRotation(loader.readVector(element))
				
			elif tagName.equals("pinkyRotation")
				setPinkyRotation(loader.readVector(element))
				
			elif tagName.equals("calibrated")
				loadCalibrated(loader, element)
			end
		end)
	end
	
	protected func void loadCalibrated(BaseXmlLoader loader, EasyXMLElement root)
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("thumbBone")
				pCalibrateBonesThumb.add(element.getFirstCData())
				
			elif tagName.equals("indexBone")
				pCalibrateBonesIndex.add(element.getFirstCData())
				
			elif tagName.equals("middleBone")
				pCalibrateBonesMiddle.add(element.getFirstCData())
				
			elif tagName.equals("ringBone")
				pCalibrateBonesRing.add(element.getFirstCData())
				
			elif tagName.equals("pinkyBone")
				pCalibrateBonesPinky.add(element.getFirstCData())
				
			elif tagName.equals("thumbRotation")
				pCalibrateRotationThumb.add(loader.readVector(element))
				
			elif tagName.equals("indexRotation")
				pCalibrateRotationIndex.add(loader.readVector(element))
				
			elif tagName.equals("middleRotation")
				pCalibrateRotationMiddle.add(loader.readVector(element))
				
			elif tagName.equals("ringRotation")
				pCalibrateRotationRing.add(loader.readVector(element))
				
			elif tagName.equals("pinkyRotation")
				pCalibrateRotationPinky.add(loader.readVector(element))
			end
		end)
	end
	
	/** Post load initialize. */
	func void postLoadInit(CharacterConfiguration config)
		pTrackerSlot = config.getTrackerSlots().getNamed(pTracker)
	end
	
	/** Save to XML. */
	func void save(BaseXmlLoader loader, EasyXMLElement tag, bool calibrated)
		tag.addDataTag("name", getName())
		tag.addDataTag("thumbTipBone", pThumbTipBone)
		tag.addDataTag("thumbBaseBone", pThumbBaseBone)
		tag.addDataTag("indexTipBone", pIndexTipBone)
		tag.addDataTag("indexBaseBone", pIndexBaseBone)
		tag.addDataTag("middleTipBone", pMiddleTipBone)
		tag.addDataTag("middleBaseBone", pMiddleBaseBone)
		tag.addDataTag("ringTipBone", pRingTipBone)
		tag.addDataTag("ringBaseBone", pRingBaseBone)
		tag.addDataTag("pinkyTipBone", pPinkyTipBone)
		tag.addDataTag("pinkyBaseBone", pPinkyBaseBone)
		tag.addDataTag("tracker", pTracker)
		tag.addDataTag("bendAngle", pBendAngle)
		tag.addDataTag("moveHandsClosed", pMoveHandsClosed)
		loader.writeVector(tag, "thumbRotation", pThumbRotation)
		loader.writeVector(tag, "indexRotation", pIndexRotation)
		loader.writeVector(tag, "middleRotation", pMiddleRotation)
		loader.writeVector(tag, "ringRotation", pRingRotation)
		loader.writeVector(tag, "pinkyRotation", pPinkyRotation)
		
		if calibrated
			saveCalibrated(loader, tag.addTag("calibrated"))
		end
	end
	
	protected func void saveCalibrated(BaseXmlLoader loader, EasyXMLElement tag)
		pCalibrateBonesThumb.forEach(block String each
			tag.addDataTag("thumbBone", each)
		end)
		pCalibrateBonesIndex.forEach(block String each
			tag.addDataTag("indexBone", each)
		end)
		pCalibrateBonesMiddle.forEach(block String each
			tag.addDataTag("middleBone", each)
		end)
		pCalibrateBonesRing.forEach(block String each
			tag.addDataTag("ringBone", each)
		end)
		pCalibrateBonesPinky.forEach(block String each
			tag.addDataTag("pinkyBone", each)
		end)
		pCalibrateRotationThumb.forEach(block Vector each
			loader.writeVector(tag, "thumbAxis", each)
		end)
		pCalibrateRotationIndex.forEach(block Vector each
			loader.writeVector(tag, "indexAxis", each)
		end)
		pCalibrateRotationMiddle.forEach(block Vector each
			loader.writeVector(tag, "middleAxis", each)
		end)
		pCalibrateRotationRing.forEach(block Vector each
			loader.writeVector(tag, "ringAxis", each)
		end)
		pCalibrateRotationPinky.forEach(block Vector each
			loader.writeVector(tag, "pinkyAxis", each)
		end)
	end
end
