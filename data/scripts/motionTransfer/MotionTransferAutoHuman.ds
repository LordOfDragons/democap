/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.MotionTransferSystem

pin Democap.Actors
pin Democap.Behaviors
pin Democap.Characters

pin Dragengine.Animators
pin Dragengine.LoadSave
pin Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.XML


/**
 * Motion transfer automatic human.
 * 
 * Uses various child motion transfers configured by a few key parameters for simplicity.
 */
class MotionTransferAutoHuman extends DefaultMotionTransfer
	/** Factory. */
	class Factory implements MotionTransferFactory
		public func new()
		end
		
		public func String factoryID()
			return "autoHuman"
		end
		
		public func MotionTransfer createMotionTransfer()
			return MotionTransferAutoHuman.new(factoryID())
		end
		
		public func String displayName()
			return "Automatic Human"
		end
	end
	
	
	
	private var String pBoneHead
	private var String pBoneChest
	private var String pBoneHandRight
	private var String pBoneHandLeft
	private var String pBoneHip
	private var String pBoneFootRight
	private var String pBoneFootLeft
	private var float pBendShapeSpine
	private var float pBendShapeNeck
	private var String pMoveBaseIK
	private var String pMoveCrouch
	private var Vector pReachScalingArmRight
	private var Vector pReachScalingArmLeft
	
	private var MotionTransferChild pTransferWaist
	//private var MotionTransferIK pTransferSpineHead
	private var MotionTransferIK pTransferHead
	private var MotionTransferBend pTransferNeck
	private var MotionTransferBend pTransferSpine
	private var MotionTransferIK pTransferArmRight
	private var MotionTransferIK pTransferArmLeft
	private var MotionTransferIK pTransferLegRight
	private var MotionTransferIK pTransferLegLeft
	
	
	
	/** Create motion transfer. */
	public func new(String factoryID) super(factoryID)
		pBoneHead = ""
		pBoneChest = ""
		pBoneHandRight = ""
		pBoneHandLeft = ""
		pBoneHip = ""
		pBoneFootRight = ""
		pBoneFootLeft = ""
		pBendShapeSpine = 0.667
		pBendShapeNeck = 0.667
		pMoveBaseIK = ""
		pMoveCrouch = ""
		pReachScalingArmRight = Vector.new(1, 1, 1)
		pReachScalingArmLeft = Vector.new(1, 1, 1)
		
		// create child motion transfers
		var MotionTransferChild.Factory factoryChild = MotionTransferChild.Factory.new()
		var MotionTransferIK.Factory factoryIK = MotionTransferIK.Factory.new()
		var MotionTransferBend.Factory factoryBend = MotionTransferBend.Factory.new()
		
		pTransferWaist = MotionTransferChild.new(factoryChild.factoryID())
		pTransferWaist.setName("AutoHuman: Waist")
		
		/*
		pTransferSpineHead = MotionTransferIK.new(factoryIK.factoryID())
		pTransferSpineHead.setName("AutoHuman: SpineHead")
		pTransferSpineHead.setBendAxisRotation(Vector.new(90, 0, 0))
		pTransferSpineHead.setTwistPropagation(1)
		*/
		
		pTransferHead = MotionTransferIK.new(factoryIK.factoryID())
		pTransferHead.setName("AutoHuman: Head")
		
		pTransferNeck = MotionTransferBend.new(factoryBend.factoryID())
		pTransferNeck.setName("AutoHuman: Neck")
		pTransferNeck.setBendAxisRotation(Vector.new(90, 0, 0))
		pTransferNeck.setTwistPropagation(0.5)
		
		pTransferSpine = MotionTransferBend.new(factoryBend.factoryID())
		pTransferSpine.setName("AutoHuman: Spine")
		pTransferSpine.setBendAxisRotation(Vector.new(90, 0, 0))
		pTransferSpine.setTwistPropagation(0.5)
		
		pTransferArmRight = MotionTransferIK.new(factoryIK.factoryID())
		pTransferArmRight.setName("AutoHuman: ArmRight")
		pTransferArmRight.getTipTracker().setAutoTransform(MotionTransferTracker.AutoTransform.none)
		pTransferArmRight.setActorReach(MotionTransferIK.ActorReach.arm)
		pTransferArmRight.setTwistPropagation(0.5)
		pTransferArmRight.setTwistAxisRotation(Vector.new(0, -90, 0))
		pTransferArmRight.setTwistBoneCount(1)
		
		pTransferArmLeft = MotionTransferIK.new(factoryIK.factoryID())
		pTransferArmLeft.setName("AutoHuman: ArmLeft")
		pTransferArmLeft.getTipTracker().setAutoTransform(MotionTransferTracker.AutoTransform.none)
		pTransferArmLeft.setActorReach(MotionTransferIK.ActorReach.arm)
		pTransferArmLeft.setTwistPropagation(0.5)
		pTransferArmLeft.setTwistAxisRotation(Vector.new(0, 90, 0))
		pTransferArmLeft.setTwistBoneCount(1)
		
		pTransferLegRight = MotionTransferIK.new(factoryIK.factoryID())
		pTransferLegRight.setName("AutoHuman: LegRight")
		pTransferLegRight.getTipTracker().setAutoTransform(MotionTransferTracker.AutoTransform.orientation)
		pTransferLegRight.setActorReach(MotionTransferIK.ActorReach.leg)
		pTransferLegRight.setTwistAxisRotation(Vector.new(-90, 0, 0))
		pTransferLegRight.setTwistPropagation(1)
		pTransferLegRight.setTwistBoneCount(1)
		
		pTransferLegLeft = MotionTransferIK.new(factoryIK.factoryID())
		pTransferLegLeft.setName("AutoHuman: LegLeft")
		pTransferLegLeft.getTipTracker().setAutoTransform(MotionTransferTracker.AutoTransform.orientation)
		pTransferLegLeft.setActorReach(MotionTransferIK.ActorReach.leg)
		pTransferLegLeft.setTwistAxisRotation(Vector.new(-90, 0, 0))
		pTransferLegLeft.setTwistPropagation(1)
		pTransferLegLeft.setTwistBoneCount(1)
	end
	
	/** Create copy of motion transfer. */
	public func new(MotionTransferAutoHuman transfer) super(transfer)
		pBoneHead = transfer.pBoneHead
		pBoneChest = transfer.pBoneChest
		pBoneHandRight = transfer.pBoneHandRight
		pBoneHandLeft = transfer.pBoneHandLeft
		pBoneHip = transfer.pBoneHip
		pBoneFootRight = transfer.pBoneFootRight
		pBoneFootLeft = transfer.pBoneFootLeft
		pBendShapeSpine = transfer.pBendShapeSpine
		pBendShapeNeck = transfer.pBendShapeNeck
		pMoveBaseIK = transfer.pMoveBaseIK
		pMoveCrouch = transfer.pMoveCrouch
		pReachScalingArmRight = transfer.pReachScalingArmRight
		pReachScalingArmLeft = transfer.pReachScalingArmLeft
		
		pTransferWaist = MotionTransferChild.new(transfer.pTransferWaist)
		//pTransferSpineHead = MotionTransferIK.new(transfer.pTransferSpineHead)
		pTransferNeck = MotionTransferBend.new(transfer.pTransferNeck)
		pTransferSpine = MotionTransferBend.new(transfer.pTransferSpine)
		pTransferHead = MotionTransferIK.new(transfer.pTransferHead)
		pTransferArmRight = MotionTransferIK.new(transfer.pTransferArmRight)
		pTransferArmLeft = MotionTransferIK.new(transfer.pTransferArmLeft)
		pTransferLegRight = MotionTransferIK.new(transfer.pTransferLegRight)
		pTransferLegLeft = MotionTransferIK.new(transfer.pTransferLegLeft)
	end
	
	
	
	/** Head bone name. */
	public func String getBoneHead()
		return pBoneHead
	end
	
	/** Set head bone name. */
	public func void setBoneHead(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pBoneHead = bone
	end
	
	/** Chest bone name. */
	public func String getBoneChest()
		return pBoneChest
	end
	
	/** Set chest bone name. */
	public func void setBoneChest(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pBoneChest = bone
	end
	
	/** Right hand bone name. */
	public func String getBoneHandRight()
		return pBoneHandRight
	end
	
	/** Set right hand bone name. */
	public func void setBoneHandRight(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pBoneHandRight = bone
	end
	
	/** Left hand bone name. */
	public func String getBoneHandLeft()
		return pBoneHandLeft
	end
	
	/** Set left hand bone name. */
	public func void setBoneHandLeft(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pBoneHandLeft = bone
	end
	
	/** Hip bone name. */
	public func String getBoneHip()
		return pBoneHip
	end
	
	/** Set hip bone name. */
	public func void setBoneHip(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pBoneHip = bone
	end
	
	/** Right foot bone name. */
	public func String getBoneFootRight()
		return pBoneFootRight
	end
	
	/** Set right foot bone name. */
	public func void setBoneFootRight(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pBoneFootRight = bone
	end
	
	/** Left foot bone name. */
	public func String getBoneFootLeft()
		return pBoneFootLeft
	end
	
	/** Set left foot bone name. */
	public func void setBoneFootLeft(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pBoneFootLeft = bone
	end
	
	/**
	 * Spine bend shape in the range from 0 to 1. 0 bends only at the base bone. 1 bends only at the
	 * tip bone. 0.5 bends all bones equally. Values in between gradually blend between.
	 */
	public func float getBendShapeSpine()
		return pBendShapeSpine
	end
	
	/**
	 * Set spine bend shape in the range from 0 to 1. 0 bends only at the base bone. 1 bends only at the
	 * tip bone. 0.5 bends all bones equally. Values in between gradually blend between.
	 */
	public func void setBendShapeSpine(float shape)
		pBendShapeSpine = DEMath.clamp(shape, 0.0, 1.0)
	end
	
	/**
	 * Neck bend shape in the range from 0 to 1. 0 bends only at the base bone. 1 bends only at the
	 * tip bone. 0.5 bends all bones equally. Values in between gradually blend between.
	 */
	public func float getBendShapeNeck()
		return pBendShapeNeck
	end
	
	/**
	 * Set neck bend shape in the range from 0 to 1. 0 bends only at the base bone. 1 bends only at the
	 * tip bone. 0.5 bends all bones equally. Values in between gradually blend between.
	 */
	public func void setBendShapeNeck(float shape)
		pBendShapeNeck = DEMath.clamp(shape, 0.0, 1.0)
	end
	
	/** Name of move to use to init base IK state for better results. */
	public func String getMoveBaseIK()
		return pMoveBaseIK
	end
	
	/** Set name of move to use to init base IK state for better results. */
	public func void setMoveBaseIK(String move)
		if move == null
			throw ENullPointer.new("move")
		end
		pMoveBaseIK = move
	end
	
	/** Name of move to use to init crouch pose for better results. */
	public func String getMoveCrouch()
		return pMoveCrouch
	end
	
	/** Set name of move to use to init crouch pose for better results. */
	public func void setMoveCrouch(String move)
		if move == null
			throw ENullPointer.new("move")
		end
		pMoveCrouch = move
	end
	
	/** Right arm reach scaling. */
	public func Vector getReachScalingArmRight()
		return pReachScalingArmRight
	end
	
	/** Set right arm reach scaling. */
	public func void setReachScalingArmRight(Vector scaling)
		if scaling == null
			throw ENullPointer.new("scaling")
		end
		pReachScalingArmRight = scaling
	end
	
	/** Left arm reach scaling. */
	public func Vector getReachScalingArmLeft()
		return pReachScalingArmLeft
	end
	
	/** Set left arm reach scaling. */
	public func void setReachScalingArmLeft(Vector scaling)
		if scaling == null
			throw ENullPointer.new("scaling")
		end
		pReachScalingArmLeft = scaling
	end
	
	
	
	/** Child motion transfer. */
	public func MotionTransferChild getTransferWaist()
		return pTransferWaist
	end
	
	/*
	public func MotionTransferIK getTransferSpineHead()
		return pTransferSpineHead
	end
	*/
	
	public func MotionTransferIK getTransferHead()
		return pTransferHead
	end
	
	public func MotionTransferBend getTransferNeck()
		return pTransferNeck
	end
	
	public func MotionTransferBend getTransferSpine()
		return pTransferSpine
	end
	
	public func MotionTransferIK getTransferArmRight()
		return pTransferArmRight
	end
	
	public func MotionTransferIK getTransferArmLeft()
		return pTransferArmLeft
	end
	
	public func MotionTransferIK getTransferLegRight()
		return pTransferLegRight
	end
	
	public func MotionTransferIK getTransferLegLeft()
		return pTransferLegLeft
	end
	
	
	
	/** Init element class. */
	public func void initElementClass(CharacterConfiguration config, BaseVRActorClass eclass, ModifiedRig modifyRig)
		pTransferWaist.initElementClass(config, eclass, modifyRig)
		//pTransferSpineHead.initElementClass(config, eclass, modifyRig)
		pTransferSpine.initElementClass(config, eclass, modifyRig)
		pTransferNeck.initElementClass(config, eclass, modifyRig)
		pTransferHead.initElementClass(config, eclass, modifyRig)
		pTransferArmRight.initElementClass(config, eclass, modifyRig)
		pTransferArmLeft.initElementClass(config, eclass, modifyRig)
		pTransferLegRight.initElementClass(config, eclass, modifyRig)
		pTransferLegLeft.initElementClass(config, eclass, modifyRig)
	end
	
	/** Reset calibration. */
	public func void resetCalibration()
		pTransferWaist.resetCalibration()
		//pTransferSpineHead.resetCalibration()
		pTransferSpine.resetCalibration()
		pTransferNeck.resetCalibration()
		pTransferHead.resetCalibration()
		pTransferArmRight.resetCalibration()
		pTransferArmLeft.resetCalibration()
		pTransferLegRight.resetCalibration()
		pTransferLegLeft.resetCalibration()
	end
	
	/** Calibrate character. */
	public func void calibrate(CharacterConfiguration config, ActorProfile actorProfile, \
	BaseVRActor actor, Component component)
		initChildTransferParams(config, actorProfile, actor, component)
		
		pTransferWaist.calibrate(config, actorProfile, actor, component)
		//pTransferSpineHead.calibrate(config, actorProfile, actor, component)
		pTransferSpine.calibrate(config, actorProfile, actor, component)
		pTransferNeck.calibrate(config, actorProfile, actor, component)
		pTransferHead.calibrate(config, actorProfile, actor, component)
		pTransferArmRight.calibrate(config, actorProfile, actor, component)
		pTransferArmLeft.calibrate(config, actorProfile, actor, component)
		pTransferLegRight.calibrate(config, actorProfile, actor, component)
		pTransferLegLeft.calibrate(config, actorProfile, actor, component)
	end
	
	/** Init child transfer parameters. */
	protected func void initChildTransferParams(CharacterConfiguration config,\
	ActorProfile actorProfile, BaseVRActor actor, Component component)
		var Rig rig = component.getRig()
		var Array chain = Array.new()
		var float bendScale
		var int index
		
		assignSlots(config)
		
		// determine what devices are attached. it is important to to resolve all trackers
		// that are used to determine motion transfer parameters or first time calibrate
		// can yield wrong results
		pTransferWaist.getTracker().resolveRealSlot(config)
		pTransferSpine.getTargetTracker().resolveRealSlot(config)
		pTransferLegRight.getTipTracker().resolveRealSlot(config)
		pTransferLegRight.getGuideTracker().resolveRealSlot(config)
		pTransferLegLeft.getTipTracker().resolveRealSlot(config)
		pTransferLegLeft.getGuideTracker().resolveRealSlot(config)
		pTransferArmRight.getTipTracker().resolveRealSlot(config)
		pTransferArmLeft.getTipTracker().resolveRealSlot(config)
		
		pTransferNeck.getBaseTracker().resolveRealSlot(config)
		
		var bool hasSlotWaist = pTransferWaist.getTracker().getRealSlot() != null \
			and pTransferWaist.getTracker().getRealSlot().getType() == CharacterTrackerSlot.Type.waist
		var bool isSlotWaistAttached = hasSlotWaist \
			and pTransferWaist.getTracker().getRealSlot().isDeviceAttached()
		
		var bool hasSlotChest = pTransferSpine.getTargetTracker().getRealSlot() != null \
			and pTransferSpine.getTargetTracker().getRealSlot().getType() == CharacterTrackerSlot.Type.chest
		var bool isSlotChestAttached = hasSlotChest \
			and pTransferSpine.getTargetTracker().getRealSlot().isDeviceAttached()
		
		var bool hasSlotRightFoot = pTransferLegRight.getTipTracker().getRealSlot() != null \
			and pTransferLegRight.getTipTracker().getRealSlot().getType() == CharacterTrackerSlot.Type.rightFoot
		var bool isSlotRightFootAttached = hasSlotRightFoot \
			and pTransferLegRight.getTipTracker().getRealSlot().isDeviceAttached()
		
		var bool hasSlotLeftFoot = pTransferLegLeft.getTipTracker().getRealSlot() != null \
			and pTransferLegLeft.getTipTracker().getRealSlot().getType() == CharacterTrackerSlot.Type.leftFoot
		var bool isSlotLeftFootAttached = hasSlotLeftFoot \
			and pTransferLegLeft.getTipTracker().getRealSlot().isDeviceAttached()
		
		var bool hasSlotRightHandController = pTransferArmRight.getTipTracker().getRealSlot() != null \
			and pTransferArmRight.getTipTracker().getRealSlot().getType() == CharacterTrackerSlot.Type.rightHandController
		
		var bool hasSlotLeftHandController = pTransferArmLeft.getTipTracker().getRealSlot() != null \
			and pTransferArmLeft.getTipTracker().getRealSlot().getType() == CharacterTrackerSlot.Type.leftHandController
		
		// waist
		pTransferWaist.setBone(pBoneHip)
		
		// spine, head. base is hip which we use to find chains but it should not be
		// included in anything but the waist. start one bone down the chain
		var Array chainSpine = Array.new()
		var Array chainHead = Array.new()
		
		findBoneChain(rig, pBoneChest, pBoneHip, chainSpine)
		findBoneChain(rig, pBoneHead, pBoneChest, chainHead)
		
		/*
		pTransferSpineHead.setTipBone(pBoneHead)
		pTransferSpineHead.setGuideBone(pBoneChest)
		pTransferSpineHead.setMoveBaseIK(pMoveBaseIK)
		pTransferSpineHead.setTwistPropagation(1)
		pTransferSpineHead.setTwistAxisRotation(Vector.new(90, 0, 0))
		
		if chainSpine.getCount() > 1
			pTransferSpineHead.setBaseBone(chainSpine.getAt(-2) cast String)
			pTransferSpineHead.setTwistBoneCount(DEMath.max(chainSpine.getCount() - 2, 0))
			
		else
			pTransferSpineHead.setBaseBone("")
			pTransferSpineHead.setTwistBoneCount(0)
		end
		*/
		
		// spine
		pTransferSpine.setTipBone(pBoneChest)
		pTransferSpine.setTargetBone("")
		pTransferSpine.setTargetBaseBone("")
		
		pTransferSpine.getTargetTracker().setOffsetPosition(Vector.new())
		
// 		if hasSlotChest
			pTransferSpine.getTargetTracker().setAutoTransform(MotionTransferTracker.AutoTransform.full)
// 			
// 		else
// 			pTransferSpine.getTargetTracker().setAutoTransform(MotionTransferTracker.AutoTransform.orientationTarget)
// 		end
		
		pTransferSpine.getBaseTracker().setAutoTransform(MotionTransferTracker.AutoTransform.full)
		pTransferSpine.getBaseTracker().setOffsetRotation(Vector.new(90, 0, 0))
		
		pTransferSpine.setBendShape(pBendShapeSpine)
		pTransferSpine.setBendAxisRotation(Vector.new(90, 0, 0))
		pTransferSpine.setFitCurveToTarget(true)
		
		if isSlotChestAttached
			pTransferSpine.setTwistPropagation(1)
			
		else
			pTransferSpine.setTwistPropagation(0.5)
		end
		
		if chainSpine.getCount() > 1
			var String baseBone = chainSpine.getAt(-2) cast String
			
			// if base bone has the same position as the hip bone the spine can be properly
			// bend. if not bending can cause troubles. in this case include the hip bone
			// in the chain. this has the side effect of rotating the hip depending on the
			// shape but it avoids problems with strong bending
			// 
			// NOTE to avoid problems the distance along the Y axis is checked not if the
			//      bones have equal position. this protects against situations where the
			//      base bone is offset along the Z axis but still would be at the same Y.
			var int indexBaseBone = component.indexOfBoneNamed(baseBone)
			var int indexHipBone = component.indexOfBoneNamed(pBoneHip)
			
			if indexBaseBone != -1 and indexHipBone != -1
				var Vector basePosition = component.boneGetMatrix(indexBaseBone).getPosition()
				var Vector hipPosition = component.boneGetMatrix(indexHipBone).getPosition()
				
				if basePosition.getY() > hipPosition.getY() + 0.05
					baseBone = pBoneHip
				end
			end
			
			pTransferSpine.setBaseBone(baseBone)
			pTransferSpine.setTwistBoneCount(DEMath.max(chainSpine.getCount() - 1, 0))
			
			if chainHead.getCount() > 1
				pTransferSpine.setTargetBone(chainHead.getAt(-2) cast String)
				
			else
				pTransferSpine.setTargetBone("")
			end
			
			pTransferSpine.setTargetBaseBone(pTransferSpine.getBaseBone())
			
		else
			pTransferSpine.setBaseBone("")
			pTransferSpine.setTwistBoneCount(0)
			pTransferSpine.setTargetBaseBone("")
		end
		pTransferSpine.setScaleRotation(Vector2.new(1, 1))
		
		if pTransferSpine.getBaseBone().empty() or pTransferSpine.getTipBone().empty()
			pTransferSpine.setTipBone("")
			pTransferSpine.setBaseBone("")
			pTransferSpine.setTargetBaseBone("")
		end
		
		// neck
		pTransferNeck.getTargetTracker().setAutoTransform(MotionTransferTracker.AutoTransform.orientationTarget)
		
		pTransferNeck.getBaseTracker().setOffsetRotation(Vector.new(90, 0, 0))
		
		pTransferNeck.getBaseTracker().setAutoTransform(MotionTransferTracker.AutoTransform.full)
		/*
		if pTransferNeck.getBaseTracker().getRealSlot() != null \
		and pTransferNeck.getBaseTracker().getRealSlot().getType() == CharacterTrackerSlot.Type.chest
			pTransferNeck.getBaseTracker().setAutoTransform(MotionTransferTracker.AutoTransform.full)
			
		else
			pTransferNeck.getBaseTracker().setAutoTransform(MotionTransferTracker.AutoTransform.orientationTarget)
		end
		*/
		
		pTransferNeck.setBendShape(pBendShapeNeck)
		pTransferNeck.setBendAxisRotation(Vector.new(90, 0, 0))
		pTransferNeck.setFitCurveToTarget(false)
		pTransferNeck.setTwistPropagation(1)
		
		if chainHead.getCount() > 1
			pTransferNeck.setTipBone(chainHead.getAt(1) cast String)
			pTransferNeck.setBaseBone(chainHead.getAt(-2) cast String)
			pTransferNeck.setTwistBoneCount(DEMath.max(chainHead.getCount() - 2, 0))
			pTransferNeck.setTargetBone(""/*pBoneHead*/)
			pTransferNeck.setTargetBaseBone(""/*pTransferNeck.getBaseBone()*/)
			
		else
			pTransferNeck.setTipBone("")
			pTransferNeck.setBaseBone("")
			pTransferNeck.setTwistBoneCount(0)
			pTransferNeck.setTargetBone("")
			pTransferNeck.setTargetBaseBone("")
		end
		
		if pTransferNeck.getBaseBone().empty() or pTransferNeck.getTipBone().empty()
			pTransferNeck.setTipBone("")
			pTransferNeck.setBaseBone("")
			pTransferNeck.setTwistBoneCount(0)
			pTransferNeck.setTargetBone("")
			pTransferNeck.setTargetBaseBone("")
		end
		
		// head
// 		pTransferHead.setTipBone(pBoneHead)
// 		pTransferHead.getTipTracker().setOffsetPosition(Vector.new(0, 0, 0))
// 		pTransferHead.getTipTracker().setAutoTransform(MotionTransferTracker.AutoTransform.orientationTarget)
// 		pTransferHead.setAdjustPosition(true)
// 		
// 		if chainHead.getCount() > 1
// 			pTransferHead.setBaseBone(chainHead.getAt(-2) cast String)
// 			
// 		else
// 			pTransferHead.setBaseBone("")
// 		end
		
		pTransferHead.setTipBone(pBoneHead)
		pTransferHead.setBaseBone(pBoneHead)
		pTransferHead.getTipTracker().setOffsetPosition(Vector.new())
		pTransferHead.getTipTracker().setAutoTransform(MotionTransferTracker.AutoTransform.orientation)
		pTransferHead.setAdjustPosition(false)
		
		// right arm. separate guide bone is used if chain has at least 4 bones:
		// hand, lower arm, upper arm, shoulder. with 3 bones no shoulder is assumed
		var String armBaseBone = pBoneHip.empty() if pBoneChest else pBoneHip
		
		var Array armSpineChain = Array.new(chainSpine)
		if armSpineChain.getCount() == 0
			if not pBoneChest.empty()
				armSpineChain.add(pBoneChest)
			end
			if not pBoneHip.empty()
				armSpineChain.add(pBoneHip)
			end
		end
		
		findBoneChain(rig, pBoneHandRight, armBaseBone, chain)
		index = firstBoneInChain(chain, armSpineChain)
		
		pTransferArmRight.setTipBone(pBoneHandRight)
		pTransferArmRight.setMoveBaseIK(pMoveBaseIK)
		pTransferArmRight.setActorReach(MotionTransferIK.ActorReach.arm)
		pTransferArmRight.setReachLimit(1)
		pTransferArmRight.setReachScaling(pReachScalingArmRight)
		pTransferArmRight.setTwistBoneCount(1)
		pTransferArmRight.setTwistPropagation(0.5)
		pTransferArmRight.setTwistAxisRotation(Vector.new(0, -90, 0))
		
		if hasSlotRightHandController
			pTransferArmRight.getTipTracker().setAutoTransform(MotionTransferTracker.AutoTransform.none)
			
		else
			pTransferArmRight.getTipTracker().setAutoTransform(MotionTransferTracker.AutoTransform.orientation)
		end
		
		if index > 1 // at least 3 bones
			pTransferArmRight.setBaseBone(chain.getAt(index - 1) cast String)
			
		else
			pTransferArmRight.setBaseBone("")
		end
		
		if index > 2 // at least 4 bones
			pTransferArmRight.setGuideBone(chain.getAt(index - 2) cast String)
			
		else
			pTransferArmRight.setGuideBone(pTransferArmRight.getBaseBone())
		end
		
		pTransferArmRight.getGuideTracker().setOffsetPosition(Vector.new(0, 0, -0.2))
		pTransferArmRight.getGuideTracker().setOffsetRotation(Vector.new())
		
		// left arm. separate guide bone is used if chain has at least 4 bones:
		// hand, lower arm, upper arm, shoulder. with 3 bones no shoulder is assumed
		findBoneChain(rig, pBoneHandLeft, armBaseBone, chain)
		index = firstBoneInChain(chain, armSpineChain)
		
		pTransferArmLeft.setTipBone(pBoneHandLeft)
		pTransferArmLeft.setMoveBaseIK(pMoveBaseIK)
		pTransferArmLeft.setActorReach(MotionTransferIK.ActorReach.arm)
		pTransferArmLeft.setReachLimit(1)
		pTransferArmLeft.setReachScaling(pReachScalingArmLeft)
		pTransferArmLeft.setTwistBoneCount(1)
		pTransferArmLeft.setTwistPropagation(0.5)
		pTransferArmLeft.setTwistAxisRotation(Vector.new(0, 90, 0))
		
		if hasSlotLeftHandController
			pTransferArmLeft.getTipTracker().setAutoTransform(MotionTransferTracker.AutoTransform.none)
			
		else
			pTransferArmLeft.getTipTracker().setAutoTransform(MotionTransferTracker.AutoTransform.orientation)
		end
		
		if index > 1 // at least 3 bones
			pTransferArmLeft.setBaseBone(chain.getAt(index - 1) cast String)
			
		else
			pTransferArmLeft.setBaseBone("")
		end
		
		if index > 2 // at least 4 bones
			pTransferArmLeft.setGuideBone(chain.getAt(index - 2) cast String)
			
		else
			pTransferArmLeft.setGuideBone(pTransferArmLeft.getBaseBone())
		end
		
		pTransferArmLeft.getGuideTracker().setOffsetPosition(Vector.new(0, 0, -0.2))
		pTransferArmLeft.getGuideTracker().setOffsetRotation(Vector.new())
		
		// legs
		var Array chainRightLeg = Array.new()
		findBoneChain(rig, pBoneFootRight, pBoneHip, chainRightLeg)
		
		index = firstBoneInChain(chainRightLeg, chainSpine)
		chainRightLeg = chainRightLeg.slice(0, index)
		
		var Array chainLeftLeg = Array.new()
		findBoneChain(rig, pBoneFootLeft, pBoneHip, chainLeftLeg)
		
		index = firstBoneInChain(chainLeftLeg, chainSpine)
		chainLeftLeg = chainLeftLeg.slice(0, index)
		
		while chainRightLeg.getCount() > 0 and chainLeftLeg.getCount() > 0\
		and chainRightLeg.getAt(-1).equals(chainLeftLeg.getAt(-1))
			chainRightLeg = chainRightLeg.slice(0, -1)
			chainLeftLeg = chainLeftLeg.slice(0, -1)
		end
		
		// right leg
		pTransferLegRight.setTipBone(pBoneFootRight)
		pTransferLegRight.setMoveBaseIK(pMoveBaseIK)
		pTransferLegRight.setMoveRetracted(pMoveCrouch)
		pTransferLegRight.getTipTracker().setAutoTransform(MotionTransferTracker.AutoTransform.orientationReference)
		pTransferLegRight.setActorReach(MotionTransferIK.ActorReach.leg)
		pTransferLegRight.setTwistBoneCount(0)//DEMath.max(chainRightLeg.getCount() - 2, 0))
		pTransferLegRight.setTwistPropagation(1)
		pTransferLegRight.setTwistAxisRotation(Vector.new(-90, 0, 0))
		
		if chainRightLeg.getCount() > 0
			pTransferLegRight.setBaseBone(chainRightLeg.getAt(-1) cast String)
			
		else
			pTransferLegRight.setBaseBone("")
		end
		
		if isSlotRightFootAttached
			pTransferLegRight.getTipTracker().setAutoTransform(MotionTransferTracker.AutoTransform.orientationReference)
			
		else
			pTransferLegRight.getTipTracker().setAutoTransform(MotionTransferTracker.AutoTransform.full)
		end
		
		pTransferLegRight.setGuideBone(pTransferLegRight.getBaseBone())
		
		var Vector guideOffset = Vector.new(0, 0, 0.2)
		
		if pTransferLegRight.getGuideTracker().getRealSlot() == pTransferLegRight.getTipTracker().getRealSlot()\
		and pTransferLegRight.getGuideTracker().getRealSlot() != null
			var String slotKneeName = firstSlotWithType(config, CharacterTrackerSlot.Type.rightKnee)
			if not slotKneeName.empty()
				var CharacterTrackerSlot slotKnee = config.getTrackerSlots().getNamed(slotKneeName)
				if slotKnee != null
					var Vector positionKnee = slotKnee.getTargetPosition()
					var Vector positionFoot = pTransferLegRight.getTipTracker().getRealSlot().getTargetPosition()
					var float distance = (positionFoot - positionKnee).getLength()
					guideOffset = Vector.new(0, distance, distance)
				end
			end
			
			pTransferLegRight.getGuideTracker().setAutoTransform(pTransferLegRight.getTipTracker().getAutoTransform())
			
		else
			pTransferLegRight.getGuideTracker().setAutoTransform(MotionTransferTracker.AutoTransform.full)
		end
		
		pTransferLegRight.getGuideTracker().setOffsetPosition(guideOffset)
		
		// left leg
		pTransferLegLeft.setTipBone(pBoneFootLeft)
		pTransferLegLeft.setMoveBaseIK(pMoveBaseIK)
		pTransferLegLeft.setMoveRetracted(pMoveCrouch)
		pTransferLegLeft.setActorReach(MotionTransferIK.ActorReach.leg)
		pTransferLegLeft.setTwistBoneCount(0)//DEMath.max(chainLeftLeg.getCount() - 2, 0))
		pTransferLegLeft.setTwistPropagation(1)
		pTransferLegLeft.setTwistAxisRotation(Vector.new(-90, 0, 0))
		
		if chainLeftLeg.getCount() > 0
			pTransferLegLeft.setBaseBone(chainLeftLeg.getAt(-1) cast String)
			
		else
			pTransferLegLeft.setBaseBone("")
		end
		
		if isSlotLeftFootAttached
			pTransferLegLeft.getTipTracker().setAutoTransform(MotionTransferTracker.AutoTransform.orientationReference)
			
		else
			pTransferLegLeft.getTipTracker().setAutoTransform(MotionTransferTracker.AutoTransform.full)
		end
		
		pTransferLegLeft.setGuideBone(pTransferLegLeft.getBaseBone())
		
		guideOffset = Vector.new(0, 0, 0.2)
		
		if pTransferLegLeft.getGuideTracker().getRealSlot() == pTransferLegLeft.getTipTracker().getRealSlot()\
		and pTransferLegLeft.getGuideTracker().getRealSlot() != null
			var String slotKneeName = firstSlotWithType(config, CharacterTrackerSlot.Type.leftKnee)
			if not slotKneeName.empty()
				var CharacterTrackerSlot slotKnee = config.getTrackerSlots().getNamed(slotKneeName)
				if slotKnee != null
					var Vector positionKnee = slotKnee.getTargetPosition()
					var Vector positionFoot = pTransferLegLeft.getTipTracker().getRealSlot().getTargetPosition()
					var float distance = (positionFoot - positionKnee).getLength()
					guideOffset = Vector.new(0, distance, distance)
				end
			end
			
			pTransferLegLeft.getGuideTracker().setAutoTransform(pTransferLegLeft.getTipTracker().getAutoTransform())
			
		else
			pTransferLegLeft.getGuideTracker().setAutoTransform(MotionTransferTracker.AutoTransform.full)
		end
		
		pTransferLegLeft.getGuideTracker().setOffsetPosition(guideOffset)
	end
	
	/** Create copy of motion transfer. */
	public func MotionTransfer createCopy()
		return MotionTransferAutoHuman.new(this)
	end
	
	/** Decompose motion transfer. Returns Array of MotionTranfer or empty list if not supported. */
	public func Array decompose()
		var Array list = Array.new()
		
		if not pTransferWaist.getTracker().getSlot().empty()
			list.add(pTransferWaist.createCopy())
		end
		
		//list.add(pTransferSpineHead.createCopy())
		
		if not pTransferSpine.getBaseTracker().getSlot().empty()\
		and not pTransferSpine.getTargetTracker().getSlot().empty()
			list.add(pTransferSpine.createCopy())
		end
		
		if not pTransferNeck.getBaseTracker().getSlot().empty()\
		and not pTransferNeck.getTargetTracker().getSlot().empty()
			list.add(pTransferNeck.createCopy())
		end
		
		if not pTransferHead.getBaseTracker().getSlot().empty()\
		and not pTransferHead.getTipTracker().getSlot().empty()
			list.add(pTransferHead.createCopy())
		end
		
		if not pTransferArmRight.getBaseTracker().getSlot().empty()\
		and not pTransferArmRight.getTipTracker().getSlot().empty()
			list.add(pTransferArmRight.createCopy())
		end
		
		if not pTransferArmLeft.getBaseTracker().getSlot().empty()\
		and not pTransferArmLeft.getTipTracker().getSlot().empty()
			list.add(pTransferArmLeft.createCopy())
		end
		
		if not pTransferLegRight.getBaseTracker().getSlot().empty()\
		and not pTransferLegRight.getTipTracker().getSlot().empty()
			list.add(pTransferLegRight.createCopy())
		end
		
		if not pTransferLegLeft.getBaseTracker().getSlot().empty()\
		and not pTransferLegLeft.getTipTracker().getSlot().empty()
			list.add(pTransferLegLeft.createCopy())
		end
		
		return list
	end
	
	/** Load from XML. */
	public func void load(BaseXmlLoader loader, EasyXMLElement root)
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("name")
				setName(element.getFirstCData())
				
			elif tagName.equals("boneHead")
				setBoneHead(element.getFirstCData())
				
			elif tagName.equals("boneChest")
				setBoneChest(element.getFirstCData())
				
			elif tagName.equals("boneHandRight")
				setBoneHandRight(element.getFirstCData())
				
			elif tagName.equals("boneHandLeft")
				setBoneHandLeft(element.getFirstCData())
				
			elif tagName.equals("boneHip")
				setBoneHip(element.getFirstCData())
				
			elif tagName.equals("boneFootRight")
				setBoneFootRight(element.getFirstCData())
				
			elif tagName.equals("boneFootLeft")
				setBoneFootLeft(element.getFirstCData())
				
			elif tagName.equals("bendShapeSpine")
				setBendShapeSpine(element.getFirstCDataFloat())
				
			elif tagName.equals("bendShapeNeck")
				setBendShapeNeck(element.getFirstCDataFloat())
				
			elif tagName.equals("moveBaseIK")
				setMoveBaseIK(element.getFirstCData())
				
			elif tagName.equals("moveCrouch")
				setMoveCrouch(element.getFirstCData())
				
			elif tagName.equals("reachScalingArmRight")
				pReachScalingArmRight = loader.readVector(element)
				
			elif tagName.equals("reachScalingArmLeft")
				pReachScalingArmLeft = loader.readVector(element)
				
			elif tagName.equals("transfers")
				loadTransfers(loader, element)
			end
		end)
	end
	
	protected func void loadTransfers(BaseXmlLoader loader, EasyXMLElement root)
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("waist")
				pTransferWaist.load(loader, element)
				
			/*
			elif tagName.equals("spineHead")
				pTransferSpineHead.load(loader, element)
			*/
				
			elif tagName.equals("head")
				pTransferHead.load(loader, element)
				
			elif tagName.equals("neck")
				pTransferNeck.load(loader, element)
				
			elif tagName.equals("spine")
				pTransferSpine.load(loader, element)
				
			elif tagName.equals("armRight")
				pTransferArmRight.load(loader, element)
				
			elif tagName.equals("armLeft")
				pTransferArmLeft.load(loader, element)
				
			elif tagName.equals("legRight")
				pTransferLegRight.load(loader, element)
				
			elif tagName.equals("legLeft")
				pTransferLegLeft.load(loader, element)
			end
		end)
	end
	
	/** Post load initialize. */
	public func void postLoadInit(CharacterConfiguration config)
		pTransferWaist.postLoadInit(config)
		//pTransferSpineHead.postLoadInit(config)
		pTransferSpine.postLoadInit(config)
		pTransferNeck.postLoadInit(config)
		pTransferHead.postLoadInit(config)
		pTransferArmRight.postLoadInit(config)
		pTransferArmLeft.postLoadInit(config)
		pTransferLegRight.postLoadInit(config)
		pTransferLegLeft.postLoadInit(config)
	end
	
	/** Save to XML. */
	public func void save(BaseXmlLoader loader, EasyXMLElement tag)
		tag.addDataTag("name", getName())
		tag.addDataTag("boneHead", pBoneHead)
		tag.addDataTag("boneChest", pBoneChest)
		tag.addDataTag("boneHandRight", pBoneHandRight)
		tag.addDataTag("boneHandLeft", pBoneHandLeft)
		tag.addDataTag("boneHip", pBoneHip)
		tag.addDataTag("boneFootRight", pBoneFootRight)
		tag.addDataTag("boneFootLeft", pBoneFootLeft)
		tag.addDataTag("bendShapeSpine", pBendShapeSpine)
		tag.addDataTag("bendShapeNeck", pBendShapeNeck)
		tag.addDataTag("moveBaseIK", pMoveBaseIK)
		tag.addDataTag("moveCrouch", pMoveCrouch)
		loader.writeVector(tag, "reachScalingArmRight", pReachScalingArmRight)
		loader.writeVector(tag, "reachScalingArmLeft", pReachScalingArmLeft)
		
		var EasyXMLElement tagTransfers = tag.addTag("transfers")
		pTransferWaist.save(loader, tagTransfers.addTag("waist"))
		//pTransferSpineHead.save(loader, tagTransfers.addTag("spineHead"))
		pTransferSpine.save(loader, tagTransfers.addTag("spine"))
		pTransferNeck.save(loader, tagTransfers.addTag("neck"))
		pTransferHead.save(loader, tagTransfers.addTag("head"))
		pTransferArmRight.save(loader, tagTransfers.addTag("armRight"))
		pTransferArmLeft.save(loader, tagTransfers.addTag("armLeft"))
		pTransferLegRight.save(loader, tagTransfers.addTag("legRight"))
		pTransferLegLeft.save(loader, tagTransfers.addTag("legLeft"))
	end
	
	
	
	/** Find guide bone or empty string. */
	protected func String findBoneBeforeBase(Rig rig, String tipBone, String baseBone)
		if tipBone.empty() or baseBone.empty()
			return ""
		end
		
		var Array chain = Array.new()
		findBoneChain(rig, tipBone, baseBone, chain)
		if chain.getCount() < 3
			return ""
		end
		
		return chain.getAt( -2 ) cast String
	end
	
	/** Index of first bone in another chain or chain.getCount(). */
	protected func int firstBoneInChain(Array chain, Array otherChain)
		var int index, count = chain.getCount()
		for index = 0 to count
			if otherChain.has(chain.getAt(index))
				break
			end
		end
		return index
	end
	
	/** Find slots and assign them to child transfers. */
	protected func void assignSlots(CharacterConfiguration config)
		var String slotWaist = firstSlotWithType(config, CharacterTrackerSlot.Type.waist)
		
		var String slotHead = firstSlotAttachedWithType(config, CharacterTrackerSlot.Type.headTracker)
		if slotHead.empty()
			slotHead = firstSlotWithType(config, CharacterTrackerSlot.Type.headHmd)
		end
		
		var String slotChest = firstSlotAttachedWithType(config, CharacterTrackerSlot.Type.chest)
		
		var String slotFootRight = firstSlotWithType(config, CharacterTrackerSlot.Type.rightFoot)
		var String slotFootLeft = firstSlotWithType(config, CharacterTrackerSlot.Type.leftFoot)
		
		var String slotKneeRight = firstSlotAttachedWithType(config, CharacterTrackerSlot.Type.rightKnee)
		var String slotKneeLeft = firstSlotAttachedWithType(config, CharacterTrackerSlot.Type.leftKnee)
		
		var String armSlotBase = slotChest.empty() if slotWaist else slotChest
		var String spineSlotTarget = slotChest.empty() if slotHead else slotChest
		
		var String legRightSlotGuide = slotKneeRight.empty() if slotFootRight else slotKneeRight
		var String legLeftSlotGuide = slotKneeLeft.empty() if slotFootLeft else slotKneeLeft
		
		pTransferWaist.getTracker().setSlot(slotWaist)
		
		/*
		pTransferSpineHead.getTipTracker().setSlot(slotHead)
		pTransferSpineHead.getBaseTracker().setSlot(slotWaist)
		*/
		
		pTransferHead.getTipTracker().setSlot(slotHead)
		
		pTransferNeck.getTargetTracker().setSlot(slotHead)
		pTransferNeck.getBaseTracker().setSlot(spineSlotTarget)
		
		pTransferSpine.getTargetTracker().setSlot(spineSlotTarget)
		pTransferSpine.getBaseTracker().setSlot(slotWaist)
		
		pTransferArmRight.getTipTracker().setSlot(firstSlotWithType(config, CharacterTrackerSlot.Type.rightHandController))
		pTransferArmRight.getGuideTracker().setSlot(firstSlotWithType(config, CharacterTrackerSlot.Type.rightElbow))
		pTransferArmRight.getBaseTracker().setSlot(armSlotBase)
		
		pTransferArmLeft.getTipTracker().setSlot(firstSlotWithType(config, CharacterTrackerSlot.Type.leftHandController))
		pTransferArmLeft.getGuideTracker().setSlot(firstSlotWithType(config, CharacterTrackerSlot.Type.leftElbow))
		pTransferArmLeft.getBaseTracker().setSlot(armSlotBase)
		
		pTransferLegRight.getTipTracker().setSlot(slotFootRight)
		pTransferLegRight.getGuideTracker().setSlot(legRightSlotGuide)
		pTransferLegRight.getBaseTracker().setSlot(slotWaist)
		
		pTransferLegLeft.getTipTracker().setSlot(slotFootLeft)
		pTransferLegLeft.getGuideTracker().setSlot(legLeftSlotGuide)
		pTransferLegLeft.getBaseTracker().setSlot(slotWaist)
	end
	
	/** First slot name matching type or empty string. */
	protected func String firstSlotWithType(CharacterConfiguration config, CharacterTrackerSlot.Type type)
		var CharacterTrackerSlot slot = config.getTrackerSlots().firstWithType(type)
		return slot != null if slot.getName() else ""
	end
	
	/** First slot name with attached device matching type or empty string. */
	protected func String firstSlotAttachedWithType(CharacterConfiguration config, CharacterTrackerSlot.Type type)
		var CharacterTrackerSlot slot = config.getTrackerSlots().firstAttachedWithType(type)
		return slot != null if slot.getName() else ""
	end
end
