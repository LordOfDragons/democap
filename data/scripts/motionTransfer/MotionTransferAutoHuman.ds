/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.MotionTransferSystem

pin Democap.Actors
pin Democap.Behaviors
pin Democap.Characters

pin Dragengine.Animators
pin Dragengine.LoadSave
pin Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.XML


/**
 * Motion transfer automatic human.
 * 
 * Uses various child motion transfers configured by a few key parameters for simplicity.
 */
class MotionTransferAutoHuman extends DefaultMotionTransfer
	/** Factory. */
	class Factory implements MotionTransferFactory
		func new()
		end
		
		func String factoryID()
			return "autoHuman"
		end
		
		func MotionTransfer createMotionTransfer()
			return MotionTransferAutoHuman.new(factoryID())
		end
		
		func String displayName()
			return "@UI.AutomaticHuman"
		end
	end
	
	/** Waist mode. */
	enum WaistMode
		/** Relative attach waist. Best for hips close to actor hips. Also good for sit and lay down. */
		relative
		
		/** Relocated attach waist. Best for hips way off actor hips. */
		relocate
		
		/** Direct attach waist. Alternative to relocate for problematic situations like sit or lay down. */
		direct
	end
	
	
	
	var String pBoneHead, pBoneChest, pBoneHip
	var String pBoneHandRight, pBoneHandLeft
	var String pBoneFootRight, pBoneFootLeft
	var float pBendShapeSpine, pBendShapeNeck
	var String pMoveBaseIK, pMoveCrouch
	var Vector pReachScalingArmRight, pReachScalingArmRightBack
	var Vector pReachScalingArmLeft, pReachScalingArmLeftBack
	var Vector pScaleHeadRotation, pScaleSpineBending
	var Vector pNeckBendAxisRotation, pSpineBendAxisRotation
	var bool pRelocateArms, pPullFeetToGround
	var WaistMode pWaistMode
	var String pNeckBendMoveX, pNeckBendMoveY, pNeckShiftMoveX, pNeckShiftMoveY
	var Vector2 pNeckBendMoveRange, pNeckShiftMoveRange
	
	// var MotionTransferScaleSlots pTransferScaleLower, pTransferScaleUpper
	var MotionTransferChild pTransferWaist
	var MotionTransferBaseShiftSlots pTransferShiftUpper, pTransferShiftLegLeft, pTransferShiftLegRight
	// var MotionTransferIK pTransferSpineHead
	var MotionTransferIK pTransferHead
	var MotionTransferBend pTransferNeck, pTransferNeckShift, pTransferSpine
	var MotionTransferIK pTransferArmRight, pTransferArmLeft
	var MotionTransferIK pTransferLegRight, pTransferLegLeft
	
	
	
	/** Create motion transfer. */
	func new(String factoryID) super(factoryID)
		pBoneHead = ""
		pBoneChest = ""
		pBoneHandRight = ""
		pBoneHandLeft = ""
		pBoneHip = ""
		pBoneFootRight = ""
		pBoneFootLeft = ""
		pBendShapeSpine = 0.667
		pBendShapeNeck = 0.667
		pMoveBaseIK = ""
		pMoveCrouch = ""
		pReachScalingArmRight = Vector.new(1, 1, 1)
		pReachScalingArmRightBack = Vector.new(1, 1, 1)
		pReachScalingArmLeft = Vector.new(1, 1, 1)
		pReachScalingArmLeftBack = Vector.new(1, 1, 1)
		pScaleHeadRotation = Vector.new(1, 1, 1)
		pScaleSpineBending = Vector.new(1, 1, 1)
		pNeckBendAxisRotation = Vector.new(90, 0, 0)
		pSpineBendAxisRotation = Vector.new(90, 0, 0)
		pRelocateArms = false
		pWaistMode = WaistMode.relative
		pPullFeetToGround = true
		pNeckBendMoveX = ""
		pNeckBendMoveY = ""
		pNeckShiftMoveX = ""
		pNeckShiftMoveY = ""
		pNeckBendMoveRange = Vector2.new(60, 45)
		
		// neck/head distance in actor space is 2dm . head can be shifted around 5cm forward.
		// this results in an angle of deg(atan2(0.05,0.2)) = 14 degrees. for sidewards shift
		// 2cm is used. this yields an angle of 5 degrees. To have some leeway these values
		// are increased. (15, 7.5)
		// additional tests suggest (20, 12) is a good coverage too where the actor is reaching
		// full shift pretty close to the max range. using this one as default.
		pNeckShiftMoveRange = Vector2.new(20, 12)
		
		// create child motion transfers
		var MotionTransferChild.Factory factoryChild = MotionTransferChild.Factory.new()
		var MotionTransferIK.Factory factoryIK = MotionTransferIK.Factory.new()
		var MotionTransferBend.Factory factoryBend = MotionTransferBend.Factory.new()
		var MotionTransferBaseShiftSlots.Factory factoryBaseShiftSlots = MotionTransferBaseShiftSlots.Factory.new()
		
		/*
		var MotionTransferScaleSlots.Factory factoryScaleSlots = MotionTransferScaleSlots.Factory.new()
		
		pTransferScaleLower = MotionTransferScaleSlots.new(factoryScaleSlots.factoryID())
		pTransferScaleLower.setName("AutoHuman: Scale Lower")
		pTransferScaleLower.setScaleFactor(Vector.new(1, 1, 1))
		
		pTransferScaleUpper = MotionTransferScaleSlots.new(factoryScaleSlots.factoryID())
		pTransferScaleUpper.setName("AutoHuman: Scale Upper")
		pTransferScaleUpper.setScaleFactor(Vector.new(1, 1, 1))
		*/
		
		pTransferShiftLegLeft = MotionTransferBaseShiftSlots.new(factoryBaseShiftSlots.factoryID())
		pTransferShiftLegLeft.setName("AutoHuman: Shift Leg Left")
		pTransferShiftLegLeft.setScaleShift(1)
		
		pTransferShiftLegRight = MotionTransferBaseShiftSlots.new(factoryBaseShiftSlots.factoryID())
		pTransferShiftLegRight.setName("AutoHuman: Shift Leg Right")
		pTransferShiftLegRight.setScaleShift(1)
		
		pTransferShiftUpper = MotionTransferBaseShiftSlots.new(factoryBaseShiftSlots.factoryID())
		pTransferShiftUpper.setName("AutoHuman: Shift Upper")
		
		pTransferWaist = MotionTransferChild.new(factoryChild.factoryID())
		pTransferWaist.setName("AutoHuman: Waist")
		
		/*
		pTransferSpineHead = MotionTransferIK.new(factoryIK.factoryID())
		pTransferSpineHead.setName("AutoHuman: SpineHead")
		pTransferSpineHead.setBendAxisRotation(Vector.new(90, 0, 0))
		pTransferSpineHead.setTwistPropagation(1)
		*/
		
		pTransferHead = MotionTransferIK.new(factoryIK.factoryID())
		pTransferHead.setName("AutoHuman: Head")
		
		pTransferNeckShift = MotionTransferBend.new(factoryBend.factoryID())
		pTransferNeckShift.setName("AutoHuman: Neck Shift")
		pTransferNeckShift.setBendAxisRotation(pNeckBendAxisRotation)
		pTransferNeckShift.setTwistPropagation(0.5)
		
		pTransferNeck = MotionTransferBend.new(factoryBend.factoryID())
		pTransferNeck.setName("AutoHuman: Neck")
		pTransferNeck.setBendAxisRotation(pNeckBendAxisRotation)
		pTransferNeck.setTwistPropagation(0.5)
		
		pTransferSpine = MotionTransferBend.new(factoryBend.factoryID())
		pTransferSpine.setName("AutoHuman: Spine")
		pTransferSpine.setBendAxisRotation(pSpineBendAxisRotation)
		pTransferSpine.setTwistPropagation(0.5)
		
		pTransferArmRight = MotionTransferIK.new(factoryIK.factoryID())
		pTransferArmRight.setName("AutoHuman: ArmRight")
		pTransferArmRight.getTipTracker().setAutoTransform(MotionTransferTracker.AutoTransform.none)
		pTransferArmRight.setActorReach(MotionTransferIK.ActorReach.arm)
		pTransferArmRight.setTwistPropagation(0.5)
		pTransferArmRight.setTwistAxisRotation(Vector.new(0, -90, 0))
		pTransferArmRight.setTwistBoneCount(1)
		
		pTransferArmLeft = MotionTransferIK.new(factoryIK.factoryID())
		pTransferArmLeft.setName("AutoHuman: ArmLeft")
		pTransferArmLeft.getTipTracker().setAutoTransform(MotionTransferTracker.AutoTransform.none)
		pTransferArmLeft.setActorReach(MotionTransferIK.ActorReach.arm)
		pTransferArmLeft.setTwistPropagation(0.5)
		pTransferArmLeft.setTwistAxisRotation(Vector.new(0, 90, 0))
		pTransferArmLeft.setTwistBoneCount(1)
		
		pTransferLegRight = MotionTransferIK.new(factoryIK.factoryID())
		pTransferLegRight.setName("AutoHuman: LegRight")
		pTransferLegRight.getTipTracker().setAutoTransform(MotionTransferTracker.AutoTransform.orientation)
		pTransferLegRight.setActorReach(MotionTransferIK.ActorReach.leg)
		pTransferLegRight.setTwistAxisRotation(Vector.new(-90, 0, 0))
		pTransferLegRight.setTwistPropagation(1)
		pTransferLegRight.setTwistBoneCount(1)
		
		pTransferLegLeft = MotionTransferIK.new(factoryIK.factoryID())
		pTransferLegLeft.setName("AutoHuman: LegLeft")
		pTransferLegLeft.getTipTracker().setAutoTransform(MotionTransferTracker.AutoTransform.orientation)
		pTransferLegLeft.setActorReach(MotionTransferIK.ActorReach.leg)
		pTransferLegLeft.setTwistAxisRotation(Vector.new(-90, 0, 0))
		pTransferLegLeft.setTwistPropagation(1)
		pTransferLegLeft.setTwistBoneCount(1)
	end
	
	/** Create copy of motion transfer. */
	func new(MotionTransferAutoHuman transfer) super(transfer)
		pBoneHead = transfer.pBoneHead
		pBoneChest = transfer.pBoneChest
		pBoneHandRight = transfer.pBoneHandRight
		pBoneHandLeft = transfer.pBoneHandLeft
		pBoneHip = transfer.pBoneHip
		pBoneFootRight = transfer.pBoneFootRight
		pBoneFootLeft = transfer.pBoneFootLeft
		pBendShapeSpine = transfer.pBendShapeSpine
		pBendShapeNeck = transfer.pBendShapeNeck
		pMoveBaseIK = transfer.pMoveBaseIK
		pMoveCrouch = transfer.pMoveCrouch
		pReachScalingArmRight = transfer.pReachScalingArmRight
		pReachScalingArmRightBack = transfer.pReachScalingArmRightBack
		pReachScalingArmLeft = transfer.pReachScalingArmLeft
		pReachScalingArmLeftBack = transfer.pReachScalingArmLeftBack
		pScaleHeadRotation = transfer.pScaleHeadRotation
		pScaleSpineBending = transfer.pScaleSpineBending
		pNeckBendAxisRotation = transfer.pNeckBendAxisRotation
		pSpineBendAxisRotation = transfer.pSpineBendAxisRotation
		pRelocateArms = transfer.pRelocateArms
		pWaistMode = transfer.pWaistMode
		pPullFeetToGround = transfer.pPullFeetToGround
		pNeckBendMoveX = transfer.pNeckBendMoveX
		pNeckBendMoveY = transfer.pNeckBendMoveY
		pNeckShiftMoveX = transfer.pNeckShiftMoveX
		pNeckShiftMoveY = transfer.pNeckShiftMoveY
		pNeckBendMoveRange = transfer.pNeckBendMoveRange
		pNeckShiftMoveRange = transfer.pNeckShiftMoveRange
		
		// pTransferScaleLower = MotionTransferScaleSlots.new(transfer.pTransferScaleLower)
		// pTransferScaleUpper = MotionTransferScaleSlots.new(transfer.pTransferScaleUpper)
		pTransferShiftLegLeft = MotionTransferBaseShiftSlots.new(transfer.pTransferShiftLegLeft)
		pTransferShiftLegRight = MotionTransferBaseShiftSlots.new(transfer.pTransferShiftLegRight)
		pTransferShiftUpper = MotionTransferBaseShiftSlots.new(transfer.pTransferShiftUpper)
		pTransferWaist = MotionTransferChild.new(transfer.pTransferWaist)
// 		pTransferSpineHead = MotionTransferIK.new(transfer.pTransferSpineHead)
		pTransferNeckShift = MotionTransferBend.new(transfer.pTransferNeckShift)
		pTransferNeck = MotionTransferBend.new(transfer.pTransferNeck)
		pTransferSpine = MotionTransferBend.new(transfer.pTransferSpine)
		pTransferHead = MotionTransferIK.new(transfer.pTransferHead)
		pTransferArmRight = MotionTransferIK.new(transfer.pTransferArmRight)
		pTransferArmLeft = MotionTransferIK.new(transfer.pTransferArmLeft)
		pTransferLegRight = MotionTransferIK.new(transfer.pTransferLegRight)
		pTransferLegLeft = MotionTransferIK.new(transfer.pTransferLegLeft)
	end
	
	
	
	/** Head bone name. */
	func String getBoneHead()
		return pBoneHead
	end
	
	/** Set head bone name. */
	func void setBoneHead(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pBoneHead = bone
	end
	
	/** Chest bone name. */
	func String getBoneChest()
		return pBoneChest
	end
	
	/** Set chest bone name. */
	func void setBoneChest(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pBoneChest = bone
	end
	
	/** Right hand bone name. */
	func String getBoneHandRight()
		return pBoneHandRight
	end
	
	/** Set right hand bone name. */
	func void setBoneHandRight(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pBoneHandRight = bone
	end
	
	/** Left hand bone name. */
	func String getBoneHandLeft()
		return pBoneHandLeft
	end
	
	/** Set left hand bone name. */
	func void setBoneHandLeft(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pBoneHandLeft = bone
	end
	
	/** Hip bone name. */
	func String getBoneHip()
		return pBoneHip
	end
	
	/** Set hip bone name. */
	func void setBoneHip(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pBoneHip = bone
	end
	
	/** Right foot bone name. */
	func String getBoneFootRight()
		return pBoneFootRight
	end
	
	/** Set right foot bone name. */
	func void setBoneFootRight(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pBoneFootRight = bone
	end
	
	/** Left foot bone name. */
	func String getBoneFootLeft()
		return pBoneFootLeft
	end
	
	/** Set left foot bone name. */
	func void setBoneFootLeft(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pBoneFootLeft = bone
	end
	
	/**
	 * Spine bend shape in the range from 0 to 1. 0 bends only at the base bone. 1 bends only at the
	 * tip bone. 0.5 bends all bones equally. Values in between gradually blend between.
	 */
	func float getBendShapeSpine()
		return pBendShapeSpine
	end
	
	/**
	 * Set spine bend shape in the range from 0 to 1. 0 bends only at the base bone. 1 bends only at the
	 * tip bone. 0.5 bends all bones equally. Values in between gradually blend between.
	 */
	func void setBendShapeSpine(float shape)
		pBendShapeSpine = DEMath.clamp(shape, 0.0, 1.0)
	end
	
	/**
	 * Neck bend shape in the range from 0 to 1. 0 bends only at the base bone. 1 bends only at the
	 * tip bone. 0.5 bends all bones equally. Values in between gradually blend between.
	 */
	func float getBendShapeNeck()
		return pBendShapeNeck
	end
	
	/**
	 * Set neck bend shape in the range from 0 to 1. 0 bends only at the base bone. 1 bends only at the
	 * tip bone. 0.5 bends all bones equally. Values in between gradually blend between.
	 */
	func void setBendShapeNeck(float shape)
		pBendShapeNeck = DEMath.clamp(shape, 0.0, 1.0)
	end
	
	/** Name of move to use to init base IK state for better results. */
	func String getMoveBaseIK()
		return pMoveBaseIK
	end
	
	/** Set name of move to use to init base IK state for better results. */
	func void setMoveBaseIK(String move)
		if move == null
			throw ENullPointer.new("move")
		end
		pMoveBaseIK = move
	end
	
	/** Name of move to use to init crouch pose for better results. */
	func String getMoveCrouch()
		return pMoveCrouch
	end
	
	/** Set name of move to use to init crouch pose for better results. */
	func void setMoveCrouch(String move)
		if move == null
			throw ENullPointer.new("move")
		end
		pMoveCrouch = move
	end
	
	/** Right arm reach scaling. */
	func Vector getReachScalingArmRight()
		return pReachScalingArmRight
	end
	
	/** Set right arm reach scaling. */
	func void setReachScalingArmRight(Vector scaling)
		if scaling == null
			throw ENullPointer.new("scaling")
		end
		pReachScalingArmRight = scaling
	end
	
	/** Right arm reach scaling backwards. */
	func Vector getReachScalingArmRightBack()
		return pReachScalingArmRightBack
	end
	
	/** Set right arm reach scaling backwards. */
	func void setReachScalingArmRightBack(Vector scaling)
		if scaling == null
			throw ENullPointer.new("scaling")
		end
		pReachScalingArmRightBack = scaling
	end
	
	/** Left arm reach scaling. */
	func Vector getReachScalingArmLeft()
		return pReachScalingArmLeft
	end
	
	/** Set left arm reach scaling. */
	func void setReachScalingArmLeft(Vector scaling)
		if scaling == null
			throw ENullPointer.new("scaling")
		end
		pReachScalingArmLeft = scaling
	end
	
	/** Left arm reach scaling backwarts. */
	func Vector getReachScalingArmLeftBack()
		return pReachScalingArmLeftBack
	end
	
	/** Set left arm reach scaling backwards. */
	func void setReachScalingArmLeftBack(Vector scaling)
		if scaling == null
			throw ENullPointer.new("scaling")
		end
		pReachScalingArmLeftBack = scaling
	end
	
	/** Head rotation scaling. */
	func Vector getScaleHeadRotation()
		return pScaleHeadRotation
	end
	
	/** Set head rotation scaling. */
	func void setScaleHeadRotation(Vector scaling)
		if scaling == null
			throw ENullPointer.new("scaling")
		end
		pScaleHeadRotation = scaling
	end
	
	/** Spine bending scaling. */
	func Vector getScaleSpineBending()
		return pScaleSpineBending
	end
	
	/** Set spine bending scaling. */
	func void setScaleSpineBending(Vector scaling)
		if scaling == null
			throw ENullPointer.new("scaling")
		end
		pScaleSpineBending = scaling
	end
	
	/** Neck bend axis rotation. */
	func Vector getNeckBendAxisRotation()
		return pNeckBendAxisRotation
	end
	
	/** Set neck bend axis rotation. */
	func void setNeckBendAxisRotation(Vector rotation)
		if rotation == null
			throw ENullPointer.new("rotation")
		end
		pNeckBendAxisRotation = rotation
	end
	
	/** Spine bend axis rotation. */
	func Vector getSpineBendAxisRotation()
		return pSpineBendAxisRotation
	end
	
	/** Set spine bend axis rotation. */
	func void setSpineBendAxisRotation(Vector rotation)
		if rotation == null
			throw ENullPointer.new("rotation")
		end
		pSpineBendAxisRotation = rotation
	end
	
	/** Relocate arms. */
	func bool getRelocateArms()
		return pRelocateArms
	end
	
	/** Set to relocate arms. */
	func void setRelocateArms(bool relocate)
		pRelocateArms = relocate
	end
	
	/** Waist mode. */
	func WaistMode getWaistMode()
		return pWaistMode
	end
	
	/** Set waist mode. */
	func void setWaistMode(WaistMode mode)
		pWaistMode = mode
	end
	
	/** Pull feet to ground. */
	func bool getPullFeetToGround()
		return pPullFeetToGround
	end
	
	/** Set pull feet to ground. */
	func void setPullFeetToGround(bool pullFeetToGround)
		pPullFeetToGround = pullFeetToGround
	end
	
	/** Animation move to use for X axis neck bending or empty string. */
	func String getNeckBendMoveX()
		return pNeckBendMoveX
	end
	
	/** Set animation move to use for X axis neck bending or empty string. */
	func void setNeckBendMoveX(String move)
		if move == null
			throw ENullPointer.new("move")
		end
		pNeckBendMoveX = move
	end
	
	/** Animation move to use for Y axis neck bending or empty string. */
	func String getNeckBendMoveY()
		return pNeckBendMoveY
	end
	
	/** Set animation move to use for Y axis neck bending or empty string. */
	func void setNeckBendMoveY(String move)
		if move == null
			throw ENullPointer.new("move")
		end
		pNeckBendMoveY = move
	end
	
	/** Range in degrees of neck bending rotation to map to move based bending. */
	func Vector2 getNeckBendMoveRange()
		return pNeckBendMoveRange
	end
	
	/** Set range in degrees of neck bending rotation to map to move based bending. */
	func void setNeckBendMoveRange(Vector2 range)
		if range == null
			throw ENullPointer.new("range")
		end
		pNeckBendMoveRange = range
	end
	
	/** Animation move to use for X axis neck shifting or empty string. */
	func String getNeckShiftMoveX()
		return pNeckShiftMoveX
	end
	
	/** Set animation move to use for X axis neck shifting or empty string. */
	func void setNeckShiftMoveX(String move)
		if move == null
			throw ENullPointer.new("move")
		end
		pNeckShiftMoveX = move
	end
	
	/** Animation move to use for Y axis neck shifting or empty string. */
	func String getNeckShiftMoveY()
		return pNeckShiftMoveY
	end
	
	/** Set animation move to use for Y axis neck shifting or empty string. */
	func void setNeckShiftMoveY(String move)
		if move == null
			throw ENullPointer.new("move")
		end
		pNeckShiftMoveY = move
	end
	
	/** Range in degrees of neck shift rotation to map to move based shifting. */
	func Vector2 getNeckShiftMoveRange()
		return pNeckShiftMoveRange
	end
	
	/** Set range in degrees of neck shift rotation to map to move based shifting. */
	func void setNeckShiftMoveRange(Vector2 range)
		if range == null
			throw ENullPointer.new("range")
		end
		pNeckShiftMoveRange = range
	end
	
	
	
	/** Child motion transfer. */
	/*
	func MotionTransferScaleSlots getTransferScaleLower()
		return pTransferScaleLower
	end
	
	func MotionTransferScaleSlots getTransferScaleUpper()
		return pTransferScaleUpper
	end
	*/
	
	func MotionTransferBaseShiftSlots getTransferShiftUpper()
		return pTransferShiftUpper
	end
	
	func MotionTransferBaseShiftSlots getTransferShiftLegLeft()
		return pTransferShiftLegLeft
	end
	
	func MotionTransferBaseShiftSlots getTransferShiftLegRight()
		return pTransferShiftLegRight
	end
	
	func MotionTransferChild getTransferWaist()
		return pTransferWaist
	end
	
	/*
	func MotionTransferIK getTransferSpineHead()
		return pTransferSpineHead
	end
	*/
	
	func MotionTransferIK getTransferHead()
		return pTransferHead
	end
	
	func MotionTransferBend getTransferNeckShift()
		return pTransferNeckShift
	end
	
	func MotionTransferBend getTransferNeck()
		return pTransferNeck
	end
	
	func MotionTransferBend getTransferSpine()
		return pTransferSpine
	end
	
	func MotionTransferIK getTransferArmRight()
		return pTransferArmRight
	end
	
	func MotionTransferIK getTransferArmLeft()
		return pTransferArmLeft
	end
	
	func MotionTransferIK getTransferLegRight()
		return pTransferLegRight
	end
	
	func MotionTransferIK getTransferLegLeft()
		return pTransferLegLeft
	end
	
	
	
	/** Init element class. */
	func void initElementClass(CharacterConfiguration config, BaseVRActorClass eclass, ModifiedRig modifyRig)
		// pTransferScaleLower.initElementClass(config, eclass, modifyRig)
		// pTransferScaleUpper.initElementClass(config, eclass, modifyRig)
		if pWaistMode == WaistMode.relocate
			pTransferShiftUpper.initElementClass(config, eclass, modifyRig)
		end
		if pPullFeetToGround
			pTransferShiftLegLeft.initElementClass(config, eclass, modifyRig)
			pTransferShiftLegRight.initElementClass(config, eclass, modifyRig)
		end
		pTransferWaist.initElementClass(config, eclass, modifyRig)
		// pTransferSpineHead.initElementClass(config, eclass, modifyRig)
		pTransferSpine.initElementClass(config, eclass, modifyRig)
		pTransferNeckShift.initElementClass(config, eclass, modifyRig)
		pTransferNeck.initElementClass(config, eclass, modifyRig)
		pTransferHead.initElementClass(config, eclass, modifyRig)
		pTransferArmRight.initElementClass(config, eclass, modifyRig)
		pTransferArmLeft.initElementClass(config, eclass, modifyRig)
		pTransferLegRight.initElementClass(config, eclass, modifyRig)
		pTransferLegLeft.initElementClass(config, eclass, modifyRig)
	end
	
	/** Reset calibration. */
	func void resetCalibration()
		// pTransferScaleLower.resetCalibration()
		// pTransferScaleUpper.resetCalibration()
		pTransferShiftLegLeft.resetCalibration()
		pTransferShiftLegRight.resetCalibration()
		pTransferShiftUpper.resetCalibration()
		pTransferWaist.resetCalibration()
		// pTransferSpineHead.resetCalibration()
		pTransferSpine.resetCalibration()
		pTransferNeckShift.resetCalibration()
		pTransferNeck.resetCalibration()
		pTransferHead.resetCalibration()
		pTransferArmRight.resetCalibration()
		pTransferArmLeft.resetCalibration()
		pTransferLegRight.resetCalibration()
		pTransferLegLeft.resetCalibration()
	end
	
	/** Calibrate character. */
	func void calibrate(CharacterConfiguration config, ActorProfile actorProfile, \
	BaseVRActor actor, Component component)
		initChildTransferParams(config, actorProfile, actor, component)
		
		// pTransferScaleLower.calibrate(config, actorProfile, actor, component)
		// pTransferScaleUpper.calibrate(config, actorProfile, actor, component)
		pTransferShiftLegLeft.calibrate(config, actorProfile, actor, component)
		pTransferShiftLegRight.calibrate(config, actorProfile, actor, component)
		pTransferShiftUpper.calibrate(config, actorProfile, actor, component)
		pTransferWaist.calibrate(config, actorProfile, actor, component)
		// pTransferSpineHead.calibrate(config, actorProfile, actor, component)
		pTransferSpine.calibrate(config, actorProfile, actor, component)
		pTransferNeckShift.calibrate(config, actorProfile, actor, component)
		pTransferNeck.calibrate(config, actorProfile, actor, component)
		pTransferHead.calibrate(config, actorProfile, actor, component)
		pTransferArmRight.calibrate(config, actorProfile, actor, component)
		pTransferArmLeft.calibrate(config, actorProfile, actor, component)
		pTransferLegRight.calibrate(config, actorProfile, actor, component)
		pTransferLegLeft.calibrate(config, actorProfile, actor, component)
	end
	
	/** Init child transfer parameters. */
	protected func void initChildTransferParams(CharacterConfiguration config,\
	ActorProfile actorProfile, BaseVRActor actor, Component component)
		var Rig rig = component.getRig()
		var Array chain = Array.new()
		var int index
		
		assignSlots(config)
		
		// determine what devices are attached. it is important to resolve all trackers
		// that are used to determine motion transfer parameters or first time calibrate
		// can yield wrong results
		// pTransferScaleLower.getOrigin().resolveRealSlot(config)
		// pTransferScaleUpper.getOrigin().resolveRealSlot(config)
		
		pTransferShiftLegLeft.getReference().resolveRealSlot(config)
		pTransferShiftLegLeft.getBase1().resolveRealSlot(config)
		pTransferShiftLegLeft.getBase2().resolveRealSlot(config)
		
		pTransferShiftLegRight.getReference().resolveRealSlot(config)
		pTransferShiftLegRight.getBase1().resolveRealSlot(config)
		pTransferShiftLegRight.getBase2().resolveRealSlot(config)
		
		pTransferShiftUpper.getReference().resolveRealSlot(config)
		pTransferShiftUpper.getBase1().resolveRealSlot(config)
		pTransferShiftUpper.getBase2().resolveRealSlot(config)
		
		pTransferWaist.getTracker().resolveRealSlot(config)
		
		pTransferSpine.getTargetTracker().resolveRealSlot(config)
		
		pTransferLegRight.getTipTracker().resolveRealSlot(config)
		pTransferLegRight.getGuideTracker().resolveRealSlot(config)
		
		pTransferLegLeft.getTipTracker().resolveRealSlot(config)
		pTransferLegLeft.getGuideTracker().resolveRealSlot(config)
		
		pTransferArmRight.getTipTracker().resolveRealSlot(config)
		pTransferArmRight.getGuideTracker().resolveRealSlot(config)
		pTransferArmRight.getRelocateTracker().resolveRealSlot(config)
		
		pTransferArmLeft.getTipTracker().resolveRealSlot(config)
		pTransferArmLeft.getGuideTracker().resolveRealSlot(config)
		pTransferArmLeft.getRelocateTracker().resolveRealSlot(config)
		
		pTransferNeckShift.getBaseTracker().resolveRealSlot(config)
		pTransferNeck.getBaseTracker().resolveRealSlot(config)
		
		var bool hasSlotWaist = hasSlot(pTransferWaist.getTracker(), CharacterTrackerSlot.Type.waist)
		var bool isSlotWaistAttached = hasSlotWaist and pTransferWaist.getTracker().getRealSlot().isDeviceAttached()
		
		var bool hasSlotChest = hasSlot(pTransferSpine.getTargetTracker(), CharacterTrackerSlot.Type.chest)
		var bool isSlotChestAttached = hasSlotChest and pTransferSpine.getTargetTracker().getRealSlot().isDeviceAttached()
		
		var bool hasSlotRightFoot = hasSlot(pTransferLegRight.getTipTracker(), CharacterTrackerSlot.Type.rightFoot)
		var bool isSlotRightFootAttached = hasSlotRightFoot and pTransferLegRight.getTipTracker().getRealSlot().isDeviceAttached()
		
		var bool hasSlotRightKnee = hasSlot(pTransferLegRight.getGuideTracker(), CharacterTrackerSlot.Type.rightKnee)
		var bool isSlotRightKneeAttached = hasSlotRightKnee and pTransferLegRight.getGuideTracker().getRealSlot().isDeviceAttached()
		
		var bool hasSlotLeftFoot = hasSlot(pTransferLegLeft.getTipTracker(), CharacterTrackerSlot.Type.leftFoot)
		var bool isSlotLeftFootAttached = hasSlotLeftFoot and pTransferLegLeft.getTipTracker().getRealSlot().isDeviceAttached()
		
		var bool hasSlotLeftKnee = hasSlot(pTransferLegLeft.getGuideTracker(), CharacterTrackerSlot.Type.leftKnee)
		var bool isSlotLeftKneeAttached = hasSlotLeftKnee and pTransferLegLeft.getGuideTracker().getRealSlot().isDeviceAttached()
		
		var bool hasSlotRightHandController = hasSlot(pTransferArmRight.getTipTracker(), CharacterTrackerSlot.Type.rightHandController)
		
		var bool hasSlotRightElbow = hasSlot(pTransferArmRight.getGuideTracker(), CharacterTrackerSlot.Type.rightElbow)
		var bool isSlotRightElbowAttached = hasSlotRightElbow and pTransferArmRight.getGuideTracker().getRealSlot().isDeviceAttached()
		
		var bool hasSlotLeftHandController = hasSlot(pTransferArmLeft.getTipTracker(), CharacterTrackerSlot.Type.leftHandController)
		
		var bool hasSlotLeftElbow = hasSlot(pTransferArmLeft.getGuideTracker(), CharacterTrackerSlot.Type.leftElbow)
		var bool isSlotLeftElbowAttached = hasSlotLeftElbow and pTransferArmLeft.getGuideTracker().getRealSlot().isDeviceAttached()
		
		
		// chains
		var Array chainSpine = Array.new()
		findBoneChain(rig, pBoneChest, pBoneHip, chainSpine)
		
		var Array chainHead = Array.new()
		findBoneChain(rig, pBoneHead, pBoneChest, chainHead)
		
		
		var Array chainRightLeg = Array.new()
		findBoneChain(rig, pBoneFootRight, pBoneHip, chainRightLeg)
		
		var Array chainLeftLeg = Array.new()
		findBoneChain(rig, pBoneFootLeft, pBoneHip, chainLeftLeg)
		
		index = firstBoneInChain(chainRightLeg, chainSpine)
		chainRightLeg = chainRightLeg.slice(0, index)
		
		index = firstBoneInChain(chainLeftLeg, chainSpine)
		chainLeftLeg = chainLeftLeg.slice(0, index)
		
		while chainRightLeg.getCount() > 0 and chainLeftLeg.getCount() > 0\
		and chainRightLeg.getAt(-1).equals(chainLeftLeg.getAt(-1))
			chainRightLeg = chainRightLeg.slice(0, -1)
			chainLeftLeg = chainLeftLeg.slice(0, -1)
		end
		
		
		// waist
		pTransferWaist.setBone(pBoneHip)
		
		if isSlotWaistAttached
			select pWaistMode
			case WaistMode.direct
				pTransferWaist.getTracker().setAutoTransform(MotionTransferTracker.AutoTransform.full)
				
			case WaistMode.relative
				pTransferWaist.getTracker().setAutoTransform(MotionTransferTracker.AutoTransform.orientationTarget)
				
			case WaistMode.relocate
				pTransferWaist.getTracker().setAutoTransform(MotionTransferTracker.AutoTransform.orientationTarget)
			end
			
		else
			pTransferWaist.getTracker().setAutoTransform(MotionTransferTracker.AutoTransform.full)
		end
		
		
		
		// scaling
		// pTransferScaleUpper.getOrigin().setAutoTransform(pTransferWaist.getTracker().getAutoTransform())
		
		
		
		// shifts
		if pWaistMode == WaistMode.relocate
			pTransferShiftUpper.getReference().setAutoTransform(pTransferWaist.getTracker().getAutoTransform())
			if chainRightLeg.getCount() > 0
				pTransferShiftUpper.setBaseBone1(chainRightLeg.getAt(-1) cast String)
			else
				pTransferShiftUpper.setBaseBone1("")
			end
			pTransferShiftUpper.setTipBone1(pBoneFootRight)
			
			if chainLeftLeg.getCount() > 0
				pTransferShiftUpper.setBaseBone2(chainLeftLeg.getAt(-1) cast String)
			else
				pTransferShiftUpper.setBaseBone2("")
			end
			pTransferShiftUpper.setTipBone2(pBoneFootLeft)
			
			pTransferShiftUpper.setShiftReferenceOffset(\
				pTransferWaist.getTracker().getAutoTransform() != MotionTransferTracker.AutoTransform.full)
			
		else
			pTransferShiftUpper.setBaseBone1("")
			pTransferShiftUpper.setTipBone1("")
			pTransferShiftUpper.setBaseBone2("")
			pTransferShiftUpper.setTipBone2("")
		end
		
		if pPullFeetToGround
			pTransferShiftLegLeft.getReference().setAutoTransform(pTransferWaist.getTracker().getAutoTransform())
			if chainLeftLeg.getCount() > 0
				pTransferShiftLegLeft.setBaseBone1(chainLeftLeg.getAt(-1) cast String)
			else
				pTransferShiftLegLeft.setBaseBone1("")
			end
			pTransferShiftLegLeft.setTipBone1(pBoneFootLeft)
			pTransferShiftLegLeft.setShiftReferenceOffset(false)
			
			pTransferShiftLegRight.getReference().setAutoTransform(pTransferWaist.getTracker().getAutoTransform())
			if chainRightLeg.getCount() > 0
				pTransferShiftLegRight.setBaseBone1(chainRightLeg.getAt(-1) cast String)
			else
				pTransferShiftLegRight.setBaseBone1("")
			end
			pTransferShiftLegRight.setTipBone1(pBoneFootRight)
			pTransferShiftLegRight.setShiftReferenceOffset(false)
			
		else
			pTransferShiftLegLeft.setBaseBone1("")
			pTransferShiftLegLeft.setTipBone1("")
			pTransferShiftLegRight.setBaseBone1("")
			pTransferShiftLegRight.setTipBone1("")
		end
		
		
		// spine, head. base is hip which we use to find chains but it should not be
		// included in anything but the waist. start one bone down the chain
		/*
		pTransferSpineHead.setTipBone(pBoneHead)
		pTransferSpineHead.setGuideBone(pBoneChest)
		pTransferSpineHead.setMoveBaseIK(pMoveBaseIK)
		pTransferSpineHead.setTwistPropagation(1)
		pTransferSpineHead.setTwistAxisRotation(Vector.new(90, 0, 0))
		
		if chainSpine.getCount() > 1
			pTransferSpineHead.setBaseBone(chainSpine.getAt(-2) cast String)
			pTransferSpineHead.setTwistBoneCount(DEMath.max(chainSpine.getCount() - 2, 0))
			
		else
			pTransferSpineHead.setBaseBone("")
			pTransferSpineHead.setTwistBoneCount(0)
		end
		*/
		
		
		
		// spine
		var float autoSpineTwistFactor
		var bool useAutoSpineTwist
		
		pTransferSpine.setTipBone(pBoneChest)
		pTransferSpine.setTargetBone("")
		pTransferSpine.setTargetBaseBone("")
		
		if isSlotChestAttached
// 			pTransferSpine.getTargetTracker().setAutoTransform(MotionTransferTracker.AutoTransform.full)
			pTransferSpine.getTargetTracker().setAutoTransform(MotionTransferTracker.AutoTransform.reference)
			//pTransferSpine.getTargetTracker().setAutoTransform(MotionTransferTracker.AutoTransform.none)
			pTransferSpine.setTwistScale(pScaleSpineBending.getY())
			
		else
			pTransferSpine.getTargetTracker().setAutoTransform(MotionTransferTracker.AutoTransform.reference)
			autoSpineTwistFactor = 0.5
			useAutoSpineTwist = true
			pTransferSpine.setTwistScale(pScaleSpineBending.getY() * autoSpineTwistFactor)
		end
		pTransferSpine.getTargetTracker().setOffsetPosition(Vector.new())
		
		pTransferSpine.getBaseTracker().setAutoTransform(pTransferWaist.getTracker().getAutoTransform())
		pTransferSpine.getBaseTracker().setOffsetRotation(pSpineBendAxisRotation)
		
		pTransferSpine.setBendShape(pBendShapeSpine)
		pTransferSpine.setBendAxisRotation(pSpineBendAxisRotation)
		pTransferSpine.setFitCurveToTarget(true)
		pTransferSpine.setUseRotation(false)
		pTransferSpine.setScaleRotation(Vector2.new(pScaleSpineBending.getX(), pScaleSpineBending.getZ()))
		pTransferSpine.setTwistPropagation(1)
		
		if chainSpine.getCount() > 1
			var String baseBone = chainSpine.getAt(-2) cast String
			
			// if base bone has the same position as the hip bone the spine can be properly
			// bend. if not bending can cause troubles. in this case include the hip bone
			// in the chain. this has the side effect of rotating the hip depending on the
			// shape but it avoids problems with strong bending
			// 
			// NOTE to avoid problems the distance along the Y axis is checked not if the
			//      bones have equal position. this protects against situations where the
			//      base bone is offset along the Z axis but still would be at the same Y.
			var int indexBaseBone = component.indexOfBoneNamed(baseBone)
			var int indexHipBone = component.indexOfBoneNamed(pBoneHip)
			
			if indexBaseBone != -1 and indexHipBone != -1
				var Vector basePosition = component.boneGetMatrix(indexBaseBone).getPosition()
				var Vector hipPosition = component.boneGetMatrix(indexHipBone).getPosition()
				
				if basePosition.getY() > hipPosition.getY() + 0.05
					baseBone = pBoneHip
				end
			end
			
			pTransferSpine.setBaseBone(baseBone)
			pTransferSpine.setTwistBoneCount(DEMath.max(chainSpine.getCount() - 1, 1))
			
			if chainHead.getCount() > 1 and isSlotChestAttached
				pTransferSpine.setTargetBone(chainHead.getAt(-2) cast String)
				pTransferSpine.setAlignOrientationBoneCount(DEMath.max((chainSpine.getCount() - 1) / 2, 0))
				
			else
				pTransferSpine.setTargetBone("")
				pTransferSpine.setAlignOrientationBoneCount(0)
			end
			
			pTransferSpine.setTargetBaseBone(pTransferSpine.getBaseBone())
			
		else
			pTransferSpine.setBaseBone("")
			pTransferSpine.setTwistBoneCount(0)
			pTransferSpine.setAlignOrientationBoneCount(0)
			pTransferSpine.setTargetBaseBone("")
		end
		
		if pTransferSpine.getBaseBone().empty() or pTransferSpine.getTipBone().empty()
			pTransferSpine.setTipBone("")
			pTransferSpine.setBaseBone("")
			pTransferSpine.setTargetBone("")
			pTransferSpine.setTargetBaseBone("")
		end
		
		pTransferSpine.setTargetBone("") // target bones are problematic with far away slots
		pTransferSpine.setTargetBaseBone("")
		
		
		// neck shift
		var bool hasScaleHeadRotation = not pScaleHeadRotation.equals(Vector.new(1, 1, 1))
		var bool hasNeckShiftMoves = not pNeckShiftMoveX.empty() or not pNeckShiftMoveY.empty()
		var bool hasNeckBendMoves = not pNeckBendMoveX.empty() or not pNeckBendMoveY.empty()
		
		pTransferNeckShift.getTargetTracker().setAutoTransform(MotionTransferTracker.AutoTransform.reference)
		pTransferNeckShift.getTargetTracker().setOffsetPosition(Vector.new())
		
		pTransferNeckShift.getBaseTracker().setAutoTransform(MotionTransferTracker.AutoTransform.reference)
		pTransferNeckShift.getBaseTracker().setOffsetPosition(Vector.new())
		pTransferNeckShift.getBaseTracker().setOffsetRotation(Vector.new())
		
		pTransferNeckShift.setBendShape(pBendShapeNeck)
		pTransferNeckShift.setBendAxisRotation(pNeckBendAxisRotation)
		pTransferNeckShift.setFitCurveToTarget(false)
		pTransferNeckShift.setUseRotation(false)
		pTransferNeckShift.setLockZDistance(true)
		pTransferNeckShift.setBendMoveRangeX(Vector2.new(-pNeckShiftMoveRange.getX(), pNeckShiftMoveRange.getX() * 0.5))
		pTransferNeckShift.setBendMoveRangeY(Vector2.new(-pNeckShiftMoveRange.getY(), pNeckShiftMoveRange.getY()))
		
		if hasNeckShiftMoves
			pTransferNeckShift.setBendMoveX(pNeckShiftMoveX)
			pTransferNeckShift.setBendMoveY(pNeckShiftMoveY)
			
		else
			pTransferNeckShift.setBendMoveX("")
			pTransferNeckShift.setBendMoveY("")
		end
		
		pTransferNeckShift.setTargetBone("")
		pTransferNeckShift.setTargetBaseBone("")
		
		if chainHead.getCount() > 1
			pTransferNeckShift.setTipBone(chainHead.getAt(0) cast String)
			pTransferNeckShift.setBaseBone(chainHead.getAt(-2) cast String)
			
		else
			pTransferNeckShift.setTipBone("")
			pTransferNeckShift.setBaseBone("")
		end
		
		if pTransferNeckShift.getBaseBone().empty() or pTransferNeckShift.getTipBone().empty()\
		or (hasScaleHeadRotation and not hasNeckShiftMoves) or not isSlotChestAttached
			pTransferNeckShift.setTipBone("")
			pTransferNeckShift.setBaseBone("")
		end
		
		
		// neck
// 		pTransferNeck.getTargetTracker().setAutoTransform(MotionTransferTracker.AutoTransform.orientationTarget)
		//pTransferNeck.getTargetTracker().setAutoTransform(MotionTransferTracker.AutoTransform.full)
		pTransferNeck.getTargetTracker().setAutoTransform(MotionTransferTracker.AutoTransform.reference)
		pTransferNeck.getTargetTracker().setOffsetRotation(Vector.new())
		pTransferNeck.getTargetTracker().setOffsetPosition(Vector.new())
		
		//pTransferNeck.getBaseTracker().setAutoTransform(MotionTransferTracker.AutoTransform.full)
		pTransferNeck.getBaseTracker().setAutoTransform(MotionTransferTracker.AutoTransform.reference)
// 		pTransferNeck.getBaseTracker().setOffsetRotation(Vector.new(90, 0, 0))
		pTransferNeck.getBaseTracker().setOffsetRotation(pNeckBendAxisRotation)
// 		pTransferNeck.getBaseTracker().setOffsetPosition(isSlotChestAttached if Vector.new() else Vector.new(0, -0.1, 0))
		pTransferNeck.getBaseTracker().setOffsetPosition(Vector.new())
		
		pTransferNeck.setBendShape(pBendShapeNeck)
		pTransferNeck.setBendAxisRotation(pNeckBendAxisRotation)
		pTransferNeck.setFitCurveToTarget(false)
		pTransferNeck.setUseRotation(true)
		pTransferNeck.setTwistPropagation(1)
		pTransferNeck.setTwistScale(pScaleHeadRotation.getY())
		pTransferNeck.setBendMoveX(pNeckBendMoveX)
		pTransferNeck.setBendMoveY(pNeckBendMoveY)
		pTransferNeck.setBendMoveRangeX(Vector2.new(-pNeckBendMoveRange.getX(), pNeckBendMoveRange.getX()))
		pTransferNeck.setBendMoveRangeY(Vector2.new(-pNeckBendMoveRange.getY(), pNeckBendMoveRange.getY()))
		
		if useAutoSpineTwist
			pTransferNeck.setTwistScale(pTransferNeck.getTwistScale() * (1 - autoSpineTwistFactor))
		end
		
		if hasScaleHeadRotation
			pTransferNeck.setScaleRotation(Vector2.new(pScaleHeadRotation.getX(), pScaleHeadRotation.getZ()))
			
		else
			pTransferNeck.setScaleRotation(Vector2.new(1, 1))
		end
		
		if chainHead.getCount() > 1
			pTransferNeck.setTipBone(chainHead.getAt(0) cast String)
			pTransferNeck.setBaseBone(chainHead.getAt(-2) cast String)
			pTransferNeck.setTwistBoneCount(DEMath.max(chainHead.getCount() - 2, 1))
			pTransferNeck.setTargetBone(pBoneHead)
			pTransferNeck.setTargetBaseBone(pTransferNeck.getBaseBone())
			
		else
			pTransferNeck.setTipBone("")
			pTransferNeck.setBaseBone("")
			pTransferNeck.setTwistBoneCount(0)
			pTransferNeck.setTargetBone("")
			pTransferNeck.setTargetBaseBone("")
		end
		
		if pTransferNeck.getBaseBone().empty() or pTransferNeck.getTipBone().empty()
			pTransferNeck.setTipBone("")
			pTransferNeck.setBaseBone("")
			pTransferNeck.setTwistBoneCount(0)
			pTransferNeck.setTargetBone("")
			pTransferNeck.setTargetBaseBone("")
		end
		
		
		
		// head
// 		pTransferHead.setTipBone(pBoneHead)
// 		pTransferHead.getTipTracker().setOffsetPosition(Vector.new(0, 0, 0))
// 		pTransferHead.getTipTracker().setAutoTransform(MotionTransferTracker.AutoTransform.orientationTarget)
// 		pTransferHead.setAdjustPosition(true)
// 		
// 		if chainHead.getCount() > 1
// 			pTransferHead.setBaseBone(chainHead.getAt(-2) cast String)
// 			
// 		else
// 			pTransferHead.setBaseBone("")
// 		end
		
		if hasScaleHeadRotation or hasNeckBendMoves
			pTransferHead.setTipBone("")
			pTransferHead.setBaseBone("")
			
		else
			pTransferHead.setTipBone(pBoneHead)
			pTransferHead.setBaseBone(pBoneHead)
			pTransferHead.getTipTracker().setOffsetPosition(Vector.new())
			pTransferHead.getTipTracker().setAutoTransform(MotionTransferTracker.AutoTransform.orientation)
			pTransferHead.setAdjustPosition(false)
		end
		
		
		
		// right arm. separate guide bone is used if chain has at least 4 bones:
		// hand, lower arm, upper arm, shoulder. with 3 bones no shoulder is assumed
		var String armBaseBone = pBoneHip.empty() if pBoneChest else pBoneHip
		
		var Array armSpineChain = Array.new(chainSpine)
		if armSpineChain.getCount() == 0
			if not pBoneChest.empty()
				armSpineChain.add(pBoneChest)
			end
			if not pBoneHip.empty()
				armSpineChain.add(pBoneHip)
			end
		end
		
		findBoneChain(rig, pBoneHandRight, armBaseBone, chain)
		index = firstBoneInChain(chain, armSpineChain)
		
		pTransferArmRight.setTipBone(pBoneHandRight)
		pTransferArmRight.setMoveBaseIK(pMoveBaseIK)
		pTransferArmRight.setActorReach(MotionTransferIK.ActorReach.arm)
		pTransferArmRight.setReachLimit(1)
		pTransferArmRight.setReachScaling(Vector.new(pReachScalingArmRightBack.getZ(),\
			pReachScalingArmRightBack.getY(), pReachScalingArmRight.getX()))
		pTransferArmRight.setReachScalingBack(Vector.new(pReachScalingArmRight.getZ(),\
			pReachScalingArmRight.getY(), pReachScalingArmRightBack.getX()))
		pTransferArmRight.setTwistPropagation(0.5)
		pTransferArmRight.setTwistAxisRotation(Vector.new(0, -90, 0))
		pTransferArmRight.setTwistBoneCount(isSlotRightElbowAttached if 1 else 2)
		pTransferArmRight.setRelocateTip(pRelocateArms)
		
		pTransferArmRight.setGuideBendAxisRotation(Vector.new(-45, 90, 0))
		pTransferArmRight.setBaseRotateAngleMinimum(Vector2.new(-5, -45))
		pTransferArmRight.setBaseRotateAngleMaximum(Vector2.new(30, 45))

		if isSlotRightElbowAttached
			pTransferArmRight.setBaseRotateRangeCenter(Vector2.new(-20, 0))
			pTransferArmRight.setBaseRotateRangeMinimum(Vector2.new(-90, -60))
			pTransferArmRight.setBaseRotateRangeMaximum(Vector2.new(45, 120))
			
		else
			pTransferArmRight.setBaseRotateRangeCenter(Vector2.new(-45, 30))
			pTransferArmRight.setBaseRotateRangeMinimum(Vector2.new(-90, -45))
			pTransferArmRight.setBaseRotateRangeMaximum(Vector2.new(45, 160))
		end
		
		if hasSlotRightHandController
			pTransferArmRight.getTipTracker().setAutoTransform(MotionTransferTracker.AutoTransform.none)
			
		else
			pTransferArmRight.getTipTracker().setAutoTransform(MotionTransferTracker.AutoTransform.orientation)
		end
		
		if index > 1 // at least 3 bones
			pTransferArmRight.setBaseBone(chain.getAt(index - 1) cast String)
			
		else
			pTransferArmRight.setBaseBone("")
		end
		
		if index > 2 // at least 4 bones
			pTransferArmRight.setGuideBone(chain.getAt(index - 2) cast String)
			
		else
			//pTransferArmRight.setGuideBone(pTransferArmRight.getBaseBone())
			pTransferArmRight.setGuideBone("")
		end
		
		pTransferArmRight.getGuideTracker().setAutoTransform(MotionTransferTracker.AutoTransform.orientationReference)
		pTransferArmRight.getGuideTracker().setOffsetPosition(Vector.new())
		pTransferArmRight.getGuideTracker().setOffsetRotation(Vector.new())
		
		var Vector actorShoulderPosition = Vector.new(0, config.actorToCharacter(actorProfile.getShoulderLevel()), 0)
		
		var CharacterTrackerSlot slotRelocate = pTransferArmRight.getRelocateTracker().getRealSlot()
		var Matrix matrixRelocate = Matrix.newRT(Vector.new(0, -90, 0), actorShoulderPosition) // same rotation as twist axis
		
		if slotRelocate != null
			matrixRelocate = matrixRelocate * slotRelocate.getTargetMatrix().getInverse()
		end
		
		pTransferArmRight.getRelocateTracker().setAutoTransform(MotionTransferTracker.AutoTransform.full)
		pTransferArmRight.getRelocateTracker().setOffsetPosition(matrixRelocate.getPosition())
		pTransferArmRight.getRelocateTracker().setOffsetRotation(matrixRelocate.getEulerAngles())
		
		
		
		// left arm. separate guide bone is used if chain has at least 4 bones:
		// hand, lower arm, upper arm, shoulder. with 3 bones no shoulder is assumed
		findBoneChain(rig, pBoneHandLeft, armBaseBone, chain)
		index = firstBoneInChain(chain, armSpineChain)
		
		pTransferArmLeft.setTipBone(pBoneHandLeft)
		pTransferArmLeft.setMoveBaseIK(pMoveBaseIK)
		pTransferArmLeft.setActorReach(MotionTransferIK.ActorReach.arm)
		pTransferArmLeft.setReachLimit(1)
		pTransferArmLeft.setReachScaling(Vector.new(pReachScalingArmLeft.getZ(),\
			pReachScalingArmLeftBack.getY(), pReachScalingArmLeft.getX()))
		pTransferArmLeft.setReachScalingBack(Vector.new(pReachScalingArmLeftBack.getZ(),\
			pReachScalingArmLeft.getY(), pReachScalingArmLeftBack.getX()))
		pTransferArmLeft.setTwistPropagation(0.5)
		pTransferArmLeft.setTwistAxisRotation(Vector.new(0, 90, 0))
		pTransferArmLeft.setTwistBoneCount(isSlotLeftElbowAttached if 1 else 2)
		pTransferArmLeft.setRelocateTip(pRelocateArms)

		pTransferArmLeft.setGuideBendAxisRotation(Vector.new(45, -90, 0))
		pTransferArmLeft.setBaseRotateAngleMinimum(Vector2.new(-5, -45))
		pTransferArmLeft.setBaseRotateAngleMaximum(Vector2.new(30, 45))

		if isSlotLeftElbowAttached
			pTransferArmLeft.setBaseRotateRangeCenter(Vector2.new(-20, 0))
			pTransferArmLeft.setBaseRotateRangeMinimum(Vector2.new(-90, -120))
			pTransferArmLeft.setBaseRotateRangeMaximum(Vector2.new(45, 60))
			
		else
			pTransferArmLeft.setBaseRotateRangeCenter(Vector2.new(-45, -30))
			pTransferArmLeft.setBaseRotateRangeMinimum(Vector2.new(-90, -160))
			pTransferArmLeft.setBaseRotateRangeMaximum(Vector2.new(45, 45))
		end
		
		if hasSlotLeftHandController
			pTransferArmLeft.getTipTracker().setAutoTransform(MotionTransferTracker.AutoTransform.none)
			
		else
			pTransferArmLeft.getTipTracker().setAutoTransform(MotionTransferTracker.AutoTransform.orientation)
		end
		
		if index > 1 // at least 3 bones
			pTransferArmLeft.setBaseBone(chain.getAt(index - 1) cast String)
			
		else
			pTransferArmLeft.setBaseBone("")
		end
		
		if index > 2 // at least 4 bones
			pTransferArmLeft.setGuideBone(chain.getAt(index - 2) cast String)
			
		else
			//pTransferArmLeft.setGuideBone(pTransferArmLeft.getBaseBone())
			pTransferArmLeft.setGuideBone("")
		end
		
		pTransferArmLeft.getGuideTracker().setAutoTransform(MotionTransferTracker.AutoTransform.orientationReference)
		pTransferArmLeft.getGuideTracker().setOffsetPosition(Vector.new())
		pTransferArmLeft.getGuideTracker().setOffsetRotation(Vector.new())
		
		slotRelocate = pTransferArmLeft.getRelocateTracker().getRealSlot()
		matrixRelocate = Matrix.newRT(Vector.new(0, 90, 0), actorShoulderPosition) // same rotation as twist axis
		
		if slotRelocate != null
			matrixRelocate = matrixRelocate * slotRelocate.getTargetMatrix().getInverse()
		end
		
		pTransferArmLeft.getRelocateTracker().setAutoTransform(MotionTransferTracker.AutoTransform.full)
		pTransferArmLeft.getRelocateTracker().setOffsetPosition(matrixRelocate.getPosition())
		pTransferArmLeft.getRelocateTracker().setOffsetRotation(matrixRelocate.getEulerAngles())
		
		
		
		// right leg
		pTransferLegRight.setTipBone(pBoneFootRight)
		pTransferLegRight.setMoveBaseIK(pMoveBaseIK)
		pTransferLegRight.setMoveRetracted(pMoveCrouch)
		pTransferLegRight.setActorReach(MotionTransferIK.ActorReach.leg)
		pTransferLegRight.setReachLimit(1)
		pTransferLegRight.setTwistBoneCount(0)//DEMath.max(chainRightLeg.getCount() - 2, 1))
		pTransferLegRight.setTwistPropagation(1)
		pTransferLegRight.setTwistAxisRotation(Vector.new(-90, 0, 0))
		pTransferLegRight.setGuideBendAxisRotation(Vector.new(0, -90, 0))
		
		if chainRightLeg.getCount() > 0
			pTransferLegRight.setBaseBone(chainRightLeg.getAt(-1) cast String)
			pTransferLegRight.setGuideBone(pTransferLegRight.getBaseBone())
			
		else
			pTransferLegRight.setBaseBone("")
			pTransferLegRight.setGuideBone("")
		end
		
		if isSlotRightFootAttached
			pTransferLegRight.getTipTracker().setAutoTransform(MotionTransferTracker.AutoTransform.orientationReference)
			
		else
			pTransferLegRight.getTipTracker().setAutoTransform(MotionTransferTracker.AutoTransform.full)
		end
		
		pTransferLegRight.getGuideTracker().setAutoTransform(MotionTransferTracker.AutoTransform.orientationReference)
		pTransferLegRight.getGuideTracker().setOffsetPosition(Vector.new())
		pTransferLegRight.getGuideTracker().setOffsetRotation(Vector.new())
		pTransferLegRight.setGuideTwistStrength(isSlotRightKneeAttached if 0.0 else 0.5)
		pTransferLegRight.getBaseTracker().setAutoTransform(pTransferWaist.getTracker().getAutoTransform())
		
		
		
		// left leg
		pTransferLegLeft.setTipBone(pBoneFootLeft)
		pTransferLegLeft.setMoveBaseIK(pMoveBaseIK)
		pTransferLegLeft.setMoveRetracted(pMoveCrouch)
		pTransferLegLeft.setActorReach(MotionTransferIK.ActorReach.leg)
		pTransferLegLeft.setReachLimit(1)
		pTransferLegLeft.setTwistBoneCount(0)//DEMath.max(chainLeftLeg.getCount() - 2, 1))
		pTransferLegLeft.setTwistPropagation(1)
		pTransferLegLeft.setTwistAxisRotation(Vector.new(-90, 0, 0))
		pTransferLegLeft.setGuideBendAxisRotation(Vector.new(0, -90, 0))
		
		if chainLeftLeg.getCount() > 0
			pTransferLegLeft.setBaseBone(chainLeftLeg.getAt(-1) cast String)
			pTransferLegLeft.setGuideBone(pTransferLegLeft.getBaseBone())
			
		else
			pTransferLegLeft.setBaseBone("")
			pTransferLegLeft.setGuideBone("")
		end
		
		if isSlotLeftFootAttached
			pTransferLegLeft.getTipTracker().setAutoTransform(MotionTransferTracker.AutoTransform.orientationReference)
			
		else
			pTransferLegLeft.getTipTracker().setAutoTransform(MotionTransferTracker.AutoTransform.full)
		end
		
		pTransferLegLeft.getGuideTracker().setAutoTransform(MotionTransferTracker.AutoTransform.orientationReference)
		pTransferLegLeft.getGuideTracker().setOffsetPosition(Vector.new())
		pTransferLegLeft.getGuideTracker().setOffsetRotation(Vector.new())
		pTransferLegLeft.setGuideTwistStrength(isSlotLeftKneeAttached if 0.0 else 0.5)
		pTransferLegLeft.getBaseTracker().setAutoTransform(pTransferWaist.getTracker().getAutoTransform())
	end
	
	/** Create copy of motion transfer. */
	func MotionTransfer createCopy()
		return MotionTransferAutoHuman.new(this)
	end
	
	/** Decompose motion transfer. Returns Array of MotionTranfer or empty list if not supported. */
	func Array decompose()
		var Array list = Array.new()
		
		/*
		if pTransferScaleLower.getScaleSlots().getCount() > 0\
		and not pTransferScaleLower.getScaleFactor().equals(Vector.new(1, 1, 1))
			list.add(pTransferScaleLower.createCopy())
		end
		
		if pTransferScaleUpper.getScaleSlots().getCount() > 0\
		and not pTransferScaleUpper.getScaleFactor().equals(Vector.new(1, 1, 1))
			list.add(pTransferScaleUpper.createCopy())
		end
		*/
		
		if pPullFeetToGround
			if not pTransferShiftLegLeft.getReference().getSlot().empty()\
			and not pTransferShiftLegLeft.getBase1().getSlot().empty()\
			and pTransferShiftLegLeft.getShiftSlots().getCount() > 0
				list.add(pTransferShiftLegLeft.createCopy())
			end
			
			if not pTransferShiftLegRight.getReference().getSlot().empty()\
			and not pTransferShiftLegRight.getBase1().getSlot().empty()\
			and pTransferShiftLegRight.getShiftSlots().getCount() > 0
				list.add(pTransferShiftLegRight.createCopy())
			end
		end
		
		if pWaistMode == WaistMode.relocate
			if not pTransferShiftUpper.getReference().getSlot().empty()\
			and not pTransferShiftUpper.getBase1().getSlot().empty()\
			and not pTransferShiftUpper.getBase2().getSlot().empty()\
			and pTransferShiftUpper.getShiftSlots().getCount() > 0
				list.add(pTransferShiftUpper.createCopy())
			end
		end
		
		if not pTransferWaist.getTracker().getSlot().empty()
			list.add(pTransferWaist.createCopy())
		end
		
// 		list.add(pTransferSpineHead.createCopy())
		
		if not pTransferSpine.getBaseTracker().getSlot().empty()\
		and not pTransferSpine.getTargetTracker().getSlot().empty()
			list.add(pTransferSpine.createCopy())
		end
		
		if not pTransferNeckShift.getBaseTracker().getSlot().empty()\
		and not pTransferNeckShift.getTargetTracker().getSlot().empty()
			list.add(pTransferNeckShift.createCopy())
		end
		
		if not pTransferNeck.getBaseTracker().getSlot().empty()\
		and not pTransferNeck.getTargetTracker().getSlot().empty()
			list.add(pTransferNeck.createCopy())
		end
		
		if not pTransferHead.getTipTracker().getSlot().empty()\
		and pScaleHeadRotation.equals(Vector.new(1, 1, 1))
			list.add(pTransferHead.createCopy())
		end
		
		if not pTransferArmRight.getBaseTracker().getSlot().empty()\
		and not pTransferArmRight.getTipTracker().getSlot().empty()
			list.add(pTransferArmRight.createCopy())
		end
		
		if not pTransferArmLeft.getBaseTracker().getSlot().empty()\
		and not pTransferArmLeft.getTipTracker().getSlot().empty()
			list.add(pTransferArmLeft.createCopy())
		end
		
		if not pTransferLegRight.getBaseTracker().getSlot().empty()\
		and not pTransferLegRight.getTipTracker().getSlot().empty()
			list.add(pTransferLegRight.createCopy())
		end
		
		if not pTransferLegLeft.getBaseTracker().getSlot().empty()\
		and not pTransferLegLeft.getTipTracker().getSlot().empty()
			list.add(pTransferLegLeft.createCopy())
		end
		
		return list
	end
	
	/** Tweaked. */
	func void tweaked()
// 		pTransferSpine.setBendShape(pBendShapeSpine)
// 		pTransferSpine.tweaked()
		
// 		pTransferNeck.setBendShape(pBendShapeNeck)
// 		pTransferNeck.tweaked()
		
		pTransferArmRight.setReachScaling(Vector.new(pReachScalingArmRightBack.getZ(),\
			pReachScalingArmRightBack.getY(), pReachScalingArmRight.getX()))
		pTransferArmRight.setReachScalingBack(Vector.new(pReachScalingArmRight.getZ(),\
			pReachScalingArmRight.getY(), pReachScalingArmRightBack.getX()))
		pTransferArmRight.tweaked()
		
		pTransferArmLeft.setReachScaling(Vector.new(pReachScalingArmLeft.getZ(),\
			pReachScalingArmLeftBack.getY(), pReachScalingArmLeft.getX()))
		pTransferArmLeft.setReachScalingBack(Vector.new(pReachScalingArmLeftBack.getZ(),\
			pReachScalingArmLeft.getY(), pReachScalingArmLeftBack.getX()))
		pTransferArmLeft.tweaked()
	end
	
	/** Load from XML. */
	func void load(BaseXmlLoader loader, EasyXMLElement root)
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("name")
				setName(element.getFirstCData())
				
			elif tagName.equals("boneHead")
				setBoneHead(element.getFirstCData())
				
			elif tagName.equals("boneChest")
				setBoneChest(element.getFirstCData())
				
			elif tagName.equals("boneHandRight")
				setBoneHandRight(element.getFirstCData())
				
			elif tagName.equals("boneHandLeft")
				setBoneHandLeft(element.getFirstCData())
				
			elif tagName.equals("boneHip")
				setBoneHip(element.getFirstCData())
				
			elif tagName.equals("boneFootRight")
				setBoneFootRight(element.getFirstCData())
				
			elif tagName.equals("boneFootLeft")
				setBoneFootLeft(element.getFirstCData())
				
			elif tagName.equals("bendShapeSpine")
				setBendShapeSpine(element.getFirstCDataFloat())
				
			elif tagName.equals("bendShapeNeck")
				setBendShapeNeck(element.getFirstCDataFloat())
				
			elif tagName.equals("moveBaseIK")
				setMoveBaseIK(element.getFirstCData())
				
			elif tagName.equals("moveCrouch")
				setMoveCrouch(element.getFirstCData())
				
			elif tagName.equals("reachScalingArmRight")
				pReachScalingArmRight = loader.readVector(element)
				
			elif tagName.equals("reachScalingArmRightBack")
				pReachScalingArmRightBack = loader.readVector(element)
				
			elif tagName.equals("reachScalingArmLeft")
				pReachScalingArmLeft = loader.readVector(element)
				
			elif tagName.equals("reachScalingArmLeftBack")
				pReachScalingArmLeftBack = loader.readVector(element)
				
			elif tagName.equals("scaleHeadRotation")
				pScaleHeadRotation = loader.readVector(element)
				
			elif tagName.equals("scaleSpineBending")
				pScaleSpineBending = loader.readVector(element)
				
			elif tagName.equals("neckBendAxisRotation")
				pNeckBendAxisRotation = loader.readVector(element)
				
			elif tagName.equals("spineBendAxisRotation")
				pSpineBendAxisRotation = loader.readVector(element)
				
			elif tagName.equals("relocateArms")
				pRelocateArms = element.getFirstCDataBool()
				
			elif tagName.equals("waistMode")
				pWaistMode = WaistMode.named(element.getFirstCData())
				
			elif tagName.equals("pullFeetToGround")
				pPullFeetToGround = element.getFirstCDataBool()
				
			elif tagName.equals("neckBendMoveX")
				pNeckBendMoveX = element.getFirstCData()
				
			elif tagName.equals("neckBendMoveY")
				pNeckBendMoveY = element.getFirstCData()
				
			elif tagName.equals("neckBendMoveRange")
				pNeckBendMoveRange = loader.readVector2(element)
				
			elif tagName.equals("neckShiftMoveX")
				pNeckShiftMoveX = element.getFirstCData()
				
			elif tagName.equals("neckShiftMoveY")
				pNeckShiftMoveY = element.getFirstCData()
				
			elif tagName.equals("neckShiftMoveRange")
				pNeckShiftMoveRange = loader.readVector2(element)
				
			elif tagName.equals("transfers")
				loadTransfers(loader, element)
			end
		end)
	end
	
	protected func void loadTransfers(BaseXmlLoader loader, EasyXMLElement root)
		root.forEachTag(block EasyXMLElement element, String tagName
			/*if tagName.equals("scaleLower")
				pTransferScaleLower.load(loader, element)
				
			elif tagName.equals("scaleUpper")
				pTransferScaleUpper.load(loader, element)
				
			el*/
			if tagName.equals("shiftUpper")
				pTransferShiftUpper.load(loader, element)
				
			elif tagName.equals("shiftLegLeft")
				pTransferShiftLegLeft.load(loader, element)
				
			elif tagName.equals("shiftLegRight")
				pTransferShiftLegRight.load(loader, element)
				
			elif tagName.equals("waist")
				pTransferWaist.load(loader, element)
				
			// elif tagName.equals("spineHead")
				// pTransferSpineHead.load(loader, element)
				
			elif tagName.equals("head")
				pTransferHead.load(loader, element)
				
			elif tagName.equals("neckShift")
				pTransferNeckShift.load(loader, element)
				
			elif tagName.equals("neck")
				pTransferNeck.load(loader, element)
				
			elif tagName.equals("spine")
				pTransferSpine.load(loader, element)
				
			elif tagName.equals("armRight")
				pTransferArmRight.load(loader, element)
				
			elif tagName.equals("armLeft")
				pTransferArmLeft.load(loader, element)
				
			elif tagName.equals("legRight")
				pTransferLegRight.load(loader, element)
				
			elif tagName.equals("legLeft")
				pTransferLegLeft.load(loader, element)
			end
		end)
	end
	
	/** Post load initialize. */
	func void postLoadInit(CharacterConfiguration config)
		// pTransferScaleLower.postLoadInit(config)
		// pTransferScaleUpper.postLoadInit(config)
		pTransferShiftLegLeft.postLoadInit(config)
		pTransferShiftLegRight.postLoadInit(config)
		pTransferShiftUpper.postLoadInit(config)
		pTransferWaist.postLoadInit(config)
		// pTransferSpineHead.postLoadInit(config)
		pTransferSpine.postLoadInit(config)
		pTransferNeckShift.postLoadInit(config)
		pTransferNeck.postLoadInit(config)
		pTransferHead.postLoadInit(config)
		pTransferArmRight.postLoadInit(config)
		pTransferArmLeft.postLoadInit(config)
		pTransferLegRight.postLoadInit(config)
		pTransferLegLeft.postLoadInit(config)
	end
	
	/** Save to XML. */
	func void save(BaseXmlLoader loader, EasyXMLElement tag, bool calibrated)
		tag.addDataTag("name", getName())
		tag.addDataTag("boneHead", pBoneHead)
		tag.addDataTag("boneChest", pBoneChest)
		tag.addDataTag("boneHandRight", pBoneHandRight)
		tag.addDataTag("boneHandLeft", pBoneHandLeft)
		tag.addDataTag("boneHip", pBoneHip)
		tag.addDataTag("boneFootRight", pBoneFootRight)
		tag.addDataTag("boneFootLeft", pBoneFootLeft)
		tag.addDataTag("bendShapeSpine", pBendShapeSpine)
		tag.addDataTag("bendShapeNeck", pBendShapeNeck)
		tag.addDataTag("moveBaseIK", pMoveBaseIK)
		tag.addDataTag("moveCrouch", pMoveCrouch)
		loader.writeVector(tag, "reachScalingArmRight", pReachScalingArmRight)
		loader.writeVector(tag, "reachScalingArmRightBack", pReachScalingArmRightBack)
		loader.writeVector(tag, "reachScalingArmLeft", pReachScalingArmLeft)
		loader.writeVector(tag, "reachScalingArmLeftBack", pReachScalingArmLeftBack)
		loader.writeVector(tag, "scaleHeadRotation", pScaleHeadRotation)
		loader.writeVector(tag, "scaleSpineBending", pScaleSpineBending)
		loader.writeVector(tag, "neckBendAxisRotation", pNeckBendAxisRotation)
		loader.writeVector(tag, "spineBendAxisRotation", pSpineBendAxisRotation)
		tag.addDataTag("relocateArms", pRelocateArms)
		tag.addDataTag("waistMode", pWaistMode.name())
		tag.addDataTag("pullFeetToGround", pPullFeetToGround)
		tag.addDataTag("neckBendMoveX", pNeckBendMoveX)
		tag.addDataTag("neckBendMoveY", pNeckBendMoveY)
		loader.writeVector2(tag, "neckBendMoveRange", pNeckBendMoveRange)
		tag.addDataTag("neckShiftMoveX", pNeckShiftMoveX)
		tag.addDataTag("neckShiftMoveY", pNeckShiftMoveY)
		loader.writeVector2(tag, "neckShiftMoveRange", pNeckShiftMoveRange)
		
		var EasyXMLElement tagTransfers = tag.addTag("transfers")
		// pTransferScaleLower.save(loader, tagTransfers.addTag("scaleLower"), calibrated)
		// pTransferScaleUpper.save(loader, tagTransfers.addTag("scaleUpper"), calibrated)
		pTransferShiftLegLeft.save(loader, tagTransfers.addTag("shiftLegLeft"), calibrated)
		pTransferShiftLegRight.save(loader, tagTransfers.addTag("shiftLegRight"), calibrated)
		pTransferShiftUpper.save(loader, tagTransfers.addTag("shiftUpper"), calibrated)
		pTransferWaist.save(loader, tagTransfers.addTag("waist"), calibrated)
		// pTransferSpineHead.save(loader, tagTransfers.addTag("spineHead"), calibrated)
		pTransferSpine.save(loader, tagTransfers.addTag("spine"), calibrated)
		pTransferNeckShift.save(loader, tagTransfers.addTag("neckShift"), calibrated)
		pTransferNeck.save(loader, tagTransfers.addTag("neck"), calibrated)
		pTransferHead.save(loader, tagTransfers.addTag("head"), calibrated)
		pTransferArmRight.save(loader, tagTransfers.addTag("armRight"), calibrated)
		pTransferArmLeft.save(loader, tagTransfers.addTag("armLeft"), calibrated)
		pTransferLegRight.save(loader, tagTransfers.addTag("legRight"), calibrated)
		pTransferLegLeft.save(loader, tagTransfers.addTag("legLeft"), calibrated)
	end
	
	
	
	/** Has slot. */
	protected func bool hasSlot(MotionTransferTracker tracker, CharacterTrackerSlot.Type type)
		return tracker.getRealSlot() != null and tracker.getRealSlot().getType() == type
	end
	
	/** Find guide bone or empty string. */
	protected func String findBoneBeforeBase(Rig rig, String tipBone, String baseBone)
		if tipBone.empty() or baseBone.empty()
			return ""
		end
		
		var Array chain = Array.new()
		findBoneChain(rig, tipBone, baseBone, chain)
		if chain.getCount() < 3
			return ""
		end
		
		return chain.getAt( -2 ) cast String
	end
	
	/** Index of first bone in another chain or chain.getCount(). */
	protected func int firstBoneInChain(Array chain, Array otherChain)
		var int index, count = chain.getCount()
		for index = 0 to count
			if otherChain.has(chain.getAt(index))
				break
			end
		end
		return index
	end
	
	/** Find slots and assign them to child transfers. */
	protected func void assignSlots(CharacterConfiguration config)
		var String slotWaist = firstSlotWithType(config, CharacterTrackerSlot.Type.waist)
		
		var String slotHead = firstSlotAttachedWithType(config, CharacterTrackerSlot.Type.headTracker)
		if slotHead.empty()
			slotHead = firstSlotWithType(config, CharacterTrackerSlot.Type.headHmd)
		end
		
		var String slotChest = firstSlotAttachedWithType(config, CharacterTrackerSlot.Type.chest)
		
		var String armSlotBase = slotChest.empty() if slotWaist else slotChest
		var String spineSlotTarget = slotChest.empty() if slotHead else slotChest
		var String neckSlotBase = slotChest.empty() if slotWaist else slotChest
		
		var String slotFootRight = firstSlotWithType(config, CharacterTrackerSlot.Type.rightFoot)
		var String slotFootLeft = firstSlotWithType(config, CharacterTrackerSlot.Type.leftFoot)
		
		var String slotKneeRight = firstSlotWithType(config, CharacterTrackerSlot.Type.rightKnee)
		var String slotKneeLeft = firstSlotWithType(config, CharacterTrackerSlot.Type.leftKnee)
		
		// pTransferScaleUpper.getOrigin().setSlot(slotWaist)
		
		pTransferShiftLegLeft.getReference().setSlot(slotWaist)
		pTransferShiftLegLeft.getBase1().setSlot(slotFootLeft)
		pTransferShiftLegLeft.getShiftSlots().removeAll()
		
		pTransferShiftLegRight.getReference().setSlot(slotWaist)
		pTransferShiftLegRight.getBase1().setSlot(slotFootRight)
		pTransferShiftLegRight.getShiftSlots().removeAll()
		
		pTransferShiftUpper.getReference().setSlot(slotWaist)
		pTransferShiftUpper.getBase1().setSlot(slotFootRight)
		pTransferShiftUpper.getBase2().setSlot(slotFootLeft)
		pTransferShiftUpper.getShiftSlots().removeAll()
		
		config.getTrackerSlots().forEach(block CharacterTrackerSlot each
			select each.getType()
			case CharacterTrackerSlot.Type.headHmd,\
				CharacterTrackerSlot.Type.headTracker,\
				CharacterTrackerSlot.Type.chest,\
				/*CharacterTrackerSlot.Type.rightHandController,*/\
				/*CharacterTrackerSlot.Type.rightHandTracker,*/\
				CharacterTrackerSlot.Type.rightElbow,\
				/*CharacterTrackerSlot.Type.leftHandController,*/\
				/*CharacterTrackerSlot.Type.leftHandTracker,*/\
				CharacterTrackerSlot.Type.leftElbow,\
				CharacterTrackerSlot.Type.waist
					if pWaistMode == WaistMode.relocate
						pTransferShiftUpper.getShiftSlots().add(each.getName())
						
					elif pPullFeetToGround
						pTransferShiftLegLeft.getShiftSlots().add(each.getName())
						pTransferShiftLegRight.getShiftSlots().add(each.getName())
					end
				
			case CharacterTrackerSlot.Type.leftKnee
				if pPullFeetToGround
					pTransferShiftLegLeft.getShiftSlots().add(each.getName())
				end
				
			case CharacterTrackerSlot.Type.rightKnee
				if pPullFeetToGround
					pTransferShiftLegRight.getShiftSlots().add(each.getName())
				end
			end
		end)
		
		pTransferWaist.getTracker().setSlot(slotWaist)
		
// 		pTransferSpineHead.getTipTracker().setSlot(slotHead)
// 		pTransferSpineHead.getBaseTracker().setSlot(slotWaist)
		
		if pScaleHeadRotation.equals(Vector.new(1, 1, 1))
			pTransferHead.getTipTracker().setSlot(slotHead)
		end
		
		pTransferNeckShift.getTargetTracker().setSlot(slotHead)
		pTransferNeckShift.getBaseTracker().setSlot(neckSlotBase)
		
		pTransferNeck.getTargetTracker().setSlot(slotHead)
		pTransferNeck.getBaseTracker().setSlot(neckSlotBase)
		
		pTransferSpine.getTargetTracker().setSlot(spineSlotTarget)
		pTransferSpine.getBaseTracker().setSlot(slotWaist)
		
		pTransferArmRight.getTipTracker().setSlot(firstSlotWithType(config, CharacterTrackerSlot.Type.rightHandController))
		pTransferArmRight.getGuideTracker().setSlot(firstSlotWithType(config, CharacterTrackerSlot.Type.rightElbow))
		pTransferArmRight.getBaseTracker().setSlot(armSlotBase)
		pTransferArmRight.getRelocateTracker().setSlot(armSlotBase)
		
		pTransferArmLeft.getTipTracker().setSlot(firstSlotWithType(config, CharacterTrackerSlot.Type.leftHandController))
		pTransferArmLeft.getGuideTracker().setSlot(firstSlotWithType(config, CharacterTrackerSlot.Type.leftElbow))
		pTransferArmLeft.getBaseTracker().setSlot(armSlotBase)
		pTransferArmLeft.getRelocateTracker().setSlot(armSlotBase)
		
		pTransferLegRight.getTipTracker().setSlot(slotFootRight)
		pTransferLegRight.getGuideTracker().setSlot(slotKneeRight)
		pTransferLegRight.getBaseTracker().setSlot(slotWaist)
		
		pTransferLegLeft.getTipTracker().setSlot(slotFootLeft)
		pTransferLegLeft.getGuideTracker().setSlot(slotKneeLeft)
		pTransferLegLeft.getBaseTracker().setSlot(slotWaist)
	end
	
	/** First slot name matching type or empty string. */
	protected func String firstSlotWithType(CharacterConfiguration config, CharacterTrackerSlot.Type type)
		var CharacterTrackerSlot slot = config.getTrackerSlots().firstWithType(type)
		return slot != null if slot.getName() else ""
	end
	
	/** First slot name with attached device matching type or empty string. */
	protected func String firstSlotAttachedWithType(CharacterConfiguration config, CharacterTrackerSlot.Type type)
		var CharacterTrackerSlot slot = config.getTrackerSlots().firstAttachedWithType(type)
		return slot != null if slot.getName() else ""
	end
end
