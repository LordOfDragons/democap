/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.MotionTransferSystem

pin Democap.Behaviors
pin Democap.Characters

pin Dragengine.Animators
pin Dragengine.LoadSave
pin Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.XML


/**
 * Motion transfer using Inverse Kinematic.
 * 
 * Defines root bone and target bone name. This defines the bone chain to manipulate.
 * The target bone is required to be indirect child of the root bone. The length of
 * the bone chain can be 2 or more bones.
 * 
 * Defines the tracker slot to be used to set the target bone position before applying
 * inverse kinematic. During calibration the coordinate system of the tracker slot
 * relative to the target bone coordinate system is stored. Custom position and rotation
 * offsets can be applied to fine tune the result if slightly off.
 * 
 * Optionally a guide tracker slot can be defined which is used to guide the orientation
 * of the root bone before applying inverse kinematics. This is used for example to guide
 * the elbow on an arm while shoulder and hand remain at equal position and orientation.
 */
class MotionTransferIK extends DefaultMotionTransfer
	/** Factory. */
	class Factory implements MotionTransferFactory
		public func new()
		end
		
		public func String factoryID()
			return "ik"
		end
		
		public func MotionTransfer createMotionTransfer()
			return MotionTransferIK.new(factoryID())
		end
	end
	
	
	
	private var String pRootBone
	private var String pTargetBone
	private var MotionTransferTracker pTargetTracker
	private var MotionTransferTracker pGuideTracker
	
	
	
	/** Create motion transfer. */
	public func new(String factoryID) super(factoryID)
		pRootBone = ""
		pTargetBone = ""
		pTargetTracker = MotionTransferTracker.new()
		pGuideTracker = MotionTransferTracker.new()
	end
	
	/** Create copy of motion transfer. */
	public func new(MotionTransferIK transfer) super(transfer.factoryID())
		pRootBone = transfer.pRootBone
		pTargetBone = transfer.pTargetBone
		pTargetTracker = MotionTransferTracker.new(transfer.pTargetTracker)
		pGuideTracker = MotionTransferTracker.new(transfer.pGuideTracker)
	end
	
	
	
	/** Root bone name. */
	public func String getRootBone()
		return pRootBone
	end
	
	/** Set root bone name. */
	public func void setRootBone(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pRootBone = bone
	end
	
	/** Target bone name. */
	public func String getTargetBone()
		return pTargetBone
	end
	
	/** Set target bone name. */
	public func void setTargetBone(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pTargetBone = bone
	end
	
	/** Target tracker. */
	public func MotionTransferTracker getTargetTracker()
		return pTargetTracker
	end
	
	/** Guide tracker. */
	public func MotionTransferTracker getGuideTracker()
		return pGuideTracker
	end
	
	
	
	/** Init element clas. */
	public func void initElementClass(BaseVRActorClass eclass, AnimatorDefinition adef)
		// TODO add animator definition rule. behavior is not required
	end
	
	/** Reset calibration. */
	public func void resetCalibration()
		pTargetTracker.resetTransform()
		pGuideTracker.resetTransform()
	end
	
	/** Calibrate character. */
	public func void calibrate(CharacterConfiguration config, BaseVRActor actor)
	end
	
	/** Create copy of motion transfer. */
	public func MotionTransfer createCopy()
		return MotionTransferIK.new(this)
	end
	
	/** Load from XML. */
	public func void load(BaseXmlLoader loader, EasyXMLElement root)
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("rootBone")
				setRootBone(element.getFirstCData())
				
			elif tagName.equals("targetBone")
				setTargetBone(element.getFirstCData())
				
			elif tagName.equals("targetTracker")
				pTargetTracker.load(loader, element)
				
			elif tagName.equals("guideTracker")
				pGuideTracker.load(loader, element)
			end
		end)
	end
	
	/** Save to XML. */
	public func void save(BaseXmlLoader loader, EasyXMLElement tag)
		tag.addDataTag("rootBone", pRootBone)
		tag.addDataTag("targetBone", pTargetBone)
		pTargetTracker.save(loader, tag.addTag("targetTracker"))
		pGuideTracker.save(loader, tag.addTag("guideTracker"))
	end
end
