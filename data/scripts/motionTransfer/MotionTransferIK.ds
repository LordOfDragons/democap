/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.MotionTransferSystem

pin Dragengine.LoadSave
pin Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.XML


/**
 * Motion transfer using Inverse Kinematic.
 * 
 * Defines root bone and target bone name. This defines the bone chain to manipulate.
 * The target bone is required to be indirect child of the root bone. The length of
 * the bone chain can be 2 or more bones.
 * 
 * Optionally a direction bone name can be defined which is used to guide the orientation
 * of the root bone before applying inverse kinematics. This is used for example to guide
 * the elbow on an arm while shoulder and hand remain at equal position and orientation.
 * 
 * Defines the tracker slot to be used to set the target bone position before applying
 * inverse kinematic. During calibration the coordinate system of the tracker slot
 * relative to the target bone coordinate system is stored. Custom position and rotation
 * offsets can be applied to fine tune the result if slightly off.
 */
class MotionTransferIK extends DefaultMotionTransfer
	/** Factory. */
	class Factory implements MotionTransferFactory
		public func new()
		end
		
		public func String factoryID()
			return "ik"
		end
		
		public func MotionTransfer createMotionTransfer()
			return MotionTransferIK.new(factoryID())
		end
	end
	
	
	
	private var String pRootBone
	private var String pTargetBone
	private var String pGuideBone
	private var String pTrackerSlot
	private var Vector pOffsetPosition
	private var Vector pOffsetRotation
	
	private var Vector pCalibratePosition
	private var Vector pCalibrateRotation
	
	
	
	/** Create motion transfer. */
	public func new(String factoryID) super(factoryID)
		pRootBone = ""
		pTargetBone = ""
		pGuideBone = ""
		pTrackerSlot = ""
		pOffsetPosition = Vector.new()
		pOffsetRotation = Vector.new()
		pCalibratePosition = Vector.new()
		pCalibrateRotation = Vector.new()
	end
	
	/** Create copy of motion transfer. */
	public func new(MotionTransferIK transfer) super(transfer.factoryID())
		pRootBone = transfer.pRootBone
		pTargetBone = transfer.pTargetBone
		pGuideBone = transfer.pGuideBone
		pTrackerSlot = transfer.pTrackerSlot
		pOffsetPosition = transfer.pOffsetPosition
		pOffsetRotation = transfer.pOffsetRotation
		pCalibratePosition = transfer.pCalibratePosition
		pCalibrateRotation = transfer.pCalibrateRotation
	end
	
	
	
	/** Root bone name. */
	public func String getRootBone()
		return pRootBone
	end
	
	/** Set root bone name. */
	public func void setRootBone(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pRootBone = bone
	end
	
	/** Target bone name. */
	public func String getTargetBone()
		return pTargetBone
	end
	
	/** Set target bone name. */
	public func void setTargetBone(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pTargetBone = bone
	end
	
	/** Guide bone name. */
	public func String getGuideBone()
		return pGuideBone
	end
	
	/** Set guide bone name. */
	public func void setGuideBone(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pGuideBone = bone
	end
	
	/** Tracker slot name. */
	public func String getTrackerSlot()
		return pTrackerSlot
	end
	
	/** Set tracker slot name. */
	public func void setTrackerSlot(String slot)
		if slot == null
			throw ENullPointer.new("slot")
		end
		pTrackerSlot = slot
	end
	
	/** Position offset. */
	public func Vector getOffsetPosition()
		return pOffsetPosition
	end
	
	/** Set position offset. */
	public func void setOffsetPosition(Vector position)
		if position == null
			throw ENullPointer.new("position")
		end
		pOffsetPosition = position
	end
	
	/** Rotation offset. */
	public func Vector getOffsetRotation()
		return pOffsetRotation
	end
	
	/** Set rotationn offset. */
	public func void setOffsetRotation(Vector rotation)
		if rotation == null
			throw ENullPointer.new("rotation")
		end
		pOffsetRotation = rotation
	end
	
	
	
	/** Calibrate position relative to target bone. */
	public func Vector getCalibratePosition()
		return pCalibratePosition
	end
	
	/** Set calibrate position relative to target bone. */
	public func void setCalibratePosition(Vector position)
		if position == null
			throw ENullPointer.new("position")
		end
		pCalibratePosition = position
	end
	
	/** Calibrate rotation relative to target bone. */
	public func Vector getCalibrateRotation()
		return pCalibrateRotation
	end
	
	/** Set calibrate rotation relative to target bone. */
	public func void setCalibrateRotation(Vector rotation)
		if rotation == null
			throw ENullPointer.new("rotation")
		end
		pCalibrateRotation = rotation
	end
	
	
	
	/**
	 * Init element clas.
	 */
	public func void initElementClass(BaseVRActorClass eclass)
		
	end
	
	/** Create copy of motion transfer. */
	public func MotionTransfer createCopy()
		return MotionTransferIK.new(this)
	end
	
	/**
	 * Load from XML.
	 */
	public func void load(BaseXmlLoader loader, EasyXMLElement root)
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("rootBone")
				setRootBone(element.getFirstCData())
				
			elif tagName.equals("targetBone")
				setTargetBone(element.getFirstCData())
				
			elif tagName.equals("guideBone")
				setGuideBone(element.getFirstCData())
				
			elif tagName.equals("trackerSlot")
				setTrackerSlot(element.getFirstCData())
				
			elif tagName.equals("offsetPosition")
				setOffsetPosition(loader.readVector(element))
				
			elif tagName.equals("offsetRotation")
				setOffsetRotation(loader.readVector(element))
			end
		end)
	end
	
	/**
	 * Save to XML.
	 */
	public func void save(BaseXmlLoader loader, EasyXMLElement tag)
		tag.addDataTag("rootBone", pRootBone)
		tag.addDataTag("targetBone", pTargetBone)
		tag.addDataTag("guideBone", pGuideBone)
		tag.addDataTag("trackerSlot", pTrackerSlot)
		
		if not pOffsetPosition.isZero()
			var EasyXMLElement child = tag.addTag("offsetPosition")
			child.setAttribute("x", pOffsetPosition.getX())
			child.setAttribute("y", pOffsetPosition.getY())
			child.setAttribute("z", pOffsetPosition.getZ())
		end
		
		if not pOffsetRotation.isZero()
			var EasyXMLElement child = tag.addTag("offsetRotation")
			child.setAttribute("x", pOffsetRotation.getX())
			child.setAttribute("y", pOffsetRotation.getY())
			child.setAttribute("z", pOffsetRotation.getZ())
		end
	end
end
