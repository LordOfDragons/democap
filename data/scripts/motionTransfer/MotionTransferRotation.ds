/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.MotionTransferSystem

pin Democap.Actors
pin Democap.Behaviors
pin Democap.Characters

pin Dragengine.Animators
pin Dragengine.LoadSave
pin Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.XML


/**
 * Motion transfer rotating bones.
 */
class MotionTransferRotation extends DefaultMotionTransfer
	/** Factory. */
	class Factory implements MotionTransferFactory
		func new()
		end
		
		func String factoryID()
			return "rotation"
		end
		
		func MotionTransfer createMotionTransfer()
			return MotionTransferRotation.new(factoryID())
		end
		
		func String displayName()
			return "@UI.RotateBones"
		end
	end
	
	
	var Array pBones
	var Array pCounterBones
	var Vector pAxisRotation
	var float pAngle
	
	var Array pCalibrateAxes
	var Array pCalibrateCounterAxes
	
	
	/** Create motion transfer. */
	func new(String factoryID) super(factoryID)
		pBones = Array.new()
		pCounterBones = Array.new()
		pAxisRotation = Vector.new()
		pAngle = 0
		pCalibrateAxes = Array.new()
		pCalibrateCounterAxes = Array.new()
	end
	
	/** Create copy of motion transfer. */
	func new(MotionTransferRotation transfer) super(transfer)
		pBones = Array.new(transfer.pBones)
		pCounterBones = Array.new(transfer.pCounterBones)
		pAxisRotation = transfer.pAxisRotation
		pAngle = transfer.pAngle
		pCalibrateAxes = Array.new(transfer.pCalibrateAxes)
		pCalibrateCounterAxes = Array.new(transfer.pCalibrateCounterAxes)
	end
	
	
	/** Bones as Array of String. */
	func Array getBones()
		return pBones
	end
	
	/** Counter bones as Array of String. */
	func Array getCounterBones()
		return pCounterBones
	end
	
	/** Axis rotation. */
	func Vector getAxisRotation()
		return pAxisRotation
	end
	
	/** Set axis rotation. */
	func void setAxisRotation(Vector rotation)
		if rotation == null
			throw ENullPointer.new("rotation")
		end
		pAxisRotation = rotation
	end
	
	/** Angle. */
	func float getAngle()
		return pAngle
	end
	
	/** Set angle. */
	func void setAngle(float angle)
		pAngle = angle
	end
	
	
	/** Reset calibration. */
	func void resetCalibration()
		pCalibrateAxes.removeAll()
		pCalibrateCounterAxes.removeAll()
	end
	
	/** Init element clas. */
	func void initElementClass(CharacterConfiguration config,\
	BaseVRActorClass eclass, ModifiedRig modifyRig)
		// no behavior required
		
		// add rules
		if pCalibrateAxes.getCount() == 0 and pCalibrateCounterAxes.getCount() == 0 or DEMath.fabs(pAngle) < 0.01
			return
		end
		
		var AnimatorDefinition adef = config.getAnimatorDefinition()
		
		pBones.forEach(block int index, String bone
			var ADRuleBoneTransformator rule = ADRuleBoneTransformator.new()
			rule.setCoordinateFrame(ARBoneTransformatorCFrame.local)
			rule.setAxis(pCalibrateAxes.getAt(index) cast Vector)
			rule.setUseAxis(true)
			rule.setMinimumAngle(pAngle)
			rule.setMaximumAngle(pAngle)
			rule.addBone(bone)
			adef.addRule(rule)
		end)
		
		pCounterBones.forEach(block int index, String bone
			var ADRuleBoneTransformator rule = ADRuleBoneTransformator.new()
			rule.setCoordinateFrame(ARBoneTransformatorCFrame.local)
			rule.setAxis(pCalibrateCounterAxes.getAt(index) cast Vector)
			rule.setUseAxis(true)
			rule.setMinimumAngle(-pAngle)
			rule.setMaximumAngle(-pAngle)
			rule.addBone(bone)
			adef.addRule(rule)
		end)
		
		// register bones to record
		var ECBRecordAnimation recordAnimation = ECBRecordAnimation.getBehaviorIn(eclass)
		if recordAnimation != null
			pBones.forEach(block String each
				recordAnimation.addBone(each)
			end)
			pCounterBones.forEach(block String each
				recordAnimation.addBone(each)
			end)
		end
	end
	
	/** Calibrate character. */
	func void calibrate(CharacterConfiguration config, ActorProfile actorProfile, \
	BaseVRActor actor, Component component)
		if pBones.getCount() == 0 and pCounterBones.getCount() == 0
			return
		end
		
		var Vector axis = Matrix.newRotation(pAxisRotation).getViewVector()
		
		pBones.forEach(block String each
			if each.empty()
				pCalibrateAxes.add(Vector.new(0, 0, 1))
				return null
			end
			
			var int index = component.indexOfBoneNamed(each)
			if index == -1
				pCalibrateAxes.add(Vector.new(0, 0, 1))
				return null
			end
			
			pCalibrateAxes.add(component.boneGetInverseMatrix(index).normalize().transformNormal(axis))
		end)
		
		pCounterBones.forEach(block String each
			if each.empty()
				pCalibrateCounterAxes.add(Vector.new(0, 0, 1))
				return null
			end
			
			var int index = component.indexOfBoneNamed(each)
			if index == -1
				pCalibrateCounterAxes.add(Vector.new(0, 0, 1))
				return null
			end
			
			pCalibrateCounterAxes.add(component.boneGetInverseMatrix(index).normalize().transformNormal(axis))
		end)
	end
	
	/** Create copy of motion transfer. */
	func MotionTransfer createCopy()
		return MotionTransferRotation.new(this)
	end
	
	/** Load from XML. */
	func void load(BaseXmlLoader loader, EasyXMLElement root)
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("name")
				setName(element.getFirstCData())
				
			elif tagName.equals("enable")
				setEnabled(element.getFirstCDataBool())
				
			elif tagName.equals("bone")
				pBones.add(element.getFirstCData())
				
			elif tagName.equals("counterBone")
				pCounterBones.add(element.getFirstCData())
				
			elif tagName.equals("axisRotation")
				setAxisRotation(loader.readVector(element))
				
			elif tagName.equals("angle")
				setAngle(element.getFirstCDataFloat())
				
			elif tagName.equals("calibrated")
				loadCalibrated(loader, element)
			end
		end)
	end
	
	func void loadCalibrated(BaseXmlLoader loader, EasyXMLElement root)
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("axis")
				pCalibrateAxes.add(loader.readVector(element))
				
			elif tagName.equals("counterAxis")
				pCalibrateCounterAxes.add(loader.readVector(element))
			end
		end)
	end
	
	/** Save to XML. */
	func void save(BaseXmlLoader loader, EasyXMLElement tag, bool calibrated)
		tag.addDataTag("name", getName())
		tag.addDataTag("enable", getEnabled())
		pBones.forEach(block String each
			tag.addDataTag("bone", each)
		end)
		pCounterBones.forEach(block String each
			tag.addDataTag("counterBone", each)
		end)
		loader.writeVector(tag, "axisRotation", pAxisRotation)
		tag.addDataTag("angle", pAngle)
		
		if calibrated
			saveCalibrated(loader, tag.addTag("calibrated"))
		end
	end
	
	func void saveCalibrated(BaseXmlLoader loader, EasyXMLElement tag)
		pCalibrateAxes.forEach(block Vector each
			loader.writeVector(tag, "axis", each)
		end)
		pCalibrateCounterAxes.forEach(block Vector each
			loader.writeVector(tag, "counterAxis", each)
		end)
	end
end
