/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.MotionTransferSystem

pin Democap.Actors
pin Democap.Behaviors
pin Democap.Characters

pin Dragengine.Animators
pin Dragengine.LoadSave
pin Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.XML


/**
 * Motion transfer set slot position and rotation relative to another slot. If target slot
 * has a tracker assigned no transformation is applied. This can be used for example to
 * update a chest slot using a HMD slot if the chest slot has no tracker attached.
 */
class MotionTransferSlot extends DefaultMotionTransfer
	/** Factory. */
	class Factory implements MotionTransferFactory
		func new()
		end
		
		func String factoryID()
			return "slot"
		end
		
		func MotionTransfer createMotionTransfer()
			return MotionTransferSlot.new(factoryID())
		end
		
		func String displayName()
			return "@UI.CopySlotState"
		end
	end
	
	
	
	var String pTarget
	var MotionTransferTracker pSource
	var Vector pScalePosition, pScaleRotation
	
	
	
	/** Create motion transfer. */
	func new(String factoryID) super(factoryID)
		pTarget = ""
		pSource = MotionTransferTracker.new()
		pScalePosition = pScaleRotation = Vector.new(1, 1, 1)
	end
	
	/** Create copy of motion transfer. */
	func new(MotionTransferSlot transfer) super(transfer)
		pTarget = transfer.pTarget
		pSource = MotionTransferTracker.new(transfer.pSource)
		pScalePosition = transfer.pScalePosition
		pScaleRotation = transfer.pScaleRotation
	end
	
	
	
	/** Target slot. */
	func String getTarget()
		return pTarget
	end
	
	/** Set target slot. */
	func void setTarget(String slot)
		if slot == null
			throw ENullPointer.new("slot")
		end
		pTarget = slot
	end
	
	/** Source slot. */
	func MotionTransferTracker getSource()
		return pSource
	end
	
	/** Scale transformed position. */
	func Vector getScalePosition()
		return pScalePosition
	end
	
	/** Set scaling to apply to transformed position. */
	func void setScalePosition(Vector scale)
		if scale == null
			throw ENullPointer.new("scale")
		end
		pScalePosition = scale
	end
	
	/** Scale transformed rotation. */
	func Vector getScaleRotation()
		return pScaleRotation
	end
	
	/** Set scaling to apply to transformed rotation. */
	func void setScaleRotation(Vector scale)
		if scale == null
			throw ENullPointer.new("scale")
		end
		pScaleRotation = scale
	end
	
	
	
	/** Init element clas. */
	func void initElementClass(CharacterConfiguration config, BaseVRActorClass eclass, ModifiedRig modifyRig)
		ECBMotionTransferSlot.new(eclass, this)
	end
	
	/** Reset calibration. */
	func void resetCalibration()
		pSource.resetTransform()
	end
	
	/** Calibrate character. */
	func void calibrate(CharacterConfiguration config, ActorProfile actorProfile, \
	BaseVRActor actor, Component component)
		pSource.resolveRealSlot(config)
		pSource.setTransform(config, component, "")
	end
	
	/** Create copy of motion transfer. */
	func MotionTransfer createCopy()
		return MotionTransferSlot.new(this)
	end
	
	/** Load from XML. */
	func void load(BaseXmlLoader loader, EasyXMLElement root)
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("name")
				setName(element.getFirstCData())
				
			elif tagName.equals("enable")
				setEnabled(element.getFirstCDataBool())
				
			elif tagName.equals("target")
				setTarget(element.getFirstCData())
				
			elif tagName.equals("source")
				pSource.load(loader, element)
				
			elif tagName.equals("scalePosition")
				setScalePosition(loader.readVector(element))
				
			elif tagName.equals("scaleRotation")
				setScaleRotation(loader.readVector(element))
				
			elif tagName.equals("calibrated")
				loadCalibrated(loader, element)
			end
		end)
	end
	
	protected func void loadCalibrated(BaseXmlLoader loader, EasyXMLElement root)
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("tracker")
				pSource.loadCalibrated(loader, element)
			end
		end)
	end
	
	/** Post load initialize. */
	func void postLoadInit(CharacterConfiguration config)
		pSource.resolveRealSlot(config)
	end
	
	/** Save to XML. */
	func void save(BaseXmlLoader loader, EasyXMLElement tag, bool calibrated)
		tag.addDataTag("name", getName())
		tag.addDataTag("enable", getEnabled())
		tag.addDataTag("target", pTarget)
		pSource.save(loader, tag.addTag("source"))
		loader.writeVector(tag, "scalePosition", pScalePosition)
		loader.writeVector(tag, "scaleRotation", pScaleRotation)
	end
	
	protected func void saveCalibrated(BaseXmlLoader loader, EasyXMLElement tag)
		pSource.saveCalibrated(loader, tag.addTag("tracker"))
	end
end
