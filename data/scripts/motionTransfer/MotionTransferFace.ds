/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2023, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.MotionTransferSystem

pin Democap.Actors
pin Democap.Behaviors
pin Democap.Characters

pin Dragengine.Animators
pin Dragengine.LoadSave
pin Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.XML


/**
 * Motion transfer affecting facial expressions.
 * 
 * Supports input from face trackers to adjust the appropriate vertex position set weights.
 */
class MotionTransferFace extends DefaultMotionTransfer
	/** Factory. */
	class Factory implements MotionTransferFactory
		func new()
		end
		
		func String factoryID()
			return "face"
		end
		
		func MotionTransfer createMotionTransfer()
			return MotionTransferFace.new(factoryID())
		end
		
		func String displayName()
			return "@UI.Face"
		end
	end
	
	/** Expression information. */
	class ExpressionInfo
		var int pExpression
		var String pId
		var String pName
		var String pDescription
		
		func new(int expression, String id)
			pExpression = expression
			pId = id
			pName = "UI.Enum.FaceExpression." + id
			pDescription = pName
		end
		
		func int getExpression()
			return pExpression
		end
		
		func String getId()
			return pId
		end
		
		func String getName()
			return pName
		end
		
		func String getDescription()
			return pDescription
		end
	end
	
	
	
	var Array pExpressionsVPS
	
	var Array pADControllersVPS
	var Array pADRulesExpression
	
	public static fixed var Array expressionInfos = pInitExpressionInfos()
	
	
	
	/** Create motion transfer. */
	func new(String factoryID) super(factoryID)
		var int count = expressionInfos.getCount()
		pExpressionsVPS = Array.new(count, "")
		pADControllersVPS = Array.new(count, null)
		pADRulesExpression = Array.new(count, null)
	end
	
	/** Create copy of motion transfer. */
	func new(MotionTransferFace transfer) super(transfer)
		var int count = expressionInfos.getCount()
		pExpressionsVPS = Array.new(transfer.pExpressionsVPS)
		pADControllersVPS = Array.new(count, null)
		pADRulesExpression = Array.new(count, null)
	end
	
	
	
	/** Vertex position set name for expression (InputDeviceFaceExpression). */
	func String getExpressionVPSAt(int expression)
		return pExpressionsVPS.getAt(expression) cast String
	end
	
	/** Set vertex position set name for expression (InputDeviceFaceExpression). */
	func void setExpressionVPSAt(int expression, String name)
		if name == null
			throw ENullPointer.new("name")
		end
		pExpressionsVPS.setAt(expression, name)
	end
	
	
	
	/** Animator definition rule for expression or null. */
	func ADRule getADRuleExpressionAt(int expression)
		return pADRulesExpression.getAt(expression) cast ADRule
	end
	
	
	
	/** Reset calibration. */
	func void resetCalibration()
		var int i, count = expressionInfos.getCount()
		for i = 0 to count
			pADControllersVPS.setAt(i, null)
			pADRulesExpression.setAt(i, null)
		end
	end
	
	/** Init element clas. */
	func void initElementClass(CharacterConfiguration config, BaseVRActorClass eclass, ModifiedRig modifyRig)
		var int i, count = expressionInfos.getCount()
		for i = 0 to count
			pADControllersVPS.setAt(i, null)
			pADRulesExpression.setAt(i, null)
		end
		
		if pExpressionsVPS.find(block String each
			return not each.empty()
		end) == null
			return
		end
		
		// add behavior
		var ECBMotionTransferFace behavior = ECBMotionTransferFace.new(eclass, this)
		
		// add controller, link and rules
		var ECBRecordAnimation recordAnimation = ECBRecordAnimation.getBehaviorIn(eclass)
		var AnimatorDefinition adef = config.getAnimatorDefinition()
		var String baseControllerName = behavior.getBaseControllerName()
		
		expressionInfos.forEach(block ExpressionInfo each
			var String vps = pExpressionsVPS.getAt(each.getExpression()) cast String
			if not vps.empty()
				var ADController controller = addADController(adef, baseControllerName + each.getId())
				pADControllersVPS.add(controller)
				
				pADRulesExpression.add(addADRuleEye(adef, addADLink(adef, controller), vps))
				
				recordAnimation.addVPS(vps)
			end
		end)
	end
	
	/** Add animator definition controller. */
	protected func ADController addADController(AnimatorDefinition adef, String name)
		var ADController controller = ADController.new()
		controller.setName(name)
		adef.addController(controller)
		return controller
	end
	
	/** Add animator definition link. */
	protected func ADLink addADLink(AnimatorDefinition adef, ADController controller)
		var ADLink link = ADLink.new()
		link.setController(controller)
		adef.addLink(link)
		return link
	end
	
	/** Add animator rule. */
	protected func ADRule addADRuleEye(AnimatorDefinition adef, ADLink link, String vps)
		var ADRuleStateManipulator rule = ADRuleStateManipulator.new()
		rule.setName(link.getController().getName())
		rule.setEnableOrientation(false)
		rule.setMaximumVertexPositionSet(1)
		rule.addTargetLink(ADRuleTargetLink.new(ARStateManipulatorTarget.vertexPositionSet, link))
		rule.addVertexPositionSet(vps)
		adef.addRule(rule)
		return rule
	end
	
	/** Create copy of motion transfer. */
	func MotionTransfer createCopy()
		return MotionTransferFace.new(this)
	end
	
	/** Load from XML. */
	func void load(BaseXmlLoader loader, EasyXMLElement root)
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("name")
				setName(element.getFirstCData())
				
			elif tagName.equals("enable")
				setEnabled(element.getFirstCDataBool())
				
			elif tagName.equals("expressionVPS")
				var String id = element.getAttributeNamed("id")
				var ExpressionInfo info = expressionInfos.find(block ExpressionInfo each
					return each.getId().equals(id)
				end) cast ExpressionInfo
				if info != null
					setExpressionVPSAt(info.getExpression(), element.getFirstCData())
				end
			end
		end)
	end
	
	/** Save to XML. */
	func void save(BaseXmlLoader loader, EasyXMLElement tag, bool calibrated)
		tag.addDataTag("name", getName())
		tag.addDataTag("enable", getEnabled())
		
		expressionInfos.forEach(block ExpressionInfo each
			var EasyXMLElement dt = tag.addTag("expressionVPS")
			dt.setAttribute("id", each.getId())
			dt.addCData(pExpressionsVPS.getAt(each.getExpression()) cast String)
		end)
	end
	
	
	
	private static func Array pInitExpressionInfos()
		var Array l = Array.new()
		l.add(ExpressionInfo.new(InputDeviceFaceExpression.eyeRightBlink, "eyeRightBlink"))
		l.add(ExpressionInfo.new(InputDeviceFaceExpression.eyeLeftBlink, "eyeLeftBlink"))
		l.add(ExpressionInfo.new(InputDeviceFaceExpression.eyeRightWide, "eyeRightWide"))
		l.add(ExpressionInfo.new(InputDeviceFaceExpression.eyeLeftWide, "eyeLeftWide"))
		l.add(ExpressionInfo.new(InputDeviceFaceExpression.eyeRightSqueeze, "eyeRightSqueeze"))
		l.add(ExpressionInfo.new(InputDeviceFaceExpression.eyeLeftSqueeze, "eyeLeftSqueeze"))
		l.add(ExpressionInfo.new(InputDeviceFaceExpression.eyeRightDown, "eyeRightDown"))
		l.add(ExpressionInfo.new(InputDeviceFaceExpression.eyeLeftDown, "eyeLeftDown"))
		l.add(ExpressionInfo.new(InputDeviceFaceExpression.eyeRightUp, "eyeRightUp"))
		l.add(ExpressionInfo.new(InputDeviceFaceExpression.eyeLeftUp, "eyeLeftUp"))
		l.add(ExpressionInfo.new(InputDeviceFaceExpression.eyeRightIn, "eyeRightIn"))
		l.add(ExpressionInfo.new(InputDeviceFaceExpression.eyeLeftIn, "eyeLeftIn"))
		l.add(ExpressionInfo.new(InputDeviceFaceExpression.eyeRightOut, "eyeRightOut"))
		l.add(ExpressionInfo.new(InputDeviceFaceExpression.eyeLeftOut, "eyeLeftOut"))
		
		l.add(ExpressionInfo.new(InputDeviceFaceExpression.jawRight, "jawRight"))
		l.add(ExpressionInfo.new(InputDeviceFaceExpression.jawLeft, "jawLeft"))
		l.add(ExpressionInfo.new(InputDeviceFaceExpression.jawForward, "jawForward"))
		l.add(ExpressionInfo.new(InputDeviceFaceExpression.jawOpen, "jawOpen"))
		
		l.add(ExpressionInfo.new(InputDeviceFaceExpression.cheekPuffRight, "cheekPuffRight"))
		l.add(ExpressionInfo.new(InputDeviceFaceExpression.cheekPuffLeft, "cheekPuffLeft"))
		l.add(ExpressionInfo.new(InputDeviceFaceExpression.cheekSuck, "cheekSuck"))
		
		l.add(ExpressionInfo.new(InputDeviceFaceExpression.mouthApeShape, "mouthApeShape"))
		l.add(ExpressionInfo.new(InputDeviceFaceExpression.mouthUpperRight, "mouthUpperRight"))
		l.add(ExpressionInfo.new(InputDeviceFaceExpression.mouthUpperLeft, "mouthUpperLeft"))
		l.add(ExpressionInfo.new(InputDeviceFaceExpression.mouthUpperUpRight, "mouthUpperUpRight"))
		l.add(ExpressionInfo.new(InputDeviceFaceExpression.mouthUpperUpLeft, "mouthUpperUpLeft"))
		l.add(ExpressionInfo.new(InputDeviceFaceExpression.mouthUpperOverturn, "mouthUpperOverturn"))
		l.add(ExpressionInfo.new(InputDeviceFaceExpression.mouthUpperInside, "mouthUpperInside"))
		l.add(ExpressionInfo.new(InputDeviceFaceExpression.mouthLowerRight, "mouthLowerRight"))
		l.add(ExpressionInfo.new(InputDeviceFaceExpression.mouthLowerLeft, "mouthLowerLeft"))
		l.add(ExpressionInfo.new(InputDeviceFaceExpression.mouthLowerDownRight, "mouthLowerDownRight"))
		l.add(ExpressionInfo.new(InputDeviceFaceExpression.mouthLowerDownLeft, "mouthLowerDownLeft"))
		l.add(ExpressionInfo.new(InputDeviceFaceExpression.mouthLowerOverturn, "mouthLowerOverturn"))
		l.add(ExpressionInfo.new(InputDeviceFaceExpression.mouthLowerInside, "mouthLowerInside"))
		l.add(ExpressionInfo.new(InputDeviceFaceExpression.mouthLowerOverlay, "mouthLowerOverlay"))
		l.add(ExpressionInfo.new(InputDeviceFaceExpression.mouthPout, "mouthPout"))
		l.add(ExpressionInfo.new(InputDeviceFaceExpression.mouthSmileRight, "mouthSmileRight"))
		l.add(ExpressionInfo.new(InputDeviceFaceExpression.mouthSmileLeft, "mouthSmileLeft"))
		l.add(ExpressionInfo.new(InputDeviceFaceExpression.mouthSadRight, "mouthSadRight"))
		l.add(ExpressionInfo.new(InputDeviceFaceExpression.mouthSadLeft, "mouthSadLeft"))
		
		l.add(ExpressionInfo.new(InputDeviceFaceExpression.tongueRight, "tongueRight"))
		l.add(ExpressionInfo.new(InputDeviceFaceExpression.tongueLeft, "tongueLeft"))
		l.add(ExpressionInfo.new(InputDeviceFaceExpression.tongueUp, "tongueUp"))
		l.add(ExpressionInfo.new(InputDeviceFaceExpression.tongueDown, "tongueDown"))
		l.add(ExpressionInfo.new(InputDeviceFaceExpression.tongueRoll, "tongueRoll"))
		l.add(ExpressionInfo.new(InputDeviceFaceExpression.tongueLongStep1, "tongueLongStep1"))
		l.add(ExpressionInfo.new(InputDeviceFaceExpression.tongueLongStep2, "tongueLongStep2"))
		l.add(ExpressionInfo.new(InputDeviceFaceExpression.tongueMorphUpRight, "tongueMorphUpRight"))
		l.add(ExpressionInfo.new(InputDeviceFaceExpression.tongueMorphUpLeft, "tongueMorphUpLeft"))
		l.add(ExpressionInfo.new(InputDeviceFaceExpression.tongueMorphDownRight, "tongueMorphDownRight"))
		l.add(ExpressionInfo.new(InputDeviceFaceExpression.tongueMorphDownLeft, "tongueMorphDownLeft"))
		
		return l
	end
end
