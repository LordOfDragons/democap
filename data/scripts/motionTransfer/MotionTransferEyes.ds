/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2023, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.MotionTransferSystem

pin Democap.Actors
pin Democap.Behaviors
pin Democap.Characters

pin Dragengine.Animators
pin Dragengine.LoadSave
pin Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.XML


/**
 * Motion transfer affecting eye looking direction.
 * 
 * Supports input from eye trackers to adjust the character eyes looking direction.
 */
class MotionTransferEyes extends DefaultMotionTransfer
	/** Factory. */
	class Factory implements MotionTransferFactory
		func new()
		end
		
		func String factoryID()
			return "eyes"
		end
		
		func MotionTransfer createMotionTransfer()
			return MotionTransferEyes.new(factoryID())
		end
		
		func String displayName()
			return "Eyes"
		end
	end
	
	
	
	var String pRightBone
	var String pLeftBone
	var String pViewBone
	var String pLookAtBone
	var float pLookAtDistance
	var String pTracker
	var CharacterTrackerSlot pTrackerSlot
	var Vector pRightRotation
	var Vector pLeftRotation
	var Vector pViewRotation
	var float pLimitIn
	var float pLimitOut
	var float pLimitUp
	var float pLimitDown
	var float pAdjustRotationHorizontal
	var float pAdjustRotationVertical
	
	var ADController pADControllerRightHorizontal
	var ADController pADControllerRightVertical
	var ADController pADControllerLeftHorizontal
	var ADController pADControllerLeftVertical
	var ADController pADControllerViewHorizontal
	var ADController pADControllerViewVertical
	var ADController pADControllerLookAtPosition
	var ADController pADControllerLookAtRotation
	
	var ADRule pADRuleReset
	var ADRule pADRuleRightHorizontal
	var ADRule pADRuleRightVertical
	var ADRule pADRuleLeftHorizontal
	var ADRule pADRuleLeftVertical
	var ADRule pADRuleViewHorizontal
	var ADRule pADRuleViewVertical
	var ADRuleInverseKinematic pADRuleLookAt
	
	var Vector pCalibrateRotation
	
	
	
	/** Create motion transfer. */
	func new(String factoryID) super(factoryID)
		pRightBone = ""
		pLeftBone = ""
		pViewBone = ""
		pLookAtBone = ""
		pLookAtDistance = 1.5
		pTracker = ""
		pRightRotation = Vector.new()
		pLeftRotation = Vector.new()
		pViewRotation = Vector.new()
		pLimitIn = 45
		pLimitOut = 45
		pLimitUp = 45
		pLimitDown = 45
		pAdjustRotationHorizontal = 0
		pAdjustRotationVertical = 0
		pCalibrateRotation = Vector.new()
	end
	
	/** Create copy of motion transfer. */
	func new(MotionTransferEyes transfer) super(transfer)
		pRightBone = transfer.pRightBone
		pViewBone = transfer.pViewBone
		pLookAtBone = transfer.pLookAtBone
		pLookAtDistance = transfer.pLookAtDistance
		pLeftBone = transfer.pLeftBone
		pTracker = transfer.pTracker
		pRightRotation = transfer.pRightRotation
		pLeftRotation = transfer.pLeftRotation
		pViewRotation = transfer.pViewRotation
		pLimitIn = transfer.pLimitIn
		pLimitOut = transfer.pLimitOut
		pLimitUp = transfer.pLimitUp
		pLimitDown = transfer.pLimitDown
		pAdjustRotationHorizontal = transfer.pAdjustRotationHorizontal
		pAdjustRotationVertical = transfer.pAdjustRotationVertical
		pCalibrateRotation = transfer.pCalibrateRotation
	end
	
	
	
	/** Right eye bone name. */
	func String getRightBone()
		return pRightBone
	end
	
	/** Set right eye bone name. */
	func void setRightBone(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pRightBone = bone
	end
	
	/** Left eye bone name. */
	func String getLeftBone()
		return pLeftBone
	end
	
	/** Set left eye bone name. */
	func void setLeftBone(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pLeftBone = bone
	end
	
	/** View eye bone name. */
	func String getViewBone()
		return pViewBone
	end
	
	/** Set view eye bone name. */
	func void setViewBone(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pViewBone = bone
	end
	
	/** Look-at bone name. */
	func String getLookAtBone()
		return pLookAtBone
	end
	
	/** Set look-at bone name. */
	func void setLookAtBone(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pLookAtBone = bone
	end
	
	/** Look-at distance. */
	func float getLookAtDistance()
		return pLookAtDistance
	end
	
	/** Set look-at distance. */
	func void setLookAtDistance(float distance)
		pLookAtDistance = DEMath.max(distance, 0.0)
	end
	
	/** Tracker slot name. */
	func String getTracker()
		return pTracker
	end
	
	/** Set tracker slot name. */
	func void setTracker(String tracker)
		if tracker == null
			throw ENullPointer.new("tracker")
		end
		pTracker = tracker
	end
	
	/** Tracker slot or null. */
	func CharacterTrackerSlot getTrackerSlot()
		return pTrackerSlot
	end
	
	/** Rotation of right eye component space. */
	func Vector getRightRotation()
		return pRightRotation
	end
	
	/** Set rotation of right eye in component space. */
	func void setRightRotation(Vector rotation)
		if rotation == null
			throw ENullPointer.new("rotation")
		end
		pRightRotation = rotation
	end
	
	/** Rotation of left eye component space. */
	func Vector getLeftRotation()
		return pLeftRotation
	end
	
	/** Set rotation of left eye in component space. */
	func void setLeftRotation(Vector rotation)
		if rotation == null
			throw ENullPointer.new("rotation")
		end
		pLeftRotation = rotation
	end
	
	/** Rotation of view eye component space. */
	func Vector getViewRotation()
		return pViewRotation
	end
	
	/** Set rotation of view eye in component space. */
	func void setViewRotation(Vector rotation)
		if rotation == null
			throw ENullPointer.new("rotation")
		end
		pViewRotation = rotation
	end
	
	/** Horizontal eye rotation limit towards the nose in degrees. */
	func float getLimitIn()
		return pLimitIn
	end
	
	/** Set horizontal eye rotation limit towards the nose in degrees. */
	func void setLimitIn(float angle)
		pLimitIn = angle
	end
	
	/** Horizontal eye rotation limit away from the nose in degrees. */
	func float getLimitOut()
		return pLimitOut
	end
	
	/** Set horizontal eye rotation limit away from the nose in degrees. */
	func void setLimitOut(float angle)
		pLimitOut = angle
	end
	
	/** Vertical eye rotation limit pu in degrees. */
	func float getLimitUp()
		return pLimitUp
	end
	
	/** Set vertical eye rotation limit up in degrees. */
	func void setLimitUp(float angle)
		pLimitUp = angle
	end
	
	/** Vertical eye rotation limit down in degrees. */
	func float getLimitDown()
		return pLimitDown
	end
	
	/** Set vertical eye rotation limit down in degrees. */
	func void setLimitDown(float angle)
		pLimitDown = angle
	end

	/** Adjust horizontal rotation. */
	func float getAdjustRotationHorizontal()
		return pAdjustRotationHorizontal
	end

	/** Set adjust horizontal rotation. */
	func void setAdjustRotationHorizontal(float adjust)
		pAdjustRotationHorizontal = adjust
	end

	/** Adjust vertical rotation. */
	func float getAdjustRotationVertical()
		return pAdjustRotationVertical
	end

	/** Set adjust vertical rotation. */
	func void setAdjustRotationVertical(float adjust)
		pAdjustRotationVertical = adjust
	end
	
	
	
	/** Reset eyes animator definition rule or null. */
	func ADRule getADRuleReset()
		return pADRuleReset
	end
	
	/** Right eye horizontal animator definition rule or null. */
	func ADRule getADRuleRightHorizontal()
		return pADRuleRightHorizontal
	end
	
	/** Right eye vertical animator definition rule or null. */
	func ADRule getADRuleRightVertical()
		return pADRuleRightVertical
	end
	
	/** Left eye horizontal animator definition rule or null. */
	func ADRule getADRuleLeftHorizontal()
		return pADRuleLeftHorizontal
	end
	
	/** Left eye vertical animator definition rule or null. */
	func ADRule getADRuleLeftVertical()
		return pADRuleLeftVertical
	end
	
	/** View eye horizontal animator definition rule or null. */
	func ADRule getADRuleViewHorizontal()
		return pADRuleViewHorizontal
	end
	
	/** View eye vertical animator definition rule or null. */
	func ADRule getADRuleViewVertical()
		return pADRuleViewVertical
	end
	
	
	
	/** Calibrate rotation. */
	func Vector getCalibrateRotation()
		return pCalibrateRotation
	end
	
	
	
	/** Reset calibration. */
	func void resetCalibration()
		pTrackerSlot = null
		pCalibrateRotation = Vector.new()
		
		pADControllerRightHorizontal = null
		pADControllerRightVertical = null
		pADControllerLeftHorizontal = null
		pADControllerLeftVertical = null
		pADControllerViewHorizontal = null
		pADControllerViewVertical = null
		pADControllerLookAtPosition = null
		pADControllerLookAtRotation = null
		
		pADRuleReset = null
		pADRuleRightHorizontal = null
		pADRuleRightVertical = null
		pADRuleLeftHorizontal = null
		pADRuleLeftVertical = null
		pADRuleViewHorizontal = null
		pADRuleViewVertical = null
	end
	
	/** Calibrate character. */
	func void calibrate(CharacterConfiguration config, ActorProfile actorProfile,\
	BaseVRActor actor, Component component)
		var Rig rig = component.getRig()
		pTrackerSlot = config.getTrackerSlots().getNamed(pTracker)
		
		if pTrackerSlot == null
			return
		end
		if pRightBone.empty() and pLeftBone.empty() and pViewBone.empty() and pLookAtBone.empty()
			return
		end
		
		//pCalibrateRotation = pTrackerSlot.getCalibrateComponentMatrix().getEulerAngles()
		pCalibrateRotation = Vector.new()
	end
	
	/** Init element clas. */
	func void initElementClass(CharacterConfiguration config, BaseVRActorClass eclass, ModifiedRig modifyRig)
		if pTrackerSlot == null
			return
		end
		if pRightBone.empty() and pLeftBone.empty() and pViewBone.empty() and pLookAtBone.empty()
			return
		end
		
		// add behavior
		var ECBMotionTransferEyes behavior = ECBMotionTransferEyes.new(eclass, this)
		
		// add controller, link and rules
		var ECBRecordAnimation recordAnimation = ECBRecordAnimation.getBehaviorIn(eclass)
		var AnimatorDefinition adef = config.getAnimatorDefinition()
		
		// add eye rules
		var Matrix matrix
		
		if not pRightBone.empty()
			matrix = Matrix.newRotation(pRightRotation)
			
			pADControllerRightHorizontal = addADController(adef,\
				behavior.getControllerNameRightHorizontal(), -pLimitOut, pLimitIn)
			
			pADControllerRightVertical = addADController(adef,\
				behavior.getControllerNameRightVertical(), -pLimitDown, pLimitUp)
			
			pADRuleRightHorizontal = addADRuleEye(adef,\
				addADLink(adef, pADControllerRightHorizontal), pRightBone, matrix.getUpVector())
			
			pADRuleRightVertical = addADRuleEye(adef,\
				addADLink(adef, pADControllerRightVertical), pRightBone, matrix.getRightVector())
			
			recordAnimation.addBone(pRightBone)
		end
		
		if not pLeftBone.empty()
			matrix = Matrix.newRotation(pLeftRotation)
			
			pADControllerLeftHorizontal = addADController(adef,\
				behavior.getControllerNameLeftHorizontal(), -pLimitIn, pLimitOut)
			
			pADControllerLeftVertical = addADController(adef,\
				behavior.getControllerNameLeftVertical(), -pLimitDown, pLimitUp)
			
			pADRuleLeftHorizontal = addADRuleEye(adef,\
				addADLink(adef, pADControllerLeftHorizontal), pLeftBone, matrix.getUpVector())
			
			pADRuleLeftVertical = addADRuleEye(adef,\
				addADLink(adef, pADControllerLeftVertical), pLeftBone, matrix.getRightVector())
			
			recordAnimation.addBone(pLeftBone)
		end
		
		if not pViewBone.empty()
			matrix = Matrix.newRotation(pViewRotation)
			
			pADControllerViewHorizontal = addADController(adef,\
				behavior.getControllerNameViewHorizontal(), -45, 45)
			
			pADControllerViewVertical = addADController(adef,\
				behavior.getControllerNameViewVertical(), -45, 45)
			
			pADRuleViewHorizontal = addADRuleEye(adef,\
				addADLink(adef, pADControllerViewHorizontal), pViewBone, matrix.getUpVector())
			
			pADRuleViewVertical = addADRuleEye(adef,\
				addADLink(adef, pADControllerViewVertical), pViewBone, matrix.getRightVector())
			
			recordAnimation.addBone(pViewBone)
		end
		
		if not pLookAtBone.empty()
			pADControllerLookAtPosition = ADController.new()
			pADControllerLookAtPosition.setName(behavior.getControllerNameLookAtPosition())
			adef.addController(pADControllerLookAtPosition)
			
			pADControllerLookAtRotation = ADController.new()
			pADControllerLookAtRotation.setName(behavior.getControllerNameLookAtRotation())
			adef.addController(pADControllerLookAtRotation)
			
			var ADLink linkPosition = ADLink.new()
			linkPosition.setController(pADControllerLookAtPosition)
			adef.addLink(linkPosition)
			
			var ADLink linkRotation = ADLink.new()
			linkRotation.setController(pADControllerLookAtRotation)
			adef.addLink(linkRotation)
			
			pADRuleLookAt = ADRuleInverseKinematic.new()
			pADRuleLookAt.setName(behavior.getControllerNameLookAtPosition())
			pADRuleLookAt.setAdjustPosition(true)
			pADRuleLookAt.setAdjustOrientation(true)
			pADRuleLookAt.addTargetLink(ADRuleTargetLink.new(ARInverseKinematicTarget.goalPosition, linkPosition))
			pADRuleLookAt.addTargetLink(ADRuleTargetLink.new(ARInverseKinematicTarget.goalOrientation, linkRotation))
			pADRuleLookAt.addBone(pLookAtBone)
			adef.addRule(pADRuleLookAt)
			
			recordAnimation.addBone(pLookAtBone)
		end
	end
	
	/** Add animator definition controller. */
	protected func ADController addADController(AnimatorDefinition adef, String name,\
	float minValue, float maxValue)
		var ADController controller = ADController.new()
		controller.setName(name)
		controller.setMinimum(minValue)
		controller.setMaximum(maxValue)
		adef.addController(controller)
		return controller
	end
	
	/** Add animator definition link. */
	protected func ADLink addADLink(AnimatorDefinition adef, ADController controller)
		var ADLink link = ADLink.new()
		link.setController(controller)
		link.setCurve(CurveBezier.newDefaultLinear())
		// ^== TODO an S-curve would make the movement more gentle towards the limits
		adef.addLink(link)
		return link
	end
	
	/** Add animator rule. */
	protected func ADRule addADRuleEye(AnimatorDefinition adef, ADLink link, String bone, Vector axis)
		var ADRuleBoneTransformator rule = ADRuleBoneTransformator.new()
		var ADController controller = link.getController()
		rule.setName(controller.getName())
		rule.setCoordinateFrame(ARBoneTransformatorCFrame.local)
		rule.setAxis(axis)
		rule.setMinimumAngle(controller.getMinimum())
		rule.setMaximumAngle(controller.getMaximum())
		rule.setUseAxis(true)
		rule.addTargetLink(ADRuleTargetLink.new(ARBoneTransformatorTarget.rotation, link))
		rule.addBone(bone)
		adef.addRule(rule)
		return rule
	end
	
	/** Create copy of motion transfer. */
	func MotionTransfer createCopy()
		return MotionTransferEyes.new(this)
	end
	
	func void tweaked()
	end
	
	/** Load from XML. */
	func void load(BaseXmlLoader loader, EasyXMLElement root)
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("name")
				setName(element.getFirstCData())
				
			elif tagName.equals("rightBone")
				setRightBone(element.getFirstCData())
				
			elif tagName.equals("leftBone")
				setLeftBone(element.getFirstCData())
				
			elif tagName.equals("viewBone")
				setViewBone(element.getFirstCData())
				
			elif tagName.equals("lookAtBone")
				setLookAtBone(element.getFirstCData())
				
			elif tagName.equals("lookAtDistance")
				setLookAtDistance(element.getFirstCDataFloat())
				
			elif tagName.equals("tracker")
				pTracker = element.getFirstCData()
				
			elif tagName.equals("rightRotation")
				setRightRotation(loader.readVector(element))
				
			elif tagName.equals("leftRotation")
				setLeftRotation(loader.readVector(element))
				
			elif tagName.equals("viewRotation")
				setViewRotation(loader.readVector(element))
				
			elif tagName.equals("limitIn")
				pLimitIn = element.getFirstCDataFloat()
				
			elif tagName.equals("limitOut")
				pLimitOut = element.getFirstCDataFloat()
				
			elif tagName.equals("limitUp")
				pLimitUp = element.getFirstCDataFloat()
				
			elif tagName.equals("limitDown")
				pLimitDown = element.getFirstCDataFloat()
				
			elif tagName.equals("adjustRotationHorizontal")
				pAdjustRotationHorizontal = element.getFirstCDataFloat()

			elif tagName.equals("adjustRotationVertical")
				pAdjustRotationVertical = element.getFirstCDataFloat()

			elif tagName.equals("calibrated")
				loadCalibrated(loader, element)
			end
		end)
	end
	
	func void loadCalibrated(BaseXmlLoader loader, EasyXMLElement root)
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("rotation")
				pCalibrateRotation = loader.readVector(element)
			end
		end)
	end
	
	/** Post load initialize. */
	func void postLoadInit(CharacterConfiguration config)
		pTrackerSlot = config.getTrackerSlots().getNamed(pTracker)
	end
	
	/** Save to XML. */
	func void save(BaseXmlLoader loader, EasyXMLElement tag)
		tag.addDataTag("name", getName())
		tag.addDataTag("rightBone", pRightBone)
		tag.addDataTag("leftBone", pLeftBone)
		tag.addDataTag("viewBone", pViewBone)
		tag.addDataTag("lookAtBone", pLookAtBone)
		tag.addDataTag("lookAtDistance", pLookAtDistance)
		tag.addDataTag("tracker", pTracker)
		loader.writeVector(tag, "rightRotation", pRightRotation)
		loader.writeVector(tag, "leftRotation", pLeftRotation)
		loader.writeVector(tag, "viewRotation", pViewRotation)
		tag.addDataTag("limitIn", pLimitIn)
		tag.addDataTag("limitOut", pLimitOut)
		tag.addDataTag("limitUp", pLimitUp)
		tag.addDataTag("limitDown", pLimitOut)
		tag.addDataTag("adjustRotationHorizontal", pAdjustRotationHorizontal)
		tag.addDataTag("adjustRotationVertical", pAdjustRotationVertical)
		saveCalibrated(loader, tag.addTag("calibrated"))
	end
	
	func void saveCalibrated(BaseXmlLoader loader, EasyXMLElement tag)
		loader.writeVector(tag, "rotation", pCalibrateRotation)
	end
end
