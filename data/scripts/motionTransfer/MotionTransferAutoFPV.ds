/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.MotionTransferSystem

pin Democap.Actors
pin Democap.Behaviors
pin Democap.Characters

pin Dragengine.Animators
pin Dragengine.LoadSave
pin Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.XML


/**
 * Motion transfer automatic first person view.
 * 
 * Uses various child motion transfers configured by a few key parameters for simplicity.
 */
class MotionTransferAutoFPV extends DefaultMotionTransfer
	/** Factory. */
	class Factory implements MotionTransferFactory
		func new()
		end
		
		func String factoryID()
			return "autoFPV"
		end
		
		func MotionTransfer createMotionTransfer()
			return MotionTransferAutoFPV.new(factoryID())
		end
		
		func String displayName()
			return "@UI.AutomaticFirstPersonView"
		end
	end
	
	
	
	var String pBoneHead
	var String pBoneChest
	var String pBoneHandRight
	var String pBoneHandLeft
	var String pMoveBaseIK
	var Vector pReachScalingArmRight
	var Vector pReachScalingArmRightBack
	var Vector pReachScalingArmLeft
	var Vector pReachScalingArmLeftBack
	
	var MotionTransferChild pTransferHead
	var MotionTransferChild pTransferChest
	var MotionTransferIK pTransferArmRight
	var MotionTransferIK pTransferArmLeft
	
	
	/** Create motion transfer. */
	func new(String factoryID) super(factoryID)
		pBoneHead = ""
		pBoneChest = ""
		pBoneHandRight = ""
		pBoneHandLeft = ""
		pMoveBaseIK = ""
		pReachScalingArmRight = Vector.new(1, 1, 1)
		pReachScalingArmRightBack = Vector.new(1, 1, 1)
		pReachScalingArmLeft = Vector.new(1, 1, 1)
		pReachScalingArmLeftBack = Vector.new(1, 1, 1)
		
		// create child motion transfers
		var MotionTransferChild.Factory factoryChild = MotionTransferChild.Factory.new()
		var MotionTransferIK.Factory factoryIK = MotionTransferIK.Factory.new()
		
		pTransferHead = MotionTransferChild.new(factoryChild.factoryID())
		pTransferHead.setName("AutoFPV: Head")
		
		pTransferChest = MotionTransferChild.new(factoryChild.factoryID())
		pTransferChest.setName("AutoFPV: Chest")
		
		pTransferArmRight = MotionTransferIK.new(factoryIK.factoryID())
		pTransferArmRight.setName("AutoFPV: ArmRight")
		pTransferArmRight.getTipTracker().setAutoTransform(MotionTransferTracker.AutoTransform.orientation)
		pTransferArmRight.setActorReach(MotionTransferIK.ActorReach.arm)
		pTransferArmRight.setTwistPropagation(0.5)
		pTransferArmRight.setTwistAxisRotation(Vector.new(0, -90, 0))
		pTransferArmRight.setTwistBoneCount(1)
		
		pTransferArmLeft = MotionTransferIK.new(factoryIK.factoryID())
		pTransferArmLeft.setName("AutoFPV: ArmLeft")
		pTransferArmLeft.getTipTracker().setAutoTransform(MotionTransferTracker.AutoTransform.orientation)
		pTransferArmLeft.setActorReach(MotionTransferIK.ActorReach.arm)
		pTransferArmLeft.setTwistPropagation(0.5)
		pTransferArmLeft.setTwistAxisRotation(Vector.new(0, 90, 0))
		pTransferArmLeft.setTwistBoneCount(1)
	end
	
	/** Create copy of motion transfer. */
	func new(MotionTransferAutoFPV transfer) super(transfer)
		pBoneHead = transfer.pBoneHead
		pBoneChest = transfer.pBoneChest
		pBoneHandRight = transfer.pBoneHandRight
		pBoneHandLeft = transfer.pBoneHandLeft
		pMoveBaseIK = transfer.pMoveBaseIK
		pReachScalingArmRight = transfer.pReachScalingArmRight
		pReachScalingArmRightBack = transfer.pReachScalingArmRightBack
		pReachScalingArmLeft = transfer.pReachScalingArmLeft
		pReachScalingArmLeftBack = transfer.pReachScalingArmLeftBack
		
		pTransferHead = MotionTransferChild.new(transfer.pTransferHead)
		pTransferChest = MotionTransferChild.new(transfer.pTransferChest)
		pTransferArmRight = MotionTransferIK.new(transfer.pTransferArmRight)
		pTransferArmLeft = MotionTransferIK.new(transfer.pTransferArmLeft)
	end
	
	
	
	/** Head bone name. */
	func String getBoneHead()
		return pBoneHead
	end
	
	/** Set head bone name. */
	func void setBoneHead(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pBoneHead = bone
	end
	
	/** Chest bone name. */
	func String getBoneChest()
		return pBoneChest
	end
	
	/** Set chest bone name. */
	func void setBoneChest(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pBoneChest = bone
	end
	
	/** Right hand bone name. */
	func String getBoneHandRight()
		return pBoneHandRight
	end
	
	/** Set right hand bone name. */
	func void setBoneHandRight(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pBoneHandRight = bone
	end
	
	/** Left hand bone name. */
	func String getBoneHandLeft()
		return pBoneHandLeft
	end
	
	/** Set left hand bone name. */
	func void setBoneHandLeft(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pBoneHandLeft = bone
	end
	
	/** Name of move to use to init base IK state for better results. */
	func String getMoveBaseIK()
		return pMoveBaseIK
	end
	
	/** Set name of move to use to init base IK state for better results. */
	func void setMoveBaseIK(String move)
		if move == null
			throw ENullPointer.new("move")
		end
		pMoveBaseIK = move
	end
	
	/** Right arm reach scaling. */
	func Vector getReachScalingArmRight()
		return pReachScalingArmRight
	end
	
	/** Set right arm reach scaling. */
	func void setReachScalingArmRight(Vector scaling)
		if scaling == null
			throw ENullPointer.new("scaling")
		end
		pReachScalingArmRight = scaling
	end
	
	/** Right arm reach scaling backwards. */
	func Vector getReachScalingArmRightBack()
		return pReachScalingArmRightBack
	end
	
	/** Set right arm reach scaling backwards. */
	func void setReachScalingArmRightBack(Vector scaling)
		if scaling == null
			throw ENullPointer.new("scaling")
		end
		pReachScalingArmRightBack = scaling
	end
	
	/** Left arm reach scaling. */
	func Vector getReachScalingArmLeft()
		return pReachScalingArmLeft
	end
	
	/** Set left arm reach scaling. */
	func void setReachScalingArmLeft(Vector scaling)
		if scaling == null
			throw ENullPointer.new("scaling")
		end
		pReachScalingArmLeft = scaling
	end
	
	/** Left arm reach scaling backwards. */
	func Vector getReachScalingArmLeftBack()
		return pReachScalingArmLeftBack
	end
	
	/** Set left arm reach scaling backwards. */
	func void setReachScalingArmLeftBack(Vector scaling)
		if scaling == null
			throw ENullPointer.new("scaling")
		end
		pReachScalingArmLeftBack = scaling
	end
	
	
	
	/** Child motion transfer. */
	func MotionTransferChild getTransferChest()
		return pTransferChest
	end
	
	func MotionTransferChild getTransferHead()
		return pTransferHead
	end
	
	func MotionTransferIK getTransferArmRight()
		return pTransferArmRight
	end
	
	func MotionTransferIK getTransferArmLeft()
		return pTransferArmLeft
	end
	
	
	
	/** Init element class. */
	func void initElementClass(CharacterConfiguration config, BaseVRActorClass eclass, ModifiedRig modifyRig)
		pTransferHead.initElementClass(config, eclass, modifyRig)
		pTransferChest.initElementClass(config, eclass, modifyRig)
		pTransferArmRight.initElementClass(config, eclass, modifyRig)
		pTransferArmLeft.initElementClass(config, eclass, modifyRig)
	end
	
	/** Reset calibration. */
	func void resetCalibration()
		pTransferHead.resetCalibration()
		pTransferChest.resetCalibration()
		pTransferArmRight.resetCalibration()
		pTransferArmLeft.resetCalibration()
	end
	
	/** Calibrate character. */
	func void calibrate(CharacterConfiguration config, ActorProfile actorProfile, \
	BaseVRActor actor, Component component)
		initChildTransferParams(config, actorProfile, actor, component)
		
		pTransferHead.calibrate(config, actorProfile, actor, component)
		pTransferChest.calibrate(config, actorProfile, actor, component)
		pTransferArmRight.calibrate(config, actorProfile, actor, component)
		pTransferArmLeft.calibrate(config, actorProfile, actor, component)
	end
	
	/** Init child transfer parameters. */
	protected func void initChildTransferParams(CharacterConfiguration config,\
	ActorProfile actorProfile, BaseVRActor actor, Component component)
		var Rig rig = component.getRig()
		var Array chain = Array.new()
		
		assignSlots(config)
		
		// determine what devices are attached. it is important to to resolve all trackers
		// that are used to determine motion transfer parameters or first time calibrate
		// can yield wrong results
		pTransferArmRight.getTipTracker().resolveRealSlot(config)
		pTransferArmLeft.getTipTracker().resolveRealSlot(config)
		
		var bool hasSlotRightHandController = pTransferArmRight.getTipTracker().getRealSlot() != null \
			and pTransferArmRight.getTipTracker().getRealSlot().getType() == CharacterTrackerSlot.Type.rightHandController
		
		var bool hasSlotLeftHandController = pTransferArmLeft.getTipTracker().getRealSlot() != null \
			and pTransferArmLeft.getTipTracker().getRealSlot().getType() == CharacterTrackerSlot.Type.leftHandController
		
		// head
		pTransferHead.setBone(pBoneHead)
		
		// chest
		pTransferChest.setBone(pBoneChest)
		
		// right arm. separate guide bone is used if chain has at least 4 bones:
		// hand, lower arm, upper arm, shoulder. with 3 bones no shoulder is assumed
		findBoneChain(rig, pBoneHandRight, pBoneChest, chain)
		
		pTransferArmRight.setTipBone(pBoneHandRight)
		pTransferArmRight.setMoveBaseIK(pMoveBaseIK)
		pTransferArmRight.setActorReach(MotionTransferIK.ActorReach.arm)
		pTransferArmRight.setReachLimit(1)
		pTransferArmRight.setReachScaling(Vector.new(pReachScalingArmRightBack.getZ(),\
			pReachScalingArmRightBack.getY(), pReachScalingArmRight.getX()))
		pTransferArmRight.setReachScalingBack(Vector.new(pReachScalingArmRight.getZ(),\
			pReachScalingArmRight.getY(), pReachScalingArmRightBack.getX()))
		pTransferArmRight.setTwistBoneCount(1)
		pTransferArmRight.setTwistPropagation(0.5)
		pTransferArmRight.setTwistAxisRotation(Vector.new(0, -90, 0))
		pTransferArmRight.setGuideBendAxisRotation(Vector.new(-45, 90, 0))
		
		if hasSlotRightHandController
			pTransferArmRight.getTipTracker().setAutoTransform(MotionTransferTracker.AutoTransform.none)
			
		else
			pTransferArmRight.getTipTracker().setAutoTransform(MotionTransferTracker.AutoTransform.orientation)
		end
		
		if chain.getCount() >= 4 // at least 3 bones plus chest
			pTransferArmRight.setBaseBone(chain.getAt(-2) cast String)
			
		else
			pTransferArmRight.setBaseBone("")
		end
		
		if chain.getCount() >= 5 // at least 4 bones plus chest
			pTransferArmRight.setGuideBone(chain.getAt(-3) cast String)
			
		else
			pTransferArmRight.setGuideBone(pTransferArmRight.getBaseBone())
		end
		
		pTransferArmRight.getGuideTracker().setOffsetPosition(Vector.new())
		pTransferArmRight.getGuideTracker().setOffsetRotation(Vector.new())
		
		// left arm. separate guide bone is used if chain has at least 4 bones:
		// hand, lower arm, upper arm, shoulder. with 3 bones no shoulder is assumed
		findBoneChain(rig, pBoneHandLeft, pBoneChest, chain)
		
		pTransferArmLeft.setTipBone(pBoneHandLeft)
		pTransferArmLeft.setMoveBaseIK(pMoveBaseIK)
		pTransferArmLeft.setActorReach(MotionTransferIK.ActorReach.arm)
		pTransferArmLeft.setReachLimit(1)
		pTransferArmLeft.setReachScaling(Vector.new(pReachScalingArmLeft.getZ(),\
			pReachScalingArmLeftBack.getY(), pReachScalingArmLeft.getX()))
		pTransferArmLeft.setReachScalingBack(Vector.new(pReachScalingArmLeftBack.getZ(),\
			pReachScalingArmLeft.getY(), pReachScalingArmLeftBack.getX()))
		pTransferArmLeft.setTwistBoneCount(1)
		pTransferArmLeft.setTwistPropagation(0.5)
		pTransferArmLeft.setTwistAxisRotation(Vector.new(0, 90, 0))
		pTransferArmLeft.setGuideBendAxisRotation(Vector.new(45, -90, 0))
		
		if hasSlotLeftHandController
			pTransferArmLeft.getTipTracker().setAutoTransform(MotionTransferTracker.AutoTransform.none)
			
		else
			pTransferArmLeft.getTipTracker().setAutoTransform(MotionTransferTracker.AutoTransform.orientation)
		end
		
		if chain.getCount() >= 4 // at least 3 bones plus chest
			pTransferArmLeft.setBaseBone(chain.getAt(-2) cast String)
			
		else
			pTransferArmLeft.setBaseBone("")
		end
		
		if chain.getCount() >= 5 // at least 4 bones plus chest
			pTransferArmLeft.setGuideBone(chain.getAt(-3) cast String)
			
		else
			pTransferArmLeft.setGuideBone(pTransferArmLeft.getBaseBone())
		end
		
		pTransferArmLeft.getGuideTracker().setOffsetPosition(Vector.new())
		pTransferArmLeft.getGuideTracker().setOffsetRotation(Vector.new())
	end
	
	/** Create copy of motion transfer. */
	func MotionTransfer createCopy()
		return MotionTransferAutoFPV.new(this)
	end
	
	/** Decompose motion transfer. Returns Array of MotionTranfer or empty list if not supported. */
	func Array decompose()
		var Array list = Array.new()
		
		if not pTransferHead.getTracker().getSlot().empty()
			list.add(pTransferHead.createCopy())
		end
		
		if not pTransferChest.getTracker().getSlot().empty()
			list.add(pTransferChest.createCopy())
		end
		
		if not pTransferArmRight.getBaseTracker().getSlot().empty()\
		and not pTransferArmRight.getTipTracker().getSlot().empty()
			list.add(pTransferArmRight.createCopy())
		end
		
		if not pTransferArmLeft.getBaseTracker().getSlot().empty()\
		and not pTransferArmLeft.getTipTracker().getSlot().empty()
			list.add(pTransferArmLeft.createCopy())
		end
		
		return list
	end
	
	/** Tweaked. */
	func void tweaked()
		pTransferArmRight.setReachScaling(Vector.new(pReachScalingArmRightBack.getZ(),\
			pReachScalingArmRightBack.getY(), pReachScalingArmRight.getX()))
		pTransferArmRight.setReachScalingBack(Vector.new(pReachScalingArmRight.getZ(),\
			pReachScalingArmRight.getY(), pReachScalingArmRightBack.getX()))
		pTransferArmRight.tweaked()
		
		pTransferArmLeft.setReachScaling(Vector.new(pReachScalingArmLeft.getZ(),\
			pReachScalingArmLeftBack.getY(), pReachScalingArmLeft.getX()))
		pTransferArmLeft.setReachScalingBack(Vector.new(pReachScalingArmLeftBack.getZ(),\
			pReachScalingArmLeft.getY(), pReachScalingArmLeftBack.getX()))
		pTransferArmLeft.tweaked()
	end
	
	/** Load from XML. */
	func void load(BaseXmlLoader loader, EasyXMLElement root)
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("name")
				setName(element.getFirstCData())
				
			elif tagName.equals("boneHead")
				setBoneHead(element.getFirstCData())
				
			elif tagName.equals("boneChest")
				setBoneChest(element.getFirstCData())
				
			elif tagName.equals("boneHandRight")
				setBoneHandRight(element.getFirstCData())
				
			elif tagName.equals("boneHandLeft")
				setBoneHandLeft(element.getFirstCData())
				
			elif tagName.equals("moveBaseIK")
				setMoveBaseIK(element.getFirstCData())
				
			elif tagName.equals("reachScalingArmRight")
				pReachScalingArmRight = loader.readVector(element)
				
			elif tagName.equals("reachScalingArmRightBack")
				pReachScalingArmRightBack = loader.readVector(element)
				
			elif tagName.equals("reachScalingArmLeft")
				pReachScalingArmLeft = loader.readVector(element)
				
			elif tagName.equals("reachScalingArmLeftBack")
				pReachScalingArmLeftBack = loader.readVector(element)
				
			elif tagName.equals("transfers")
				loadTransfers(loader, element)
			end
		end)
	end
	
	protected func void loadTransfers(BaseXmlLoader loader, EasyXMLElement root)
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("waist")
				pTransferChest.load(loader, element)
				
			elif tagName.equals("head")
				pTransferHead.load(loader, element)
				
			elif tagName.equals("armRight")
				pTransferArmRight.load(loader, element)
				
			elif tagName.equals("armLeft")
				pTransferArmLeft.load(loader, element)
			end
		end)
	end
	
	/** Post load initialize. */
	func void postLoadInit(CharacterConfiguration config)
		pTransferHead.postLoadInit(config)
		pTransferChest.postLoadInit(config)
		pTransferArmRight.postLoadInit(config)
		pTransferArmLeft.postLoadInit(config)
	end
	
	/** Save to XML. */
	func void save(BaseXmlLoader loader, EasyXMLElement tag)
		tag.addDataTag("name", getName())
		tag.addDataTag("boneHead", pBoneHead)
		tag.addDataTag("boneChest", pBoneChest)
		tag.addDataTag("boneHandRight", pBoneHandRight)
		tag.addDataTag("boneHandLeft", pBoneHandLeft)
		tag.addDataTag("moveBaseIK", pMoveBaseIK)
		loader.writeVector(tag, "reachScalingArmRight", pReachScalingArmRight)
		loader.writeVector(tag, "reachScalingArmRightBack", pReachScalingArmRightBack)
		loader.writeVector(tag, "reachScalingArmLeft", pReachScalingArmLeft)
		loader.writeVector(tag, "reachScalingArmLeftBack", pReachScalingArmLeftBack)
		
		var EasyXMLElement tagTransfers = tag.addTag("transfers")
		pTransferHead.save(loader, tagTransfers.addTag("head"))
		pTransferChest.save(loader, tagTransfers.addTag("chest"))
		pTransferArmRight.save(loader, tagTransfers.addTag("armRight"))
		pTransferArmLeft.save(loader, tagTransfers.addTag("armLeft"))
	end
	
	
	
	/** Find guide bone or empty string. */
	protected func String findBoneBeforeBase(Rig rig, String tipBone, String baseBone)
		if tipBone.empty() or baseBone.empty()
			return ""
		end
		
		var Array chain = Array.new()
		findBoneChain(rig, tipBone, baseBone, chain)
		if chain.getCount() < 3
			return ""
		end
		
		return chain.getAt( -2 ) cast String
	end
	
	/** Index of first bone in another chain or chain.getCount(). */
	protected func int firstBoneInChain(Array chain, Array otherChain)
		var int index, count = chain.getCount()
		for index = 0 to count
			if otherChain.has(chain.getAt(index))
				break
			end
		end
		return index
	end
	
	/** Find slots and assign them to child transfers. */
	protected func void assignSlots(CharacterConfiguration config)
		var String slotHead = firstSlotAttachedWithType(config, CharacterTrackerSlot.Type.headTracker)
		if slotHead.empty()
			slotHead = firstSlotWithType(config, CharacterTrackerSlot.Type.headHmd)
		end
		
		var String slotChest = firstSlotAttachedWithType(config, CharacterTrackerSlot.Type.chest)
		var String slotWaist = firstSlotAttachedWithType(config, CharacterTrackerSlot.Type.waist)
		
		var String useSlotChest = slotChest.empty() if slotWaist else slotChest
		
		pTransferChest.getTracker().setSlot(useSlotChest)
		
		pTransferHead.getTracker().setSlot(slotHead)
		
		pTransferArmRight.getTipTracker().setSlot(firstSlotWithType(config, CharacterTrackerSlot.Type.rightHandController))
		pTransferArmRight.getGuideTracker().setSlot(firstSlotWithType(config, CharacterTrackerSlot.Type.rightElbow))
		pTransferArmRight.getBaseTracker().setSlot(useSlotChest)
		
		pTransferArmLeft.getTipTracker().setSlot(firstSlotWithType(config, CharacterTrackerSlot.Type.leftHandController))
		pTransferArmLeft.getGuideTracker().setSlot(firstSlotWithType(config, CharacterTrackerSlot.Type.leftElbow))
		pTransferArmLeft.getBaseTracker().setSlot(useSlotChest)
	end
	
	/** First slot name matching type or empty string. */
	protected func String firstSlotWithType(CharacterConfiguration config, CharacterTrackerSlot.Type type)
		var CharacterTrackerSlot slot = config.getTrackerSlots().firstWithType(type)
		return slot != null if slot.getName() else ""
	end
	
	/** First slot name with attached device matching type or empty string. */
	protected func String firstSlotAttachedWithType(CharacterConfiguration config, CharacterTrackerSlot.Type type)
		var CharacterTrackerSlot slot = config.getTrackerSlots().firstAttachedWithType(type)
		return slot != null if slot.getName() else ""
	end
end
