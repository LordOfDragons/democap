/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.MotionTransferSystem

pin Democap.Actors
pin Democap.Characters

pin Dragengine.LoadSave
pin Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.XML


/**
 * Default implementation of MotionTransfer.
 */
abstract class DefaultMotionTransfer implements MotionTransfer
	private var String pFactoryID
	private var String pName
	
	
	
	/** Create default motion transfer. */
	public func new(String factoryID)
		if factoryID == null
			throw ENullPointer.new("factoryID")
		end
		pFactoryID = factoryID
		pName = ""
	end
	
	/** Create copy of motion transfer. */
	public func new(DefaultMotionTransfer transfer)
		pFactoryID = transfer.pFactoryID
		pName = transfer.pName
	end
	
	
	
	/** Factory identifier. */
	public func String factoryID()
		return pFactoryID
	end
	
	/** Unique name of motion transfer. */
	public func String getName()
		return pName
	end
	
	/** Set name of motion transfer. Descriptive nature only. Can be duplicate. */
	public func void setName(String name)
		if name == null
			throw ENullPointer.new("name")
		end
		pName = name
	end
	
	/** Init element class. */
	public func void initElementClass(CharacterConfiguration config, BaseVRActorClass eclass)
	end
	
	/** Reset calibration. */
	public func void resetCalibration()
	end
	
	/** Calibrate character. */
	public func void calibrate(CharacterConfiguration config, ActorProfile actorProfile, \
		BaseVRActor actor, Component component)
	end
	
	/** Decompose motion transfer. Returns Array of MotionTranfer or empty list if not supported. */
	public func Array decompose()
		return Array.new()
	end
	
	/** Load from XML. */
	public func void load(BaseXmlLoader loader, EasyXMLElement root)
	end
	
	/** Save to XML. */
	public func void save(BaseXmlLoader loader, EasyXMLElement tag)
	end
	
	/** Post load initialize. */
	public func void postLoadInit(CharacterConfiguration config)
	end
	
	
	
	/** Find bone chain. */
	protected func void findBoneChain(Rig rig, String tipBone, String baseBone, Array bones)
		bones.removeAll()
		
		var int indexTip = rig.indexOfBoneNamed(tipBone)
		var int indexBase = rig.indexOfBoneNamed(baseBone)
		if indexTip == -1 or indexBase == -1
			return
		end
		
		var int indexBone = indexTip
		while indexBone != -1 and indexBone != indexBase
			bones.add(rig.boneGetName(indexBone))
			indexBone = rig.boneGetParent(indexBone)
		end
		
		if indexBone == indexBase
			bones.add(rig.boneGetName(indexBase))
			
		else
			bones.removeAll() // invalid chain
		end
	end
	
	/** Find bone chain. */
	protected func void findBoneChain(Rig rig, String tipBone, int boneCount, Array bones)
		bones.removeAll()
		
		var int index = rig.indexOfBoneNamed(tipBone)
		while index != -1 and boneCount-- > 0
			bones.add(rig.boneGetName(index))
			index = rig.boneGetParent(index)
		end
	end
end
