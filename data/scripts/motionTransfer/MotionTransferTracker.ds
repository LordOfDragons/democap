/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.MotionTransferSystem

pin Democap.Characters

pin Dragengine.LoadSave
pin Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.XML


/**
 * Motion transfer tracker attached to a configuration tracker slot. The tracker slot stores
 * the calibration position of the tracker. This class stores the transform position and
 * rotation between the reference bone coordinate system and the tracker calibration pose.
 */
class MotionTransferTracker
	/** Auto transform mode. */
	enum AutoTransform
		/** Position and orientation. */
		full
		
		/** Orientation only. */
		orientation
		
		/** Orientation only with reference offset. */
		orientationOffset
		
		/** None. */
		none
	end
	
	
	
	private var String pSlot
	private var Vector pOffsetPosition
	private var Vector pOffsetRotation
	private var AutoTransform pAutoTransform
	
	private var Vector pTransformPosition
	private var Vector pTransformRotation
	private var Matrix pTransformMatrix
	private var Vector pReverseTransformPosition
	private var Vector pReverseTransformRotation
	private var Matrix pReverseTransformMatrix
	private var CharacterTrackerSlot pRealSlot
	
	
	
	/** Create motion transfer tracker. */
	public func new()
		pSlot = ""
		pOffsetPosition = Vector.new()
		pOffsetRotation = Vector.new()
		pTransformPosition = Vector.new()
		pTransformRotation = Vector.new()
		pTransformMatrix = Matrix.new()
		pReverseTransformPosition = Vector.new()
		pReverseTransformRotation = Vector.new()
		pReverseTransformMatrix = Matrix.new()
		pAutoTransform = AutoTransform.full
	end
	
	/** Create copy of motion transfer tracker. */
	public func new(MotionTransferTracker tracker)
		pSlot = tracker.pSlot
		pOffsetPosition = tracker.pOffsetPosition
		pOffsetRotation = tracker.pOffsetRotation
		pTransformPosition = tracker.pTransformPosition
		pTransformRotation = tracker.pTransformRotation
		pTransformMatrix = tracker.pTransformMatrix
		pReverseTransformPosition = tracker.pReverseTransformPosition
		pReverseTransformRotation = tracker.pReverseTransformRotation
		pReverseTransformMatrix = tracker.pReverseTransformMatrix
		pAutoTransform = tracker.pAutoTransform
	end
	
	
	
	/** Tracker slot name. */
	public func String getSlot()
		return pSlot
	end
	
	/** Set tracker slot name. */
	public func void setSlot(String slot)
		if slot == null
			throw ENullPointer.new("slot")
		end
		pSlot = slot
	end
	
	/** Position offset. */
	public func Vector getOffsetPosition()
		return pOffsetPosition
	end
	
	/** Set position offset. */
	public func void setOffsetPosition(Vector position)
		if position == null
			throw ENullPointer.new("position")
		end
		pOffsetPosition = position
	end
	
	/** Rotation offset. */
	public func Vector getOffsetRotation()
		return pOffsetRotation
	end
	
	/** Set rotation offset. */
	public func void setOffsetRotation(Vector rotation)
		if rotation == null
			throw ENullPointer.new("rotation")
		end
		pOffsetRotation = rotation
	end
	
	/** How to calculate transformation during calibration.. */
	public func AutoTransform getAutoTransform()
		return pAutoTransform
	end
	
	/** Set how to calculate transformation during calubration. */
	public func void setAutoTransform(AutoTransform deviceBoneTransform)
		pAutoTransform = deviceBoneTransform
	end
	
	
	
	/** Transform position (tracking space to bone space). */
	public func Vector getTransformPosition()
		return pTransformPosition
	end
	
	/** Transform rotation (tracking space to bone space). */
	public func Vector getTransformRotation()
		return pTransformRotation
	end
	
	/** Transform matrix (tracking space to bone space). */
	public func Matrix getTransformMatrix()
		return pTransformMatrix
	end
	
	/** Reverse transform position (bone space to tracking space). */
	public func Vector getReverseTransformPosition()
		return pReverseTransformPosition
	end
	
	/** Reverse transform rotation (bone space to tracking space). */
	public func Vector getReverseTransformRotation()
		return pReverseTransformRotation
	end
	
	/** Reverse transform matrix (bone space to tracking space). */
	public func Matrix getReverseTransformMatrix()
		return pReverseTransformMatrix
	end
	
	/** Reset transform. */
	public func void resetTransform()
		pTransformPosition = Vector.new()
		pTransformRotation = Vector.new()
		pTransformMatrix = Matrix.new()
		pReverseTransformPosition = Vector.new()
		pReverseTransformRotation = Vector.new()
		pReverseTransformMatrix = Matrix.new()
	end
	
	/** Set transform (both directions). */
	public func void setTransform(Vector position, Vector rotation)
		pTransformMatrix = Matrix.newRT(rotation, position)
		pTransformPosition = position
		pTransformRotation = rotation
		setReverseFromTransform()
	end
	
	/** Set transform (both directions). */
	public func void setTransform(Matrix matrix)
		pTransformPosition = matrix.getPosition()
		pTransformRotation = matrix.normalize().getEulerAngles()
		pTransformMatrix = matrix
		setReverseFromTransform()
	end
	
	/** Set transform. */
	public func void setTransform(Component component, String bone)
		if pRealSlot == null
			resetTransform()
			return
		end
		
		// getCalibrateMatrix() is the same as getCharacterMatrix() during capturing
		// getCalibrateReferenceMatrix() is the same as getReferenceMatrix() in tracker slot
		var Matrix slotInvMatrix = pRealSlot.getCalibrateMatrixInverse()
		var Matrix slotTargetMatrix = Matrix.newRT(pOffsetRotation, pOffsetPosition) * pRealSlot.getTargetMatrix()
		var Matrix slotTargetMatrixInv = slotTargetMatrix.getInverse()
		var Matrix slotRefMatrix = pRealSlot.getCalibrateReferenceMatrix()
		var Matrix slotRefMatrixInv = pRealSlot.getCalibrateReferenceMatrixInverse()
		
		var int index = component.indexOfBoneNamed(bone)
		var Matrix targetBoneTransform
		
		if index != -1
			targetBoneTransform = component.boneGetMatrix(index) * slotTargetMatrixInv
			
		else
			targetBoneTransform = Matrix.newRT(pOffsetRotation, pOffsetPosition)
		end
		
		var Matrix deviceReferenceTransform = slotRefMatrix * slotInvMatrix
		var Matrix referenceTargetTransform = slotTargetMatrix * slotRefMatrixInv
		var Matrix deviceBoneTransform = targetBoneTransform\
			* deviceReferenceTransform * referenceTargetTransform
		
		select pAutoTransform
		case AutoTransform.full
			pTransformMatrix = deviceBoneTransform
			
		case AutoTransform.orientation
			pTransformMatrix = deviceBoneTransform.getRotation() * Matrix.newTranslation(\
				deviceReferenceTransform.getRotation() * targetBoneTransform.getPosition())
			
		case AutoTransform.orientationOffset
			pTransformMatrix = deviceBoneTransform.getRotation()\
				* Matrix.newTranslation(deviceReferenceTransform.getPosition() + \
					deviceReferenceTransform.getRotation() * targetBoneTransform.getPosition())
			
		/*
			// modified version of AutoTransform.orientation for use with feet and head.
			// requires modifying the pTransformMatrix each capture frame before applying
			// it to the device matrix to do proper pivot rotation. the pTransformMatrix
			// stays the same. hence this modified version does use AutoTransform.orientation
			// but applies a displacement relative to the reference matrix.
			// 
			// the main problem is how to calculate the displacement. this requires additional
			// knowledge beyond what the MotionTransferTracker does know. basically we need
			// to use the information of another MotionTransferTracker to figure out how to
			// calculate the displacement.
			// 
			// what is clear though is that we need to use the target matrix as pivot definition.
			// once the target matrix has been transformed by whatever calculation to be in
			// the right position it has to be transformed into reference space to apply
			// properly to the device matrix.
		*/
		
		case AutoTransform.none
			pTransformMatrix = targetBoneTransform
		end
		
		pTransformPosition = pTransformMatrix.getPosition()
		pTransformRotation = pTransformMatrix.normalize().getEulerAngles()
		setReverseFromTransform()
	end
	
	public func void setTransformTrackTo(Component component, String bone, Vector axis)
		if pRealSlot == null
			resetTransform()
			return
		end
		
		var int index = component.indexOfBoneNamed(bone)
		if index == -1
			resetTransform()
			return
		end
		
		var Matrix slotInvMatrix = pRealSlot.getCalibrateMatrixInverse()
		var Matrix slotTargetMatrix = Matrix.newRT(pOffsetRotation, pOffsetPosition) * pRealSlot.getTargetMatrix()
		var Matrix slotTargetMatrixInv = slotTargetMatrix.getInverse()
		var Matrix slotRefMatrix = pRealSlot.getCalibrateReferenceMatrix()
		var Matrix boneMatrix = component.boneGetMatrix(index)
		
		var Matrix targetBoneTransform = boneMatrix * slotTargetMatrixInv
		
		var Vector taxis = targetBoneTransform.normalize().transformNormal(axis)
		var float tdistance = -(taxis * targetBoneTransform.getPosition())
		targetBoneTransform = targetBoneTransform * Matrix.newTranslation(taxis * tdistance)
		
		var Matrix deviceReferenceTransform = slotRefMatrix * slotInvMatrix
		var Matrix deviceBoneTransform = targetBoneTransform * deviceReferenceTransform
		
		select pAutoTransform
		case AutoTransform.full
			pTransformMatrix = deviceBoneTransform
			
		case AutoTransform.orientation
			pTransformMatrix = deviceBoneTransform.getRotation() * Matrix.newTranslation(\
				deviceReferenceTransform.getRotation() * targetBoneTransform.getPosition())
			
		case AutoTransform.none
			pTransformMatrix = targetBoneTransform
		end
		
		pTransformPosition = pTransformMatrix.getPosition()
		pTransformRotation = pTransformMatrix.normalize().getEulerAngles()
		setReverseFromTransform()
	end
	
	/** Set reverse transform matrix from transform matrix. */
	protected func void setReverseFromTransform()
		pReverseTransformMatrix = pTransformMatrix.getInverse()
		pReverseTransformPosition = pReverseTransformMatrix.getPosition()
		pReverseTransformRotation = pReverseTransformMatrix.normalize().getEulerAngles()
	end
	
	/** Real slot or null. */
	public func CharacterTrackerSlot getRealSlot()
		return pRealSlot
	end
	
	/** Resolve real slot. */
	public func void resolveRealSlot(CharacterConfiguration config)
		if pSlot.empty()
			pRealSlot = null
			
		else
			pRealSlot = config.getTrackerSlots().getNamed(pSlot)
		end
	end
	
	
	
	/**
	 * Load from XML.
	 */
	public func void load(BaseXmlLoader loader, EasyXMLElement root)
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("slot")
				setSlot(element.getFirstCData())
				
			elif tagName.equals("offsetPosition")
				setOffsetPosition(loader.readVector(element))
				
			elif tagName.equals("offsetRotation")
				setOffsetRotation(loader.readVector(element))
				
			elif tagName.equals("deviceBoneTransform")
				pAutoTransform = AutoTransform.named(element.getFirstCData())
			end
		end)
		
		setTransform(pTransformPosition, pTransformRotation)
	end
	
	public func void loadCalibrated(BaseXmlLoader loader, EasyXMLElement root)
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("transformPosition")
				pTransformPosition = loader.readVector(element)
				
			elif tagName.equals("transformRotation")
				pTransformRotation = loader.readVector(element)
			end
		end)
		
		setTransform(pTransformPosition, pTransformRotation)
	end
	
	/**
	 * Save to XML.
	 */
	public func void save(BaseXmlLoader loader, EasyXMLElement tag)
		tag.addDataTag("slot", pSlot)
		loader.writeVector(tag, "offsetPosition", pOffsetPosition)
		loader.writeVector(tag, "offsetRotation", pOffsetRotation)
		tag.addDataTag("deviceBoneTransform", pAutoTransform.name())
	end
	
	public func void saveCalibrated(BaseXmlLoader loader, EasyXMLElement tag)
		loader.writeVector(tag, "transformPosition", pTransformPosition)
		loader.writeVector(tag, "transformRotation", pTransformRotation)
	end
end
