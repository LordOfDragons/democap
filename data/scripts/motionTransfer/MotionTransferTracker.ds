/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.MotionTransferSystem

pin Democap.Characters

pin Dragengine.LoadSave
pin Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.XML


/**
 * Motion transfer tracker attached to a configuration tracker slot. The tracker slot stores
 * the calibration position of the tracker. This class stores the transform position and
 * rotation between the reference bone coordinate system and the tracker calibration pose.
 */
class MotionTransferTracker
	private var String pSlot
	private var Vector pOffsetPosition
	private var Vector pOffsetRotation
	
	private var Vector pTransformPosition
	private var Vector pTransformRotation
	private var Matrix pTransformMatrix
	
	
	
	/** Create motion transfer tracker. */
	public func new()
		pSlot = ""
		pOffsetPosition = Vector.new()
		pOffsetRotation = Vector.new()
		pTransformPosition = Vector.new()
		pTransformRotation = Vector.new()
		pTransformMatrix = Matrix.new()
	end
	
	/** Create copy of motion transfer tracker. */
	public func new(MotionTransferTracker tracker)
		pSlot = tracker.pSlot
		pOffsetPosition = tracker.pOffsetPosition
		pOffsetRotation = tracker.pOffsetRotation
		pTransformPosition = tracker.pTransformPosition
		pTransformRotation = tracker.pTransformRotation
		pTransformMatrix = tracker.pTransformMatrix
	end
	
	
	
	/** Tracker slot name. */
	public func String getSlot()
		return pSlot
	end
	
	/** Set tracker slot name. */
	public func void setSlot(String slot)
		if slot == null
			throw ENullPointer.new("slot")
		end
		pSlot = slot
	end
	
	/** Position offset. */
	public func Vector getOffsetPosition()
		return pOffsetPosition
	end
	
	/** Set position offset. */
	public func void setOffsetPosition(Vector position)
		if position == null
			throw ENullPointer.new("position")
		end
		pOffsetPosition = position
	end
	
	/** Rotation offset. */
	public func Vector getOffsetRotation()
		return pOffsetRotation
	end
	
	/** Set rotation offset. */
	public func void setOffsetRotation(Vector rotation)
		if rotation == null
			throw ENullPointer.new("rotation")
		end
		pOffsetRotation = rotation
	end
	
	
	
	/** Transform position. */
	public func Vector getTransformPosition()
		return pTransformPosition
	end
	
	/** Transform rotation. */
	public func Vector getTransformRotation()
		return pTransformRotation
	end
	
	/** Transform matrix. */
	public func Matrix getTransformMatrix()
		return pTransformMatrix
	end
	
	/** Reset transform. */
	public func void resetTransform()
		pTransformPosition = Vector.new()
		pTransformRotation = Vector.new()
		pTransformMatrix = Matrix.new()
	end
	
	/** Set transform. */
	public func void setTransform(Vector position, Vector rotation)
		pTransformMatrix = Matrix.newRT(rotation, position)
		pTransformPosition = position
		pTransformRotation = rotation
	end
	
	/** Set transform. */
	public func void setTransform(Matrix matrix)
		pTransformPosition = matrix.getPosition()
		pTransformRotation = matrix.getEulerAngles()
		pTransformMatrix = matrix
	end
	
	/** Set transform. */
	public func void setTransform(CharacterConfiguration config, BaseVRActor actor, String bone)
		if pSlot.empty()
			resetTransform()
			return
		end
		
		var CharacterTrackerSlot slot = config.getTrackerSlots().getAt(pSlot)
		if slot == null
			resetTransform()
			return
		end
		
		var Rig rig = actor.getComponent().getComponent().getRig()
		var int index = rig.indexOfBoneNamed(bone)
		if index == -1
			resetTransform()
			return
		end
		
		pTransformMatrix = rig.getBoneMatrix(index) * slot.getCalibrateMatrixInverse()
		pTransformPosition = pTransformMatrix.getPosition()
		pTransformRotation = pTransformMatrix.getEulerAngles()
	end
	
	
	
	/**
	 * Load from XML.
	 */
	public func void load(BaseXmlLoader loader, EasyXMLElement root)
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("slot")
				setSlot(element.getFirstCData())
				
			elif tagName.equals("offsetPosition")
				setOffsetPosition(loader.readVector(element))
				
			elif tagName.equals("offsetRotation")
				setOffsetRotation(loader.readVector(element))
				
			elif tagName.equals("transformPosition")
				pTransformPosition = loader.readVector(element)
				
			elif tagName.equals("transformRotation")
				pTransformRotation = loader.readVector(element)
			end
		end)
		
		pTransformMatrix = Matrix.newRT(pTransformRotation, pTransformPosition)
	end
	
	/**
	 * Save to XML.
	 */
	public func void save(BaseXmlLoader loader, EasyXMLElement tag)
		tag.addDataTag("slot", pSlot)
		loader.writeVector(tag, "offsetPosition", pOffsetPosition)
		loader.writeVector(tag, "offsetRotation", pOffsetRotation)
		loader.writeVector(tag, "transformPosition", pTransformPosition)
		loader.writeVector(tag, "transformRotation", pTransformRotation)
	end
end
