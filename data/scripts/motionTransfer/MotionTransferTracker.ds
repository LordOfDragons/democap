/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.MotionTransferSystem

pin Democap.Characters

pin Dragengine.LoadSave
pin Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.XML


/**
 * Motion transfer tracker attached to a configuration tracker slot. The tracker slot stores
 * the calibration position of the tracker. This class stores the transform position and
 * rotation between the reference bone coordinate system and the tracker calibration pose.
 */
class MotionTransferTracker
	/** Auto transform mode. */
	enum AutoTransform
		/** Position and orientation. */
		full
		
		/** Reference position and orientation. */
		reference
		
		/** Orientation only. */
		orientation
		
		/** Orientation with reference offset. */
		orientationReference
		
		/** Orientation with reference and target offset. */
		orientationTarget
		
		/** None. */
		none
	end
	
	
	
	var String pSlot
	var Vector pOffsetPosition
	var Vector pOffsetRotation
	var AutoTransform pAutoTransform
	
	var Vector pTransformPosition
	var Vector pTransformRotation
	var Matrix pTransformMatrix
	var Vector pReverseTransformPosition
	var Vector pReverseTransformRotation
	var Matrix pReverseTransformMatrix
	var CharacterTrackerSlot pRealSlot
	
	
	
	/** Create motion transfer tracker. */
	func new()
		pSlot = ""
		pOffsetPosition = Vector.new()
		pOffsetRotation = Vector.new()
		pTransformPosition = Vector.new()
		pTransformRotation = Vector.new()
		pTransformMatrix = Matrix.new()
		pReverseTransformPosition = Vector.new()
		pReverseTransformRotation = Vector.new()
		pReverseTransformMatrix = Matrix.new()
		pAutoTransform = AutoTransform.full
	end
	
	/** Create copy of motion transfer tracker. */
	func new(MotionTransferTracker tracker)
		pSlot = tracker.pSlot
		pOffsetPosition = tracker.pOffsetPosition
		pOffsetRotation = tracker.pOffsetRotation
		pTransformPosition = tracker.pTransformPosition
		pTransformRotation = tracker.pTransformRotation
		pTransformMatrix = tracker.pTransformMatrix
		pReverseTransformPosition = tracker.pReverseTransformPosition
		pReverseTransformRotation = tracker.pReverseTransformRotation
		pReverseTransformMatrix = tracker.pReverseTransformMatrix
		pAutoTransform = tracker.pAutoTransform
	end
	
	
	
	/** Tracker slot name. */
	func String getSlot()
		return pSlot
	end
	
	/** Set tracker slot name. */
	func void setSlot(String slot)
		if slot == null
			throw ENullPointer.new("slot")
		end
		pSlot = slot
	end
	
	/** Position offset. */
	func Vector getOffsetPosition()
		return pOffsetPosition
	end
	
	/** Set position offset. */
	func void setOffsetPosition(Vector position)
		if position == null
			throw ENullPointer.new("position")
		end
		pOffsetPosition = position
	end
	
	/** Rotation offset. */
	func Vector getOffsetRotation()
		return pOffsetRotation
	end
	
	/** Set rotation offset. */
	func void setOffsetRotation(Vector rotation)
		if rotation == null
			throw ENullPointer.new("rotation")
		end
		pOffsetRotation = rotation
	end
	
	/** Offset matrix. */
	func Matrix getOffsetMatrix()
		return Matrix.newRT(pOffsetRotation, pOffsetPosition)
	end
	
	/** How to calculate transformation during calibration.. */
	func AutoTransform getAutoTransform()
		return pAutoTransform
	end
	
	/** Set how to calculate transformation during calubration. */
	func void setAutoTransform(AutoTransform deviceBoneTransform)
		pAutoTransform = deviceBoneTransform
	end
	
	
	
	/** Transform position (tracking space to bone space). */
	func Vector getTransformPosition()
		return pTransformPosition
	end
	
	/** Transform rotation (tracking space to bone space). */
	func Vector getTransformRotation()
		return pTransformRotation
	end
	
	/** Transform matrix (tracking space to bone space). */
	func Matrix getTransformMatrix()
		return pTransformMatrix
	end
	
	/** Reverse transform position (bone space to tracking space). */
	func Vector getReverseTransformPosition()
		return pReverseTransformPosition
	end
	
	/** Reverse transform rotation (bone space to tracking space). */
	func Vector getReverseTransformRotation()
		return pReverseTransformRotation
	end
	
	/** Reverse transform matrix (bone space to tracking space). */
	func Matrix getReverseTransformMatrix()
		return pReverseTransformMatrix
	end
	
	/** Reset transform. */
	func void resetTransform()
		pTransformPosition = Vector.new()
		pTransformRotation = Vector.new()
		pTransformMatrix = Matrix.new()
		pReverseTransformPosition = Vector.new()
		pReverseTransformRotation = Vector.new()
		pReverseTransformMatrix = Matrix.new()
		pRealSlot = null
	end
	
	/** Set transform (both directions). */
	func void setTransform(Vector position, Vector rotation)
		pTransformMatrix = Matrix.newRT(rotation, position)
		pTransformPosition = position
		pTransformRotation = rotation
		setReverseFromTransform()
	end
	
	/** Set transform (both directions). */
	func void setTransform(Matrix matrix)
		pTransformPosition = matrix.getPosition()
		pTransformRotation = matrix.getEulerAngles()
		pTransformMatrix = matrix
		setReverseFromTransform()
	end
	
	/** Set transform. */
	func void setTransform(CharacterConfiguration config, Component component, String bone)
		if pRealSlot == null
			resetTransform()
			return
		end
		
		// getCalibrateMatrix() is the same as getCharacterMatrix() during capturing
		// getCalibrateReferenceMatrix() is the same as getReferenceMatrix() in tracker slot
		// getTargetMatrix() is not actor scaled
		var Matrix slotInvMatrix = pRealSlot.getCalibrateMatrixInverse()
		var Matrix slotTargetMatrix = pRealSlot.getTargetMatrix()
		var Matrix slotRefMatrix = pRealSlot.getCalibrateReferenceMatrix()
		var Matrix slotRefMatrixInv = pRealSlot.getCalibrateReferenceMatrixInverse()
		
		var int index = component.indexOfBoneNamed(bone)
		var Matrix targetBoneTransform
		
		if index != -1
			slotTargetMatrix = getOffsetMatrix() * slotTargetMatrix
			targetBoneTransform = config.componentToCharacter(\
				component.boneGetMatrix(index).normalize()) * slotTargetMatrix.getInverse()
			
		else
			targetBoneTransform = getOffsetMatrix()
		end
		
		var Matrix deviceReferenceTransform = slotRefMatrix * slotInvMatrix
		var Matrix referenceTargetTransform = slotTargetMatrix * slotRefMatrixInv
		var Matrix deviceBoneTransform = targetBoneTransform * referenceTargetTransform * deviceReferenceTransform
		
		select pAutoTransform
		case AutoTransform.full
			pTransformMatrix = deviceBoneTransform
			
		case AutoTransform.reference
			pTransformMatrix = deviceReferenceTransform
			
		case AutoTransform.orientation
			pTransformMatrix = deviceBoneTransform.getRotation() * Matrix.newTranslation(\
				deviceReferenceTransform.getRotation() * targetBoneTransform.getPosition())
			
		case AutoTransform.orientationReference, AutoTransform.orientationTarget
			pTransformMatrix = deviceBoneTransform.getRotation()\
				* Matrix.newTranslation(deviceReferenceTransform.getPosition() + \
					deviceReferenceTransform.getRotation() * targetBoneTransform.getPosition())
			
		case AutoTransform.none
			pTransformMatrix = targetBoneTransform
		end
		
		pTransformPosition = pTransformMatrix.getPosition()
		pTransformRotation = pTransformMatrix.getEulerAngles()
		setReverseFromTransform()
	end
	
	func void setTransformTrackTo(CharacterConfiguration config, Component component, String bone, Vector axis)
		if pRealSlot == null
			resetTransform()
			return
		end
		
		var int index = component.indexOfBoneNamed(bone)
		if index == -1
			resetTransform()
			return
		end
		
		// getCalibrateMatrix() is the same as getCharacterMatrix() during capturing
		// getCalibrateReferenceMatrix() is the same as getReferenceMatrix() in tracker slot
		// getTargetMatrix() is not actor scaled
		var Matrix slotInvMatrix = pRealSlot.getCalibrateMatrixInverse()
		var Matrix slotTargetMatrix = getOffsetMatrix() * pRealSlot.getTargetMatrix()
		var Matrix slotRefMatrix = pRealSlot.getCalibrateReferenceMatrix()
		var Matrix slotRefMatrixInv = pRealSlot.getCalibrateReferenceMatrixInverse()
		
		var Matrix targetBoneTransform = config.componentToCharacter(\
			component.boneGetMatrix(index).normalize()) * slotTargetMatrix.getInverse()
		
		var Vector taxis = targetBoneTransform.transformNormal(axis).normalize()
		var float tdistance = -(taxis * targetBoneTransform.getPosition())
		targetBoneTransform = targetBoneTransform * Matrix.newTranslation(taxis * tdistance)
		
		var Matrix deviceReferenceTransform = slotRefMatrix * slotInvMatrix
		var Matrix referenceTargetTransform = slotTargetMatrix * slotRefMatrixInv
		var Matrix deviceBoneTransform = targetBoneTransform * referenceTargetTransform * deviceReferenceTransform
		
		select pAutoTransform
		case AutoTransform.full
			pTransformMatrix = deviceBoneTransform
			
		case AutoTransform.reference
			pTransformMatrix = deviceReferenceTransform
			
		case AutoTransform.orientation
			pTransformMatrix = deviceBoneTransform.getRotation() * Matrix.newTranslation(\
				deviceReferenceTransform.getRotation() * targetBoneTransform.getPosition())
			
		case AutoTransform.orientationReference, AutoTransform.orientationTarget
			pTransformMatrix = deviceBoneTransform.getRotation()\
				* Matrix.newTranslation(deviceReferenceTransform.getPosition() + \
					deviceReferenceTransform.getRotation() * targetBoneTransform.getPosition())
			
		case AutoTransform.none
			pTransformMatrix = targetBoneTransform
		end
		
		pTransformPosition = pTransformMatrix.getPosition()
		pTransformRotation = pTransformMatrix.getEulerAngles()
		setReverseFromTransform()
	end
	
	/** Set reverse transform matrix from transform matrix. */
	protected func void setReverseFromTransform()
		pReverseTransformMatrix = pTransformMatrix.getInverse()
		pReverseTransformPosition = pReverseTransformMatrix.getPosition()
		pReverseTransformRotation = pReverseTransformMatrix.getEulerAngles()
	end
	
	/** Real slot or null. */
	func CharacterTrackerSlot getRealSlot()
		return pRealSlot
	end
	
	/** Resolve real slot. */
	func void resolveRealSlot(CharacterConfiguration config)
		if pSlot.empty()
			pRealSlot = null
			
		else
			pRealSlot = config.getTrackerSlots().getNamed(pSlot)
		end
	end
	
	
	
	/** Set from motion transfer tracker. */
	func void setFrom(MotionTransferTracker tracker)
		pSlot = tracker.pSlot
		pOffsetPosition = tracker.pOffsetPosition
		pOffsetRotation = tracker.pOffsetRotation
		pTransformPosition = tracker.pTransformPosition
		pTransformRotation = tracker.pTransformRotation
		pTransformMatrix = tracker.pTransformMatrix
		pReverseTransformPosition = tracker.pReverseTransformPosition
		pReverseTransformRotation = tracker.pReverseTransformRotation
		pReverseTransformMatrix = tracker.pReverseTransformMatrix
		pAutoTransform = tracker.pAutoTransform
	end
	
	
	
	/**
	 * Load from XML.
	 */
	func void load(BaseXmlLoader loader, EasyXMLElement root)
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("slot")
				setSlot(element.getFirstCData())
				
			elif tagName.equals("offsetPosition")
				setOffsetPosition(loader.readVector(element))
				
			elif tagName.equals("offsetRotation")
				setOffsetRotation(loader.readVector(element))
				
			elif tagName.equals("deviceBoneTransform")
				pAutoTransform = AutoTransform.named(element.getFirstCData())
			end
		end)
	end
	
	func void loadCalibrated(BaseXmlLoader loader, EasyXMLElement root)
		root.forEachTag(block EasyXMLElement element, String tagName
			if tagName.equals("transform")
				setTransform(GameApp.getGameApp().getLoadCharacterProfile().readMatrix(element))
			end
		end)
	end
	
	/** Save to XML. */
	func void save(BaseXmlLoader loader, EasyXMLElement tag)
		tag.addDataTag("slot", pSlot)
		loader.writeVector(tag, "offsetPosition", pOffsetPosition)
		loader.writeVector(tag, "offsetRotation", pOffsetRotation)
		tag.addDataTag("deviceBoneTransform", pAutoTransform.name())
	end
	
	func void saveCalibrated(BaseXmlLoader loader, EasyXMLElement tag)
		GameApp.getGameApp().getLoadCharacterProfile().writeMatrix(tag, "transform", pTransformMatrix)
	end
end
