/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Characters

pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * Smooth recorded keyframes. Applies a weighted moving mean filter.
 */
class SmoothAnimationWMM
	var float pStrength
	var float pWeight1
	var float pWeight2
	var float pWeight3
	var float pSlerpWeight1
	var float pSlerpWeight2
	
	
	
	/** Create smooth keyframes. */
	func new()
		initWeights()
	end
	
	
	
	/** Strength in the range from 0 to 1. */
	func float getStrength()
		return pStrength
	end
	
	/** Set strength in the range from 0 to 1. */
	func void setStrength(float strength)
		pStrength = DEMath.clamp(strength, 0.0, 1.0)
		initWeights()
	end
	
	
	
	/** Smooth keyframes. */
	func void smooth(RecordAnimation animation)
		smoothKeyframes(animation)
		smoothKeyframesVPS(animation)
	end
	
	
	
	/** Init weights. */
	protected func void initWeights()
		// weights are symmetric in the form [w1, w2, w3, w2, w1]
		var float base = 2 //3
		
		pWeight1 = DEMath.mix(0.0, 1.0, pStrength)
		pWeight2 = DEMath.mix(0.0, base, pStrength)
		pWeight3 = base * base
		
		var float factor = 1.0 / (pWeight1 + pWeight2 + pWeight3 + pWeight2 + pWeight1)
		pWeight1 *= factor
		pWeight2 *= factor
		pWeight3 *= factor
		
		pSlerpWeight2 = pWeight2 / (pWeight3 + pWeight2)
		pSlerpWeight1 = pWeight1 / (pWeight3 + pWeight2 + pWeight1)
	end
	
	protected func void smoothKeyframes(RecordAnimation animation)
		var int boneCount = animation.getBoneCount()
		if boneCount == 0
			return
		end
		
		var int frameCount = animation.getKeyframeCount() / boneCount
		if frameCount < 5
			return
		end
		
		var Array keyframes = animation.getKeyframes()
		var RecordAnimationKeyframe v1, v2, v3, v4, v5
		var int strideLast = (frameCount - 1) * boneCount
		var int i, j, next, current, last
		var Quaternion orientation
		var Vector position
		
		for i = 0 to boneCount
			current = i
			last = current + strideLast
			next = current + 2 * boneCount
			v5 = keyframes.getAt(current + boneCount) cast RecordAnimationKeyframe
			v4 = keyframes.getAt(current) cast RecordAnimationKeyframe
			v3 = v4
			v2 = v4
			
			for j = 0 to frameCount
				v1 = v2
				v2 = v3
				v3 = v4
				v4 = v5
				v5 = keyframes.getAt(DEMath.min(next, last)) cast RecordAnimationKeyframe
				next += boneCount
				
				position = v3.getPosition() * pWeight3 \
					+ (v2.getPosition() + v4.getPosition()) * pWeight2 \
					+ (v1.getPosition() + v5.getPosition()) * pWeight1
				
				/*
				orientation = v3.getOrientation() * pWeight3 \
					+ (v2.getOrientation() + v4.getOrientation()) * pWeight2 \
					+ (v1.getOrientation() + v5.getOrientation()) * pWeight1
				orientation = orientation.normalize()
				*/
				
				orientation = v3.getOrientation()\
					.slerp(v2.getOrientation().slerp(v4.getOrientation(), 0.5), pSlerpWeight2)\
					.slerp(v1.getOrientation().slerp(v5.getOrientation(), 0.5), pSlerpWeight1)
				
				keyframes.setAt(current, RecordAnimationKeyframe.new(v3.getTime(), position, orientation))
				current += boneCount
			end
		end
	end
	
	protected func void smoothKeyframesVPS(RecordAnimation animation)
		var int vpsCount = animation.getVPSCount()
		if vpsCount == 0
			return
		end
		
		var int frameCount = animation.getVPSKeyframeCount() / vpsCount
		if frameCount < 5
			return
		end
		
		var Array keyframes = animation.getVPSKeyframes()
		var RecordAnimationVPSKeyframe v1, v2, v3, v4, v5
		var int strideLast = (frameCount - 1) * vpsCount
		var int i, j, next, current, last
		var float weight
		
		for i = 0 to vpsCount
			current = i
			last = current + strideLast
			next = current + 2 * vpsCount
			v5 = keyframes.getAt(current + vpsCount) cast RecordAnimationVPSKeyframe
			v4 = keyframes.getAt(current) cast RecordAnimationVPSKeyframe
			v3 = v4
			v2 = v4
			
			for j = 0 to frameCount
				v1 = v2
				v2 = v3
				v3 = v4
				v4 = v5
				v5 = keyframes.getAt(DEMath.min(next, last)) cast RecordAnimationVPSKeyframe
				next += vpsCount
				
				weight = v3.getWeight() * pWeight3 \
					+ (v2.getWeight() + v4.getWeight()) * pWeight2 \
					+ (v1.getWeight() + v5.getWeight()) * pWeight1
				
				keyframes.setAt(current, RecordAnimationVPSKeyframe.new(v3.getTime(), weight))
				current += vpsCount
			end
		end
	end
end
