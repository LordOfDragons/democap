/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Characters

pin Dragengine.Utils


/**
 * List of character animations.
 */
class CharacterAnimations
	private var FileUsageManager pFileUsage
	private var Array pAnimations
	private var Array pListeners
	private var CharacterAnimation pActive
	
	
	
	/** Create animation list. */
	public func new(FileUsageManager fileUsage)
		pFileUsage = fileUsage
		pListeners = Array.new()
		pAnimations = Array.new()
	end
	
	/** Dispose of list. */
	public func void dispose()
		pListeners.removeAll()
		pActive = null
		removeAll()
	end
	
	
	
	/** Count of animations. */
	public func int getCount()
		return pAnimations.getCount()
	end
	
	/** Named animation is present. */
	public func bool hasNamed(String name)
		return getNamed(name) != null
	end
	
	/** Animation at index. */
	public func CharacterAnimation getAt(int index)
		return pAnimations.getAt(index) cast CharacterAnimation
	end
	
	/** Named animation or null if absent. */
	public func CharacterAnimation getNamed(String name)
		return pAnimations.find(block CharacterAnimation each
			return each.getName().compareNoCase(name) == 0
		end) cast CharacterAnimation
	end
	
	/** Add animation. Throws exception if named animation is present. */
	public func void add(CharacterAnimation animation)
		if hasNamed(animation.getName())
			throw EInvalidParam.new("named animation is present: " + animation.getName())
		end
		
		pAnimations.add(animation)
		animation.getFileUsage().setParent(pFileUsage)
		if FileUsageManager.debugUsage
			pFileUsage.log(GameApp.getGameApp().getConsole(), "CharacterAnimations.add()")
		end
		
		pListeners.forEach(block CharacterAnimationsListener each
			each.animationAdded(this, animation)
		end)
		
		if pAnimations.getCount() == 1
			setActive(animation)
		end
	end
	
	/** Remove animation. Throws exception if named animation is absent. */
	public func void remove(CharacterAnimation animation)
		if pActive == animation
			if pAnimations.getCount() == 1
				setActive(null)
				
			else
				var int last = pAnimations.getCount() - 1
				var int index = pAnimations.indexOf(animation)
				if index < pAnimations.getCount() - 1
					index++
					
				else
					index--
				end
				setActive(pAnimations.getAt(index) cast CharacterAnimation)
			end
		end
		
		pAnimations.remove(animation)
		animation.getFileUsage().setParent(null)
		if FileUsageManager.debugUsage
			pFileUsage.log(GameApp.getGameApp().getConsole(), "CharacterAnimations.remove()")
		end
		
		pListeners.forEach(block CharacterAnimationsListener each
			each.animationRemoved(this, animation)
		end)
	end
	
	/** Remove all animations. */
	public func void removeAll()
		setActive(null)
		
		pAnimations.forEach(block CharacterAnimation each
			each.dispose()
		end)
		pAnimations.removeAll()
		if FileUsageManager.debugUsage
			pFileUsage.log(GameApp.getGameApp().getConsole(), "CharacterAnimations.removeAll()")
		end
		
		pAnimations.removeAll()
		
		pListeners.forEach(block CharacterAnimationsListener each
			each.allAnimationsRemoved(this)
		end)
	end
	
	/**
	 * Visit animations with block. Block receives as only argument CharacterAnimation.
	 */
	public func void forEach(Block ablock)
		pAnimations.forEach(ablock)
	end
	
	/**
	 * Collect animations with block. Block receives as only argument CharacterAnimation and
	 * has to return true to include or false to exclude animation.
	 * Returns Array of CharacterAnimation.
	 */
	public func Array collect(Block ablock)
		return pAnimations.collect(ablock)
	end
	
	/** List of animations as Array of CharacterAnimation. */
	public func Array toArray()
		return Array.new(pAnimations)
	end
	
	/** Activate animation or null. */
	public func CharacterAnimation getActive()
		return pActive
	end
	
	/** Set active animation. */
	public func void setActive(CharacterAnimation active)
		if active == pActive
			return
		end
		
		pActive = active
		
		pListeners.forEach(block CharacterAnimationsListener each
			each.activeAnimationChanged(this)
		end)
	end
	
	
	
	/** Add listener. */
	public func void addListener(CharacterAnimationsListener listener)
		if listener == null
			throw ENullPointer.new("listener")
		end
		pListeners.add(listener)
	end
	
	/** Remove listener. */
	public func void removeListener(CharacterAnimationsListener listener)
		pListeners.remove(listener)
	end
	
	/** Notify listeners animation name changed. */
	public func void notifyAnimationNameChanged(CharacterAnimation animation)
		pListeners.forEach(block CharacterAnimationsListener each
			each.animationNameChanged(this, animation)
		end)
	end
	
	/** Notify listeners animation changed. */
	public func void notifyAnimationChanged(CharacterAnimation animation)
		pListeners.forEach(block CharacterAnimationsListener each
			each.animationChanged(this, animation)
		end)
	end
end
