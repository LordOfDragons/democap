/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Characters

pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * Record animation. Stores one large keyframe list containing the keyframes of all bones
 * in a single move. The keyframe list contains the keyframes for each bone of a single
 * time frame packed together.
 */
class RecordAnimation
	/** Animation builder. */
	protected class CreateAnimation extends AnimationBuilder
		private var String pOriginBone
		private var Array pBones
		private var Array pKeyframes
		private var float pFPS
		private var String pMoveName
		
		public func new(String originBone, Array bones, Array keyframes, float fps, String moveName)
			pOriginBone = originBone
			pBones = bones
			pKeyframes = keyframes
			pFPS = fps
			pMoveName = moveName
		end
		
		protected func void buildAnimation()
			var int boneCount = pBones.getCount()
			
			if boneCount == 0 or pKeyframes.getCount() == 0
				addMove(pMoveName, 0, pFPS)
				return
			end
			
			pBones.forEach(block String each
				addBone(each)
			end)
			
			if pOriginBone != null
				addBone(pOriginBone)
			end
			
			addMove(pMoveName, (pKeyframes.getAt(-1) cast RecordAnimationKeyframe).getTime(), pFPS)
			
			if pOriginBone != null
				setKeyframeListCount(0, boneCount + 1)
				
			else
				setKeyframeListCount(0, boneCount)
			end
			
			pKeyframes.forEach(block int index, RecordAnimationKeyframe keyframe
				addKeyframe(0, index % boneCount, keyframe.getTime(), keyframe.getPosition(), \
					keyframe.getOrientation().normalize().getEulerAngles(), Vector.new(1, 1, 1))
			end)
			
			if pOriginBone != null
				addKeyframe(0, boneCount, 0, Vector.new(), Vector.new(), Vector.new(1, 1, 1))
			end
		end
	end
	
	/** Rig builder. */
	protected class CreateRig extends RigBuilder
		private var CharacterTrackerSlots pSlots
		
		public func new(CharacterTrackerSlots slots)
			pSlots = slots
		end
		
		protected func void buildRig()
			select GameApp.getGameApp().getRecordDevices()
			case GameApp.RecordDevices.device
				pSlots.forEach(block CharacterTrackerSlot each
					addBone(each.getName(), each.getCalibratePosition(), each.getCalibrateRotation())
				end)
				
			case GameApp.RecordDevices.reference
				pSlots.forEach(block CharacterTrackerSlot each
					addBone(each.getName(), each.getCalibrateReferenceMatrix())
				end)
				
			case GameApp.RecordDevices.target
				pSlots.forEach(block CharacterTrackerSlot each
					addBone(each.getName(), each.getTargetPosition(), each.getTargetRotation())
				end)
			end
		end
		
		protected func void addBone(String name, Vector position, Vector rotation)
			addBone(name, -1, position, rotation, Vector.new(), false, 0, Vector.new(),\
				Vector.new(), Vector.new(), false, false, false, ShapeList.new())
		end
		
		protected func void addBone(String name, Matrix matrix)
			addBone(name, matrix.getPosition(), matrix.getEulerAngles())
		end
	end
	
	
	
	private var String pOriginBone
	private var Array pBones
	private var Array pKeyframes
	private var int pStride
	private var Animation pAnimation
	private var Rig pRig
	private var float pFPS
	private var String pPath
	private var String pPathMeta
	private var String pPathRig
	private var TimeDate pTimestamp
	private var String pMoveName
	
	
	
	/** Create record animation. */
	public func new() this("")
	end
	
	/** Create record animation. */
	public func new(String pathSuffix)
		pOriginBone = ""
		pBones = Array.new()
		pKeyframes = Array.new()
		pStride = 0
		pFPS = 25
		pTimestamp = TimeDate.new()
		pMoveName = "MoCap"
		
		var File directory = File.new(GameApp.getGameApp().getPathCaptureAnimations())
		pPath = File.new(directory, pTimestamp.format("%Y-%m-%d_%H-%M-%S") + pathSuffix + ".deanim").getPath()
		pPathMeta = File.new(directory, pTimestamp.format("%Y-%m-%d_%H-%M-%S") + pathSuffix + ".demca").getPath()
		pPathRig = File.new(directory, pTimestamp.format("%Y-%m-%d_%H-%M-%S") + pathSuffix + ".derig").getPath()
	end
	
	
	
	/** Origin bone or empty string. */
	public func String getOriginBone()
		return pOriginBone
	end
	
	/** Set origin bone or empty string. */
	public func void setOriginBone(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pOriginBone = bone
	end
	
	/** Count of bones. */
	public func int getBoneCount()
		return pBones.getCount()
	end
	
	/** Bone name at index. */
	public func String getBoneAt(int index)
		return pBones.getAt(index) cast String
	end
	
	/** Bone name is present. */
	public func bool hasBone(String name)
		return pBones.has(name)
	end
	
	/** Add bone name. */
	public func void addBone(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pBones.add(bone)
		pStride = pBones.getCount()
	end
	
	/** Visit bones with block receiving String as argument. */
	public func void forEachBone(Block ablock)
		pBones.forEach(ablock)
	end
	
	/** FPS. */
	public func float getFPS()
		return pFPS
	end
	
	/** Set FPS. */
	public func void setFPS(float fps)
		pFPS = DEMath.max(fps, 1.0)
	end
	
	/** Time stamp. */
	public func TimeDate getTimestamp()
		return pTimestamp
	end
	
	/** Move name. */
	public func String getMoveName()
		return pMoveName
	end
	
	/** Set move name. */
	public func void setMoveName(String name)
		if name == null
			throw ENullPointer.new("name")
		end
		pMoveName = name
	end
	
	
	
	/** Count of keyframes. */
	public func int getKeyframeCount()
		return pKeyframes.getCount()
	end
	
	/** Keyframe at index. */
	public func RecordAnimationKeyframe getKeyframeAt(int index)
		return pKeyframes.getAt(index) cast RecordAnimationKeyframe
	end
	
	/** Keyframe for bone. */
	public func RecordAnimationKeyframe getKeyframeFor(int frame, int bone)
		return pKeyframes.getAt(pStride * frame + bone) cast RecordAnimationKeyframe
	end
	
	/** Add keyframe. */
	public func void addKeyframe(float time, Vector position, Quaternion orientation)
		pKeyframes.add(RecordAnimationKeyframe.new(time, position, orientation))
	end
	
	/** Direct access to keyframes array for fast processing. */
	public func Array getKeyframes()
		return pKeyframes
	end
	
	
	
	/** Playtime in seconds. */
	public func float getPlaytime()
		if pKeyframes.getCount() > 0
			return (pKeyframes.getAt(-1) cast RecordAnimationKeyframe).getTime()
		end
		return 0
	end
	
	
	
	/** Animation or null if not created. */
	public func Animation getAnimation()
		return pAnimation
	end
	
	/** Create animation. */
	public func void createAnimation()
		if pBones.getCount() == 0 or pKeyframes.getCount() == 0
			return
		end
		
		if pOriginBone.empty() or pBones.has(pOriginBone)
			pAnimation = CreateAnimation.new(null, pBones, pKeyframes, pFPS, pMoveName).build("")
			
		else
			pAnimation = CreateAnimation.new(pOriginBone, pBones, pKeyframes, pFPS, pMoveName).build("")
		end
	end
	
	/** Rig or null if not created. */
	public func Rig getRig()
		return pRig
	end
	
	/** Create rig. */
	public func void createRig(CharacterConfiguration config)
		pRig = CreateRig.new(config.getTrackerSlots()).build("")
	end
	
	/** Path or null. */
	public func String getPath()
		return pPath
	end
	
	/** Meta path or null. */
	public func String getPathMeta()
		return pPathMeta
	end
	
	/** Rig path or null. */
	public func String getPathRig()
		return pPathRig
	end
end
