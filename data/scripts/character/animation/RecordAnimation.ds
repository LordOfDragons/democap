/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Characters

pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * Record animation. Stores one large keyframe list containing the keyframes of all bones
 * in a single move. The keyframe list contains the keyframes for each bone of a single
 * time frame packed together.
 */
class RecordAnimation
	/** Animation builder. */
	protected class CreateAnimation extends AnimationBuilder
		var String pOriginBone
		var Array pBones
		var Array pVPS
		var Array pKeyframes
		var Array pVPSKeyframes
		var float pFPS
		var String pMoveName
		var Array pStaticKeyframes
		var Array pVPSStaticKeyframes
		
		func new(String originBone, Array bones, Array keyframes, Array staticKeyframes,\
		Array vps, Array vpsKeyframes, Array vpsStaticKeyframes, float fps, String moveName)
			pOriginBone = originBone
			pBones = bones
			pKeyframes = keyframes
			pStaticKeyframes = staticKeyframes
			pVPS = vps
			pVPSKeyframes = vpsKeyframes
			pVPSStaticKeyframes = vpsStaticKeyframes
			pFPS = fps
			pMoveName = moveName
		end
		
		protected func void buildAnimation()
			var int boneCount = pBones.getCount()
			var int vpsCount = pVPS.getCount()
			
			if (boneCount == 0 and vpsCount == 0) or (\
			pKeyframes.getCount() == 0 and pStaticKeyframes.getCount() == 0\
			and pVPSKeyframes.getCount() == 0 and pVPSStaticKeyframes.getCount() == 0)
				addMove(pMoveName, 0, pFPS)
				return
			end
			
			pBones.forEach(block String each
				addBone(each)
			end)
			if pOriginBone != null
				addBone(pOriginBone)
			end
			
			pVPS.forEach(block String each
				addVertexPositionSet(each)
			end)
			
			var float playtime = 0
			if pKeyframes.getCount() > 0
				playtime = (pKeyframes.getAt(-1) cast RecordAnimationKeyframe).getTime()
			end
			if pVPSKeyframes.getCount() > 0
				playtime = (pVPSKeyframes.getAt(-1) cast RecordAnimationVPSKeyframe).getTime()
			end
			
			addMove(pMoveName, playtime, pFPS)
			
			if pOriginBone != null
				setKeyframeListCount(0, boneCount + 1)
				
			else
				setKeyframeListCount(0, boneCount)
			end
			
			setVertexPositionSetKeyframeListCount(0, vpsCount)
			
			var int stride = boneCount - pStaticKeyframes.getCount()
			
			pKeyframes.forEach(block int index, RecordAnimationKeyframe keyframe
				addKeyframe(0, index % stride, keyframe.getTime(), keyframe.getPosition(), \
					keyframe.getOrientation().normalize().getEulerAngles(), Vector.new(1, 1, 1))
			end)
			
			pStaticKeyframes.forEach(block int index, RecordAnimationKeyframe keyframe
				addKeyframe(0, stride + index, 0, keyframe.getPosition(), \
					keyframe.getOrientation().normalize().getEulerAngles(), Vector.new(1, 1, 1))
			end)
			
			if pOriginBone != null
				addKeyframe(0, boneCount, 0, Vector.new(), Vector.new(), Vector.new(1, 1, 1))
			end
			
			stride = vpsCount - pVPSStaticKeyframes.getCount()
			
			pVPSKeyframes.forEach(block int index, RecordAnimationVPSKeyframe keyframe
				addVertexPositionSetKeyframe(0, index % stride, keyframe.getTime(), keyframe.getWeight())
			end)
			
			pVPSStaticKeyframes.forEach(block int index, RecordAnimationVPSKeyframe keyframe
				addVertexPositionSetKeyframe(0, stride + index, 0, keyframe.getWeight())
			end)
		end
	end
	
	/** Rig builder. */
	protected class CreateRig extends RigBuilder
		var CharacterTrackerSlots pSlots
		
		func new(CharacterTrackerSlots slots)
			pSlots = slots
		end
		
		protected func void buildRig()
			select SessionSettings.get().getRecordDevices()
			case SessionSettings.RecordDevices.device
				pSlots.forEach(block CharacterTrackerSlot each
					addBone(each.getName(), each.getCalibratePosition(), each.getCalibrateRotation())
				end)
				
			case SessionSettings.RecordDevices.reference
				pSlots.forEach(block CharacterTrackerSlot each
					addBone(each.getName(), each.getCalibrateReferenceMatrix())
				end)
				
			case SessionSettings.RecordDevices.target
				pSlots.forEach(block CharacterTrackerSlot each
					addBone(each.getName(), each.getTargetPosition(), each.getTargetRotation())
				end)
			end
		end
		
		protected func void addBone(String name, Vector position, Vector rotation)
			addBone(name, -1, position, rotation, Vector.new(), false, 0, Vector.new(),\
				Vector.new(), Vector.new(), false, false, false, ShapeList.new())
		end
		
		protected func void addBone(String name, Matrix matrix)
			addBone(name, matrix.getPosition(), matrix.getEulerAngles())
		end
	end
	
	/** Object rig builder. */
	protected class CreateObjectRig extends RigBuilder
		func new()
		end
		
		protected func void buildRig()
			addBone("object", Vector.new(0, 0, 0))
			addBone("attached", Vector.new(0, -0.1, 0))
		end
		
		protected func void addBone(String name, Vector position)
			addBone(name, -1, position, Vector.new(), Vector.new(), false, 0, Vector.new(),\
				Vector.new(), Vector.new(), false, false, false, ShapeList.new())
		end
	end
	
	
	
	var String pOriginBone
	var Array pBones
	var Array pKeyframes
	var Array pStaticKeyframes
	var Array pVPS
	var Array pVPSKeyframes
	var Array pVPSStaticKeyframes
	var Animation pAnimation
	var Rig pRig
	var float pFPS
	var String pPath
	var String pPathMeta
	var String pPathRig
	var TimeDate pTimestamp
	var String pMoveName
	
	
	
	/** Create record animation. */
	func new() this("")
	end
	
	/** Create record animation. */
	func new(String pathSuffix)
		pOriginBone = ""
		pBones = Array.new()
		pKeyframes = Array.new()
		pStaticKeyframes = Array.new()
		pVPS = Array.new()
		pVPSKeyframes = Array.new()
		pVPSStaticKeyframes = Array.new()
		pFPS = 25
		pTimestamp = TimeDate.new()
		pMoveName = "MoCap"
		
		var File directory = File.new(GameApp.getGameApp().getPathCaptureAnimations())
		pPath = File.new(directory, pTimestamp.format("%Y-%m-%d_%H-%M-%S") + pathSuffix + ".deanim").getPath()
		pPathMeta = File.new(directory, pTimestamp.format("%Y-%m-%d_%H-%M-%S") + pathSuffix + ".demca").getPath()
		pPathRig = File.new(directory, pTimestamp.format("%Y-%m-%d_%H-%M-%S") + pathSuffix + ".derig").getPath()
	end
	
	
	
	/** Origin bone or empty string. */
	func String getOriginBone()
		return pOriginBone
	end
	
	/** Set origin bone or empty string. */
	func void setOriginBone(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pOriginBone = bone
	end
	
	/** Count of bones. */
	func int getBoneCount()
		return pBones.getCount()
	end
	
	/** Bone name at index. */
	func String getBoneAt(int index)
		return pBones.getAt(index) cast String
	end
	
	/** Bone name is present. */
	func bool hasBone(String name)
		return pBones.has(name)
	end
	
	/** Add bone name. */
	func void addBone(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pBones.add(bone)
	end
	
	/** Visit bones with block receiving String as argument. */
	func void forEachBone(Block ablock)
		pBones.forEach(ablock)
	end
	
	/** FPS. */
	func float getFPS()
		return pFPS
	end
	
	/** Set FPS. */
	func void setFPS(float fps)
		pFPS = DEMath.max(fps, 1.0)
	end
	
	/** Time stamp. */
	func TimeDate getTimestamp()
		return pTimestamp
	end
	
	/** Move name. */
	func String getMoveName()
		return pMoveName
	end
	
	/** Set move name. */
	func void setMoveName(String name)
		if name == null
			throw ENullPointer.new("name")
		end
		pMoveName = name
	end
	
	
	
	/** Count of keyframes. */
	func int getKeyframeCount()
		return pKeyframes.getCount()
	end
	
	/** Keyframe at index. */
	func RecordAnimationKeyframe getKeyframeAt(int index)
		return pKeyframes.getAt(index) cast RecordAnimationKeyframe
	end
	
	/** Add keyframe. */
	func void addKeyframe(float time, Vector position, Quaternion orientation)
		pKeyframes.add(RecordAnimationKeyframe.new(time, position, orientation))
	end
	
	/** Direct access to keyframes array for fast processing. */
	func Array getKeyframes()
		return pKeyframes
	end
	
	
	
	/** Count of static keyframes. */
	func int getStaticKeyframeCount()
		return pStaticKeyframes.getCount()
	end
	
	/** Static keyframe at index. */
	func RecordAnimationKeyframe getStaticKeyframeAt(int index)
		return pStaticKeyframes.getAt(index) cast RecordAnimationKeyframe
	end
	
	/** Add static keyframe. */
	func void addStaticKeyframe(Vector position, Quaternion orientation)
		pStaticKeyframes.add(RecordAnimationKeyframe.new(0, position, orientation))
	end
	
	/** Direct access to static keyframes array for fast processing. */
	func Array getStaticKeyframes()
		return pStaticKeyframes
	end
	
	
	
	/** Count of vertex position sets. */
	func int getVPSCount()
		return pVPS.getCount()
	end
	
	/** Vertex position set name at index. */
	func String getVPSAt(int index)
		return pVPS.getAt(index) cast String
	end
	
	/** Vertex position set name is present. */
	func bool hasVPS(String name)
		return pVPS.has(name)
	end
	
	/** Add vertex position set name. */
	func void addVPS(String name)
		if name == null
			throw ENullPointer.new("name")
		end
		pVPS.add(name)
	end
	
	/** Visit vertex position sets with block receiving String as argument. */
	func void forEachVPS(Block ablock)
		pVPS.forEach(ablock)
	end
	
	
	
	/** Count of vertex position set keyframes. */
	func int getVPSKeyframeCount()
		return pVPSKeyframes.getCount()
	end
	
	/** Keyframe at index. */
	func RecordAnimationVPSKeyframe getVPSKeyframeAt(int index)
		return pVPSKeyframes.getAt(index) cast RecordAnimationVPSKeyframe
	end
	
	/** Add vertex position set keyframe. */
	func void addVPSKeyframe(float time, float weight)
		pVPSKeyframes.add(RecordAnimationVPSKeyframe.new(time, weight))
	end
	
	/** Direct access to vertex position set keyframes array for fast processing. */
	func Array getVPSKeyframes()
		return pVPSKeyframes
	end
	
	
	
	/** Count of static vertex position set keyframes. */
	func int getVPSStaticKeyframeCount()
		return pVPSStaticKeyframes.getCount()
	end
	
	/** Static vertex position set keyframe at index. */
	func RecordAnimationVPSKeyframe getVPSStaticKeyframeAt(int index)
		return pVPSStaticKeyframes.getAt(index) cast RecordAnimationVPSKeyframe
	end
	
	/** Add static keyframe. */
	func void addVPSStaticKeyframe(float weight)
		pVPSStaticKeyframes.add(RecordAnimationVPSKeyframe.new(0, weight))
	end
	
	/** Direct access to static vertex position set keyframes array for fast processing. */
	func Array getVPSStaticKeyframes()
		return pVPSStaticKeyframes
	end
	
	
	
	/** Playtime in seconds. */
	func float getPlaytime()
		if pKeyframes.getCount() > 0
			return (pKeyframes.getAt(-1) cast RecordAnimationKeyframe).getTime()
		end
		return 0
	end
	
	
	
	/** Animation or null if not created. */
	func Animation getAnimation()
		return pAnimation
	end
	
	/** Create animation. */
	func void createAnimation()
		if (pBones.getCount() == 0 and pVPS.getCount() == 0)\
		or (pKeyframes.getCount() == 0 and pStaticKeyframes.getCount() == 0\
		and pVPSKeyframes.getCount() == 0 and pVPSStaticKeyframes.getCount() == 0)
			return
		end
		
		if pOriginBone.empty() or pBones.has(pOriginBone)
			pAnimation = CreateAnimation.new(null, pBones, pKeyframes, pStaticKeyframes,\
				pVPS, pVPSKeyframes, pVPSStaticKeyframes, pFPS, pMoveName).build("")
			
		else
			pAnimation = CreateAnimation.new(pOriginBone, pBones, pKeyframes, pStaticKeyframes,\
				pVPS, pVPSKeyframes, pVPSStaticKeyframes, pFPS, pMoveName).build("")
		end
	end
	
	/** Rig or null if not created. */
	func Rig getRig()
		return pRig
	end
	
	/** Create rig. */
	func void createRig(CharacterConfiguration config)
		pRig = CreateRig.new(config.getTrackerSlots()).build("")
	end
	
	/** Create rig. */
	func void createObjectRig()
		pRig = staticCreateObjectRig()
	end
	
	/** Create object rig directly. */
	public static func Rig staticCreateObjectRig()
		return CreateObjectRig.new().build("")
	end
	
	/** Path or null. */
	func String getPath()
		return pPath
	end
	
	/** Meta path or null. */
	func String getPathMeta()
		return pPathMeta
	end
	
	/** Rig path or null. */
	func String getPathRig()
		return pPathRig
	end
end
