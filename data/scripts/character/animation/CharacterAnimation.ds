/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Characters

pin Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.LoadSave


/**
 * Character animation
 */
class CharacterAnimation
	private var String pName
	private var String pPath
	private var TimeDate pTimestamp
	private var FileUsageManager pFileUsage
	private var Animation pAnimation
	
	
	
	/** Create character animation. */
	public func new(String name)
		setName(name)
		pPath = ""
		pTimestamp = TimeDate.new()
		pFileUsage = FileUsageManager.new()
	end
	
	/** Create character animation from file. */
	public func new(FileReader reader)
		var int i, count
		
		pPath = ""
		pFileUsage = FileUsageManager.new()
		
		select reader.readByte() // version
		case 0
			pName = reader.readString8()
			setPath(reader.readString8())
			pTimestamp = reader.readTimeDate()
			pFileUsage.readFromFile(reader)
			
		else
			throw EInvalidParam.new("unsupported version")
		end
	end
	
	/** Dispose of list. */
	public func void dispose()
		setPath("")
		
		if pFileUsage != null
			pFileUsage.setParent(null)
		end
	end
	
	
	
	/** Name. */
	public func String getName()
		return pName
	end
	
	/** Set name. */
	public func void setName(String name)
		if name == null
			throw ENullPointer.new("name")
		end
		pName = name
	end
	
	/** Path relative to project or empty string. */
	public func String getPath()
		return pPath
	end
	
	/** Set path relative to project or empty string. */
	public func void setPath(String path)
		if path.equals(pPath)
			return
		end
		
		if not pPath.empty()
			pFileUsage.removeFileUsage(pPath)
			if FileUsageManager.debugUsage
				pFileUsage.log(GameApp.getGameApp().getConsole(), "CharacterAnimation.setPath() old(" + pPath + ")")
			end
		end
		
		pPath = path
		
		if not path.empty()
			pFileUsage.addFileUsage(path)
			if FileUsageManager.debugUsage
				pFileUsage.log(GameApp.getGameApp().getConsole(), "CharacterAnimation.setPath() new(" + path + ")")
			end
		end
	end
	
	/** File usage. */
	public func FileUsageManager getFileUsage()
		return pFileUsage
	end
	
	/** Animation or null if not created. */
	public func Animation getAnimation()
		return pAnimation
	end
	
	/** Set animation or null if not created. */
	public func void setAnimation(Animation animation)
		pAnimation = animation
	end
	
	/** Load animation if present and possible. */
	public func void loadAnimation(Project project)
		if not pPath.empty()
			pAnimation = Animation.new((project.getDataDirectory() + pPath).getPath())
		end
	end
	
	/** Clear animation. */
	public func void clear()
		pAnimation = null
		setPath("")
	end
	
	
	
	/** Write to file. */
	public func void writeToFile(FileWriter writer)
		writer.writeByte(0) // version
		
		writer.writeString8(pName)
		writer.writeString8(pPath)
		writer.writeTimeDate(pTimestamp)
		pFileUsage.writeToFile(writer)
	end
end
