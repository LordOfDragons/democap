/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Characters

pin Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.LoadSave
pin Dragengine.XML


/**
 * Character animation
 */
class CharacterAnimation
	var String pName
	var String pPath, pPathMeta, pPathDevices, pPathDevicesRig, pPathObject, pPathObjectRig
	var TimeDate pTimestamp
	var FileUsageManager pFileUsage
	var Animation pAnimation, pAnimationDevices, pAnimationObject
	var Rig pRigDevices, pRigObject
	var String pCharacterProfile
	
	
	
	/** Create character animation. */
	func new(String name)
		setName(name)
		pPath = ""
		pPathMeta = ""
		pPathDevices = ""
		pPathDevicesRig = ""
		pPathObject = ""
		pPathObjectRig = ""
		pTimestamp = TimeDate.new()
		pFileUsage = FileUsageManager.new()
	end
	
	/** Create copy of character animation. */
	func new(CharacterAnimation copy)
		pName = copy.pName
		pPath = ""
		pPathMeta = ""
		pPathDevices = ""
		pPathDevicesRig = ""
		pPathObject = ""
		pPathObjectRig = ""
		pTimestamp = copy.pTimestamp
		pAnimation = copy.pAnimation
		pAnimationDevices = copy.pAnimationDevices
		pRigDevices = copy.pRigDevices
		pAnimationObject = copy.pAnimationObject
		pRigObject = copy.pRigObject
		pCharacterProfile = copy.pCharacterProfile
		
		pFileUsage = FileUsageManager.new()
		pFileUsage.setParent(copy.pFileUsage.getParent())
		
		setPath(copy.pPath)
		setPathMeta(copy.pPathMeta)
		setPathDevices(copy.pPathDevices)
		setPathDevicesRig(copy.pPathDevicesRig)
		setPathObject(copy.pPathObject)
		setPathObjectRig(copy.pPathObjectRig)
	end
	
	/** Create character animation from file. */
	func new(FileReader reader)
		pPath = ""
		pPathMeta = ""
		pPathDevices = ""
		pPathDevicesRig = ""
		pPathObject = ""
		pPathObjectRig = ""
		pFileUsage = FileUsageManager.new()
		
		select reader.readByte() // version
		case 0
			pName = reader.readString8()
			setPath(reader.readString8())
			setPathMeta(reader.readString8())
			pTimestamp = reader.readTimeDate()
			pFileUsage.readFromFile(reader)
			
		case 1
			pName = reader.readString8()
			setPath(reader.readString8())
			setPathMeta(reader.readString8())
			setPathDevices(reader.readString8())
			setPathDevicesRig(reader.readString8())
			pTimestamp = reader.readTimeDate()
			pFileUsage.readFromFile(reader)
			
		case 2
			pName = reader.readString8()
			setPath(reader.readString8())
			setPathMeta(reader.readString8())
			setPathDevices(reader.readString8())
			setPathDevicesRig(reader.readString8())
			setPathObject(reader.readString8())
			setPathObjectRig(reader.readString8())
			pTimestamp = reader.readTimeDate()
			pFileUsage.readFromFile(reader)
			
		else
			throw EInvalidParam.new("unsupported version")
		end
		
		pFileUsage.removeZeroUsageFiles()
	end
	
	/** Dispose of list. */
	func void dispose()
		setPath("")
		setPathMeta("")
		setPathDevices("")
		setPathDevicesRig("")
		setPathObject("")
		setPathObjectRig("")
		
		if pFileUsage != null
			pFileUsage.setParent(null)
		end
	end
	
	
	
	/** Name. */
	func String getName()
		return pName
	end
	
	/** Set name. */
	func void setName(String name)
		if name == null
			throw ENullPointer.new("name")
		end
		pName = name
	end
	
	/** Path relative to project or empty string. */
	func String getPath()
		return pPath
	end
	
	/** Set path relative to project or empty string. */
	func void setPath(String path)
		if path.equals(pPath)
			return
		end
		
		if not pPath.empty()
			pFileUsage.removeFileUsage(pPath)
			if FileUsageManager.debugUsage
				pFileUsage.log(GameApp.getGameApp().getConsole(),\
					"CharacterAnimation.setPath() old(" + pPath + ")")
			end
		end
		
		pPath = path
		
		if not path.empty()
			pFileUsage.addFileUsage(path)
			if FileUsageManager.debugUsage
				pFileUsage.log(GameApp.getGameApp().getConsole(),\
					"CharacterAnimation.setPath() new(" + path + ")")
			end
		end
	end
	
	/** Meta path relative to project or empty string. */
	func String getPathMeta()
		return pPathMeta
	end
	
	/** Set path relative to project or empty string. */
	func void setPathMeta(String path)
		if path.equals(pPathMeta)
			return
		end
		
		if not pPathMeta.empty()
			pFileUsage.removeFileUsage(pPathMeta)
			if FileUsageManager.debugUsage
				pFileUsage.log(GameApp.getGameApp().getConsole(),\
					"CharacterAnimation.setPathMeta() old(" + pPathMeta + ")")
			end
		end
		
		pPathMeta = path
		pCharacterProfile = null
		
		if not path.empty()
			pFileUsage.addFileUsage(path)
			if FileUsageManager.debugUsage
				pFileUsage.log(GameApp.getGameApp().getConsole(),\
					"CharacterAnimation.setPathMeta() new(" + path + ")")
			end
		end
	end
	
	/** Devices path relative to project or empty string. */
	func String getPathDevices()
		return pPathDevices
	end
	
	/** Set devices path relative to project or empty string. */
	func void setPathDevices(String path)
		if path.equals(pPathDevices)
			return
		end
		
		if not pPathDevices.empty()
			pFileUsage.removeFileUsage(pPathDevices)
			if FileUsageManager.debugUsage
				pFileUsage.log(GameApp.getGameApp().getConsole(),\
					"CharacterAnimation.setPathDevices() old(" + pPathDevices + ")")
			end
		end
		
		pPathDevices = path
		
		if not path.empty()
			pFileUsage.addFileUsage(path)
			if FileUsageManager.debugUsage
				pFileUsage.log(GameApp.getGameApp().getConsole(),\
					"CharacterAnimation.setPathDevices() new(" + path + ")")
			end
		end
	end
	
	/** Devices rig path relative to project or empty string. */
	func String getPathDevicesRig()
		return pPathDevicesRig
	end
	
	/** Set devices rig path relative to project or empty string. */
	func void setPathDevicesRig(String path)
		if path.equals(pPathDevicesRig)
			return
		end
		
		if not pPathDevicesRig.empty()
			pFileUsage.removeFileUsage(pPathDevicesRig)
			if FileUsageManager.debugUsage
				pFileUsage.log(GameApp.getGameApp().getConsole(),\
					"CharacterAnimation.setPathDevicesRig() old(" + pPathDevicesRig + ")")
			end
		end
		
		pPathDevicesRig = path
		
		if not path.empty()
			pFileUsage.addFileUsage(path)
			if FileUsageManager.debugUsage
				pFileUsage.log(GameApp.getGameApp().getConsole(),\
					"CharacterAnimation.setPathDevicesRig() new(" + path + ")")
			end
		end
	end
	
	/** Object path relative to project or empty string. */
	func String getPathObject()
		return pPathObject
	end
	
	/** Set object path relative to project or empty string. */
	func void setPathObject(String path)
		if path.equals(pPathObject)
			return
		end
		
		if not pPathObject.empty()
			pFileUsage.removeFileUsage(pPathObject)
			if FileUsageManager.debugUsage
				pFileUsage.log(GameApp.getGameApp().getConsole(),\
					"CharacterAnimation.setPathObject() old(" + pPathObject + ")")
			end
		end
		
		pPathObject = path
		
		if not path.empty()
			pFileUsage.addFileUsage(path)
			if FileUsageManager.debugUsage
				pFileUsage.log(GameApp.getGameApp().getConsole(),\
					"CharacterAnimation.setPathObject() new(" + path + ")")
			end
		end
	end
	
	/** Object rig path relative to project or empty string. */
	func String getPathObjectRig()
		return pPathObjectRig
	end
	
	/** Set object rig path relative to project or empty string. */
	func void setPathObjectRig(String path)
		if path.equals(pPathObjectRig)
			return
		end
		
		if not pPathObjectRig.empty()
			pFileUsage.removeFileUsage(pPathObjectRig)
			if FileUsageManager.debugUsage
				pFileUsage.log(GameApp.getGameApp().getConsole(),\
					"CharacterAnimation.setPathObjectRig() old(" + pPathObjectRig + ")")
			end
		end
		
		pPathObjectRig = path
		
		if not path.empty()
			pFileUsage.addFileUsage(path)
			if FileUsageManager.debugUsage
				pFileUsage.log(GameApp.getGameApp().getConsole(),\
					"CharacterAnimation.setPathObjectRig() new(" + path + ")")
			end
		end
	end
	
	/** File usage. */
	func FileUsageManager getFileUsage()
		return pFileUsage
	end
	
	/** Animation or null if not created. */
	func Animation getAnimation()
		return pAnimation
	end
	
	/** Set animation or null if not created. */
	func void setAnimation(Animation animation)
		pAnimation = animation
	end
	
	/** Devices animation or null if not created. */
	func Animation getAnimationDevices()
		return pAnimationDevices
	end
	
	/** Set devices animation or null if not created. */
	func void setAnimationDevices(Animation animation)
		pAnimationDevices = animation
	end
	
	/** Devices rig or null if not created. */
	func Rig getRigDevices()
		return pRigDevices
	end
	
	/** Set devices rig or null if not created. */
	func void setRigDevices(Rig rig)
		pRigDevices = rig
	end
	
	/** Object animation or null if not created. */
	func Animation getAnimationObject()
		return pAnimationObject
	end
	
	/** Set object animation or null if not created. */
	func void setAnimationObject(Animation animation)
		pAnimationObject = animation
	end
	
	/** Object rig or null if not created. */
	func Rig getRigObject()
		return pRigObject
	end
	
	/** Set object rig or null if not created. */
	func void setRigObject(Rig rig)
		pRigObject = rig
	end
	
	/** Load animations and rigs if present and possible. */
	func void loadAnimation(Project project)
		var String path
		
		if not pPath.empty()
			path = (project.getDataDirectory() + pPath).getPath()
			try
				pAnimation = Animation.new(path)
				
			catch Exception e
				GameApp.getGameApp().getConsole().addError("Failed loading: " + path, e)
			end
		end
		
		if not pPathDevices.empty()
			path = (project.getDataDirectory() + pPathDevices).getPath()
			try
				pAnimationDevices = Animation.new(path)
				
			catch Exception e
				GameApp.getGameApp().getConsole().addError("Failed loading: " + path, e)
			end
		end
		
		if not pPathDevicesRig.empty()
			path = (project.getDataDirectory() + pPathDevicesRig).getPath()
			try
				pRigDevices = Rig.new(path)
				
			catch Exception e
				GameApp.getGameApp().getConsole().addError("Failed loading: " + path, e)
			end
		end
		
		if not pPathObject.empty()
			path = (project.getDataDirectory() + pPathObject).getPath()
			try
				pAnimationObject = Animation.new(path)
				
			catch Exception e
				GameApp.getGameApp().getConsole().addError("Failed loading: " + path, e)
			end
		end
		
		if not pPathObjectRig.empty()
			path = (project.getDataDirectory() + pPathObjectRig).getPath()
			try
				pRigObject = Rig.new(path)
				
			catch Exception e
				GameApp.getGameApp().getConsole().addError("Failed loading: " + path, e)
			end
		end
	end
	
	/** Clear animation. */
	func void clear()
		pRigObject = null
		pAnimationObject = null
		pRigDevices = null
		pAnimationDevices = null
		pAnimation = null
		setPath("")
		setPathMeta("")
		setPathDevices("")
		setPathDevicesRig("")
		setPathObject("")
		setPathObjectRig("")
	end
	
	/** Character profile or empty string if unknown. */
	func String getCharacterProfile(Project project)
		if pCharacterProfile == null
			pCharacterProfile = ""
			
			if not pPathMeta.empty()
				var EasyXML document = EasyXML.new((project.getDataDirectory() + pPathMeta).getPath())
				if document.hasParseFailed()
					GameApp.getGameApp().getConsole().addMessage(document.getParseLog())
					throw EInvalidParam.new("parsing document failed")
				end
				
				document.getRootElement().forEachTag(block EasyXMLElement tag, String tagName
					if tagName.equals("character")
						tag.forEachTag(block EasyXMLElement tag2, String tagName2
							if tagName2.equals("profileName")
								pCharacterProfile = tag2.getFirstCData()
							end
						end)
					end
				end)
			end
		end
		
		return pCharacterProfile
	end
	
	/** Assign from another character animation. */
	func void assign(CharacterAnimation characterAnimation)
		pTimestamp = characterAnimation.pTimestamp
		pAnimation = characterAnimation.pAnimation
		pAnimationDevices = characterAnimation.pAnimationDevices
		pRigDevices = characterAnimation.pRigDevices
		pAnimationObject = characterAnimation.pAnimationObject
		pRigObject = characterAnimation.pRigObject
		pCharacterProfile = characterAnimation.pCharacterProfile
		
		setPath(characterAnimation.pPath)
		setPathDevices(characterAnimation.pPathDevices)
		setPathDevicesRig(characterAnimation.pPathDevicesRig)
		setPathObject(characterAnimation.pPathObject)
		setPathObjectRig(characterAnimation.pPathObjectRig)
		setPathMeta(characterAnimation.pPathMeta)
	end
	
	/** Import character animation. */
	func void import(Project project, String pathDemca)
		var File directoryOut = project.getDataDirectory()
		var File directoryIn = File.new(pathDemca).getParent()
		if directoryIn == null
			throw EInvalidParam.new("path has no parent")
		end
		
		var EasyXML documentSource = EasyXML.new(pathDemca)
		if documentSource.hasParseFailed()
			GameApp.getGameApp().getConsole().addMessage(documentSource.getParseLog())
			throw EInvalidParam.new("parsing document failed")
		end
		
		var EasyXML document = EasyXML.new()
		var EasyXMLElement root = document.getRootElement()
		root.setTagName(documentSource.getRootElement().getTagName())
		cleanXmlTag(root, documentSource.getRootElement())
		
		var Project.AnimationPath path = project.nextAnimationPath()
		
		root.forEachTag(block EasyXMLElement tag, String tagName
			if tagName.equals("capturedAnimation")
				tag.forEachTag(block EasyXMLElement tag2, String tagName2
					if tagName2.equals("pathAnimation")
						FileWriter.new((directoryOut + path.getPath()).getPath()).writeData(\
							FileReader.new((directoryIn + tag2.getFirstCData()).getPath()))
						setPath(path.getPath())
						tag2.getElementAt(0).setCDataContent(path.getPath())
					end
				end)
				
			elif tagName.equals("capturedAnimationDevices")
				tag.forEachTag(block EasyXMLElement tag2, String tagName2
					if tagName2.equals("pathAnimation")
						FileWriter.new((directoryOut + path.getPathDevices()).getPath()).writeData(\
							FileReader.new((directoryIn + tag2.getFirstCData()).getPath()))
						setPathDevices(path.getPathDevices())
						tag2.getElementAt(0).setCDataContent(path.getPathDevices())
						
					elif tagName2.equals("pathRig")
						FileWriter.new((directoryOut + path.getPathDevicesRig()).getPath()).writeData(\
							FileReader.new((directoryIn + tag2.getFirstCData()).getPath()))
						setPathDevicesRig(path.getPathDevicesRig())
						tag2.getElementAt(0).setCDataContent(path.getPathDevicesRig())
					end
				end)
				
			elif tagName.equals("capturedAnimationObject")
				tag.forEachTag(block EasyXMLElement tag2, String tagName2
					if tagName2.equals("pathAnimation")
						FileWriter.new((directoryOut + path.getPathObject()).getPath()).writeData(\
							FileReader.new((directoryIn + tag2.getFirstCData()).getPath()))
						setPathObject(path.getPathObject())
						tag2.getElementAt(0).setCDataContent(path.getPathObject())
						
					elif tagName2.equals("pathRig")
						FileWriter.new((directoryOut + path.getPathObjectRig()).getPath()).writeData(\
							FileReader.new((directoryIn + tag2.getFirstCData()).getPath()))
						setPathObjectRig(path.getPathObjectRig())
						tag2.getElementAt(0).setCDataContent(path.getPathObjectRig())
					end
				end)
			end
		end)
		
		document.writeToFile(FileWriter.new((directoryOut + path.getPathMeta()).getPath()), false)
		setPathMeta(path.getPathMeta())
	end
	
	/** Export character animation. */
	func void export(Project project, String name)
		var Project.AnimationPath path = project.exportAnimationPath(name, "deanim", "derig")
		var File directory = project.getDataDirectory()
		if not pPath.empty()
			FileWriter.new((directory + path.getPath()).getPath()).writeData(\
				FileReader.new((directory + pPath).getPath()))
		end
		
		if not pPathDevices.empty()
			FileWriter.new((directory + path.getPathDevices()).getPath()).writeData(\
				FileReader.new((directory + pPathDevices).getPath()))
		end
		
		if not pPathDevicesRig.empty()
			FileWriter.new((directory + path.getPathDevicesRig()).getPath()).writeData(\
				FileReader.new((directory + pPathDevicesRig).getPath()))
		end
		
		if not pPathObject.empty()
			FileWriter.new((directory + path.getPathObject()).getPath()).writeData(\
				FileReader.new((directory + pPathObject).getPath()))
		end
		
		if not pPathObjectRig.empty()
			FileWriter.new((directory + path.getPathObjectRig()).getPath()).writeData(\
				FileReader.new((directory + pPathObjectRig).getPath()))
		end
		
		var EasyXML documentSource = EasyXML.new((directory + pPathMeta).getPath())
		if documentSource.hasParseFailed()
			GameApp.getGameApp().getConsole().addMessage(documentSource.getParseLog())
			throw EInvalidParam.new("parsing document failed")
		end
		
		var EasyXML document = EasyXML.new()
		var EasyXMLElement root = document.getRootElement()
		root.setTagName(documentSource.getRootElement().getTagName())
		cleanXmlTag(root, documentSource.getRootElement())
		
		root.forEachTag(block EasyXMLElement tag, String tagName
			if tagName.equals("capturedAnimation")
				tag.forEachTag(block EasyXMLElement tag2, String tagName2
					if tagName2.equals("pathAnimation")
						tag2.getElementAt(0).setCDataContent(File.new(path.getPath()).getComponentAt(-1))
					end
				end)
				
			elif tagName.equals("capturedAnimationDevices")
				tag.forEachTag(block EasyXMLElement tag2, String tagName2
					if tagName2.equals("pathAnimation")
						tag2.getElementAt(0).setCDataContent(File.new(path.getPathDevices()).getComponentAt(-1))
						
					elif tagName2.equals("pathRig")
						tag2.getElementAt(0).setCDataContent(File.new(path.getPathDevicesRig()).getComponentAt(-1))
					end
				end)
				
			elif tagName.equals("capturedAnimationObject")
				tag.forEachTag(block EasyXMLElement tag2, String tagName2
					if tagName2.equals("pathAnimation")
						tag2.getElementAt(0).setCDataContent(File.new(path.getPathObject()).getComponentAt(-1))
						
					elif tagName2.equals("pathRig")
						tag2.getElementAt(0).setCDataContent(File.new(path.getPathObjectRig()).getComponentAt(-1))
					end
				end)
			end
		end)
		
		document.writeToFile(FileWriter.new((directory + path.getPathMeta()).getPath()), false)
	end
	
	protected func void cleanXmlTag(EasyXMLElement root, EasyXMLElement source)
		source.forEachTag(block EasyXMLElement tag, String tagName
			var EasyXMLElement cleaned = root.addTag(tagName)
			cleanXmlTag(cleaned, tag)
			if cleaned.getElementCount() == 0
				cleaned.addCData(tag.getFirstCData())
			end
		end)
	end
	
	
	
	/** Write to file. */
	func void writeToFile(FileWriter writer)
		writer.writeByte(2) // version
		
		writer.writeString8(pName)
		writer.writeString8(pPath)
		writer.writeString8(pPathMeta)
		writer.writeString8(pPathDevices)
		writer.writeString8(pPathDevicesRig)
		writer.writeString8(pPathObject)
		writer.writeString8(pPathObjectRig)
		writer.writeTimeDate(pTimestamp)
		pFileUsage.writeToFile(writer)
	end
end
