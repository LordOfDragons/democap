/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Characters

pin Democap.Behaviors

pin Dragengine.Animators
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * Character configuration tracker slot.
 */
class CharacterTrackerSlot
	private var String pName
	private var Vector pPosition
	private var Vector pRotation
	private var String pInputDeviceID
	private var Vector pOffsetPosition
	private var Vector pOffsetRotation
	
	private var Vector pCalibratePosition
	private var Vector pCalibrateRotation
	private var Matrix pCalibrateMatrix
	private var Matrix pCalibrateMatrixInverse
	
	private var ADController pADControllerPosition
	private var ADController pADControllerRotation
	private var ADLink pADLinkPosition
	private var ADLink pADLinkRotation
	
	
	
	/** Create character configuration tracker slot. */
	public func new(String name)
		setName(name)
		pPosition = Vector.new()
		pRotation = Vector.new()
		pInputDeviceID = ""
		pOffsetPosition = Vector.new()
		pOffsetRotation = Vector.new()
		
		resetCalibration()
	end
	
	/** Create copy of character configuration tracker slot. */
	public func new(CharacterTrackerSlot slot)
		pName = slot.pName
		pPosition = slot.pPosition
		pRotation = slot.pRotation
		pInputDeviceID = slot.pInputDeviceID
		pOffsetPosition = slot.pOffsetPosition
		pOffsetRotation = slot.pOffsetRotation
		
		resetCalibration()
	end
	
	
	
	/** Name of character configuration tracker slot. */
	public func String getName()
		return pName
	end
	
	/** Set name of character configuration tracker slot. */
	public func void setName(String name)
		if name == null
			throw ENullPointer.new("name")
		end
		if name.empty()
			throw EInvalidParam.new("name is empty string")
		end
		
		pName = name
	end
	
	/** Static position. */
	public func Vector getPosition()
		return pPosition
	end
	
	/** Set static position. */
	public func void setPosition(Vector position)
		if position == null
			throw ENullPointer.new("position")
		end
		pPosition = position
	end
	
	/** Static rotation. */
	public func Vector getRotation()
		return pRotation
	end
	
	/** Set static rotation. */
	public func void setRotation(Vector rotation)
		if rotation == null
			throw ENullPointer.new("rotation")
		end
		pRotation = rotation
	end
	
	/** ID of input device attached to this slot or empty string. */
	public func String getInputDeviceID()
		return pInputDeviceID
	end
	
	/** Set ID of input device attached to this slot or empty string. */
	public func void setInputDeviceID(String id)
		pInputDeviceID = id
	end
	
	/** Input device attached to this slot. Resolved using input device id. */
	public func InputDevice getInputDevice()
		if pInputDeviceID.empty()
			return null
		end
		return GameApp.getGameApp().getBindingManager().findDevice(block InputDevice each
			return each.getID().equals(pInputDeviceID)
		end)
	end
	
	/** Position offset. */
	public func Vector getOffsetPosition()
		return pOffsetPosition
	end
	
	/** Set position offset. */
	public func void setOffsetPosition(Vector position)
		if position == null
			throw ENullPointer.new("position")
		end
		pOffsetPosition = position
	end
	
	/** Rotation offset. */
	public func Vector getOffsetRotation()
		return pOffsetRotation
	end
	
	/** Set rotationn offset. */
	public func void setOffsetRotation(Vector rotation)
		if rotation == null
			throw ENullPointer.new("rotation")
		end
		pOffsetRotation = rotation
	end
	
	
	
	/** Animator definition controller for position or null. */
	public func ADController getADControllerPosition()
		return pADControllerPosition
	end
	
	/** Animator definition controller for rotation or null. */
	public func ADController getADControllerRotation()
		return pADControllerRotation
	end
	
	/** Animator definition link for position or null. */
	public func ADLink getADLinkPosition()
		return pADLinkPosition
	end
	
	/** Animator definition link for position or null. */
	public func ADLink getADLinkRotation()
		return pADLinkRotation
	end
	
	
	
	/** Init element class. */
	public func void initElementClass(BaseVRActorClass eclass, AnimatorDefinition adef)
		var ECBTrackerSlot behavior = ECBTrackerSlot.new(eclass, this)
		
		pADControllerPosition = ADController.new()
		pADControllerPosition.setName(behavior.getControllerNamePosition())
		adef.addController(pADControllerPosition)
		
		pADLinkPosition = ADLink.new()
		pADLinkPosition.setController(pADControllerPosition)
		adef.addLink(pADLinkPosition)
		
		pADControllerRotation = ADController.new()
		pADControllerRotation.setName(behavior.getControllerNameRotation())
		adef.addController(pADControllerRotation)
		
		pADLinkRotation = ADLink.new()
		pADLinkRotation.setController(pADControllerRotation)
		adef.addLink(pADLinkRotation)
	end
	
	
	
	/** Calibrate position. */
	public func Vector getCalibratePosition()
		return pCalibratePosition
	end
	
	/** Set calibrate position. */
	public func void setCalibratePosition(Vector position)
		if position == null
			throw ENullPointer.new("position")
		end
		pCalibratePosition = position
	end
	
	/** Calibrate rotation. */
	public func Vector getCalibrateRotation()
		return pCalibrateRotation
	end
	
	/** Set calibrate rotation. */
	public func void setCalibrateRotation(Vector rotation)
		if rotation == null
			throw ENullPointer.new("rotation")
		end
		pCalibrateRotation = rotation
	end
	
	/** Calibrate matrix. */
	public func Matrix getCalibrateMatrix()
		return pCalibrateMatrix
	end
	
	/** Inverse calibrate matrix. */
	public func Matrix getCalibrateMatrixInverse()
		return pCalibrateMatrixInverse
	end
	
	/** Set calibrate matrix. */
	public func void setCalibrateMatrix(Matrix matrix)
		if matrix == null
			throw ENullPointer.new("matrix")
		end
		pCalibrateMatrix = matrix
		pCalibrateMatrixInverse = matrix.getInverse()
	end
	
	
	
	/** Reset calibration. */
	public func void resetCalibration()
		pCalibratePosition = pPosition
		pCalibrateRotation = pRotation
		pCalibrateMatrix = Matrix.newRT(pRotation, pPosition)
		pCalibrateMatrixInverse = pCalibrateMatrix.getInverse()
	end
	
	/** Calibrate character. */
	public func void calibrate(BaseVRActor actor, Matrix matrix)
		if pInputDeviceID.empty()
			resetCalibration()
			return
		end
		
		var ECBTrackerSlot.Instance behavior = ECBTrackerSlot.getInstanceIn(actor, pName)
		if behavior == null or behavior.isDetached()
			resetCalibration()
			return
		end
		
		pCalibrateMatrix = behavior.getMatrixPlayspace() * matrix
		pCalibrateMatrixInverse = pCalibrateMatrix.getInverse()
		pCalibratePosition = pCalibrateMatrix.getPosition()
		pCalibrateRotation = pCalibrateMatrix.getEulerAngles()
		
		GameApp.getGameApp().getConsole().addMessage("CharacterTrackerSlot.calibrate: slot=" \
			+ pName + " pos=" + pCalibratePosition + " rot=" + pCalibrateRotation)
	end
end
