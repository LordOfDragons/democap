/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Characters

pin Democap.Actors
pin Democap.Behaviors
pin Democap.Elements
pin Democap.MotionTransferSystem

pin Dragengine.Commands
pin Dragengine.Animators
pin Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.Preloading


/**
 * Character configuration. Stores tracker configuration and information about how tracker
 * data affects the character rig.
 */
class CharacterConfiguration
	/** Scale mode. */
	enum ScaleMode
		actor //<! Scale actor to match character
		character //<! Scale character to match actor
	end
	
	
	
	public static var bool debugAnimatorDefinition = false
	
	
	
	private var CharacterProfile pProfile
	private var String pName
	
	private var ScaleMode pScaleMode
	private var String pMoveCalibrate
	
	private var String pCameraBone
	private var Vector pCameraPosition
	private var Vector pCameraRotation
	private var Matrix pCameraMatrix
	
	private var String pGrabBoneRight
	private var String pGrabTipBoneRight
	private var String pGrabBaseBoneRight
	private var String pGrabBoneLeft
	private var String pGrabTipBoneLeft
	private var String pGrabBaseBoneLeft
	
	private var bool pIsCalibrated
	private var float pCalibrateScale
	private var Matrix pMatrixCalibrate
	private var Matrix pMatrixCalibrateInv
	
	private var CharacterTrackerSlots pTrackerSlots
	private var MotionTransfers pMotionTransfers
	
	private var MoCapActorClass pElementClass
	private var MoCapActorClass pOldElementClass
	private var PreloadCounter pPreloadCounter
	private var AnimatorDefinition pAnimatorDefinition
	
	
	
	/** Create character configuration. */
	public func new(CharacterProfile profile, String name)
		if profile == null
			throw ENullPointer.new("profile")
		end
		
		pProfile = profile
		setName(name)
		
		pScaleMode = ScaleMode.actor
		pMoveCalibrate = ""
		
		pCameraBone = ""
		pCameraPosition = Vector.new()
		pCameraRotation = Vector.new()
		pCameraMatrix = Matrix.new()
		
		pGrabBoneRight = ""
		pGrabTipBoneRight = ""
		pGrabBaseBoneRight = ""
		pGrabBoneLeft = ""
		pGrabTipBoneLeft = ""
		pGrabBaseBoneLeft = ""
		
		pIsCalibrated = false
		pCalibrateScale = 1
		pMatrixCalibrate = Matrix.new()
		pMatrixCalibrateInv = Matrix.new()
		
		pTrackerSlots = CharacterTrackerSlots.new()
		pMotionTransfers = MotionTransfers.new()
	end
	
	/** Create copy of character configuration. */
	public func new(CharacterProfile profile, String name, CharacterConfiguration configuration)
		if profile == null
			throw ENullPointer.new("profile")
		end
		
		pProfile = profile
		setName(name)
		
		pScaleMode = configuration.pScaleMode
		pMoveCalibrate = configuration.pMoveCalibrate
		
		pCameraBone = configuration.pCameraBone
		pCameraPosition = configuration.pCameraPosition
		pCameraRotation = configuration.pCameraRotation
		pCameraMatrix = configuration.pCameraMatrix
		
		pGrabBoneRight = configuration.pGrabBoneRight
		pGrabTipBoneRight = configuration.pGrabTipBoneRight
		pGrabBaseBoneRight = configuration.pGrabBaseBoneRight
		pGrabBoneLeft = configuration.pGrabBoneLeft
		pGrabTipBoneLeft = configuration.pGrabTipBoneLeft
		pGrabBaseBoneLeft = configuration.pGrabBaseBoneLeft
		
		pIsCalibrated = configuration.pIsCalibrated
		pCalibrateScale = configuration.pCalibrateScale
		pMatrixCalibrate = configuration.pMatrixCalibrate
		pMatrixCalibrateInv = configuration.pMatrixCalibrateInv
		
		pTrackerSlots = CharacterTrackerSlots.new()
		configuration.pTrackerSlots.forEach(block CharacterTrackerSlot each
			pTrackerSlots.add(CharacterTrackerSlot.new(this, each))
		end)
		
		pMotionTransfers = MotionTransfers.new()
		configuration.pMotionTransfers.forEach(block MotionTransfer each
			pMotionTransfers.add(each.createCopy())
		end)
	end
	
	/** Dispose of character profile. */
	public func void dispose()
		dropElementClass()
		disposeOldElementClass()
		
		if pTrackerSlots != null
			pTrackerSlots.forEach(block CharacterTrackerSlot each
				each.dispose()
			end)
		end
		
		pProfile = null
	end
	
	
	
	/** Character profile owning this configuration. */
	public func CharacterProfile getProfile()
		return pProfile
	end
	
	/** Name of character profile. */
	public func String getName()
		return pName
	end
	
	/** Set name of character profile. */
	public func void setName(String name)
		if name == null
			throw ENullPointer.new("name")
		end
		if name.empty()
			throw EInvalidParam.new("name is empty string")
		end
		
		pName = name
	end
	
	/** Scale mode. */
	public func ScaleMode getScaleMode()
		return pScaleMode
	end
	
	/** Set scale mode. */
	public func void setScaleMode(ScaleMode scaleMode)
		if scaleMode == null
			throw ENullPointer.new("scaleMode")
		end
		pScaleMode = scaleMode
	end
	
	/** Name of animation move to use for calibration or empty string to use none. */
	public func String getMoveCalibrate()
		return pMoveCalibrate
	end
	
	/** Set name of animation move to use for calibration or empty string to use none. */
	public func void setMoveCalibrate(String animation)
		if animation == null
			throw ENullPointer.new("animation")
		end
		
		pMoveCalibrate = animation
	end
	
	
	
	/** Bone to attach HMD to if calibrated or empty string to attach to character origin. */
	public func String getCameraBone()
		return pCameraBone
	end
	
	/** Set bone to attach HMD to if calibrated or empty string to attach to character origin. */
	public func void setCameraBone(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pCameraBone = bone
	end
	
	/** Camera position relative to bone. */
	public func Vector getCameraPosition()
		return pCameraPosition
	end
	
	/** Set camera position relative to bone. */
	public func void setCameraPosition(Vector position)
		if position == null
			throw ENullPointer.new("position")
		end
		pCameraPosition = position
		pCameraMatrix = Matrix.newRT(pCameraRotation, pCameraPosition)
	end
	
	/** Rotation of camera relative to bone. */
	public func Vector getCameraRotation()
		return pCameraRotation
	end
	
	/** Set rotation of camera relative to bone. */
	public func void setCameraRotation(Vector rotation)
		if rotation == null
			throw ENullPointer.new("rotation")
		end
		pCameraRotation = rotation
		pCameraMatrix = Matrix.newRT(pCameraRotation, pCameraPosition)
	end
	
	/** Camera matrix relative to bone. */
	public func Matrix getCameraMatrix()
		return pCameraMatrix
	end
	
	
	
	/** Bone to attach objects grabbed with the right hand. */
	public func String getGrabBoneRight()
		return pGrabBoneRight
	end
	
	/** Set bone to attach objects grabbed with the right hand. */
	public func void setGrabBoneRight(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pGrabBoneRight = bone
	end
	
	/** IK tip bone for grabbing objects with the right hand. */
	public func String getGrabTipBoneRight()
		return pGrabTipBoneRight
	end
	
	/** IK tip bone for grabbing objects with the right hand. */
	public func void setGrabTipBoneRight(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pGrabTipBoneRight = bone
	end
	
	/** IK base bone for grabbing objects with the right hand. */
	public func String getGrabBaseBoneRight()
		return pGrabBaseBoneRight
	end
	
	/** IK base bone for grabbing objects with the right hand. */
	public func void setGrabBaseBoneRight(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pGrabBaseBoneRight = bone
	end
	
	/** Bone to attach objects grabbed with the left hand. */
	public func String getGrabBoneLeft()
		return pGrabBoneLeft
	end
	
	/** Set bone to attach objects grabbed with the left hand. */
	public func void setGrabBoneLeft(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pGrabBoneLeft = bone
	end
	
	/** IK tip bone for grabbing objects with the left hand. */
	public func String getGrabTipBoneLeft()
		return pGrabTipBoneLeft
	end
	
	/** IK tip bone for grabbing objects with the left hand. */
	public func void setGrabTipBoneLeft(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pGrabTipBoneLeft = bone
	end
	
	/** IK base bone for grabbing objectgs with the left hand. */
	public func String getGrabBaseBoneLeft()
		return pGrabBaseBoneLeft
	end
	
	/** IK base bone for grabbing objects with the left hand. */
	public func void setGrabBaseBoneLeft(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pGrabBaseBoneLeft = bone
	end
	
	
	
	/** Tracker slots. */
	public func CharacterTrackerSlots getTrackerSlots()
		return pTrackerSlots
	end
	
	/** Motion transfers. */
	public func MotionTransfers getMotionTransfers()
		return pMotionTransfers
	end
	
	
	
	/** Element class is present. */
	public func bool hasElementClass()
		return pElementClass != null
	end
	
	/**
	 * Element class creating and preloading it if required. Returned element class can be
	 * still preloading so check isElementClassPreloading() to check if it is ready to be used.
	 */
	public func MoCapActorClass getElementClass()
		if pElementClass == null
			prepareElementClass()
			pPreloadCounter = PreloadCounter.new()
			pElementClass.preloadResources(pPreloadCounter)
		end
		return pElementClass
	end
	
	/** Element class is preloading. Always false until getElementClass() is called. */
	public func bool isElementClassPreloading()
		if pPreloadCounter == null
			return false
		end
		
		if pPreloadCounter.isNotZero()
			return true
		end
		pPreloadCounter = null
		
		// this looks strange to call loading a second time but the preloading of the element
		// class only preloads the resources into the element class but the CharacterAppearance
		// is still missing them. since they are loaded now calling synchronous loading finished
		// immediately and CharacterAppearance is valid
		pProfile.loadResourcesSync()
		
		// finish the element class. can be done only after the resources have been preloaded.
		// this adds all the motion capture behaviors
		finishElementClass()
		
		return false
	end
	
	/** Drop element class. */
	public func void dropElementClass()
		if pElementClass == null
			return
		end
		
		GameApp.getApp().getConsole().addMessage("Drop element class: " + getLogName())
		
		disposeOldElementClass()
		pOldElementClass = pElementClass
		pElementClass = null
		pPreloadCounter = null
	end
	
	/** Animator definition used while creating element class or null. */
	public func AnimatorDefinition getAnimatorDefinition()
		return pAnimatorDefinition
	end
	
	
	
	/** Character is calibrated. */
	public func bool isCalibrated()
		return pIsCalibrated
	end
	
	/** Calibrated scale. */
	public func float getCalibrateScale()
		return pCalibrateScale
	end
	
	/** Set calibrated scale. */
	public func void setCalibrateScale(float scale)
		pCalibrateScale = scale
	end
	
	/** Calibration matrix. */
	public func Matrix getMatrixCalibrate()
		return pMatrixCalibrate
	end
	
	/** Inverse calibration matrix. */
	public func Matrix getMatrixCalibrateInverse()
		return pMatrixCalibrateInv
	end
	
	/** Set calibration matrix. */
	public func void setMatrixCalibrate(Matrix matrix)
		pMatrixCalibrate = matrix
		pMatrixCalibrateInv = matrix.getInverse()
	end
	
	
	
	/** Convert actor distance to character distance. */
	public func float actorToCharacter(float distance)
		return distance * pCalibrateScale
	end
	
	/** Convert actor position to character position. */
	public func Vector actorToCharacter(Vector position)
		return position * pCalibrateScale
	end
	
	/** Convert actor matrix to character matrix retaining rotation and scale. */
	public func Matrix actorToCharacter(Matrix matrix)
		return matrix.getRotation() * Matrix.newTranslation(actorToCharacter(matrix.getPosition()))
	end
	
	/** Convert character distance to actor distance. */
	public func float characterToActor(float distance)
		return distance / pCalibrateScale
	end
	
	/** Convert character position to actor position. */
	public func Vector characterToActor(Vector position)
		return position / pCalibrateScale
	end
	
	/** Convert character matrix to actor matrix retaining rotation and scale. */
	public func Matrix characterToActor(Matrix matrix)
		return matrix.getRotation() * Matrix.newTranslation(characterToActor(matrix.getPosition()))
	end
	
	
	
	/** Convert component distance to character distance. */
	public func float componentToCharacter(float distance)
		return distance * pProfile.getScale()
	end
	
	/** Convert component position to character position. */
	public func Vector componentToCharacter(Vector position)
		return position * pProfile.getScale()
	end
	
	/** Convert component matrix to character matrix retaining rotation and scale. */
	public func Matrix componentToCharacter(Matrix matrix)
		return matrix.getRotation() * Matrix.newTranslation(componentToCharacter(matrix.getPosition()))
	end
	
	/** Convert character distance to component distance. */
	public func float characterToComponent(float distance)
		return distance / pProfile.getScale()
	end
	
	/** Convert character position to component position. */
	public func Vector characterToComponent(Vector position)
		return position / pProfile.getScale()
	end
	
	/** Convert character matrix to component matrix retaining rotation and scale. */
	public func Matrix characterToComponent(Matrix matrix)
		return matrix.getRotation() * Matrix.newTranslation(characterToComponent(matrix.getPosition()))
	end
	
	
	
	/** Convert component distance to actor distance. */
	public func float componentToActor(float distance)
		return distance * (pProfile.getScale() * pCalibrateScale)
	end
	
	/** Convert component position to actor position. */
	public func Vector componentToActor(Vector position)
		return position * (pProfile.getScale() * pCalibrateScale)
	end
	
	/** Convert component matrix to actor matrix retaining rotation and scale. */
	public func Matrix componentToActor(Matrix matrix)
		return matrix.getRotation() * Matrix.newTranslation(componentToActor(matrix.getPosition()))
	end
	
	/** Convert actor distance to component distance. */
	public func float actorToComponent(float distance)
		return distance / (pProfile.getScale() * pCalibrateScale)
	end
	
	/** Convert actor position to component position. */
	public func Vector actorToComponent(Vector position)
		return position / (pProfile.getScale() * pCalibrateScale)
	end
	
	/** Convert actor matrix to component matrix retaining rotation and scale. */
	public func Matrix actorToComponent(Matrix matrix)
		return matrix.getRotation() * Matrix.newTranslation(actorToComponent(matrix.getPosition()))
	end
	
	
	
	/** Convert character distance to world distance. */
	public func float characterToWorld(float distance)
		return pScaleMode == CharacterConfiguration.ScaleMode.actor if distance else characterToActor(distance)
	end
	
	/** Convert character position to world position. */
	public func Vector characterToWorld(Vector position)
		return pScaleMode == CharacterConfiguration.ScaleMode.actor if position else characterToActor(position)
	end
	
	/** Convert character matrix to world matrix retaining rotation and scale. */
	public func Matrix characterToWorld(Matrix matrix)
		return pScaleMode == CharacterConfiguration.ScaleMode.actor if matrix else characterToActor(matrix)
	end
	
	/** Convert world distance to character distance. */
	public func float worldToCharacter(float distance)
		return pScaleMode == CharacterConfiguration.ScaleMode.actor if distance else actorToCharacter(distance)
	end
	
	/** Convert character position to actor position. */
	public func Vector worldToCharacter(Vector position)
		return pScaleMode == CharacterConfiguration.ScaleMode.actor if position else actorToCharacter(position)
	end
	
	/** Convert character matrix to actor matrix retaining rotation and scale. */
	public func Matrix worldToCharacter(Matrix matrix)
		return pScaleMode == CharacterConfiguration.ScaleMode.actor if matrix else actorToCharacter(matrix)
	end
	
	/** World scaling. */
	public func float worldScaling()
		return pScaleMode == CharacterConfiguration.ScaleMode.actor if pCalibrateScale else 1
	end
	
	/** Component scaling. */
	public func float componentScaling()
		if pScaleMode == ScaleMode.actor
			return pProfile.getScale()
			
		else
			return 1.0 / (pProfile.getScale() * pCalibrateScale)
		end
	end
	
	
	
	/** Reset calibration. */
	public func void resetCalibration(BaseVRActor actor, bool calibrating)
		GameApp.getApp().getConsole().addMessage("Reset calibration (" + calibrating + "): " + getLogName())
		
		if actor != null
			actor.getActorAnimated().setAnimator(null)
			
			var Component component = actor.getComponent().getComponent()
			var int i, boneCount = component.getBoneCount()
			for i = 0 to boneCount
				component.boneSetPosition(i, Vector.new())
				component.boneSetRotation(i, Quaternion.new())
			end
		end
		
		dropElementClass()
		
		pIsCalibrated = false
		pCalibrateScale = 1
		pMatrixCalibrate = Matrix.new()
		pMatrixCalibrateInv = Matrix.new()
		
		pTrackerSlots.forEach(block CharacterTrackerSlot each
			each.resetCalibration()
		end)
		
		pMotionTransfers.forEach(block MotionTransfer each
			each.resetCalibration()
		end)
		
		pProfile.notifyReset(this, calibrating)
	end
	
	/** Mark character is calibrated. */
	public func void markCalibrated()
		pIsCalibrated = true
	end
	
	/** Begin calibration. */
	public func void beginCalibration(BaseVRActor actor)
		GameApp.getApp().getConsole().addMessage("Begin calibration: " + getLogName())
		pTrackerSlots.forEach(block CharacterTrackerSlot each
			each.beginCalibration(actor)
		end)
	end
	
	/** Update calibration. */
	public func void updateCalibration()
		pTrackerSlots.forEach(block CharacterTrackerSlot each
			each.updateCalibration()
		end)
	end
	
	/** Calibrate character. */
	public func void calibrate(BaseVRActor actor, ActorProfile actorProfile)
		GameApp.getApp().getConsole().addMessage("Finish calibration: " + getLogName())
// 		if pProfile.getOriginBone().empty()
// 			throw EInvalidParam.new("profile.originBone is empty")
// 		end
		
		// ensure resources are loaded. if the element class exists already the resources
		// are already preloaded and doing it synchronously again is fast. furthermore the
		// resources are not unloaded if inside the element class but not yet inside
		// CharacterAppearance
		pProfile.loadResourcesSync()
		
		// drop element class. we need to create a new one
		dropElementClass()
		
		// determine scaling. we could try using the actor hands to find the shoulder level
		// but this method is unstable. actors can not hold their arms exactly the same way
		// each time they calibrate. furthermore it is difficult to hold the arms in the
		// correct location using VR view. last but not least VR system measure distance to
		// the ground with an offset leading. this causes the actor to be measured with a
		// too small shoulder level compared to characters where the shoulder level is
		// measured all the way to the ground. for these reasons actors are required to
		// have their shoulder level measured to get precise results matching characters
		var float actorScale = pProfile.getShoulderLevel() / actorProfile.getShoulderLevel()
		setCalibrateScale(actorScale)
		
		// get hand positions to align calibration space
		var Matrix hmd, rightHand, leftHand
		if actor.getVRHMD().isAttached()
			hmd = actor.getVRHMD().getMatrixPlayspace()
		end
		if actor.getVRRightHand().isAttached()
			rightHand = actor.getVRRightHand().getMatrixPlayspace()
		end
		if actor.getVRLeftHand().isAttached()
			leftHand = actor.getVRLeftHand().getMatrixPlayspace()
		end
		
		// for calibration we need these three for the time being
		if hmd == null or rightHand == null or leftHand == null
			resetCalibration(actor, true)
			return
		end
		
		// scale element if required
		var float componentScaling = componentScaling()
		actor.setScaling(Vector.new(componentScaling, componentScaling, componentScaling))
		
		// hand controller devices have their pose beyond the controller tip which is
		// the wrong location to use for calibration. to fix this find the tracker slots
		// matching the hand controllers. there the user stored the offset required to
		// moved the calibration point to a sane location
		var CharacterTrackerSlot slot = pTrackerSlots.find(block CharacterTrackerSlot each
			return each.getInputDeviceType() == InputDeviceType.vrRightHand
		end)
		if slot != null
			rightHand = slot.getOffsetMatrix() * rightHand
		end
		
		slot = pTrackerSlots.find(block CharacterTrackerSlot each
			return each.getInputDeviceType() == InputDeviceType.vrLeftHand
		end)
		if slot != null
			leftHand = slot.getOffsetMatrix() * leftHand
		end
		
		// this one here is a bit tricky. we have to figure out if head tracking using HMD
		// or using a tracker has to be done. for this we need a tracker slot with type
		// headTracker and an assigned tracker. we assign though trackers to slots after
		// calculating the calibration matrix. but for calculating the calibration matrix
		// we need to know the assignment.
		// 
		// to solve this problem we calculate first an approximate calibration matrix using
		// the position centered between the two hand controllers projected down to the
		// ground. this is enough to assign the head tracker if present. once this is done
		// we can clear the assignment and continue depending on what we found
		var CharacterTrackerSlot slotHeadTracker = \
			pTrackerSlots.firstWithType(CharacterTrackerSlot.Type.headTracker)
		
		var bool useHeadTracker
		
		if slotHeadTracker != null
			var Vector posRightHand = rightHand.getPosition()
			var Vector posLeftHand = leftHand.getPosition()
			
			var Vector dirHands = (posRightHand - posLeftHand).compSelect(true, false, true).normalize()
			var float rotHands = -DEMath.atan2(dirHands.getX(), dirHands.getZ())
			var Vector centerHands = (posRightHand + posLeftHand) * 0.5
			
			var Vector centerBody = centerHands.compSelect(true, false, true)
			var float turnBody = rotHands + 90
			
			setMatrixCalibrate(Matrix.newTranslation(-centerBody) * Matrix.newRotationY(-turnBody))
			
			useHeadTracker = findSlotInputDevice(slotHeadTracker) != null
		end
		
		// calculate calibration matrix transforming tracked positions into calibration
		// coordinate system. hmd looks forwards, hands are aligned along the X axis and
		// body is centered along X and Z direction. also apply scaling from actor
		// shoulder level to character shoulder level
		if not useHeadTracker
			var Vector posHMD = hmd.getPosition()
			var float turnHMD = hmd.getEulerAngles().getY()
			var Matrix hmdNorm = Matrix.newRT(Vector.new(0, turnHMD, 0), posHMD)
			
// 			var Vector posNeck = hmdNorm * Vector.new(0, -0.2, -0.1)
			var Vector posNeck = hmdNorm * Vector.new(0, -0.15, -0.1)
			
			var Vector centerBody = posNeck.compSelect(true, false, true)
			var float turnBody = turnHMD
			
			setMatrixCalibrate(Matrix.newTranslation(-centerBody) * Matrix.newRotationY(-turnBody))
		end
		
		// calibrate tracker slots
		assignInputDevices(actorProfile)
		
		pTrackerSlots.forEach(block CharacterTrackerSlot each
			each.calibrate(actorProfile, actor)
		end)
		
		// calibrate motion transfers using the calibrated trackers slots
		var Component component = createCalibrationComponent()
		
		pMotionTransfers.forEach(block MotionTransfer each
			each.calibrate(this, actorProfile, actor, component)
		end)
		
		// save calibration
		pIsCalibrated = true
		
		// calibration finished
		pProfile.notifyCalibrated(this)
	end
	
	/** Recalibrate character. */
	public func void recalibrate(BaseVRActor actor, ActorProfile actorProfile)
		if not pIsCalibrated or pElementClass == null
			return
		end
		
		GameApp.getApp().getConsole().addMessage("Recalibrate: " + getLogName())
		
		dropElementClass()
		
		pTrackerSlots.forEach(block CharacterTrackerSlot each
			each.recalibrate(actorProfile, actor)
		end)
		
		var Component component = createCalibrationComponent()
		pMotionTransfers.forEach(block MotionTransfer each
			each.calibrate(this, actorProfile, actor, component)
		end)
		
		pProfile.notifyCalibrated(this)
	end
	
	/** Assign input devices to closest slot with matching type. */
	public func void assignInputDevices(ActorProfile actorProfile)
		var BindingManager bindings = GameApp.getGameApp().getBindingManager()
		
		// clear all assignments
		pTrackerSlots.forEach(block CharacterTrackerSlot slot
			slot.setInputDeviceID("")
		end)
		
		// assign input devices
		var Console console = GameApp.getGameApp().getConsole()
		console.addMessage("Assign input devices: " + getLogName())
		
		bindings.forEachDevice(block InputDevice device
			select device.getType()
			case InputDeviceType.vrHMD, InputDeviceType.vrEyeTracker,\
			  	 InputDeviceType.vrLeftHand, InputDeviceType.vrRightHand,\
				 InputDeviceType.vrTracker
				var CharacterTrackerSlot slot = pTrackerSlots.bestMatching(\
					device.getType(), pMatrixCalibrate * device.getDevicePosePosition())
				
				if slot != null
					slot.setInputDeviceID(device.getID())
					console.addMessage("- {} ({}) {}: Assign to slot '{}'".format(\
						Array.newWith(device.getID(), device.getType().name(),\
							device.getDevicePosePosition(), slot.getName())))
					
				else
					console.addMessage("- {} ({}) {}: Not assigned".format(\
						Array.newWith(device.getID(), device.getType().name(),\
							device.getDevicePosePosition())))
				end
			end
		end)
	end
	
	/** Find closest slot to input devices and return input device found for slot. */
	public func InputDevice findSlotInputDevice(CharacterTrackerSlot slot)
		return GameApp.getGameApp().getBindingManager().findDevice(block InputDevice device
			select device.getType()
			case InputDeviceType.vrHMD, InputDeviceType.vrEyeTracker,\
				 InputDeviceType.vrLeftHand, InputDeviceType.vrRightHand,\
				 InputDeviceType.vrTracker
				return pTrackerSlots.bestMatching(device.getType(),\
					pMatrixCalibrate * device.getDevicePosePosition()) == slot
				
			else
				return false
			end
		end)
	end
	
	
	
	/** Prepare element class. */
	protected func void prepareElementClass()
		GameApp.getApp().getConsole().addMessage("Prepare element class: " + getLogName())
		pElementClass = MoCapActorClass.new("Character" + GameApp.getGameApp().getNextElementClassID().nextID())
		
		// apply appearance. requires for preloading
		pProfile.getAppearance().initElementClass(pElementClass)
	end
	
	/** Finish element class. */
	protected func void finishElementClass()
		if pElementClass == null
			return
		end
		
		GameApp.getApp().getConsole().addMessage("Finish element class: " + getLogName())
		var ECBCharacterConfiguration character = ECBCharacterConfiguration.new(pElementClass, this)
		
		var ECBMoCapAnimator mocapAnimator = ECBMoCapAnimator.new(pElementClass)
		mocapAnimator.getAnimation().setPath(pProfile.getAppearance().getPathAnimation())
		mocapAnimator.getAnimation().setAnimation(pProfile.getAppearance().getAnimation())
		
		var ECBRecordAnimation recordAnimation = ECBRecordAnimation.new(pElementClass, pElementClass.getComponent(), character)
		
		pAnimatorDefinition = AnimatorDefinition.new("")
		
		var ADRuleStateManipulator ruleInit = ADRuleStateManipulator.new()
		ruleInit.setName("Init")
		ruleInit.setEnablePosition(true)
		ruleInit.setEnableSize(true)
		pAnimatorDefinition.addRule(ruleInit)
		
		if not pMoveCalibrate.empty()
			var ADRuleAnimation rule = ADRuleAnimation.new()
			rule.setName("Init Move Calibrate")
			rule.setMoveName(pMoveCalibrate)
			pAnimatorDefinition.addRule(rule)
		end
		
		// add tracker slots. each slot adds two controllers (position, rotation)
		pTrackerSlots.forEach(block CharacterTrackerSlot each
			each.initElementClass(pElementClass, pAnimatorDefinition)
		end)
		
		// add motion capture behaviors. should this fail reset calibration and try again
		var ECComposeComponent ecccomponent = pElementClass.getComponent().getComponent()
		
		if ecccomponent.getRig().getRig() != null
			try
				var ModifiedRig modifiedRig = ModifiedRig.new(ecccomponent.getRig().getRig())
				
				pMotionTransfers.forEach(block MotionTransfer each
					each.initElementClass(this, pElementClass, modifiedRig)
				end)
				
				modifiedRig.buildModifiedRig()
				ecccomponent.getRig().setPath("")
				ecccomponent.getRig().setRig(modifiedRig.getModifiedRig())
				
				modifiedRig.getModifiedRig().save("_debug_modified.derig")
				
			catch Exception e
				GameApp.getGameApp().getConsole().addError("Init ElementClass failed. Reset clalibration", e)
				
				pMotionTransfers.forEach(block MotionTransfer each
					each.resetCalibration()
				end)
			end
		end
		
		// add behaviors to adjust VR Hand position to match tracker slot component.
		// this is used to make place the VR Hand where the character hands are after
		// applying motion transfers. this makes it less confusing for actors
		var CharacterTrackerSlot slot = pTrackerSlots.find(block CharacterTrackerSlot each
			return each.getInputDeviceType() == InputDeviceType.vrRightHand
		end)
		if slot != null and slot.getBehavior() != null
			ECBAdjustVRHandCollider.new(pElementClass, pElementClass.getVRRightHand(), slot.getBehavior(), "right")
		end
		
		slot = pTrackerSlots.find(block CharacterTrackerSlot each
			return each.getInputDeviceType() == InputDeviceType.vrLeftHand
		end)
		if slot != null and slot.getBehavior() != null
			ECBAdjustVRHandCollider.new(pElementClass, pElementClass.getVRLeftHand(), slot.getBehavior(), "left")
		end
		
		// add behavior moving from calibrate space to playspace. for this find the unique
		// root bones of all captured bones excluding the origin bone if present
		var Rig rig = pProfile.getAppearance().getRig()
		
		if rig != null and recordAnimation != null
			var Set rootBones = recordAnimation.getRootBones()
			if rootBones.getCount() > 0
				var Animator animator = Animator.new()
				var Vector translation = pMatrixCalibrateInv.getPosition()
				var Vector rotation = pMatrixCalibrateInv.getEulerAngles()
				
				var ARStateSnapshot ruleCurState = ARStateSnapshot.new()
				ruleCurState.setUseLastState(true)
				ruleCurState.setEnableSize(true)
				animator.addRule(ruleCurState)
				
				var ARBoneTransformator ruleMove = ARBoneTransformator.new()
				ruleMove.setEnablePosition(true)
				ruleMove.setEnableOrientation(true)
				ruleMove.setCoordinateFrame(ARBoneTransformatorCFrame.component)
				ruleMove.setMinimumTranslation(translation)
				ruleMove.setMaximumTranslation(translation)
				ruleMove.setMinimumRotation(rotation)
				ruleMove.setMaximumRotation(rotation)
				
				rootBones.forEach(block String bone
					ruleMove.addBone(bone)
				end)
				animator.addRule(ruleMove)
				
				rootBones.forEach(block String bone
					animator.addBone(bone)
				end)
				
				ECBMoveToPlayspace.new(pElementClass, animator)
			end
		end
		
		// add physical bones
		if rig != null
			var int i, count = rig.getBoneCount()
			for i = 0 to count
				if rig.boneGetDynamic(i)
					recordAnimation.addBone(rig.boneGetName(i))
				end
			end
		end
		
		// finalize motion capture animator
		var Animator animator = Animator.new()
		pAnimatorDefinition.buildAnimator(animator)
		mocapAnimator.setAnimator(animator)
		
		if debugAnimatorDefinition
			pAnimatorDefinition.debug(GameApp.getGameApp().getConsole())
		end
		
		// calibration space marker
		ECBACalibrationSpaceMarker.new(pElementClass, recordAnimation, pElementClass.getCollider())
		
		// hide while playing back but not recording
		ECBHideWhilePlaybackNotRecording.new(pElementClass, recordAnimation)
	end
	
	/**
	 * Create stub element. If no element class is present or it is still preloading
	 * null is returned.
	 */
	public func StubElement createStubElement()
		GameApp.getApp().getConsole().addMessage("Create stub element: " + getLogName())
		var StubElement stub
		if pElementClass != null and not isElementClassPreloading()
			stub = StubElement.new(getElementClass()) // no generated ID on purpose
			if pScaleMode == ScaleMode.character
				var float scaling = componentScaling()
				stub.setScaling(Vector.new(scaling, scaling, scaling))
			end
		end
		return stub
	end
	
	/** Log name. */
	public func String getLogName()
		return "'" + pProfile.getName() + "' -> '" + pName + "'"
	end
	
	
	
	/** Dispose old element class kept to avoid reloading resources. */
	protected func void disposeOldElementClass()
		if pOldElementClass != null
			pOldElementClass.dispose()
			pOldElementClass = null
		end
	end
	
	/** Create calibration component. */
	protected func Component createCalibrationComponent()
		var CharacterAppearance appearance = pProfile.getAppearance()
		
		var Animator animator = Animator.new()
		animator.setRig(appearance.getRig())
		animator.setAnimation(appearance.getAnimation())
		
		if pMoveCalibrate.empty()
			var ARStateManipulator rule = ARStateManipulator.new()
			rule.setEnablePosition(true)
			rule.setEnableSize(true)
			animator.addRule(rule)
			
		else
			var ARAnimation rule = ARAnimation.new()
			rule.setMoveName(pMoveCalibrate)
			animator.addRule(rule)
		end
		
		var AnimatorInstance ainst = AnimatorInstance.new()
		ainst.setAnimator(animator)
		
		var Component component = Component.new(null, null)
		component.setRig(appearance.getRig())
		
		ainst.setComponent(component)
		
		ainst.applyDirect()
		component.updateBones()
		
		return component
	end
	
	
	
	/** Notify listener character configuration has been changed. */
	public func void notifyChanged()
		pProfile.getConfigurations().notifyChanged(this)
	end
	
	/** Notify listener character configuration has been tweaked. */
	public func void notifyTweaked()
		pProfile.getConfigurations().notifyTweaked(this)
	end
	
	
	
	/** Compare character configuration for sorting. */
	public func int compare(Object obj)
		if obj castable CharacterConfiguration
			return pName.compare((obj cast CharacterConfiguration).pName)
		end
		return 0
	end
	
	/** String representation. Returns name. */
	public func String toString()
		return pName
	end
end
