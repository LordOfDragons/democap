/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Characters

pin Democap.Actors
pin Democap.Behaviors
pin Democap.Elements
pin Democap.MotionTransferSystem

pin Dragengine.Commands
pin Dragengine.Animators
pin Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.Preloading


/**
 * Character configuration. Stores tracker configuration and information about how tracker
 * data affects the character rig.
 */
class CharacterConfiguration
	/** Scale mode. */
	enum ScaleMode
		actor //<! Scale actor to match character
		character //<! Scale character to match actor
	end
	
	
	
	public static var bool debugAnimatorDefinition = false
	
	
	
	var CharacterProfile pProfile
	var String pName
	
	var ScaleMode pScaleMode
	var String pMoveCalibrate
	
	var String pCameraBone
	var Vector pCameraPosition
	var Vector pCameraRotation
	var Matrix pCameraMatrix
	
	var String pGrabBoneRight
	var String pGrabTipBoneRight
	var String pGrabBaseBoneRight
	var String pGrabBoneLeft
	var String pGrabTipBoneLeft
	var String pGrabBaseBoneLeft
	
	var bool pIsCalibrated
	var float pCalibrateScale
	var Matrix pMatrixCalibrate
	var Matrix pMatrixCalibrateInv
	
	var CharacterTrackerSlots pTrackerSlots
	var MotionTransfers pMotionTransfers
	
	var MoCapActorClass pElementClass
	var MoCapActorClass pOldElementClass
	var PreloadCounter pPreloadCounter
	var AnimatorDefinition pAnimatorDefinition
	
	
	
	/** Create character configuration. */
	func new(CharacterProfile profile, String name)
		if profile == null
			throw ENullPointer.new("profile")
		end
		
		pProfile = profile
		setName(name)
		
		pScaleMode = ScaleMode.actor
		pMoveCalibrate = ""
		
		pCameraBone = ""
		pCameraPosition = Vector.new()
		pCameraRotation = Vector.new()
		pCameraMatrix = Matrix.new()
		
		pGrabBoneRight = ""
		pGrabTipBoneRight = ""
		pGrabBaseBoneRight = ""
		pGrabBoneLeft = ""
		pGrabTipBoneLeft = ""
		pGrabBaseBoneLeft = ""
		
		pIsCalibrated = false
		pCalibrateScale = 1
		pMatrixCalibrate = Matrix.new()
		pMatrixCalibrateInv = Matrix.new()
		
		pTrackerSlots = CharacterTrackerSlots.new()
		pMotionTransfers = MotionTransfers.new()
	end
	
	/** Create copy of character configuration. */
	func new(CharacterProfile profile, String name, CharacterConfiguration configuration)
		if profile == null
			throw ENullPointer.new("profile")
		end
		
		pProfile = profile
		setName(name)
		
		pScaleMode = configuration.pScaleMode
		pMoveCalibrate = configuration.pMoveCalibrate
		
		pCameraBone = configuration.pCameraBone
		pCameraPosition = configuration.pCameraPosition
		pCameraRotation = configuration.pCameraRotation
		pCameraMatrix = configuration.pCameraMatrix
		
		pGrabBoneRight = configuration.pGrabBoneRight
		pGrabTipBoneRight = configuration.pGrabTipBoneRight
		pGrabBaseBoneRight = configuration.pGrabBaseBoneRight
		pGrabBoneLeft = configuration.pGrabBoneLeft
		pGrabTipBoneLeft = configuration.pGrabTipBoneLeft
		pGrabBaseBoneLeft = configuration.pGrabBaseBoneLeft
		
		pIsCalibrated = configuration.pIsCalibrated
		pCalibrateScale = configuration.pCalibrateScale
		pMatrixCalibrate = configuration.pMatrixCalibrate
		pMatrixCalibrateInv = configuration.pMatrixCalibrateInv
		
		pTrackerSlots = CharacterTrackerSlots.new()
		configuration.pTrackerSlots.forEach(block CharacterTrackerSlot each
			pTrackerSlots.add(CharacterTrackerSlot.new(this, each))
		end)
		
		pMotionTransfers = MotionTransfers.new()
		configuration.pMotionTransfers.forEach(block MotionTransfer each
			pMotionTransfers.add(each.createCopy())
		end)
	end
	
	/** Dispose of character profile. */
	func void dispose()
		dropElementClass()
		disposeOldElementClass()
		
		if pTrackerSlots != null
			pTrackerSlots.forEach(block CharacterTrackerSlot each
				each.dispose()
			end)
		end
		
		pProfile = null
	end
	
	
	
	/** Character profile owning this configuration. */
	func CharacterProfile getProfile()
		return pProfile
	end
	
	/** Name of character profile. */
	func String getName()
		return pName
	end
	
	/** Set name of character profile. */
	func void setName(String name)
		if name == null
			throw ENullPointer.new("name")
		end
		if name.empty()
			throw EInvalidParam.new("name is empty string")
		end
		
		pName = name
	end
	
	/** Scale mode. */
	func ScaleMode getScaleMode()
		return pScaleMode
	end
	
	/** Set scale mode. */
	func void setScaleMode(ScaleMode scaleMode)
		if scaleMode == null
			throw ENullPointer.new("scaleMode")
		end
		pScaleMode = scaleMode
	end
	
	/** Name of animation move to use for calibration or empty string to use none. */
	func String getMoveCalibrate()
		return pMoveCalibrate
	end
	
	/** Set name of animation move to use for calibration or empty string to use none. */
	func void setMoveCalibrate(String animation)
		if animation == null
			throw ENullPointer.new("animation")
		end
		
		pMoveCalibrate = animation
	end
	
	
	
	/** Bone to attach HMD to if calibrated or empty string to attach to character origin. */
	func String getCameraBone()
		return pCameraBone
	end
	
	/** Set bone to attach HMD to if calibrated or empty string to attach to character origin. */
	func void setCameraBone(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pCameraBone = bone
	end
	
	/** Camera position relative to bone. */
	func Vector getCameraPosition()
		return pCameraPosition
	end
	
	/** Set camera position relative to bone. */
	func void setCameraPosition(Vector position)
		if position == null
			throw ENullPointer.new("position")
		end
		pCameraPosition = position
		pCameraMatrix = Matrix.newRT(pCameraRotation, pCameraPosition)
	end
	
	/** Rotation of camera relative to bone. */
	func Vector getCameraRotation()
		return pCameraRotation
	end
	
	/** Set rotation of camera relative to bone. */
	func void setCameraRotation(Vector rotation)
		if rotation == null
			throw ENullPointer.new("rotation")
		end
		pCameraRotation = rotation
		pCameraMatrix = Matrix.newRT(pCameraRotation, pCameraPosition)
	end
	
	/** Camera matrix relative to bone. */
	func Matrix getCameraMatrix()
		return pCameraMatrix
	end
	
	
	
	/** Bone to attach objects grabbed with the right hand. */
	func String getGrabBoneRight()
		return pGrabBoneRight
	end
	
	/** Set bone to attach objects grabbed with the right hand. */
	func void setGrabBoneRight(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pGrabBoneRight = bone
	end
	
	/** IK tip bone for grabbing objects with the right hand. */
	func String getGrabTipBoneRight()
		return pGrabTipBoneRight
	end
	
	/** IK tip bone for grabbing objects with the right hand. */
	func void setGrabTipBoneRight(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pGrabTipBoneRight = bone
	end
	
	/** IK base bone for grabbing objects with the right hand. */
	func String getGrabBaseBoneRight()
		return pGrabBaseBoneRight
	end
	
	/** IK base bone for grabbing objects with the right hand. */
	func void setGrabBaseBoneRight(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pGrabBaseBoneRight = bone
	end
	
	/** Bone to attach objects grabbed with the left hand. */
	func String getGrabBoneLeft()
		return pGrabBoneLeft
	end
	
	/** Set bone to attach objects grabbed with the left hand. */
	func void setGrabBoneLeft(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pGrabBoneLeft = bone
	end
	
	/** IK tip bone for grabbing objects with the left hand. */
	func String getGrabTipBoneLeft()
		return pGrabTipBoneLeft
	end
	
	/** IK tip bone for grabbing objects with the left hand. */
	func void setGrabTipBoneLeft(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pGrabTipBoneLeft = bone
	end
	
	/** IK base bone for grabbing objectgs with the left hand. */
	func String getGrabBaseBoneLeft()
		return pGrabBaseBoneLeft
	end
	
	/** IK base bone for grabbing objects with the left hand. */
	func void setGrabBaseBoneLeft(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pGrabBaseBoneLeft = bone
	end
	
	
	
	/** Tracker slots. */
	func CharacterTrackerSlots getTrackerSlots()
		return pTrackerSlots
	end
	
	/** Motion transfers. */
	func MotionTransfers getMotionTransfers()
		return pMotionTransfers
	end
	
	
	
	/** Element class is present. */
	func bool hasElementClass()
		return pElementClass != null
	end
	
	/**
	 * Element class creating and preloading it if required. Returned element class can be
	 * still preloading so check isElementClassPreloading() to check if it is ready to be used.
	 */
	func MoCapActorClass getElementClass()
		if pElementClass == null
			if not pIsCalibrated
				resetCalibration(null, false) // avoids nasty problems
			end
			
			prepareElementClass()
			pPreloadCounter = PreloadCounter.new()
			pElementClass.preloadResources(pPreloadCounter)
		end
		return pElementClass
	end
	
	/** Element class is preloading. Always false until getElementClass() is called. */
	func bool isElementClassPreloading()
		if pPreloadCounter == null
			return false
		end
		
		if pPreloadCounter.isNotZero()
			return true
		end
		pPreloadCounter = null
		
		// this looks strange to call loading a second time but the preloading of the element
		// class only preloads the resources into the element class but the CharacterAppearance
		// is still missing them. since they are loaded now calling synchronous loading finished
		// immediately and CharacterAppearance is valid
		pProfile.loadResourcesSync()
		
		// finish the element class. can be done only after the resources have been preloaded.
		// this adds all the motion capture behaviors
		finishElementClass()
		
		return false
	end
	
	/** Drop element class. */
	func void dropElementClass()
		if pElementClass == null
			return
		end
		
		GameApp.getApp().getConsole().addMessage("Drop element class: " + getLogName())
		
		disposeOldElementClass()
		pOldElementClass = pElementClass
		pElementClass = null
		pPreloadCounter = null
	end
	
	/** Animator definition used while creating element class or null. */
	func AnimatorDefinition getAnimatorDefinition()
		return pAnimatorDefinition
	end
	
	
	
	/** Character is calibrated. */
	func bool isCalibrated()
		return pIsCalibrated
	end
	
	/** Calibrated scale. */
	func float getCalibrateScale()
		return pCalibrateScale
	end
	
	/** Set calibrated scale. */
	func void setCalibrateScale(float scale)
		pCalibrateScale = DEMath.max(scale, 0.001)
	end
	
	/** Calibration matrix. */
	func Matrix getMatrixCalibrate()
		return pMatrixCalibrate
	end
	
	/** Inverse calibration matrix. */
	func Matrix getMatrixCalibrateInverse()
		return pMatrixCalibrateInv
	end
	
	/** Set calibration matrix. */
	func void setMatrixCalibrate(Matrix matrix)
		pMatrixCalibrate = matrix
		pMatrixCalibrateInv = matrix.getInverse()
	end
	
	
	
	/** Convert actor distance to character distance. */
	func float actorToCharacter(float distance)
		return distance * pCalibrateScale
	end
	
	/** Convert actor position to character position. */
	func Vector actorToCharacter(Vector position)
		return position * pCalibrateScale
	end
	
	/** Convert actor matrix to character matrix retaining rotation and scale. */
	func Matrix actorToCharacter(Matrix matrix)
		return matrix.getRotation() * Matrix.newTranslation(actorToCharacter(matrix.getPosition()))
	end
	
	/** Convert character distance to actor distance. */
	func float characterToActor(float distance)
		return distance / pCalibrateScale
	end
	
	/** Convert character position to actor position. */
	func Vector characterToActor(Vector position)
		return position / pCalibrateScale
	end
	
	/** Convert character matrix to actor matrix retaining rotation and scale. */
	func Matrix characterToActor(Matrix matrix)
		return matrix.getRotation() * Matrix.newTranslation(characterToActor(matrix.getPosition()))
	end
	
	
	
	/** Convert component distance to character distance. */
	func float componentToCharacter(float distance)
		return distance * pProfile.getScale()
	end
	
	/** Convert component position to character position. */
	func Vector componentToCharacter(Vector position)
		return position * pProfile.getScale()
	end
	
	/** Convert component matrix to character matrix retaining rotation and scale. */
	func Matrix componentToCharacter(Matrix matrix)
		return matrix.getRotation() * Matrix.newTranslation(componentToCharacter(matrix.getPosition()))
	end
	
	/** Convert character distance to component distance. */
	func float characterToComponent(float distance)
		return distance / pProfile.getScale()
	end
	
	/** Convert character position to component position. */
	func Vector characterToComponent(Vector position)
		return position / pProfile.getScale()
	end
	
	/** Convert character matrix to component matrix retaining rotation and scale. */
	func Matrix characterToComponent(Matrix matrix)
		return matrix.getRotation() * Matrix.newTranslation(characterToComponent(matrix.getPosition()))
	end
	
	
	
	/** Convert component distance to actor distance. */
	func float componentToActor(float distance)
		return distance * pProfile.getScale() / pCalibrateScale
	end
	
	/** Convert component position to actor position. */
	func Vector componentToActor(Vector position)
		return position * ( pProfile.getScale() / pCalibrateScale )
	end
	
	/** Convert component matrix to actor matrix retaining rotation and scale. */
	func Matrix componentToActor(Matrix matrix)
		return matrix.getRotation() * Matrix.newTranslation(componentToActor(matrix.getPosition()))
	end
	
	/** Convert actor distance to component distance. */
	func float actorToComponent(float distance)
		return distance * pCalibrateScale / pProfile.getScale()
	end
	
	/** Convert actor position to component position. */
	func Vector actorToComponent(Vector position)
		return position * ( pCalibrateScale / pProfile.getScale() )
	end
	
	/** Convert actor matrix to component matrix retaining rotation and scale. */
	func Matrix actorToComponent(Matrix matrix)
		return matrix.getRotation() * Matrix.newTranslation(actorToComponent(matrix.getPosition()))
	end
	
	
	
	/** Convert character distance to world distance. */
	func float characterToWorld(float distance)
		return pScaleMode == CharacterConfiguration.ScaleMode.actor if distance else characterToActor(distance)
	end
	
	/** Convert character position to world position. */
	func Vector characterToWorld(Vector position)
		return pScaleMode == CharacterConfiguration.ScaleMode.actor if position else characterToActor(position)
	end
	
	/** Convert character matrix to world matrix retaining rotation and scale. */
	func Matrix characterToWorld(Matrix matrix)
		return pScaleMode == CharacterConfiguration.ScaleMode.actor if matrix else characterToActor(matrix)
	end
	
	/** Convert world distance to character distance. */
	func float worldToCharacter(float distance)
		return pScaleMode == CharacterConfiguration.ScaleMode.actor if distance else actorToCharacter(distance)
	end
	
	/** Convert character position to actor position. */
	func Vector worldToCharacter(Vector position)
		return pScaleMode == CharacterConfiguration.ScaleMode.actor if position else actorToCharacter(position)
	end
	
	/** Convert character matrix to actor matrix retaining rotation and scale. */
	func Matrix worldToCharacter(Matrix matrix)
		return pScaleMode == CharacterConfiguration.ScaleMode.actor if matrix else actorToCharacter(matrix)
	end
	
	/** World scaling. */
	func float worldScaling()
		return pScaleMode == CharacterConfiguration.ScaleMode.actor if pCalibrateScale else 1
	end
	
	/** Component scaling. */
	func float componentScaling()
		if pScaleMode == ScaleMode.actor
			return pProfile.getScale()
			
		else
			return 1.0 / DEMath.max(pProfile.getScale() * pCalibrateScale, 0.001)
		end
	end
	
	
	
	/** Reset calibration. */
	func void resetCalibration(BaseVRActor actor, bool calibrating)
		GameApp.getApp().getConsole().addMessage("Reset calibration (" + calibrating + "): " + getLogName())
		
		if actor != null
			actor.getActorAnimated().setAnimator(null)
			
			var Component component = actor.getComponent().getComponent()
			var int i, boneCount = component.getBoneCount()
			for i = 0 to boneCount
				component.boneSetPosition(i, Vector.new())
				component.boneSetRotation(i, Quaternion.new())
			end
		end
		
		dropElementClass()
		
		pIsCalibrated = false
		pCalibrateScale = 1
		pMatrixCalibrate = Matrix.new()
		pMatrixCalibrateInv = Matrix.new()
		
		pTrackerSlots.forEach(block CharacterTrackerSlot each
			each.resetCalibration()
		end)
		
		pMotionTransfers.forEach(block MotionTransfer each
			each.resetCalibration()
		end)
		
		pProfile.notifyReset(this, calibrating)
	end
	
	/** Mark character is calibrated. */
	func void markCalibrated()
		pIsCalibrated = true
	end
	
	/** Begin calibration. */
	func void beginCalibration(BaseVRActor actor, ActorProfile actorProfile)
		GameApp.getApp().getConsole().addMessage("Begin calibration: " + getLogName())
		
		// we have to do a quick calibration up front to be able to assign input devices.
		// after the calibation finishes we do the real calibration with the collected data
		var PlayspaceCalibrator calibrator = PlayspaceCalibrator.new(this, actorProfile, actor)
		if calibrator.calibrate()
			calibrator.logParams()
			
			// assignInputDevices requires pMatrixCalibrate to be set
			setCalibrateScale(calibrator.getScale())
			setMatrixCalibrate(calibrator.getCalibrateMatrix())
			
			assignInputDevices(actorProfile)
		end
		
		// now the tracker slots can begin calibration. this requires assigned input devices
		pTrackerSlots.forEach(block CharacterTrackerSlot each
			each.beginCalibration(actor)
		end)
	end
	
	/** Update calibration. */
	func void updateCalibration()
		pTrackerSlots.forEach(block CharacterTrackerSlot each
			each.updateCalibration()
		end)
	end
	
	/** Calibrate character. */
	func void calibrate(BaseVRActor actor, ActorProfile actorProfile)
		GameApp.getApp().getConsole().addMessage("Finish calibration: " + getLogName())
		
		// ensure resources are loaded. if the element class exists already the resources
		// are already preloaded and doing it synchronously again is fast. furthermore the
		// resources are not unloaded if inside the element class but not yet inside
		// CharacterAppearance
		pProfile.loadResourcesSync()
		
		// drop element class. we need to create a new one
		dropElementClass()
		
		// calibrate playspace
		var PlayspaceCalibrator calibrator = PlayspaceCalibrator.new(this, actorProfile, actor)
		
		if not calibrator.calibrate()
			resetCalibration(actor, true)
			return
		end
		
		calibrator.logParams()
		setCalibrateScale(calibrator.getScale())
		setMatrixCalibrate(calibrator.getCalibrateMatrix())
		
		var float compScale = componentScaling()
		actor.setScaling(Vector.new(compScale, compScale, compScale))
		
		// calibrate tracker slots. we did assign devices during begin calibration
		pTrackerSlots.forEach(block CharacterTrackerSlot each
			each.calibrate(actorProfile, actor)
		end)
		
		// calibrate motion transfers using the calibrated trackers slots
		var Component component = createCalibrationComponent()
		
		pMotionTransfers.forEach(block MotionTransfer each
			each.calibrate(this, actorProfile, actor, component)
		end)
		
		// store estimated floor offset
		GameApp.getGameApp().getWorldSpawnCharacter().getEstimatedFloorOffset().\
			setText("{:.3f}".format(Array.newWith(calibrator.getFloorOffset())))
		
		// save calibration
		pIsCalibrated = true
		
		// calibration finished
		pProfile.notifyCalibrated(this)
	end
	
	/** Recalibrate character. */
	func void recalibrate(BaseVRActor actor, ActorProfile actorProfile)
		if not pIsCalibrated or pElementClass == null
			return
		end
		
		GameApp.getApp().getConsole().addMessage("Recalibrate: " + getLogName())
		
		dropElementClass()
		
		pTrackerSlots.forEach(block CharacterTrackerSlot each
			each.recalibrate(actorProfile, actor)
		end)
		
		var Component component = createCalibrationComponent()
		pMotionTransfers.forEach(block MotionTransfer each
			each.calibrate(this, actorProfile, actor, component)
		end)
		
		pProfile.notifyCalibrated(this)
	end
	
	/** Find closest slot to input devices and return input device found for slot. */
	func InputDevice findSlotInputDevice(CharacterTrackerSlot slot)
		var Vector offset = GameApp.getGameApp().getSessionSettings().getFloorOffsetVector()
		
		return GameApp.getGameApp().getBindingManager().findDevice(block InputDevice device
			select device.getType()
			case InputDeviceType.vrHMD, InputDeviceType.vrEyeTracker,\
				 InputDeviceType.vrLeftHand, InputDeviceType.vrRightHand,\
				 InputDeviceType.vrTracker
				return pTrackerSlots.bestMatching(device.getType(),\
					pMatrixCalibrate * device.getDevicePosePosition() + offset) == slot
				
			else
				return false
			end
		end)
	end
	
	
	
	/** Assign input devices to closest slot with matching type. */
	protected func void assignInputDevices(ActorProfile actorProfile)
		var Vector offset = GameApp.getGameApp().getSessionSettings().getFloorOffsetVector()
		var BindingManager bindings = GameApp.getGameApp().getBindingManager()
		var Console console = GameApp.getGameApp().getConsole()
		
		// clear all assignments
		pTrackerSlots.forEach(block CharacterTrackerSlot slot
			slot.setInputDeviceID("")
			slot.getInputDeviceCandidates().removeAll()
		end)
		
		// determine input device candidates
		console.addMessage("Determine input devices assignment candidates: " + getLogName())
		bindings.forEachDevice(block InputDevice device
			select device.getType()
			case InputDeviceType.vrHMD, InputDeviceType.vrEyeTracker,\
					InputDeviceType.vrLeftHand, InputDeviceType.vrRightHand,\
					InputDeviceType.vrTracker
				
				var Vector position = pMatrixCalibrate * device.getDevicePosePosition() + offset
				var CharacterTrackerSlot slot = pTrackerSlots.bestMatching(device.getType(), position)
				
				if slot != null
					slot.getInputDeviceCandidates().add(CharacterTrackerSlot.InputDeviceCandidate.new(\
						device, position, (position - slot.getPosition()).getLength()))
					console.addMessage("- {} ({}) {}: Candidate for slot '{}'".format(\
						Array.newWith(device.getID(), device.getType().name(),\
							device.getDevicePosePosition() + offset, slot.getName())))
					
				else
					console.addMessage("- {} ({}) {}: No candidate slot found".format(\
						Array.newWith(device.getID(), device.getType().name(),\
							device.getDevicePosePosition() + offset)))
				end
			end
		end)
		
		// log slot candidates
		console.addMessage("Slot candidates: " + getLogName())
		pTrackerSlots.forEach(block CharacterTrackerSlot slot
			console.addMessage("- {}: {}".format(Array.newWith(slot.getName(),\
				slot.getInputDeviceCandidates().map(block CharacterTrackerSlot.InputDeviceCandidate candidate
					return "{}({})".format(Array.newWith(candidate.getDevice().getID(), candidate.getDistance()))
				end))))
		end)
		
		// assign input devices
		console.addMessage("Assign input devices: " + getLogName())
		pTrackerSlots.forEach(block CharacterTrackerSlot slot
			if slot.getInputDeviceCandidates().getCount() == 0
				console.addMessage("- {}: No candidate".format(Array.newWith(slot.getName())))
				
			else
				var CharacterTrackerSlot.InputDeviceCandidate candidate =\
					slot.getInputDeviceCandidates().sorted().getAt(0) cast CharacterTrackerSlot.InputDeviceCandidate
				
				slot.setInputDeviceID(candidate.getDevice().getID())
				console.addMessage("- {}: Assign candidate {} ({}) {}".format(\
					Array.newWith(slot.getName(), candidate.getDevice().getID(),\
						candidate.getDevice().getType().name(),\
						candidate.getDevice().getDevicePosePosition() + offset)))
			end
		end)
	end
	
	/** Prepare element class. */
	protected func void prepareElementClass()
		pElementClass = MoCapActorClass.new("Character" + GameApp.getGameApp().getNextElementClassID().nextID())
		
		// apply appearance. required for preloading
		pProfile.getAppearance().initElementClass(pElementClass)
	end
	
	/** Finish element class. */
	protected func void finishElementClass()
		if pElementClass == null
			return
		end
		
		GameApp.getApp().getConsole().addMessage("Finish element class: " + getLogName())
		var ECBCharacterConfiguration character = ECBCharacterConfiguration.new(pElementClass, this)
		
		var ECBMoCapAnimator mocapAnimator = ECBMoCapAnimator.new(pElementClass)
		mocapAnimator.getAnimation().setPath(pProfile.getAppearance().getPathAnimation())
		mocapAnimator.getAnimation().setAnimation(pProfile.getAppearance().getAnimation())
		
		var ECBRecordAnimation recordAnimation = ECBRecordAnimation.new(pElementClass, pElementClass.getComponent(), character)
		
		pAnimatorDefinition = AnimatorDefinition.new("")
		pAnimatorDefinition.setAnimation(pProfile.getAppearance().getAnimation())
		
		var ADRuleStateManipulator ruleInit = ADRuleStateManipulator.new()
		ruleInit.setName("Init")
		ruleInit.setEnablePosition(true)
		ruleInit.setEnableSize(true)
		pAnimatorDefinition.addRule(ruleInit)
		
		if not pMoveCalibrate.empty()
			var ADRuleAnimation rule = ADRuleAnimation.new()
			rule.setName("Init Move Calibrate")
			rule.setMoveName(pMoveCalibrate)
			pAnimatorDefinition.addRule(rule)
		end
		
		// add tracker slots. each slot adds two controllers (position, rotation)
		pTrackerSlots.forEach(block CharacterTrackerSlot each
			each.initElementClass(pElementClass, pAnimatorDefinition)
		end)
		
		// add motion capture behaviors. should this fail reset calibration and try again
		var ECComposeComponent ecccomponent = pElementClass.getComponent().getComponent()
		
		if ecccomponent.getRig().getRig() != null
			try
				var ModifiedRig modifiedRig = ModifiedRig.new(ecccomponent.getRig().getRig())
				
				pMotionTransfers.forEach(block MotionTransfer each
					each.initElementClass(this, pElementClass, modifiedRig)
				end)
				
				modifiedRig.buildModifiedRig()
				ecccomponent.getRig().setPath("")
				ecccomponent.getRig().setRig(modifiedRig.getModifiedRig())
				
				modifiedRig.getModifiedRig().save("_debug_modified.derig")
				
			catch Exception e
				GameApp.getGameApp().getConsole().addError("Init ElementClass failed. Reset clalibration", e)
				
				pMotionTransfers.forEach(block MotionTransfer each
					each.resetCalibration()
				end)
			end
		end
		
		// add behaviors to adjust VR Hand position to match tracker slot component.
		// this is used to make place the VR Hand where the character hands are after
		// applying motion transfers. this makes it less confusing for actors
		var CharacterTrackerSlot slot = pTrackerSlots.find(block CharacterTrackerSlot each
			return each.getInputDeviceType() == InputDeviceType.vrRightHand
		end)
		if slot != null and slot.getBehavior() != null
			ECBAdjustVRHandCollider.new(pElementClass, pElementClass.getVRRightHand(), slot.getBehavior(), "right")
		end
		
		slot = pTrackerSlots.find(block CharacterTrackerSlot each
			return each.getInputDeviceType() == InputDeviceType.vrLeftHand
		end)
		if slot != null and slot.getBehavior() != null
			ECBAdjustVRHandCollider.new(pElementClass, pElementClass.getVRLeftHand(), slot.getBehavior(), "left")
		end
		
		// add behavior moving from calibrate space to playspace. for this find the unique
		// root bones of all captured bones excluding the origin bone if present
		var Rig rig = pProfile.getAppearance().getRig()
		
		if rig != null and recordAnimation != null
			var Set rootBones = recordAnimation.getRootBones()
			if rootBones.getCount() > 0
				var Animator animator = Animator.new()
				var Vector translation = pMatrixCalibrateInv.getPosition()
				var Vector rotation = pMatrixCalibrateInv.getEulerAngles()
				
				var ARStateSnapshot ruleCurState = ARStateSnapshot.new()
				ruleCurState.setUseLastState(true)
				ruleCurState.setEnableSize(true)
				animator.addRule(ruleCurState)
				
				var ARBoneTransformator ruleMove = ARBoneTransformator.new()
				ruleMove.setEnablePosition(true)
				ruleMove.setEnableOrientation(true)
				ruleMove.setCoordinateFrame(ARBoneTransformatorCFrame.component)
				ruleMove.setMinimumTranslation(translation)
				ruleMove.setMaximumTranslation(translation)
				ruleMove.setMinimumRotation(rotation)
				ruleMove.setMaximumRotation(rotation)
				
				rootBones.forEach(block String bone
					ruleMove.addBone(bone)
				end)
				animator.addRule(ruleMove)
				
				rootBones.forEach(block String bone
					animator.addBone(bone)
				end)
				
				ECBMoveToPlayspace.new(pElementClass, animator)
			end
		end
		
		// add physical bones
		if rig != null
			var int i, count = rig.getBoneCount()
			for i = 0 to count
				if rig.boneGetDynamic(i)
					recordAnimation.addBone(rig.boneGetName(i))
				end
			end
		end
		
		// finalize motion capture animator
		var Animator animator = Animator.new()
		pAnimatorDefinition.buildAnimator(animator)
		mocapAnimator.setAnimator(animator)
		
		if debugAnimatorDefinition
			pAnimatorDefinition.debug(GameApp.getGameApp().getConsole())
		end
		
		// calibration space marker
		ECBACalibrationSpaceMarker.new(pElementClass, recordAnimation, pElementClass.getCollider())
		
		// hide while playing back but not recording
		ECBHideWhilePlaybackNotRecording.new(pElementClass, recordAnimation)
		
		// create reset physics animator
		var Animator resetPhysicsAnimator = Animator.new()
		
		var ARStateManipulator ruleRPInit = ARStateManipulator.new()
		ruleRPInit.setEnablePosition(true)
		ruleRPInit.setEnableSize(true)
		resetPhysicsAnimator.addRule(ruleRPInit)
		
		if not pMoveCalibrate.empty()
			var ARAnimation rule = ARAnimation.new()
			rule.setMoveName(pMoveCalibrate)
			rule.setEnableSize(true)
			resetPhysicsAnimator.addRule(rule)
		end
		
		mocapAnimator.setResetPhysicsAnimator(resetPhysicsAnimator)
		
		// debug stuff
		ECBDebugBones.new(pElementClass)
	end
	
	/**
	 * Create stub element. If no element class is present or it is still preloading
	 * null is returned.
	 */
	func StubElement createStubElement()
		GameApp.getApp().getConsole().addMessage("Create stub element: " + getLogName())
		var StubElement stub
		if pElementClass != null and not isElementClassPreloading()
			stub = StubElement.new(getElementClass()) // no generated ID on purpose
			if pScaleMode == ScaleMode.character
				var float scaling = componentScaling()
				stub.setScaling(Vector.new(scaling, scaling, scaling))
			end
		end
		return stub
	end
	
	/** Log name. */
	func String getLogName()
		return "'" + pProfile.getName() + "' -> '" + pName + "'"
	end
	
	
	
	/** Dispose old element class kept to avoid reloading resources. */
	protected func void disposeOldElementClass()
		if pOldElementClass != null
			pOldElementClass.dispose()
			pOldElementClass = null
		end
	end
	
	/** Create calibration component. */
	protected func Component createCalibrationComponent()
		var CharacterAppearance appearance = pProfile.getAppearance()
		
		var Animator animator = Animator.new()
		animator.setRig(appearance.getRig())
		animator.setAnimation(appearance.getAnimation())
		
		if pMoveCalibrate.empty()
			var ARStateManipulator rule = ARStateManipulator.new()
			rule.setEnablePosition(true)
			rule.setEnableSize(true)
			animator.addRule(rule)
			
		else
			var ARAnimation rule = ARAnimation.new()
			rule.setMoveName(pMoveCalibrate)
			animator.addRule(rule)
		end
		
		var AnimatorInstance ainst = AnimatorInstance.new()
		ainst.setAnimator(animator)
		
		var Component component = Component.new(null, null)
		component.setRig(appearance.getRig())
		
		ainst.setComponent(component)
		
		ainst.applyDirect()
		component.updateBones()
		
		return component
	end
	
	
	
	/** Notify listener character configuration has been changed. */
	func void notifyChanged()
		pProfile.getConfigurations().notifyChanged(this)
	end
	
	/** Notify listener character configuration has been tweaked. */
	func void notifyTweaked()
		pProfile.getConfigurations().notifyTweaked(this)
	end
	
	
	
	/** Compare character configuration for sorting. */
	func int compare(Object obj)
		if obj castable CharacterConfiguration
			return pName.compare((obj cast CharacterConfiguration).pName)
		end
		return 0
	end
	
	/** String representation. Returns name. */
	func String toString()
		return pName
	end
end
