/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Characters

pin Dragengine.Utils


/**
 * List of character configurations.
 */
class CharacterConfigurations
	var Array pConfigurations
	var Array pListeners
	
	
	
	/** Create configuration list. */
	func new()
		pListeners = Array.new()
		pConfigurations = Array.new()
	end
	
	/** Dispose of list. */
	func void dispose()
		pListeners.removeAll()
		removeAll()
	end
	
	
	
	/** Count of configurations. */
	func int getCount()
		return pConfigurations.getCount()
	end
	
	/** Named configuration is present. */
	func bool hasNamed(String name)
		return getNamed(name) != null
	end
	
	/** Configuration at index. */
	func CharacterConfiguration getAt(int index)
		return pConfigurations.getAt(index) cast CharacterConfiguration
	end
	
	/** Named configuration or null if absent. */
	func CharacterConfiguration getNamed(String name)
		return pConfigurations.find(block CharacterConfiguration each
			return each.getName().compareNoCase(name) == 0
		end) cast CharacterConfiguration
	end
	
	/** Add configuration. Throws exception if named configuration is present. */
	func void add(CharacterConfiguration configuration)
		if hasNamed(configuration.getName())
			throw EInvalidParam.new("named configuration is present: " + configuration.getName())
		end
		pConfigurations.add(configuration)
		
		pListeners.forEach(block CharacterConfigurationsListener each
			each.configurationAdded(this, configuration)
		end)
	end
	
	/** Remove configuration. Throws exception if named configuration is absent. */
	func void remove(CharacterConfiguration configuration)
		pConfigurations.remove(configuration)
		
		pListeners.forEach(block CharacterConfigurationsListener each
			each.configurationRemoved(this, configuration)
		end)
		
		configuration.dispose()
	end
	
	/** Remove all configurations. */
	func void removeAll()
		pConfigurations.forEach(block CharacterConfiguration each
			each.dispose()
		end)
		pConfigurations.removeAll()
		
		pListeners.forEach(block CharacterConfigurationsListener each
			each.allConfigurationsRemoved(this)
		end)
	end
	
	/**
	 * Visit configurations with block. Block receives as only argument CharacterConfiguration.
	 */
	func void forEach(Block ablock)
		pConfigurations.forEach(ablock)
	end
	
	/**
	 * Collect configurations with block. Block receives as only argument CharacterConfiguration and
	 * has to return true to include or false to exclude configuration.
	 * Returns Array of CharacterConfiguration.
	 */
	func Array collect(Block ablock)
		return pConfigurations.collect(ablock)
	end
	
	/** List of configurations as Array of CharacterConfiguration. */
	func Array toArray()
		return Array.new(pConfigurations)
	end
	
	/** Notify listener character configuration has been changed. */
	func void notifyChanged(CharacterConfiguration configuration)
		pListeners.forEach(block CharacterConfigurationsListener each
			each.configurationChanged(this, configuration)
		end)
	end
	
	/** Notify listener character configuration has been tweaked. */
	func void notifyTweaked(CharacterConfiguration configuration)
		pListeners.forEach(block CharacterConfigurationsListener each
			each.configurationTweaked(this, configuration)
		end)
	end
	
	
	
	/** Add listener. */
	func void addListener(CharacterConfigurationsListener listener)
		if listener == null
			throw ENullPointer.new("listener")
		end
		pListeners.add(listener)
	end
	
	/** Remove listener. */
	func void removeListener(CharacterConfigurationsListener listener)
		pListeners.remove(listener)
	end
end
