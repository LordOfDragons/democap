/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Characters

pin Democap.Actors

pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * List of character tracker slots.
 */
class CharacterTrackerSlots
	private var Array pSlots
	
	
	
	/** Create tracker slot list. */
	public func new()
		pSlots = Array.new()
	end
	
	/** Dispose of list. */
	public func void dispose()
		removeAll()
	end
	
	
	
	/** Count of tracker slots. */
	public func int getCount()
		return pSlots.getCount()
	end
	
	/** Named tracker slot is present. */
	public func bool hasNamed(String name)
		return getNamed(name) != null
	end
	
	/** Tracker slot at index or null if absent. */
	public func CharacterTrackerSlot getAt(int index)
		return pSlots.getAt(index) cast CharacterTrackerSlot
	end
	
	/** Named tracker slot or null if absent. */
	public func CharacterTrackerSlot getNamed(String name)
		return pSlots.find(block CharacterTrackerSlot each
			return each.getName().compareNoCase(name) == 0
		end) cast CharacterTrackerSlot
	end
	
	/** First tracker slot matching type or null. */
	public func CharacterTrackerSlot firstWithType(CharacterTrackerSlot.Type type)
		return pSlots.find(block CharacterTrackerSlot each
			return each.getType() == type
		end) cast CharacterTrackerSlot
	end
	
	/** First tracker slot with assigned device matching type or null. */
	public func CharacterTrackerSlot firstAttachedWithType(CharacterTrackerSlot.Type type)
		return pSlots.find(block CharacterTrackerSlot each
			return each.getType() == type and each.isDeviceAttached()
		end) cast CharacterTrackerSlot
	end
	
	/** Add tracker slot. Throws exception if named tracker slot is present. */
	public func void add(CharacterTrackerSlot slot)
		if hasNamed(slot.getName())
			throw EInvalidParam.new("named tracker slot is present: " + slot.getName())
		end
		pSlots.add(slot)
	end
	
	/** Remove tracker slot. Throws exception if named tracker slot is absent. */
	public func void remove(CharacterTrackerSlot slot)
		pSlots.remove(slot)
	end
	
	/** Remove all tracker slots. */
	public func void removeAll()
		pSlots.removeAll()
	end
	
	/**
	 * Visit tracker slots with block. Block receives as only argument CharacterTrackerSlot.
	 */
	public func void forEach(Block ablock)
		pSlots.forEach(ablock)
	end
	
	/**
	 * Find tracker slot with block. Block receives as only argument CharacterTrackerSlot
	 * and has to return true if the matching slot is found.
	 */
	public func CharacterTrackerSlot find(Block ablock)
		return pSlots.find(ablock) cast CharacterTrackerSlot
	end
	
	/**
	 * Collect tracker slots with block. Block receives as only argument CharacterTrackerSlot and
	 * has to return true to include or false to exclude tracker slot.
	 * Returns Array of CharacterTrackerSlot.
	 */
	public func Array collect(Block ablock)
		return pSlots.collect(ablock)
	end
	
	/** List of tracker slots as Array of CharacterTrackerSlot. */
	public func Array toArray()
		return Array.new(pSlots)
	end
	
	/**
	 * Find closest slot with matching type or null.
	 */
	public func CharacterTrackerSlot bestMatching(InputDeviceType type, Vector position)
		return pSlots.inject(null, block CharacterTrackerSlot inject, CharacterTrackerSlot slot
			if slot.getInputDeviceType() != type
				return inject
				
			elif inject == null or (position - slot.getPosition()).getLengthSquared() \
			< (position - inject.getPosition()).getLengthSquared()
				return slot
				
			else
				return inject
			end
		end) cast CharacterTrackerSlot
	end
	
	/** Set all target positions from actor. */
	public func void setAllTargetsFromActor(ActorProfile actorProfile)
		pSlots.forEach(block CharacterTrackerSlot each
			each.setTargetFromActor(actorProfile)
		end)
	end
end
