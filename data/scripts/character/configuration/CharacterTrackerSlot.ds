/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Characters

pin Democap.Actors
pin Democap.Behaviors

pin Dragengine.Animators
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * Character configuration tracker slot.
 */
class CharacterTrackerSlot
	/** Type. */
	enum Type
		none
		headHmd
		headTracker
		chest
		rightHandController
		rightHandTracker
		rightElbow
		leftHandController
		leftHandTracker
		leftElbow
		waist
		rightKnee
		leftKnee
		rightFoot
		leftFoot
	end
	
	
	
	private var CharacterConfiguration pConfiguration
	
	private var String pName
	private var Type pType
	private var Vector pPosition
	private var Vector pRotation
	private var Matrix pMatrix
	private var Vector pTargetPosition
	private var Vector pTargetRotation
	private var Matrix pTargetMatrix
	private var InputDeviceType pInputDeviceType
	private var String pInputDeviceID
	private var Vector pOffsetPosition
	private var Vector pOffsetRotation
	private var Matrix pOffsetMatrix
	private var Matrix pOffsetMatrixInverse
	private var Vector pForceCalibrateRotation
	
	private var Vector pCalibratePosition
	private var Vector pCalibrateRotation
	private var Matrix pCalibrateMatrix
	private var Matrix pCalibrateMatrixInverse
	private var Matrix pCalibrateReferenceMatrix
	private var Matrix pCalibrateReferenceMatrixInverse
	
	private var ADController pADControllerPosition
	private var ADController pADControllerRotation
	private var ADLink pADLinkPosition
	private var ADLink pADLinkRotation
	
	
	
	/** Create character configuration tracker slot. */
	public func new(CharacterConfiguration configuration, String name)
		if configuration == null
			throw ENullPointer.new("configuration")
		end
		pConfiguration = configuration
		setName(name)
		
		pType = Type.none
		pPosition = Vector.new()
		pRotation = Vector.new()
		pMatrix = Matrix.new()
		pTargetPosition = Vector.new()
		pTargetRotation = Vector.new()
		pTargetMatrix = Matrix.new()
		pInputDeviceType = InputDeviceType.vrTracker
		pInputDeviceID = ""
		pOffsetPosition = Vector.new()
		pOffsetRotation = Vector.new()
		pOffsetMatrix = Matrix.new()
		pOffsetMatrixInverse = Matrix.new()
		pForceCalibrateRotation = null
		
		pCalibratePosition = Vector.new()
		pCalibrateRotation = Vector.new()
		pCalibrateMatrix = Matrix.new()
		pCalibrateMatrixInverse = Matrix.new()
		pCalibrateReferenceMatrix = Matrix.new()
		pCalibrateReferenceMatrixInverse = Matrix.new()
		
		resetCalibration()
	end
	
	/** Create copy of character configuration tracker slot. */
	public func new(CharacterConfiguration configuration, CharacterTrackerSlot slot)
		if configuration == null
			throw ENullPointer.new("configuration")
		end
		pConfiguration = configuration
		pName = slot.pName
		
		pType = slot.pType
		pPosition = slot.pPosition
		pRotation = slot.pRotation
		pMatrix = slot.pMatrix
		pTargetPosition = slot.pTargetPosition
		pTargetRotation = slot.pTargetRotation
		pTargetMatrix = slot.pTargetMatrix
		pInputDeviceID = slot.pInputDeviceID
		pInputDeviceType = slot.pInputDeviceType
		pOffsetPosition = slot.pOffsetPosition
		pOffsetRotation = slot.pOffsetRotation
		pOffsetMatrix = slot.pOffsetMatrix
		pOffsetMatrixInverse = slot.pOffsetMatrixInverse
		pForceCalibrateRotation = slot.pForceCalibrateRotation
		
		pCalibratePosition = slot.pCalibratePosition
		pCalibrateRotation = slot.pCalibrateRotation
		pCalibrateMatrix = slot.pCalibrateMatrix
		pCalibrateMatrixInverse = slot.pCalibrateMatrixInverse
		pCalibrateReferenceMatrix = slot.pCalibrateReferenceMatrix
		pCalibrateReferenceMatrixInverse = slot.pCalibrateReferenceMatrixInverse
		
		resetCalibration()
	end
	
	/** Dispose. */
	public func void dispose()
		pConfiguration = null
	end
	
	
	
	/** Owner configuration. */
	public func CharacterConfiguration getConfiguration()
		return pConfiguration
	end
	
	/** Name of character configuration tracker slot. */
	public func String getName()
		return pName
	end
	
	/** Set name of character configuration tracker slot. */
	public func void setName(String name)
		if name == null
			throw ENullPointer.new("name")
		end
		if name.empty()
			throw EInvalidParam.new("name is empty string")
		end
		
		pName = name
	end
	
	/** Type. */
	public func Type getType()
		return pType
	end
	
	/** Set type. */
	public func void setType(Type type)
		if type == null
			throw ENullPointer.new("type")
		end
		pType = type
	end
	
	/** Type of opoosite slot or null if not possible. */
	public func Type getOppositeType()
		select pType
		case Type.leftHandController
			return Type.rightHandController
			
		case Type.leftHandTracker
			return Type.rightHandTracker
			
		case Type.leftElbow
			return Type.rightElbow
			
		case Type.leftKnee
			return Type.rightKnee
			
		case Type.leftFoot
			return Type.rightFoot
			
		case Type.rightHandController
			return Type.leftHandController
			
		case Type.rightHandTracker
			return Type.leftHandTracker
			
		case Type.rightElbow
			return Type.leftElbow
			
		case Type.rightKnee
			return Type.leftKnee
			
		case Type.rightFoot
			return Type.leftFoot
			
		else
			return null
		end
	end
	
	/** Actor relative position. */
	public func Vector getPosition()
		return pPosition
	end
	
	/** Set actor relative position. */
	public func void setPosition(Vector position)
		if position == null
			throw ENullPointer.new("position")
		end
		pPosition = position
		pMatrix = Matrix.newRT(pRotation, pPosition)
	end
	
	/** Actor relative rotation. */
	public func Vector getRotation()
		return pRotation
	end
	
	/** Set actor relative rotation. */
	public func void setRotation(Vector rotation)
		if rotation == null
			throw ENullPointer.new("rotation")
		end
		pRotation = rotation
		pMatrix = Matrix.newRT(pRotation, pPosition)
	end
	
	/** Actor relative matrix. */
	public func Matrix getMatrix()
		return pMatrix
	end
	
	/** Character relative position. */
	public func Vector getTargetPosition()
		return pTargetPosition
	end
	
	/** Set character relative position. */
	public func void setTargetPosition(Vector position)
		if position == null
			throw ENullPointer.new("position")
		end
		pTargetPosition = position
		pTargetMatrix = Matrix.newRT(pTargetRotation, pTargetPosition)
	end
	
	/** Character relative rotation. */
	public func Vector getTargetRotation()
		return pTargetRotation
	end
	
	/** Set character relative rotation. */
	public func void setTargetRotation(Vector rotation)
		if rotation == null
			throw ENullPointer.new("rotation")
		end
		pTargetRotation = rotation
		pTargetMatrix = Matrix.newRT(pTargetRotation, pTargetPosition)
	end
	
	/** Character relative matrix. */
	public func Matrix getTargetMatrix()
		return pTargetMatrix
	end
	
	/** Set target position from actor. */
	public func void setTargetFromActor(ActorProfile actorProfile)
		if actorProfile == null
			actorProfile = GameApp.getGameApp().getDefaultActorProfile()
		end
		
		var float scale = pConfiguration.getProfile().getShoulderLevel() / actorProfile.getShoulderLevel()
		pTargetMatrix = pMatrix * Matrix.newScaling(scale, scale, scale)
		pTargetPosition = pTargetMatrix.getPosition()
		pTargetRotation = pTargetMatrix.getEulerAngles()
	end
	
	/** Input device type to auto-assign or null. */
	public func InputDeviceType getInputDeviceType()
		return pInputDeviceType
	end
	
	/** Set input device type to auto-assign or null. */
	public func void setInputDeviceType(InputDeviceType type)
		if type == null
			throw ENullPointer.new("type")
		end
		pInputDeviceType = type
	end
	
	/** ID of input device attached to this slot or empty string. */
	public func String getInputDeviceID()
		return pInputDeviceID
	end
	
	/** Set ID of input device attached to this slot or empty string. */
	public func void setInputDeviceID(String id)
		pInputDeviceID = id
	end
	
	/** Input device attached to this slot. Resolved using input device id. */
	public func InputDevice getInputDevice()
		if pInputDeviceID.empty()
			return null
		end
		return GameApp.getGameApp().getBindingManager().findDevice(block InputDevice each
			return each.getID().equals(pInputDeviceID)
		end)
	end
	
	/** Input device is attached. */
	public func bool isDeviceAttached()
		return getInputDevice() != null
	end
	
	/** Input device is not attached. */
	public func bool isDeviceDetached()
		return getInputDevice() == null
	end
	
	/** Position offset. */
	public func Vector getOffsetPosition()
		return pOffsetPosition
	end
	
	/** Set position offset. */
	public func void setOffsetPosition(Vector position)
		if position == null
			throw ENullPointer.new("position")
		end
		pOffsetPosition = position
		pOffsetMatrix = Matrix.newRT(pOffsetRotation, pOffsetPosition)
		pOffsetMatrixInverse = pOffsetMatrix.getInverse()
	end
	
	/** Rotation offset. */
	public func Vector getOffsetRotation()
		return pOffsetRotation
	end
	
	/** Set rotationn offset. */
	public func void setOffsetRotation(Vector rotation)
		if rotation == null
			throw ENullPointer.new("rotation")
		end
		pOffsetRotation = rotation
		pOffsetMatrix = Matrix.newRT(pOffsetRotation, pOffsetPosition)
		pOffsetMatrixInverse = pOffsetMatrix.getInverse()
	end
	
	/** Offset matrix. */
	public func Matrix getOffsetMatrix()
		return pOffsetMatrix
	end
	
	/** Inverse offset matrix. */
	public func Matrix getOffsetMatrixInverse()
		return pOffsetMatrixInverse
	end
	
	/** Force calibrate rotation or null. */
	public func Vector getForceCalibrateRotation()
		return pForceCalibrateRotation
	end
	
	/** Set force calibrate rotation or null. */
	public func void setForceCalibrateRotation(Vector rotation)
		pForceCalibrateRotation = rotation
	end
	
	
	
	/** Animator definition controller for position or null. */
	public func ADController getADControllerPosition()
		return pADControllerPosition
	end
	
	/** Animator definition controller for rotation or null. */
	public func ADController getADControllerRotation()
		return pADControllerRotation
	end
	
	/** Animator definition link for position or null. */
	public func ADLink getADLinkPosition()
		return pADLinkPosition
	end
	
	/** Animator definition link for position or null. */
	public func ADLink getADLinkRotation()
		return pADLinkRotation
	end
	
	
	
	/** Init element class. */
	public func void initElementClass(BaseVRActorClass eclass, AnimatorDefinition adef)
		var ECBTrackerSlot behavior = ECBTrackerSlot.new(eclass, this)
		
		pADControllerPosition = ADController.new()
		pADControllerPosition.setName(behavior.getControllerNamePosition())
		adef.addController(pADControllerPosition)
		
		pADLinkPosition = ADLink.new()
		pADLinkPosition.setController(pADControllerPosition)
		adef.addLink(pADLinkPosition)
		
		pADControllerRotation = ADController.new()
		pADControllerRotation.setName(behavior.getControllerNameRotation())
		adef.addController(pADControllerRotation)
		
		pADLinkRotation = ADLink.new()
		pADLinkRotation.setController(pADControllerRotation)
		adef.addLink(pADLinkRotation)
		
		// if tracker slot is the right or left hand add also an adjustment behavior
		select pInputDeviceType
		case InputDeviceType.vrRightHand
			ECBAdjustVRHandCollider.new(eclass, eclass.getVRRightHand(), behavior, "right")
			
		case InputDeviceType.vrLeftHand
			ECBAdjustVRHandCollider.new(eclass, eclass.getVRLeftHand(), behavior, "left")
		end
	end
	
	/** Init from type. */
	public func void initFromType(ActorProfile actorProfile)
		if actorProfile == null
			actorProfile = GameApp.getGameApp().getDefaultActorProfile()
		end
		
		var float shoulderLevel = actorProfile.getShoulderLevel()
		var float shoulderWidth = actorProfile.getShoulderWidth()
		var float armLength = actorProfile.getArmLength()
		var float legLength = actorProfile.getLegLength()
		
		pForceCalibrateRotation = null
		
		select pType
		case Type.none
			pInputDeviceType = InputDeviceType.generic
			pPosition = Vector.new()
			pRotation = Vector.new()
			
		case Type.headHmd
			pInputDeviceType = InputDeviceType.vrHMD
			pPosition = Vector.new(0, shoulderLevel + 0.2, 0.1)
			pForceCalibrateRotation = Vector.new()
			
		case Type.headTracker
			pInputDeviceType = InputDeviceType.vrTracker
			pPosition = Vector.new(0, shoulderLevel + 0.3, 0)
			
		case Type.chest
			pInputDeviceType = InputDeviceType.vrTracker
			pPosition = Vector.new(0, shoulderLevel, 0)
			
		case Type.rightHandController
			pInputDeviceType = InputDeviceType.vrRightHand
			pPosition = Vector.new(shoulderWidth * 0.5 + armLength, shoulderLevel, 0)
			pRotation = Vector.new(0, -90, 0)
			
		case Type.rightHandTracker
			pInputDeviceType = InputDeviceType.vrTracker
			pPosition = Vector.new(shoulderWidth * 0.5 + armLength, shoulderLevel, 0)
			
		case Type.rightElbow
			pInputDeviceType = InputDeviceType.vrTracker
			pPosition = Vector.new(shoulderWidth * 0.5 + armLength * 0.5, shoulderLevel, 0)
			
		case Type.leftHandController
			pInputDeviceType = InputDeviceType.vrLeftHand
			pPosition = Vector.new(-(shoulderWidth * 0.5 + armLength), shoulderLevel, 0)
			pRotation = Vector.new(0, 90, 0)
			
		case Type.leftHandTracker
			pInputDeviceType = InputDeviceType.vrTracker
			pPosition = Vector.new(-(shoulderWidth * 0.5 + armLength), shoulderLevel, 0)
			
		case Type.leftElbow
			pInputDeviceType = InputDeviceType.vrTracker
			pPosition = Vector.new(-(shoulderWidth * 0.5 + armLength * 0.5), shoulderLevel, 0)
			
		case Type.waist
			pInputDeviceType = InputDeviceType.vrTracker
			pPosition = Vector.new(0, legLength, 0)
			
		case Type.rightKnee
			pInputDeviceType = InputDeviceType.vrTracker
			pPosition = Vector.new(shoulderWidth * 0.5, legLength * 0.5, 0)
			
		case Type.leftKnee
			pInputDeviceType = InputDeviceType.vrTracker
			pPosition = Vector.new(-(shoulderWidth * 0.5), legLength * 0.5, 0)
			
		case Type.rightFoot
			pInputDeviceType = InputDeviceType.vrTracker
			pPosition = Vector.new(shoulderWidth * 0.5, 0.08, 0.12)
			
		case Type.leftFoot
			pInputDeviceType = InputDeviceType.vrTracker
			pPosition = Vector.new(-(shoulderWidth * 0.5), 0.08, 0.12)
		end
		
		pMatrix = Matrix.newRT(pRotation, pPosition)
	end
	
	
	
	/** Calibrate position. */
	public func Vector getCalibratePosition()
		return pCalibratePosition
	end
	
	/** Set calibrate position. */
	public func void setCalibratePosition(Vector position)
		if position == null
			throw ENullPointer.new("position")
		end
		pCalibratePosition = position
	end
	
	/** Calibrate rotation. */
	public func Vector getCalibrateRotation()
		return pCalibrateRotation
	end
	
	/** Set calibrate rotation. */
	public func void setCalibrateRotation(Vector rotation)
		if rotation == null
			throw ENullPointer.new("rotation")
		end
		pCalibrateRotation = rotation
	end
	
	/** Calibrate matrix. */
	public func Matrix getCalibrateMatrix()
		return pCalibrateMatrix
	end
	
	/** Inverse calibrate matrix. */
	public func Matrix getCalibrateMatrixInverse()
		return pCalibrateMatrixInverse
	end
	
	/** Set calibrate matrix. */
	public func void setCalibrateMatrix(Matrix matrix)
		if matrix == null
			throw ENullPointer.new("matrix")
		end
		pCalibrateMatrix = matrix
		pCalibrateMatrixInverse = matrix.getInverse()
	end
	
	/** Calibrate reference matrix. */
	public func Matrix getCalibrateReferenceMatrix()
		return pCalibrateReferenceMatrix
	end
	
	/** Inverse calibrate reference matrix. */
	public func Matrix getCalibrateReferenceMatrixInverse()
		return pCalibrateReferenceMatrixInverse
	end
	
	/** Set calibrate reference matrix. */
	public func void setCalibrateReferenceMatrix(Matrix matrix)
		if matrix == null
			throw ENullPointer.new("matrix")
		end
		pCalibrateReferenceMatrix = matrix
		pCalibrateReferenceMatrixInverse = matrix.getInverse()
	end
	
	
	
	/** Reset calibration. */
	public func void resetCalibration()
		pCalibratePosition = pPosition
		pCalibrateRotation = pRotation
		pCalibrateMatrix = pMatrix
		pCalibrateMatrixInverse = pMatrix.getInverse()
		pCalibrateReferenceMatrix = pMatrix
		pCalibrateReferenceMatrixInverse = pMatrix.getInverse()
	end
	
	/** Calibrate character. */
	public func void calibrate(ActorProfile actorProfile, BaseVRActor actor)
		var ECBTrackerSlot.Instance behavior = ECBTrackerSlot.getInstanceIn(actor, pName)
		if behavior == null
			resetCalibration()
			return
		end
		
		initFromType(actorProfile)
		behavior.findInputDevice()
		behavior.updateMatrix()
		
		pCalibrateReferenceMatrix = behavior.getMatrixReference()
		pCalibrateReferenceMatrixInverse = pCalibrateReferenceMatrix.getInverse()
		
		pCalibrateMatrix = behavior.getMatrixCharacter()
		
		select pInputDeviceType
		case pInputDeviceType.vrHMD
			var Vector position = pCalibrateMatrix.getPosition()
			pCalibrateMatrix = Matrix.newTranslation(position)
			behavior.setMatrixCharacter(position, Vector.new())
		end
		
		pCalibrateMatrixInverse = pCalibrateMatrix.getInverse()
		pCalibratePosition = pCalibrateMatrix.getPosition()
		pCalibrateRotation = pCalibrateMatrix.normalize().getEulerAngles()
	end
	
	
	
	/** Default slot name for slot type. */
	static public func String defaultSlotNameForType(Type type)
		select type
		case Type.headHmd
			return "Head HMD"
			
		case Type.headTracker
			return "Head Tracker"
			
		case Type.chest
			return "Chest"
			
		case Type.rightHandController
			return "Right Hand Controller"
			
		case Type.rightHandTracker
			return "Right Hand Tracker"
			
		case Type.rightElbow
			return "Right Elbow"
			
		case Type.leftHandController
			return "Left Hand Controller"
			
		case Type.leftHandTracker
			return "Left Hand Tracker"
			
		case Type.leftElbow
			return "Left Elbow"
			
		case Type.waist
			return "Waist"
			
		case Type.rightKnee
			return "Right Knee"
			
		case Type.leftKnee
			return "Left Knee"
			
		case Type.rightFoot
			return "Right Foot"
			
		case Type.leftFoot
			return "Left Foot"
			
		else
			return "Slot"
		end
	end
	
	
	
	/** Compare tracker slot for sorting. */
	public func int compare(Object obj)
		if obj castable CharacterTrackerSlot
			return pName.compare((obj cast CharacterTrackerSlot).pName)
		end
		return 0
	end
	
	/** String representation. Returns name. */
	public func String toString()
		return pName
	end
end
