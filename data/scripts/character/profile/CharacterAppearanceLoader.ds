/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Characters

pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * Resource loader for character appearance.
 */
class CharacterAppearanceLoader implements ResourceListener
	private var CharacterProfile pProfile
	
	
	
	/** Create resource loader. */
	public func new(CharacterProfile profile)
		if profile == null
			throw ENullPointer.new("profile")
		end
		
		pProfile = profile
	end
	
	
	
	/** Start preloading resources. */
	public func void preload()
		var CharacterAppearance appearance = pProfile.getAppearance()
		
		if appearance.getModel() == null and not appearance.getPathModel().empty()
			Model.loadAsynchron(appearance.getPathModel(), this)
		end
		
		if appearance.getSkin() == null and not appearance.getPathSkin().empty()
			Skin.loadAsynchron(appearance.getPathSkin(), this)
		end
		
		if appearance.getRig() == null and not appearance.getPathRig().empty()
			Rig.loadAsynchron(appearance.getPathRig(), this)
		end
		
		if appearance.getAnimation() == null and not appearance.getPathAnimation().empty()
			Animation.loadAsynchron(appearance.getPathAnimation(), this)
		end
	end
	
	/** Load now. */
	public func void loadSync()
		var CharacterAppearance appearance = pProfile.getAppearance()
		
		if appearance.getModel() == null and not appearance.getPathModel().empty()
			try
				finishedLoading(appearance.getPathModel(),\
					ResourceLoaderType.model, Model.new(appearance.getPathModel()))
				
			catch Exception e
				failedLoading(appearance.getPathModel(), ResourceLoaderType.model)
			end
		end
		
		if appearance.getSkin() == null and not appearance.getPathSkin().empty()
			try
				finishedLoading(appearance.getPathSkin(),\
					ResourceLoaderType.skin, Skin.new(appearance.getPathSkin()))
				
			catch Exception e
				failedLoading(appearance.getPathSkin(), ResourceLoaderType.skin)
			end
		end
		
		if appearance.getRig() == null and not appearance.getPathRig().empty()
			try
				finishedLoading(appearance.getPathRig(),\
					ResourceLoaderType.rig, Rig.new(appearance.getPathRig()))
				
			catch Exception e
				failedLoading(appearance.getPathRig(), ResourceLoaderType.rig)
			end
		end
		
		if appearance.getAnimation() == null and not appearance.getPathAnimation().empty()
			try
				finishedLoading(appearance.getPathAnimation(),\
					ResourceLoaderType.animation, Animation.new(appearance.getPathAnimation()))
				
			catch Exception e
				failedLoading(appearance.getPathAnimation(), ResourceLoaderType.animation)
			end
		end
	end
	
	
	
	/** Finished loading resource. */
	public func void finishedLoading(String filename, ResourceLoaderType resourceType, Object resource)
		var CharacterAppearance appearance = pProfile.getAppearance()
		
		if resourceType == ResourceLoaderType.model and filename.equals(appearance.getPathModel())
			appearance.setModel(resource cast Model)
		end
		
		if resourceType == ResourceLoaderType.skin and filename.equals(appearance.getPathSkin())
			appearance.setSkin(resource cast Skin)
		end
		
		if resourceType == ResourceLoaderType.rig and filename.equals(appearance.getPathRig())
			appearance.setRig(resource cast Rig)
		end
		
		if resourceType == ResourceLoaderType.animation and filename.equals(appearance.getPathAnimation())
			appearance.setAnimation(resource cast Animation)
		end
	end
	
	/** Loading resource failed. */
	public func void failedLoading(String filename, ResourceLoaderType resourceType)
		GameApp.getGameApp().getConsole().addMessage("CharacterAppearanceLoader: Failed loading "\
			+ resourceType.name() + " '" + filename + "' for character '" + pProfile.getName() + "'")
	end
end
