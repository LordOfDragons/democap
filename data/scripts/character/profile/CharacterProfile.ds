/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Characters

pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * Profile of a character used during motion capture. Stores various parameters like the
 * model, rig and skin to use, configuration of hmd, controllers and trackers and the
 * how the trackers affect the rig.
 * 
 * Profiles are stored under "/characters" directory in the user game configure directory
 * as files of type "*.demccp" .
 */
class CharacterProfile
	/** Major bone axis. Used to adjust orientation to match Z-axis. */
	enum BoneAxis
		x
		y
		z
		xneg
		yneg
		zneg
	end
	
	
	
	var String pName
	var CharacterAppearance pAppearance
	var CharacterConfigurations pConfigurations
	var String pOriginBone
	var String pTeleportBone
	var float pShoulderLevel
	var String pPreviewMove
	var BoneAxis pBoneAxis
	var float pScale
	var bool pIsProject
	
	var Array pListeners
	
	
	
	/** Create character. */
	func new(String name)
		setName(name)
		
		pAppearance = CharacterAppearance.new()
		pConfigurations = CharacterConfigurations.new()
		pOriginBone = ""
		pTeleportBone = ""
		pShoulderLevel = 1.6
		pPreviewMove = ""
		pBoneAxis = BoneAxis.z
		pScale = 1
		
		pListeners = Array.new()
	end
	
	/** Create copy of character. */
	func new(String name, CharacterProfile profile)
		setName(name)
		
		pAppearance = CharacterAppearance.new(profile.pAppearance)
		
		pConfigurations = CharacterConfigurations.new()
		profile.pConfigurations.forEach(block CharacterConfiguration each
			pConfigurations.add(CharacterConfiguration.new(this, each.getName(), each))
		end)
		
		pOriginBone = profile.pOriginBone
		pTeleportBone = profile.pTeleportBone
		pShoulderLevel = profile.pShoulderLevel
		pPreviewMove = profile.pPreviewMove
		pBoneAxis = profile.pBoneAxis
		pScale = profile.pScale
		pIsProject = profile.pIsProject
		
		pListeners = Array.new()
	end
	
	/** Dispose of character profile. */
	func void dispose()
		pListeners.removeAll()
		if pConfigurations != null
			pConfigurations.dispose()
		end
	end
	
	
	
	/** Name of character profile. */
	func String getName()
		return pName
	end
	
	/** Set name of character profile. */
	func void setName(String name)
		if name == null
			throw ENullPointer.new("name")
		end
		if name.empty()
			throw EInvalidParam.new("name is empty string")
		end
		
		pName = name
	end
	
	/** Appearance. */
	func CharacterAppearance getAppearance()
		return pAppearance
	end
	
	/** Configurations. */
	func CharacterConfigurations getConfigurations()
		return pConfigurations
	end
	
	/** Origin bone. */
	func String getOriginBone()
		return pOriginBone
	end
	
	/** Set origin bone. */
	func void setOriginBone(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pOriginBone = bone
	end
	
	/** Teleport bone. */
	func String getTeleportBone()
		return pTeleportBone
	end
	
	/** Set teleport bone. */
	func void setTeleportBone(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pTeleportBone = bone
	end
	
	/** Shoulder level in meters. */
	func float getShoulderLevel()
		return pShoulderLevel
	end
	
	/** Set shoulder level in meters. */
	func void setShoulderLevel(float level)
		pShoulderLevel = DEMath.max(level, 0.1)
	end
	
	/** Preview move or empty string. */
	func String getPreviewMove()
		return pPreviewMove
	end
	
	/** Set preview move or empty string. */
	func void setPreviewMove(String move)
		if move == null
			throw ENullPointer.new("move")
		end
		pPreviewMove = move
	end
	
	/** Major bone axis. Used to adjust orientation to match Z-axis. */
	func BoneAxis getBoneAxis()
		return pBoneAxis
	end
	
	/** Set major bone axis. Used to adjust orientation to match Z-axis. */
	func void setBoneAxis(BoneAxis boneAxis)
		pBoneAxis = boneAxis
	end
	
	/** Scale to apply to adjust for models not using 1m as unit scale. */
	func float getScale()
		return pScale
	end
	
	/** Set scale to apply to adjust for models not using 1m as unit scale. */
	func void setScale(float scale)
		pScale = DEMath.max(scale, 0.001)
	end
	
	/** Character is project character. */
	func bool getIsProject()
		return pIsProject
	end
	
	/** Set if character is project character. */
	func void setIsProject(bool isProject)
		pIsProject = isProject
	end
	
	
	
	/** Start loading resources. */
	func void preloadResources()
		CharacterAppearanceLoader.new(this).preload()
	end
	
	/** Load resources now. */
	func void loadResourcesSync()
		CharacterAppearanceLoader.new(this).loadSync()
	end
	
	
	
	/** Character profile path. */
	func String getPathProfile()
		if pIsProject
			return (GameApp.getGameApp().getProject().getCharactersDirectory() + (pName + ".demccp")).getPath()
			
		else
			return (File.new(GameApp.getGameApp().getCharacterProfiles().getDirectory()) + (pName + ".demccp")).getPath()
		end
	end
	
	/** Save character. */
	func void save()
		GameApp.getGameApp().getLoadCharacterProfile().save(getPathProfile(), this)
	end
	
	/** Delete actor. */
	func void delete()
		if FileSystem.existsFile(getPathProfile())
			FileSystem.deleteFile(getPathProfile())
		end
	end
	
	
	
	/** Bone axis rotation. */
	static func Vector boneAxisRotation(BoneAxis axis)
		select axis
		case BoneAxis.x
			return Vector.new(0, -90, -90)
			
		case BoneAxis.y
			return Vector.new(90, 90, 0)
			
		case BoneAxis.z
			return Vector.new()
			
		case BoneAxis.xneg
			return Vector.new(0, 90, 0)
			
		case BoneAxis.yneg
			return Vector.new(-90, 0, 0)
			
		case BoneAxis.zneg
			return Vector.new(0, 180, 0)
			
		else
			throw EInvalidParam.new()
		end
	end
	
	
	
	/** Add listener. */
	func void addListener(CharacterListener listener)
		if listener == null
			throw ENullPointer.new("listener")
		end
		pListeners.add(listener)
	end
	
	/** Remove listener. */
	func void removeListener(CharacterListener listener)
		pListeners.remove(listener)
	end
	
	/** Notify listeners character has been calibrated. */
	func void notifyCalibrated(CharacterConfiguration config)
		pListeners.forEach(block CharacterListener each
			each.calibrated(this, config)
		end)
	end
	
	/** Notify listeners character has been reset. */
	func void notifyReset(CharacterConfiguration config, bool calibrating)
		pListeners.forEach(block CharacterListener each
			each.reset(this, config, calibrating)
		end)
	end
	
	
	
	/** Compare character profile for sorting. */
	func int compare(Object obj)
		if obj castable CharacterProfile
			return pName.compare((obj cast CharacterProfile).pName)
		end
		return 0
	end
	
	/** String representation. Returns name. */
	func String toString()
		return pName
	end
end
