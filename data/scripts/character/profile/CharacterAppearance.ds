/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Characters

pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * Appearance of character.
 */
class CharacterAppearance
	var String pPathModel
	var String pPathSkin
	var String pPathRig
	var String pPathAnimation
	
	var Model pModel
	var Skin pSkin
	var Rig pRig
	var Animation pAnimation
	
	
	
	/** Create character appearance. */
	func new()
		pPathModel = ""
		pPathSkin = ""
		pPathRig = ""
		pPathAnimation = ""
	end
	
	/** Create copy of character appearance. */
	func new(CharacterAppearance appearance)
		pPathModel = appearance.pPathModel
		pPathSkin = appearance.pPathSkin
		pPathRig = appearance.pPathRig
		pPathAnimation = appearance.pPathAnimation
		
		pModel = appearance.pModel
		pSkin = appearance.pSkin
		pRig = appearance.pRig
		pAnimation = appearance.pAnimation
	end
	
	
	
	/** Path of model resource to use. */
	func String getPathModel()
		return pPathModel
	end
	
	/** Set path of model resource to use. */
	func void setPathModel(String path)
		if path.equals(pPathModel)
			return
		end
		
		pPathModel = path
		pModel = null
	end
	
	/** Path to skin resource to use. */
	func String getPathSkin()
		return pPathSkin
	end
	
	/** Set path of skin resource to use. */
	func void setPathSkin(String path)
		if path.equals(pPathSkin)
			return
		end
		
		pPathSkin = path
		pSkin = null
	end
	
	/** Path to rig resource to use. */
	func String getPathRig()
		return pPathRig
	end
	
	/** Set path of rig resource to use. */
	func void setPathRig(String path)
		if path.equals(pPathRig)
			return
		end
		
		pPathRig = path
		pRig = null
	end
	
	/** Path to animation resource to use. */
	func String getPathAnimation()
		return pPathAnimation
	end
	
	/** Set path of animation resource to use. */
	func void setPathAnimation(String path)
		if path.equals(pPathAnimation)
			return
		end
		
		pPathAnimation = path
		pAnimation = null
	end
	
	
	
	/** Model or null if not loaded yet. */
	func Model getModel()
		return pModel
	end
	
	/** Set model or null if not loaded yet. */
	func void setModel(Model model)
		pModel = model
	end
	
	/** Skin or null if not loaded yet. */
	func Skin getSkin()
		return pSkin
	end
	
	/** Set skin or null if not loaded yet. */
	func void setSkin(Skin skin)
		pSkin = skin
	end
	
	/** Rig or null if not loaded yet. */
	func Rig getRig()
		return pRig
	end
	
	/** Set rig or null if not loaded yet. */
	func void setRig(Rig rig)
		pRig = rig
	end
	
	/** Animation or null if not loaded yet. */
	func Animation getAnimation()
		return pAnimation
	end
	
	/** Set animation or null if not loaded yet. */
	func void setAnimation(Animation animation)
		pAnimation = animation
	end
	
	
	
	/** Init element class. */
	func void initElementClass(BaseVRActorClass eclass)
		var ECComposeComponent component = eclass.getComponent().getComponent()
		
		if not pPathModel.empty()
			component.getModel().setPath(pPathModel)
			component.getModel().setModel(pModel)
		end
		
		if not pPathSkin.empty()
			component.getSkin().setPath(pPathSkin)
			component.getSkin().setSkin(pSkin)
		end
		
		if not pPathRig.empty()
			component.getRig().setPath(pPathRig)
			component.getRig().setRig(pRig)
			
			eclass.getCollider().getCollider().getPhysicsType().setEnumeration(CollisionResponse.dynamic)
			eclass.getCollider().getCollider().getLocalGravity().setVector(null)
		end
	end
end
