/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Characters

pin Dragengine.Utils


/**
 * List of character profiles.
 * 
 * Profiles are stored under "/characters" directory in the user game configure directory
 * as files of type "*.demccp" .
 */
class CharacterProfiles
	private var String pDirectory
	private var Dictionary pProfiles
	private var Array pListeners
	
	
	
	/** Create character list. */
	public func new(String directory)
		if directory == null
			throw ENullPointer.new("directory")
		end
		
		pListeners = Array.new()
		pDirectory = directory
		pProfiles = Dictionary.new()
	end
	
	/** Dispose of list. */
	public func void dispose()
		pListeners.removeAll()
		removeAll()
	end
	
	
	
	/** Directory to save character profiles to. */
	public func String getDirectory()
		return pDirectory
	end
	
	
	
	/** Count of profiles. */
	public func int getCount()
		return pProfiles.getCount()
	end
	
	/** Named profile is present. */
	public func bool has(String name)
		return pProfiles.has(name.toLower())
	end
	
	/** Named profile or null if absent. */
	public func CharacterProfile getAt(String name)
		return pProfiles.getAt(name.toLower(), null) cast CharacterProfile
	end
	
	/** Add profile. Throws exception if named profile is present. */
	public func void add(CharacterProfile profile)
		if pProfiles.has(profile.getName().toLower())
			throw EInvalidParam.new("named profile is present: " + profile.getName())
		end
		pProfiles.setAt(profile.getName().toLower(), profile)
		
		pListeners.forEach(block CharacterProfilesListener each
			each.profileAdded(this, profile)
		end)
	end
	
	/** Remove profile. Throws exception if named profile is absent. */
	public func void remove(CharacterProfile profile)
		pProfiles.remove(profile.getName().toLower())
		
		pListeners.forEach(block CharacterProfilesListener each
			each.profileRemoved(this, profile)
		end)
		
		profile.dispose()
	end
	
	/** Remove all profiles. */
	public func void removeAll()
		pProfiles.forEachValue(block CharacterProfile each
			each.dispose()
		end)
		pProfiles.removeAll()
		
		pListeners.forEach(block CharacterProfilesListener each
			each.allProfilesRemoved(this)
		end)
	end
	
	/**
	 * Visit profiles with block. Block receives as only argument CharacterProfile.
	 */
	public func void forEach(Block ablock)
		pProfiles.forEachValue(ablock)
	end
	
	/**
	 * Collect profiles with block. Block receives as only argument CharacterProfile and
	 * has to return true to include or false to exclude profile.
	 * Returns Array of CharacterProfile.
	 */
	public func Array collect(Block ablock)
		var Array list = Array.new()
		pProfiles.forEachValue(block CharacterProfile each
			if ablock.run(each) cast bool
				list.add(each)
			end
		end)
		return list
	end
	
	/** List of profiles as Array of CharacterProfile. */
	public func Array toArray()
		var Array list = Array.new()
		pProfiles.forEachValue(block CharacterProfile each
			list.add(each)
		end)
		return list
	end
	
	
	
	/** Load characters from directory (*.dmcc). */
	public func void loadAll()
		var LoadCharacterProfile loader = GameApp.getGameApp().getLoadCharacterProfile()
		var Console console = GameApp.getGameApp().getConsole()
		
		console.addMessage("Load character profiles...")
		
		FileSystem.searchFiles(pDirectory, true, block String each, FileType type
			if type == FileType.file and FileSystem.pathMatchesPattern(File.new(each).getName(), "*.demccp")
				try
					add(loader.load(each))
					
				catch Exception e
					console.addError("Failed loading character profile: " + each, e)
					return true
				end
			end
			return true
		end)
	end
	
	/** Reload characters from directory (*.dmcc). */
	public func void reloadAll()
		removeAll()
		loadAll()
	end
	
	/** Save characters to directory (*.dmcc). */
	public func void saveAll()
		var LoadCharacterProfile loader = GameApp.getGameApp().getLoadCharacterProfile()
		var Console console = GameApp.getGameApp().getConsole()
		var File basePath = File.new(pDirectory)
		
		console.addMessage("Save character profiles to '" + pDirectory + "'")
		
		pProfiles.forEachValue(block CharacterProfile each
			var String filename = each.getName() + ".demccp"
			
			filename = (basePath + filename).getPath()
			try
				loader.save(filename, each)
				
			catch Exception e
				console.addError("Failed saving character profile: " + each.getName(), e)
			end
		end)
	end
	
	
	
	/** Add listener. */
	public func void addListener(CharacterProfilesListener listener)
		if listener == null
			throw ENullPointer.new("listener")
		end
		pListeners.add(listener)
	end
	
	/** Remove listener. */
	public func void removeListener(CharacterProfilesListener listener)
		pListeners.remove(listener)
	end
end
