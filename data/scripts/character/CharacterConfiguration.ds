/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Characters

pin Democap.Actors
pin Democap.Behaviors
pin Democap.Elements
pin Democap.MotionTransferSystem

pin Dragengine.Commands
pin Dragengine.Animators
pin Dragengine.Scenery
pin Dragengine.Utils
pin Dragengine.Preloading


/**
 * Character configuration. Stores tracker configuration and information about how tracker
 * data affects the character rig.
 */
class CharacterConfiguration
	/** Scale mode. */
	enum ScaleMode
		actor //<! Scale actor to match character
		character //<! Scale character to match actor
	end
	
	
	
	private var CharacterProfile pProfile
	private var String pName
	
	private var ScaleMode pScaleMode
	private var String pMoveCalibrate
	
	private var String pCameraBone
	private var Vector pCameraPosition
	private var Vector pCameraRotation
	private var Matrix pCameraMatrix
	
	private var bool pIsCalibrated
	private var float pCalibrateScale
	private var Matrix pMatrixScale
	private var Matrix pMatrixScaleInv
	private var Matrix pMatrixCalibrate
	private var Matrix pMatrixCalibrateInv
	
	private var CharacterTrackerSlots pTrackerSlots
	private var MotionTransfers pMotionTransfers
	
	private var MoCapActorClass pElementClass
	private var MoCapActorClass pOldElementClass
	private var PreloadCounter pPreloadCounter
	private var AnimatorDefinition pAnimatorDefinition
	
	
	
	/** Create character configuration. */
	public func new(CharacterProfile profile, String name)
		if profile == null
			throw ENullPointer.new("profile")
		end
		
		pProfile = profile
		setName(name)
		
		pScaleMode = ScaleMode.actor
		pMoveCalibrate = ""
		
		pCameraBone = ""
		pCameraPosition = Vector.new()
		pCameraRotation = Vector.new()
		pCameraMatrix = Matrix.new()
		
		pIsCalibrated = false
		pCalibrateScale = 1
		pMatrixScale = Matrix.new()
		pMatrixScaleInv = Matrix.new()
		pMatrixCalibrate = Matrix.new()
		pMatrixCalibrateInv = Matrix.new()
		
		pTrackerSlots = CharacterTrackerSlots.new()
		pMotionTransfers = MotionTransfers.new()
	end
	
	/** Create copy of character configuration. */
	public func new(CharacterProfile profile, String name, CharacterConfiguration configuration)
		if profile == null
			throw ENullPointer.new("profile")
		end
		
		pProfile = profile
		setName(name)
		
		pScaleMode = configuration.pScaleMode
		pMoveCalibrate = configuration.pMoveCalibrate
		
		pCameraBone = configuration.pCameraBone
		pCameraPosition = configuration.pCameraPosition
		pCameraRotation = configuration.pCameraRotation
		pCameraMatrix = configuration.pCameraMatrix
		
		pIsCalibrated = configuration.pIsCalibrated
		pCalibrateScale = configuration.pCalibrateScale
		pMatrixScale = configuration.pMatrixScale
		pMatrixScaleInv = configuration.pMatrixScaleInv
		pMatrixCalibrate = configuration.pMatrixCalibrate
		pMatrixCalibrateInv = configuration.pMatrixCalibrateInv
		
		pTrackerSlots = CharacterTrackerSlots.new()
		configuration.pTrackerSlots.forEach(block CharacterTrackerSlot each
			pTrackerSlots.add(CharacterTrackerSlot.new(this, each))
		end)
		
		pMotionTransfers = MotionTransfers.new()
		configuration.pMotionTransfers.forEach(block MotionTransfer each
			pMotionTransfers.add(each.createCopy())
		end)
	end
	
	/** Dispose of character profile. */
	public func void dispose()
		dropElementClass()
		disposeOldElementClass()
		
		if pTrackerSlots != null
			pTrackerSlots.forEach(block CharacterTrackerSlot each
				each.dispose()
			end)
		end
		
		pProfile = null
	end
	
	
	
	/** Character profile owning this configuration. */
	public func CharacterProfile getProfile()
		return pProfile
	end
	
	/** Name of character profile. */
	public func String getName()
		return pName
	end
	
	/** Set name of character profile. */
	public func void setName(String name)
		if name == null
			throw ENullPointer.new("name")
		end
		if name.empty()
			throw EInvalidParam.new("name is empty string")
		end
		
		pName = name
	end
	
	/** Scale mode. */
	public func ScaleMode getScaleMode()
		return pScaleMode
	end
	
	/** Set scale mode. */
	public func void setScaleMode(ScaleMode scaleMode)
		if scaleMode == null
			throw ENullPointer.new("scaleMode")
		end
		pScaleMode = scaleMode
		updateScales()
	end
	
	/** Name of animation move to use for calibration or empty string to use none. */
	public func String getMoveCalibrate()
		return pMoveCalibrate
	end
	
	/** Set name of animation move to use for calibration or empty string to use none. */
	public func void setMoveCalibrate(String animation)
		if animation == null
			throw ENullPointer.new("animation")
		end
		
		pMoveCalibrate = animation
	end
	
	
	
	/** Bone to attach HMD to if calibrated or empty string to attach to character origin. */
	public func String getCameraBone()
		return pCameraBone
	end
	
	/** Set bone to attach HMD to if calibrated or empty string to attach to character origin. */
	public func void setCameraBone(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pCameraBone = bone
	end
	
	/** Camera position relative to bone. */
	public func Vector getCameraPosition()
		return pCameraPosition
	end
	
	/** Set camera position relative to bone. */
	public func void setCameraPosition(Vector position)
		if position == null
			throw ENullPointer.new("position")
		end
		pCameraPosition = position
		pCameraMatrix = Matrix.newRT(pCameraRotation, pCameraPosition)
	end
	
	/** Rotation of camera relative to bone. */
	public func Vector getCameraRotation()
		return pCameraRotation
	end
	
	/** Set rotation of camera relative to bone. */
	public func void setCameraRotation(Vector rotation)
		if rotation == null
			throw ENullPointer.new("rotation")
		end
		pCameraRotation = rotation
		pCameraMatrix = Matrix.newRT(pCameraRotation, pCameraPosition)
	end
	
	/** Camera matrix relative to bone. */
	public func Matrix getCameraMatrix()
		return pCameraMatrix
	end
	
	
	
	/** Tracker slots. */
	public func CharacterTrackerSlots getTrackerSlots()
		return pTrackerSlots
	end
	
	/** Motion transfers. */
	public func MotionTransfers getMotionTransfers()
		return pMotionTransfers
	end
	
	
	
	/**
	 * Element class creating and preloading it if required. Returned element class can be
	 * still preloading so check isElementClassPreloading() to check if it is ready to be used.
	 */
	public func MoCapActorClass getElementClass()
		if pElementClass == null
			pElementClass = createElementClass()
			pPreloadCounter = PreloadCounter.new()
			pElementClass.preloadResources(pPreloadCounter)
		end
		return pElementClass
	end
	
	/** Element class is preloading. Always false until getElementClass() is called. */
	public func bool isElementClassPreloading()
		if pPreloadCounter != null and pPreloadCounter.isNotZero()
			return true
		end
		pPreloadCounter = null
		
		// this looks strange to call loading a second time but the preloading of the element
		// class only preloads the resources into the element class but the CharacterAppearance
		// is still missing them. since they are loaded now calling synchronous loading finished
		// immediately and CharacterAppearance is valid
		pProfile.loadResourcesSync()
		
		return false
	end
	
	/** Drop element class. */
	public func void dropElementClass()
		if pElementClass == null
			return
		end
		
		disposeOldElementClass()
		pOldElementClass = pElementClass
		pElementClass = null
		pPreloadCounter = null
	end
	
	/** Animator definition used while creating element class or null. */
	public func AnimatorDefinition getAnimatorDefinition()
		return pAnimatorDefinition
	end
	
	
	
	/** Character is calibrated. */
	public func bool isCalibrated()
		return pIsCalibrated
	end
	
	/** Calibrated scale. */
	public func float getCalibrateScale()
		return pCalibrateScale
	end
	
	/** Set calibrated scale. */
	public func void setCalibrateScale(float scale)
		pCalibrateScale = scale
		updateScales()
	end
	
	/** Update scales. */
	public func void updateScales()
		pMatrixScale = Matrix.newScaling(pCalibrateScale, pCalibrateScale, pCalibrateScale)
		pMatrixScaleInv = Matrix.newScaling(1.0 / pCalibrateScale, 1.0 / pCalibrateScale, 1.0 / pCalibrateScale)
	end
	
	/** Scale matrix. */
	public func Matrix getMatrixScale()
		return pMatrixScale
	end
	
	/** Inverse scale matrix. */
	public func Matrix getMatrixScaleInverse()
		return pMatrixScaleInv
	end
	
	/** Calibration matrix. */
	public func Matrix getMatrixCalibrate()
		return pMatrixCalibrate
	end
	
	/** Inverse calibration matrix. */
	public func Matrix getMatrixCalibrateInverse()
		return pMatrixCalibrateInv
	end
	
	/** Set calibration matrix. */
	public func void setMatrixCalibrate(Matrix matrix)
		pMatrixCalibrate = matrix
		pMatrixCalibrateInv = matrix.getInverse()
	end
	
	/** Reset calibration. */
	public func void resetCalibration()
		pIsCalibrated = false
		pCalibrateScale = 1
		pMatrixScale = Matrix.new()
		pMatrixScaleInv = Matrix.new()
		pMatrixCalibrate = Matrix.new()
		pMatrixCalibrateInv = Matrix.new()
		
		pTrackerSlots.forEach(block CharacterTrackerSlot each
			each.resetCalibration()
		end)
		
		pMotionTransfers.forEach(block MotionTransfer each
			each.resetCalibration()
		end)
	end
	
	/** Calibrate character. */
	public func void calibrate(BaseVRActor actor, ActorProfile actorProfile)
		if pProfile.getOriginBone().empty()
			throw EInvalidParam.new("profile.originBone is empty")
		end
		
		// ensure resources are loaded. if the element class exists already the resources
		// are already preloaded and doing it synchronously again is fast. furthermore the
		// resources are not unloaded if inside the element class but not yet inside
		// CharacterAppearance
		pProfile.loadResourcesSync()
		
		// drop element class. we need to create a new one
		dropElementClass()
		
		// determine scaling. we could try using the actor hands to find the shoulder level
		// but this method is unstable. actors can not hold their arms exactly the same way
		// each time they calibrate. furthermore it is difficult to hold the arms in the
		// correct location using VR view. last but not least VR system measure distance to
		// the ground with an offset leading. this causes the actor to be measured with a
		// too small shoulder level compared to characters where the shoulder level is
		// measured all the way to the ground. for these reasons actors are required to
		// have their shoulder level measured to get precise results matching characters
		setCalibrateScale(pProfile.getShoulderLevel() / actorProfile.getShoulderLevel())
		
		// get hand positions to align calibration space
		var Matrix hmd, rightHand, leftHand
		if actor.getVRHMD().isAttached()
			hmd = actor.getVRHMD().getMatrixPlayspace()
		end
		if actor.getVRRightHand().isAttached()
			rightHand = actor.getVRRightHand().getMatrixPlayspace()
		end
		if actor.getVRLeftHand().isAttached()
			leftHand = actor.getVRLeftHand().getMatrixPlayspace()
		end
		
		// for calibration we need these three for the time being
		if hmd == null or rightHand == null or leftHand == null
			resetCalibration()
			return
		end
		
		// hand controller devices have their pose beyond the controller tip which is
		// the wrong location to use for calibration. to fix this find the tracker slots
		// matching the hand controllers. there the user stored the offset required to
		// moved the calibration point to a sane location
		var CharacterTrackerSlot slot = pTrackerSlots.find(block CharacterTrackerSlot each
			return each.getInputDeviceType() == InputDeviceType.vrRightHand
		end)
		if slot != null
			rightHand = slot.getOffsetMatrix() * rightHand
		end
		
		slot = pTrackerSlots.find(block CharacterTrackerSlot each
			return each.getInputDeviceType() == InputDeviceType.vrLeftHand
		end)
		if slot != null
			leftHand = slot.getOffsetMatrix() * leftHand
		end
		
		// calculate calibration matrix transforming tracked positions into calibration
		// coordinate system. hmd looks forwards, hands are aligned along the X axis and
		// body is centered along X and Z direction. also apply scaling from actor
		// shoulder level to character shoulder level
		var Vector posRightHand = rightHand.getPosition()
		var Vector posLeftHand = leftHand.getPosition()
		
		var Vector centerHands = (posRightHand + posLeftHand) * 0.5
		
		var Vector dirHands = (posRightHand - posLeftHand).compSelect(true, false, true).normalize()
		var float rotHands = -DEMath.atan2(dirHands.getX(), dirHands.getZ())
		
		var Vector posHMD = hmd.getPosition()
		var float turnHMD = hmd.getEulerAngles().getY()
		var Matrix hmdNorm = Matrix.newRT(Vector.new(0, turnHMD, 0), posHMD)
		
// 		var Vector posNeck = hmdNorm * Vector.new(0, -0.2, -0.1)
		var Vector posNeck = hmdNorm * Vector.new(0, -0.15, -0.1)
		
		var Vector centerBody = posNeck.compSelect(true, false, true)
		var float turnBody = turnHMD
		
		if false
			centerBody = centerHands.compSelect(true, false, true)
			turnBody = rotHands + 90
		end
		
		// scale element if required
		if pScaleMode == ScaleMode.character
			var float scaling = 1.0 / pCalibrateScale
			actor.setScaling(Vector.new(scaling, scaling, scaling))
			
		else
			actor.setScaling(Vector.new(1, 1, 1))
		end
		
		// calibrate tracker slots
		setMatrixCalibrate(Matrix.newTranslation(-centerBody) * Matrix.newRotationY(-turnBody))
		
		assignInputDevices(actorProfile)
		
		pTrackerSlots.forEach(block CharacterTrackerSlot each
			each.calibrate(actorProfile, actor)
		end)
		
		// calibrate motion transfers using the calibrated trackers slots
		var Component component = createCalibrationComponent()
		
		pMotionTransfers.forEach(block MotionTransfer each
			each.calibrate(this, actorProfile, actor, component)
		end)
		
		// save calibration
		pIsCalibrated = true
		
		// calibration finished
		pProfile.notifyCalibrated(this)
	end
	
	/** Assign input devices to closest slot with matching type. */
	public func void assignInputDevices(ActorProfile actorProfile)
		var BindingManager bindings = GameApp.getGameApp().getBindingManager()
		
		// clear all assignments
		pTrackerSlots.forEach(block CharacterTrackerSlot slot
			slot.setInputDeviceID("")
		end)
		
		// assign input devices
		var Console console = GameApp.getGameApp().getConsole()
// 		console.addMessage("Assign input devices:")
		
		bindings.forEachDevice(block InputDevice device
			select device.getType()
			case InputDeviceType.vrHMD, InputDeviceType.vrLeftHand, \
			     InputDeviceType.vrRightHand, InputDeviceType.vrTracker
				var CharacterTrackerSlot slot = pTrackerSlots.bestMatching(\
					device.getType(), pMatrixCalibrate * device.getDevicePosePosition())
				
				if slot != null
					slot.setInputDeviceID(device.getID())
// 					console.addMessage("- {} ({}): Assign to slot '{}'".format(\
// 						Array.newWith(device.getID(), device.getType().name(), slot.getName())))
					
				else
// 					console.addMessage("- {} ({}): Not assigned".format(\
// 						Array.newWith(device.getID(), device.getType().name())))
				end
			end
		end)
	end
	
	
	
	/** Create element class. Caller has to start preloading to use it. */
	public func MoCapActorClass createElementClass()
		var MoCapActorClass eclass = MoCapActorClass.new(\
			"Character" + GameApp.getGameApp().getNextElementClassID().nextID())
		
		try
			ECBCharacterConfiguration.new(eclass, this)
			
			var ECBMoCapAnimator mocapAnimator = ECBMoCapAnimator.new(eclass)
			mocapAnimator.getAnimation().setPath(pProfile.getAppearance().getPathAnimation())
			mocapAnimator.getAnimation().setAnimation(pProfile.getAppearance().getAnimation())
			
			var ECBRecordAnimation recordAnimation = ECBRecordAnimation.new(eclass)
			
			pAnimatorDefinition = AnimatorDefinition.new("")
			
			var ADRuleStateManipulator ruleInit = ADRuleStateManipulator.new()
			ruleInit.setName("Init")
			ruleInit.setEnablePosition(true)
			ruleInit.setEnableSize(true)
			pAnimatorDefinition.addRule(ruleInit)
			
			if not pMoveCalibrate.empty()
				var ADRuleAnimation rule = ADRuleAnimation.new()
				rule.setName("Init Move Calibrate")
				rule.setMoveName(pMoveCalibrate)
				pAnimatorDefinition.addRule(rule)
			end
			
			pProfile.getAppearance().initElementClass(eclass)
			
			// add tracker slots. each slot adds two controllers (position, rotation)
			pTrackerSlots.forEach(block CharacterTrackerSlot each
				each.initElementClass(eclass, pAnimatorDefinition)
			end)
			
			// add motion capture behaviors. should this fail reset calibration and try again
			try
				pMotionTransfers.forEach(block MotionTransfer each
					each.initElementClass(this, eclass)
				end)
				
			catch Exception e
				GameApp.getGameApp().getConsole().addError("Init ElementClass failed. Reset clalibration and trying again", e)
				
				pMotionTransfers.forEach(block MotionTransfer each
					each.resetCalibration()
				end)
				pMotionTransfers.forEach(block MotionTransfer each
					each.initElementClass(this, eclass)
				end)
			end
			
			// add behavior moving origin bone to calibration origin if present
			if not pProfile.getOriginBone().empty()
				var Animator animator = Animator.new()
				var Vector translation = pMatrixCalibrateInv.getPosition()
				var Vector rotation = pMatrixCalibrateInv.getEulerAngles()
				
				var ARStateSnapshot ruleCurState = ARStateSnapshot.new()
				ruleCurState.setUseLastState(true)
				ruleCurState.setEnableSize(true)
				animator.addRule(ruleCurState)
				
				var ARBoneTransformator ruleMove = ARBoneTransformator.new()
				ruleMove.setEnablePosition(true)
				ruleMove.setEnableOrientation(true)
				ruleMove.setCoordinateFrame(ARBoneTransformatorCFrame.component)
				ruleMove.setMinimumTranslation(translation)
				ruleMove.setMaximumTranslation(translation)
				ruleMove.setMinimumRotation(rotation)
				ruleMove.setMaximumRotation(rotation)
				ruleMove.addBone(pProfile.getOriginBone())
				animator.addRule(ruleMove)
				
				animator.addBone(pProfile.getOriginBone())
				
				recordAnimation.addBone(pProfile.getOriginBone())
				
				ECBMoveOriginBone.new(eclass, animator)
			end
			
			// add physical bones
			var Rig rig = pProfile.getAppearance().getRig()
			if rig != null
				var int i, count = rig.getBoneCount()
				for i = 0 to count
					if rig.boneGetDynamic(i)
						recordAnimation.addBone(rig.boneGetName(i))
					end
				end
			end
			
			// finalize motion capture animator
			var Animator animator = Animator.new()
// 			pAnimatorDefinition.debug(GameApp.getGameApp().getConsole())
			pAnimatorDefinition.buildAnimator(animator)
			mocapAnimator.setAnimator(animator)
			
		catch Exception e
			eclass.dispose()
			throw
		end
		
		return eclass
	end
	
	/**
	 * Create stub element. If no element class is present or it is still preloading
	 * null is returned.
	 */
	public func StubElement createStubElement()
		var StubElement stub
		if pElementClass != null and not isElementClassPreloading()
			stub = StubElement.new(getElementClass(), GameApp.getGameApp().getIDGenerator().nextID())
			if pScaleMode == ScaleMode.character
				stub.setScaling(Vector.new(1.0 / pCalibrateScale, 1.0 / pCalibrateScale, 1.0 / pCalibrateScale))
			end
		end
		return stub
	end
	
	
	
	/** Dispose old element class kept to avoid reloading resources. */
	protected func void disposeOldElementClass()
		if pOldElementClass != null
			pOldElementClass.dispose()
			pOldElementClass = null
		end
	end
	
	/** Create calibration component. */
	protected func Component createCalibrationComponent()
		var CharacterAppearance appearance = pProfile.getAppearance()
		
		var Animator animator = Animator.new()
		animator.setRig(appearance.getRig())
		animator.setAnimation(appearance.getAnimation())
		
		if pMoveCalibrate.empty()
			var ARStateManipulator rule = ARStateManipulator.new()
			rule.setEnablePosition(true)
			rule.setEnableSize(true)
			animator.addRule(rule)
			
		else
			var ARAnimation rule = ARAnimation.new()
			rule.setMoveName(pMoveCalibrate)
			animator.addRule(rule)
		end
		
		var AnimatorInstance ainst = AnimatorInstance.new()
		ainst.setAnimator(animator)
		
		var Component component = Component.new(null, null)
		component.setRig(appearance.getRig())
		
		ainst.setComponent(component)
		
		ainst.applyDirect()
		component.updateBones()
		
		return component
	end
	
	
	
	/** Compare character configuration for sorting. */
	public func int compare(Object obj)
		if obj castable CharacterConfiguration
			return pName.compare((obj cast CharacterConfiguration).pName)
		end
		return 0
	end
	
	/** String representation. Returns name. */
	public func String toString()
		return pName
	end
end
