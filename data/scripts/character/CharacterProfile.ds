/* 
 * Drag[en]gine Motion Capture
 *
 * Copyright (C) 2021, DragonDreams (info@dragondreams.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Democap.Characters

pin Dragengine.Preloading
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * Profile of a character used during motion capture. Stores various parameters like the
 * model, rig and skin to use, configuration of hmd, controllers and trackers and the
 * how the trackers affect the rig.
 * 
 * Profiles are stored under "/characters" directory in the user game configure directory
 * as files of type "*.demccp" .
 */
class CharacterProfile
	private var String pName
	private var CharacterAppearance pAppearance
	private var CharacterConfigurations pConfigurations
	private var String pOriginBone
	
	private var Array pListeners
	
	
	
	/** Create character. */
	public func new(String name)
		setName(name)
		
		pAppearance = CharacterAppearance.new()
		pConfigurations = CharacterConfigurations.new()
		pOriginBone = ""
		
		pListeners = Array.new()
	end
	
	/** Create copy of character. */
	public func new(String name, CharacterProfile profile)
		setName(name)
		
		pAppearance = CharacterAppearance.new(profile.pAppearance)
		
		pConfigurations = CharacterConfigurations.new()
		profile.pConfigurations.forEach(block CharacterConfiguration each
			pConfigurations.add(CharacterConfiguration.new(this, each.getName(), each))
		end)
		
		pOriginBone = profile.pOriginBone
		
		pListeners = Array.new()
	end
	
	/** Dispose of character profile. */
	public func void dispose()
		pListeners.removeAll()
		if pConfigurations != null
			pConfigurations.dispose()
		end
	end
	
	
	
	/** Name of character profile. */
	public func String getName()
		return pName
	end
	
	/** Set name of character profile. */
	public func void setName(String name)
		if name == null
			throw ENullPointer.new("name")
		end
		if name.empty()
			throw EInvalidParam.new("name is empty string")
		end
		
		pName = name
	end
	
	/** Appearance. */
	public func CharacterAppearance getAppearance()
		return pAppearance
	end
	
	/** Configurations. */
	public func CharacterConfigurations getConfigurations()
		return pConfigurations
	end
	
	/** Origin bone. */
	public func String getOriginBone()
		return pOriginBone
	end
	
	/** Set origin bone. */
	public func void setOriginBone(String bone)
		if bone == null
			throw ENullPointer.new("bone")
		end
		pOriginBone = bone
	end
	
	
	
	/** Start loading resources. */
	public func void preloadResources()
		CharacterAppearanceLoader.new(this).preload()
	end
	
	
	
	/** Character profile path. */
	public func String getPathProfile()
		return (File.new(GameApp.getGameApp().getCharacterProfiles().getDirectory()) + (pName + ".demccp")).getPath()
	end
	
	/** Save character. */
	public func void save()
		GameApp.getGameApp().getLoadCharacterProfile().save(getPathProfile(), this)
	end
	
	/** Delete actor. */
	public func void delete()
		if FileSystem.existsFile(getPathProfile())
			FileSystem.deleteFile(getPathProfile())
		end
	end
	
	
	
	/** Add listener. */
	public func void addListener(CharacterListener listener)
		if listener == null
			throw ENullPointer.new("listener")
		end
		pListeners.add(listener)
	end
	
	/** Remove listener. */
	public func void removeListener(CharacterListener listener)
		pListeners.remove(listener)
	end
	
	/** Notify listeners character has been calibrated. */
	public func void notifyCalibrated(CharacterConfiguration config)
		pListeners.forEach(block CharacterListener each
			each.calibrated(this, config)
		end)
	end
	
	
	
	/** Compare character profile for sorting. */
	public func int compare(Object obj)
		if obj castable CharacterProfile
			return pName.compare((obj cast CharacterProfile).pName)
		end
		return 0
	end
end
